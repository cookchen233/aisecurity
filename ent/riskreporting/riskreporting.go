// Code generated by ent, DO NOT EDIT.

package riskreporting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the riskreporting type in the database.
	Label = "risk_reporting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldRiskCategoryID holds the string denoting the risk_category_id field in the database.
	FieldRiskCategoryID = "risk_category_id"
	// FieldRiskLocationID holds the string denoting the risk_location_id field in the database.
	FieldRiskLocationID = "risk_location_id"
	// FieldMaintainer holds the string denoting the maintainer field in the database.
	FieldMaintainer = "maintainer"
	// FieldMeasures holds the string denoting the measures field in the database.
	FieldMeasures = "measures"
	// FieldDueTime holds the string denoting the due_time field in the database.
	FieldDueTime = "due_time"
	// EdgeAdminRiskReporting holds the string denoting the adminriskreporting edge name in mutations.
	EdgeAdminRiskReporting = "AdminRiskReporting"
	// Table holds the table name of the riskreporting in the database.
	Table = "risk_reportings"
	// AdminRiskReportingTable is the table that holds the AdminRiskReporting relation/edge.
	AdminRiskReportingTable = "risk_reportings"
	// AdminRiskReportingInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminRiskReportingInverseTable = "admins"
	// AdminRiskReportingColumn is the table column denoting the AdminRiskReporting relation/edge.
	AdminRiskReportingColumn = "created_by"
)

// Columns holds all SQL columns for riskreporting fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldTitle,
	FieldContent,
	FieldImages,
	FieldRiskCategoryID,
	FieldRiskLocationID,
	FieldMaintainer,
	FieldMeasures,
	FieldDueTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// RiskCategoryIDValidator is a validator for the "risk_category_id" field. It is called by the builders before save.
	RiskCategoryIDValidator func(int) error
	// RiskLocationIDValidator is a validator for the "risk_location_id" field. It is called by the builders before save.
	RiskLocationIDValidator func(int) error
	// MaintainerValidator is a validator for the "maintainer" field. It is called by the builders before save.
	MaintainerValidator func(int) error
)

// OrderOption defines the ordering options for the RiskReporting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByRiskCategoryID orders the results by the risk_category_id field.
func ByRiskCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskCategoryID, opts...).ToFunc()
}

// ByRiskLocationID orders the results by the risk_location_id field.
func ByRiskLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskLocationID, opts...).ToFunc()
}

// ByMaintainer orders the results by the maintainer field.
func ByMaintainer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintainer, opts...).ToFunc()
}

// ByMeasures orders the results by the measures field.
func ByMeasures(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeasures, opts...).ToFunc()
}

// ByDueTime orders the results by the due_time field.
func ByDueTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueTime, opts...).ToFunc()
}

// ByAdminRiskReportingField orders the results by AdminRiskReporting field.
func ByAdminRiskReportingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRiskReportingStep(), sql.OrderByField(field, opts...))
	}
}
func newAdminRiskReportingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRiskReportingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AdminRiskReportingTable, AdminRiskReportingColumn),
	)
}
