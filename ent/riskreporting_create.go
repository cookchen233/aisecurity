// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/admin"
	"aisecurity/ent/riskreporting"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RiskReportingCreate is the builder for creating a RiskReporting entity.
type RiskReportingCreate struct {
	config
	mutation *RiskReportingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rrc *RiskReportingCreate) SetCreatedAt(t time.Time) *RiskReportingCreate {
	rrc.mutation.SetCreatedAt(t)
	return rrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableCreatedAt(t *time.Time) *RiskReportingCreate {
	if t != nil {
		rrc.SetCreatedAt(*t)
	}
	return rrc
}

// SetUpdatedAt sets the "updated_at" field.
func (rrc *RiskReportingCreate) SetUpdatedAt(t time.Time) *RiskReportingCreate {
	rrc.mutation.SetUpdatedAt(t)
	return rrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableUpdatedAt(t *time.Time) *RiskReportingCreate {
	if t != nil {
		rrc.SetUpdatedAt(*t)
	}
	return rrc
}

// SetDeletedAt sets the "deleted_at" field.
func (rrc *RiskReportingCreate) SetDeletedAt(t time.Time) *RiskReportingCreate {
	rrc.mutation.SetDeletedAt(t)
	return rrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableDeletedAt(t *time.Time) *RiskReportingCreate {
	if t != nil {
		rrc.SetDeletedAt(*t)
	}
	return rrc
}

// SetCreatedBy sets the "created_by" field.
func (rrc *RiskReportingCreate) SetCreatedBy(i int) *RiskReportingCreate {
	rrc.mutation.SetCreatedBy(i)
	return rrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableCreatedBy(i *int) *RiskReportingCreate {
	if i != nil {
		rrc.SetCreatedBy(*i)
	}
	return rrc
}

// SetTitle sets the "title" field.
func (rrc *RiskReportingCreate) SetTitle(s string) *RiskReportingCreate {
	rrc.mutation.SetTitle(s)
	return rrc
}

// SetContent sets the "content" field.
func (rrc *RiskReportingCreate) SetContent(s string) *RiskReportingCreate {
	rrc.mutation.SetContent(s)
	return rrc
}

// SetImages sets the "images" field.
func (rrc *RiskReportingCreate) SetImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskReportingCreate {
	rrc.mutation.SetImages(s)
	return rrc
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (rrc *RiskReportingCreate) SetRiskCategoryID(i int) *RiskReportingCreate {
	rrc.mutation.SetRiskCategoryID(i)
	return rrc
}

// SetRiskLocationID sets the "risk_location_id" field.
func (rrc *RiskReportingCreate) SetRiskLocationID(i int) *RiskReportingCreate {
	rrc.mutation.SetRiskLocationID(i)
	return rrc
}

// SetMaintainer sets the "maintainer" field.
func (rrc *RiskReportingCreate) SetMaintainer(i int) *RiskReportingCreate {
	rrc.mutation.SetMaintainer(i)
	return rrc
}

// SetMeasures sets the "measures" field.
func (rrc *RiskReportingCreate) SetMeasures(s string) *RiskReportingCreate {
	rrc.mutation.SetMeasures(s)
	return rrc
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableMeasures(s *string) *RiskReportingCreate {
	if s != nil {
		rrc.SetMeasures(*s)
	}
	return rrc
}

// SetDueTime sets the "due_time" field.
func (rrc *RiskReportingCreate) SetDueTime(t time.Time) *RiskReportingCreate {
	rrc.mutation.SetDueTime(t)
	return rrc
}

// SetAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID.
func (rrc *RiskReportingCreate) SetAdminRiskReportingID(id int) *RiskReportingCreate {
	rrc.mutation.SetAdminRiskReportingID(id)
	return rrc
}

// SetNillableAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID if the given value is not nil.
func (rrc *RiskReportingCreate) SetNillableAdminRiskReportingID(id *int) *RiskReportingCreate {
	if id != nil {
		rrc = rrc.SetAdminRiskReportingID(*id)
	}
	return rrc
}

// SetAdminRiskReporting sets the "AdminRiskReporting" edge to the Admin entity.
func (rrc *RiskReportingCreate) SetAdminRiskReporting(a *Admin) *RiskReportingCreate {
	return rrc.SetAdminRiskReportingID(a.ID)
}

// Mutation returns the RiskReportingMutation object of the builder.
func (rrc *RiskReportingCreate) Mutation() *RiskReportingMutation {
	return rrc.mutation
}

// Save creates the RiskReporting in the database.
func (rrc *RiskReportingCreate) Save(ctx context.Context) (*RiskReporting, error) {
	rrc.defaults()
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RiskReportingCreate) SaveX(ctx context.Context) *RiskReporting {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RiskReportingCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RiskReportingCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *RiskReportingCreate) defaults() {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		v := riskreporting.DefaultCreatedAt()
		rrc.mutation.SetCreatedAt(v)
	}
	if _, ok := rrc.mutation.UpdatedAt(); !ok {
		v := riskreporting.DefaultUpdatedAt()
		rrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RiskReportingCreate) check() error {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RiskReporting.created_at"`)}
	}
	if _, ok := rrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RiskReporting.updated_at"`)}
	}
	if v, ok := rrc.mutation.CreatedBy(); ok {
		if err := riskreporting.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.created_by": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "RiskReporting.title"`)}
	}
	if v, ok := rrc.mutation.Title(); ok {
		if err := riskreporting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.title": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "RiskReporting.content"`)}
	}
	if _, ok := rrc.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "RiskReporting.images"`)}
	}
	if _, ok := rrc.mutation.RiskCategoryID(); !ok {
		return &ValidationError{Name: "risk_category_id", err: errors.New(`ent: missing required field "RiskReporting.risk_category_id"`)}
	}
	if v, ok := rrc.mutation.RiskCategoryID(); ok {
		if err := riskreporting.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_category_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.RiskLocationID(); !ok {
		return &ValidationError{Name: "risk_location_id", err: errors.New(`ent: missing required field "RiskReporting.risk_location_id"`)}
	}
	if v, ok := rrc.mutation.RiskLocationID(); ok {
		if err := riskreporting.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_location_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Maintainer(); !ok {
		return &ValidationError{Name: "maintainer", err: errors.New(`ent: missing required field "RiskReporting.maintainer"`)}
	}
	if v, ok := rrc.mutation.Maintainer(); ok {
		if err := riskreporting.MaintainerValidator(v); err != nil {
			return &ValidationError{Name: "maintainer", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.maintainer": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.DueTime(); !ok {
		return &ValidationError{Name: "due_time", err: errors.New(`ent: missing required field "RiskReporting.due_time"`)}
	}
	return nil
}

func (rrc *RiskReportingCreate) sqlSave(ctx context.Context) (*RiskReporting, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RiskReportingCreate) createSpec() (*RiskReporting, *sqlgraph.CreateSpec) {
	var (
		_node = &RiskReporting{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(riskreporting.Table, sqlgraph.NewFieldSpec(riskreporting.FieldID, field.TypeInt))
	)
	if value, ok := rrc.mutation.CreatedAt(); ok {
		_spec.SetField(riskreporting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rrc.mutation.UpdatedAt(); ok {
		_spec.SetField(riskreporting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rrc.mutation.DeletedAt(); ok {
		_spec.SetField(riskreporting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rrc.mutation.Title(); ok {
		_spec.SetField(riskreporting.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rrc.mutation.Content(); ok {
		_spec.SetField(riskreporting.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := rrc.mutation.Images(); ok {
		_spec.SetField(riskreporting.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := rrc.mutation.RiskCategoryID(); ok {
		_spec.SetField(riskreporting.FieldRiskCategoryID, field.TypeInt, value)
		_node.RiskCategoryID = value
	}
	if value, ok := rrc.mutation.RiskLocationID(); ok {
		_spec.SetField(riskreporting.FieldRiskLocationID, field.TypeInt, value)
		_node.RiskLocationID = value
	}
	if value, ok := rrc.mutation.Maintainer(); ok {
		_spec.SetField(riskreporting.FieldMaintainer, field.TypeInt, value)
		_node.Maintainer = value
	}
	if value, ok := rrc.mutation.Measures(); ok {
		_spec.SetField(riskreporting.FieldMeasures, field.TypeString, value)
		_node.Measures = &value
	}
	if value, ok := rrc.mutation.DueTime(); ok {
		_spec.SetField(riskreporting.FieldDueTime, field.TypeTime, value)
		_node.DueTime = value
	}
	if nodes := rrc.mutation.AdminRiskReportingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskreporting.AdminRiskReportingTable,
			Columns: []string{riskreporting.AdminRiskReportingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RiskReportingCreateBulk is the builder for creating many RiskReporting entities in bulk.
type RiskReportingCreateBulk struct {
	config
	err      error
	builders []*RiskReportingCreate
}

// Save creates the RiskReporting entities in the database.
func (rrcb *RiskReportingCreateBulk) Save(ctx context.Context) ([]*RiskReporting, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RiskReporting, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiskReportingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RiskReportingCreateBulk) SaveX(ctx context.Context) []*RiskReporting {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RiskReportingCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RiskReportingCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
