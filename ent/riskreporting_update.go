// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/admin"
	"aisecurity/ent/predicate"
	"aisecurity/ent/riskreporting"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// RiskReportingUpdate is the builder for updating RiskReporting entities.
type RiskReportingUpdate struct {
	config
	hooks    []Hook
	mutation *RiskReportingMutation
}

// Where appends a list predicates to the RiskReportingUpdate builder.
func (rru *RiskReportingUpdate) Where(ps ...predicate.RiskReporting) *RiskReportingUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetUpdatedAt sets the "updated_at" field.
func (rru *RiskReportingUpdate) SetUpdatedAt(t time.Time) *RiskReportingUpdate {
	rru.mutation.SetUpdatedAt(t)
	return rru
}

// SetDeletedAt sets the "deleted_at" field.
func (rru *RiskReportingUpdate) SetDeletedAt(t time.Time) *RiskReportingUpdate {
	rru.mutation.SetDeletedAt(t)
	return rru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableDeletedAt(t *time.Time) *RiskReportingUpdate {
	if t != nil {
		rru.SetDeletedAt(*t)
	}
	return rru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rru *RiskReportingUpdate) ClearDeletedAt() *RiskReportingUpdate {
	rru.mutation.ClearDeletedAt()
	return rru
}

// SetCreatedBy sets the "created_by" field.
func (rru *RiskReportingUpdate) SetCreatedBy(i int) *RiskReportingUpdate {
	rru.mutation.SetCreatedBy(i)
	return rru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableCreatedBy(i *int) *RiskReportingUpdate {
	if i != nil {
		rru.SetCreatedBy(*i)
	}
	return rru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (rru *RiskReportingUpdate) ClearCreatedBy() *RiskReportingUpdate {
	rru.mutation.ClearCreatedBy()
	return rru
}

// SetTitle sets the "title" field.
func (rru *RiskReportingUpdate) SetTitle(s string) *RiskReportingUpdate {
	rru.mutation.SetTitle(s)
	return rru
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableTitle(s *string) *RiskReportingUpdate {
	if s != nil {
		rru.SetTitle(*s)
	}
	return rru
}

// SetContent sets the "content" field.
func (rru *RiskReportingUpdate) SetContent(s string) *RiskReportingUpdate {
	rru.mutation.SetContent(s)
	return rru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableContent(s *string) *RiskReportingUpdate {
	if s != nil {
		rru.SetContent(*s)
	}
	return rru
}

// SetImages sets the "images" field.
func (rru *RiskReportingUpdate) SetImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskReportingUpdate {
	rru.mutation.SetImages(s)
	return rru
}

// AppendImages appends s to the "images" field.
func (rru *RiskReportingUpdate) AppendImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskReportingUpdate {
	rru.mutation.AppendImages(s)
	return rru
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (rru *RiskReportingUpdate) SetRiskCategoryID(i int) *RiskReportingUpdate {
	rru.mutation.ResetRiskCategoryID()
	rru.mutation.SetRiskCategoryID(i)
	return rru
}

// SetNillableRiskCategoryID sets the "risk_category_id" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableRiskCategoryID(i *int) *RiskReportingUpdate {
	if i != nil {
		rru.SetRiskCategoryID(*i)
	}
	return rru
}

// AddRiskCategoryID adds i to the "risk_category_id" field.
func (rru *RiskReportingUpdate) AddRiskCategoryID(i int) *RiskReportingUpdate {
	rru.mutation.AddRiskCategoryID(i)
	return rru
}

// SetRiskLocationID sets the "risk_location_id" field.
func (rru *RiskReportingUpdate) SetRiskLocationID(i int) *RiskReportingUpdate {
	rru.mutation.ResetRiskLocationID()
	rru.mutation.SetRiskLocationID(i)
	return rru
}

// SetNillableRiskLocationID sets the "risk_location_id" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableRiskLocationID(i *int) *RiskReportingUpdate {
	if i != nil {
		rru.SetRiskLocationID(*i)
	}
	return rru
}

// AddRiskLocationID adds i to the "risk_location_id" field.
func (rru *RiskReportingUpdate) AddRiskLocationID(i int) *RiskReportingUpdate {
	rru.mutation.AddRiskLocationID(i)
	return rru
}

// SetMaintainer sets the "maintainer" field.
func (rru *RiskReportingUpdate) SetMaintainer(i int) *RiskReportingUpdate {
	rru.mutation.ResetMaintainer()
	rru.mutation.SetMaintainer(i)
	return rru
}

// SetNillableMaintainer sets the "maintainer" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableMaintainer(i *int) *RiskReportingUpdate {
	if i != nil {
		rru.SetMaintainer(*i)
	}
	return rru
}

// AddMaintainer adds i to the "maintainer" field.
func (rru *RiskReportingUpdate) AddMaintainer(i int) *RiskReportingUpdate {
	rru.mutation.AddMaintainer(i)
	return rru
}

// SetMeasures sets the "measures" field.
func (rru *RiskReportingUpdate) SetMeasures(s string) *RiskReportingUpdate {
	rru.mutation.SetMeasures(s)
	return rru
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableMeasures(s *string) *RiskReportingUpdate {
	if s != nil {
		rru.SetMeasures(*s)
	}
	return rru
}

// ClearMeasures clears the value of the "measures" field.
func (rru *RiskReportingUpdate) ClearMeasures() *RiskReportingUpdate {
	rru.mutation.ClearMeasures()
	return rru
}

// SetDueTime sets the "due_time" field.
func (rru *RiskReportingUpdate) SetDueTime(t time.Time) *RiskReportingUpdate {
	rru.mutation.SetDueTime(t)
	return rru
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableDueTime(t *time.Time) *RiskReportingUpdate {
	if t != nil {
		rru.SetDueTime(*t)
	}
	return rru
}

// SetAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID.
func (rru *RiskReportingUpdate) SetAdminRiskReportingID(id int) *RiskReportingUpdate {
	rru.mutation.SetAdminRiskReportingID(id)
	return rru
}

// SetNillableAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID if the given value is not nil.
func (rru *RiskReportingUpdate) SetNillableAdminRiskReportingID(id *int) *RiskReportingUpdate {
	if id != nil {
		rru = rru.SetAdminRiskReportingID(*id)
	}
	return rru
}

// SetAdminRiskReporting sets the "AdminRiskReporting" edge to the Admin entity.
func (rru *RiskReportingUpdate) SetAdminRiskReporting(a *Admin) *RiskReportingUpdate {
	return rru.SetAdminRiskReportingID(a.ID)
}

// Mutation returns the RiskReportingMutation object of the builder.
func (rru *RiskReportingUpdate) Mutation() *RiskReportingMutation {
	return rru.mutation
}

// ClearAdminRiskReporting clears the "AdminRiskReporting" edge to the Admin entity.
func (rru *RiskReportingUpdate) ClearAdminRiskReporting() *RiskReportingUpdate {
	rru.mutation.ClearAdminRiskReporting()
	return rru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RiskReportingUpdate) Save(ctx context.Context) (int, error) {
	rru.defaults()
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RiskReportingUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RiskReportingUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RiskReportingUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rru *RiskReportingUpdate) defaults() {
	if _, ok := rru.mutation.UpdatedAt(); !ok {
		v := riskreporting.UpdateDefaultUpdatedAt()
		rru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *RiskReportingUpdate) check() error {
	if v, ok := rru.mutation.CreatedBy(); ok {
		if err := riskreporting.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.created_by": %w`, err)}
		}
	}
	if v, ok := rru.mutation.Title(); ok {
		if err := riskreporting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.title": %w`, err)}
		}
	}
	if v, ok := rru.mutation.RiskCategoryID(); ok {
		if err := riskreporting.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_category_id": %w`, err)}
		}
	}
	if v, ok := rru.mutation.RiskLocationID(); ok {
		if err := riskreporting.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_location_id": %w`, err)}
		}
	}
	if v, ok := rru.mutation.Maintainer(); ok {
		if err := riskreporting.MaintainerValidator(v); err != nil {
			return &ValidationError{Name: "maintainer", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.maintainer": %w`, err)}
		}
	}
	return nil
}

func (rru *RiskReportingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskreporting.Table, riskreporting.Columns, sqlgraph.NewFieldSpec(riskreporting.FieldID, field.TypeInt))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.UpdatedAt(); ok {
		_spec.SetField(riskreporting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rru.mutation.DeletedAt(); ok {
		_spec.SetField(riskreporting.FieldDeletedAt, field.TypeTime, value)
	}
	if rru.mutation.DeletedAtCleared() {
		_spec.ClearField(riskreporting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rru.mutation.Title(); ok {
		_spec.SetField(riskreporting.FieldTitle, field.TypeString, value)
	}
	if value, ok := rru.mutation.Content(); ok {
		_spec.SetField(riskreporting.FieldContent, field.TypeString, value)
	}
	if value, ok := rru.mutation.Images(); ok {
		_spec.SetField(riskreporting.FieldImages, field.TypeJSON, value)
	}
	if value, ok := rru.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskreporting.FieldImages, value)
		})
	}
	if value, ok := rru.mutation.RiskCategoryID(); ok {
		_spec.SetField(riskreporting.FieldRiskCategoryID, field.TypeInt, value)
	}
	if value, ok := rru.mutation.AddedRiskCategoryID(); ok {
		_spec.AddField(riskreporting.FieldRiskCategoryID, field.TypeInt, value)
	}
	if value, ok := rru.mutation.RiskLocationID(); ok {
		_spec.SetField(riskreporting.FieldRiskLocationID, field.TypeInt, value)
	}
	if value, ok := rru.mutation.AddedRiskLocationID(); ok {
		_spec.AddField(riskreporting.FieldRiskLocationID, field.TypeInt, value)
	}
	if value, ok := rru.mutation.Maintainer(); ok {
		_spec.SetField(riskreporting.FieldMaintainer, field.TypeInt, value)
	}
	if value, ok := rru.mutation.AddedMaintainer(); ok {
		_spec.AddField(riskreporting.FieldMaintainer, field.TypeInt, value)
	}
	if value, ok := rru.mutation.Measures(); ok {
		_spec.SetField(riskreporting.FieldMeasures, field.TypeString, value)
	}
	if rru.mutation.MeasuresCleared() {
		_spec.ClearField(riskreporting.FieldMeasures, field.TypeString)
	}
	if value, ok := rru.mutation.DueTime(); ok {
		_spec.SetField(riskreporting.FieldDueTime, field.TypeTime, value)
	}
	if rru.mutation.AdminRiskReportingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskreporting.AdminRiskReportingTable,
			Columns: []string{riskreporting.AdminRiskReportingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.AdminRiskReportingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskreporting.AdminRiskReportingTable,
			Columns: []string{riskreporting.AdminRiskReportingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskreporting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RiskReportingUpdateOne is the builder for updating a single RiskReporting entity.
type RiskReportingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RiskReportingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rruo *RiskReportingUpdateOne) SetUpdatedAt(t time.Time) *RiskReportingUpdateOne {
	rruo.mutation.SetUpdatedAt(t)
	return rruo
}

// SetDeletedAt sets the "deleted_at" field.
func (rruo *RiskReportingUpdateOne) SetDeletedAt(t time.Time) *RiskReportingUpdateOne {
	rruo.mutation.SetDeletedAt(t)
	return rruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableDeletedAt(t *time.Time) *RiskReportingUpdateOne {
	if t != nil {
		rruo.SetDeletedAt(*t)
	}
	return rruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rruo *RiskReportingUpdateOne) ClearDeletedAt() *RiskReportingUpdateOne {
	rruo.mutation.ClearDeletedAt()
	return rruo
}

// SetCreatedBy sets the "created_by" field.
func (rruo *RiskReportingUpdateOne) SetCreatedBy(i int) *RiskReportingUpdateOne {
	rruo.mutation.SetCreatedBy(i)
	return rruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableCreatedBy(i *int) *RiskReportingUpdateOne {
	if i != nil {
		rruo.SetCreatedBy(*i)
	}
	return rruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (rruo *RiskReportingUpdateOne) ClearCreatedBy() *RiskReportingUpdateOne {
	rruo.mutation.ClearCreatedBy()
	return rruo
}

// SetTitle sets the "title" field.
func (rruo *RiskReportingUpdateOne) SetTitle(s string) *RiskReportingUpdateOne {
	rruo.mutation.SetTitle(s)
	return rruo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableTitle(s *string) *RiskReportingUpdateOne {
	if s != nil {
		rruo.SetTitle(*s)
	}
	return rruo
}

// SetContent sets the "content" field.
func (rruo *RiskReportingUpdateOne) SetContent(s string) *RiskReportingUpdateOne {
	rruo.mutation.SetContent(s)
	return rruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableContent(s *string) *RiskReportingUpdateOne {
	if s != nil {
		rruo.SetContent(*s)
	}
	return rruo
}

// SetImages sets the "images" field.
func (rruo *RiskReportingUpdateOne) SetImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskReportingUpdateOne {
	rruo.mutation.SetImages(s)
	return rruo
}

// AppendImages appends s to the "images" field.
func (rruo *RiskReportingUpdateOne) AppendImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskReportingUpdateOne {
	rruo.mutation.AppendImages(s)
	return rruo
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (rruo *RiskReportingUpdateOne) SetRiskCategoryID(i int) *RiskReportingUpdateOne {
	rruo.mutation.ResetRiskCategoryID()
	rruo.mutation.SetRiskCategoryID(i)
	return rruo
}

// SetNillableRiskCategoryID sets the "risk_category_id" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableRiskCategoryID(i *int) *RiskReportingUpdateOne {
	if i != nil {
		rruo.SetRiskCategoryID(*i)
	}
	return rruo
}

// AddRiskCategoryID adds i to the "risk_category_id" field.
func (rruo *RiskReportingUpdateOne) AddRiskCategoryID(i int) *RiskReportingUpdateOne {
	rruo.mutation.AddRiskCategoryID(i)
	return rruo
}

// SetRiskLocationID sets the "risk_location_id" field.
func (rruo *RiskReportingUpdateOne) SetRiskLocationID(i int) *RiskReportingUpdateOne {
	rruo.mutation.ResetRiskLocationID()
	rruo.mutation.SetRiskLocationID(i)
	return rruo
}

// SetNillableRiskLocationID sets the "risk_location_id" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableRiskLocationID(i *int) *RiskReportingUpdateOne {
	if i != nil {
		rruo.SetRiskLocationID(*i)
	}
	return rruo
}

// AddRiskLocationID adds i to the "risk_location_id" field.
func (rruo *RiskReportingUpdateOne) AddRiskLocationID(i int) *RiskReportingUpdateOne {
	rruo.mutation.AddRiskLocationID(i)
	return rruo
}

// SetMaintainer sets the "maintainer" field.
func (rruo *RiskReportingUpdateOne) SetMaintainer(i int) *RiskReportingUpdateOne {
	rruo.mutation.ResetMaintainer()
	rruo.mutation.SetMaintainer(i)
	return rruo
}

// SetNillableMaintainer sets the "maintainer" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableMaintainer(i *int) *RiskReportingUpdateOne {
	if i != nil {
		rruo.SetMaintainer(*i)
	}
	return rruo
}

// AddMaintainer adds i to the "maintainer" field.
func (rruo *RiskReportingUpdateOne) AddMaintainer(i int) *RiskReportingUpdateOne {
	rruo.mutation.AddMaintainer(i)
	return rruo
}

// SetMeasures sets the "measures" field.
func (rruo *RiskReportingUpdateOne) SetMeasures(s string) *RiskReportingUpdateOne {
	rruo.mutation.SetMeasures(s)
	return rruo
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableMeasures(s *string) *RiskReportingUpdateOne {
	if s != nil {
		rruo.SetMeasures(*s)
	}
	return rruo
}

// ClearMeasures clears the value of the "measures" field.
func (rruo *RiskReportingUpdateOne) ClearMeasures() *RiskReportingUpdateOne {
	rruo.mutation.ClearMeasures()
	return rruo
}

// SetDueTime sets the "due_time" field.
func (rruo *RiskReportingUpdateOne) SetDueTime(t time.Time) *RiskReportingUpdateOne {
	rruo.mutation.SetDueTime(t)
	return rruo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableDueTime(t *time.Time) *RiskReportingUpdateOne {
	if t != nil {
		rruo.SetDueTime(*t)
	}
	return rruo
}

// SetAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID.
func (rruo *RiskReportingUpdateOne) SetAdminRiskReportingID(id int) *RiskReportingUpdateOne {
	rruo.mutation.SetAdminRiskReportingID(id)
	return rruo
}

// SetNillableAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by ID if the given value is not nil.
func (rruo *RiskReportingUpdateOne) SetNillableAdminRiskReportingID(id *int) *RiskReportingUpdateOne {
	if id != nil {
		rruo = rruo.SetAdminRiskReportingID(*id)
	}
	return rruo
}

// SetAdminRiskReporting sets the "AdminRiskReporting" edge to the Admin entity.
func (rruo *RiskReportingUpdateOne) SetAdminRiskReporting(a *Admin) *RiskReportingUpdateOne {
	return rruo.SetAdminRiskReportingID(a.ID)
}

// Mutation returns the RiskReportingMutation object of the builder.
func (rruo *RiskReportingUpdateOne) Mutation() *RiskReportingMutation {
	return rruo.mutation
}

// ClearAdminRiskReporting clears the "AdminRiskReporting" edge to the Admin entity.
func (rruo *RiskReportingUpdateOne) ClearAdminRiskReporting() *RiskReportingUpdateOne {
	rruo.mutation.ClearAdminRiskReporting()
	return rruo
}

// Where appends a list predicates to the RiskReportingUpdate builder.
func (rruo *RiskReportingUpdateOne) Where(ps ...predicate.RiskReporting) *RiskReportingUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RiskReportingUpdateOne) Select(field string, fields ...string) *RiskReportingUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RiskReporting entity.
func (rruo *RiskReportingUpdateOne) Save(ctx context.Context) (*RiskReporting, error) {
	rruo.defaults()
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RiskReportingUpdateOne) SaveX(ctx context.Context) *RiskReporting {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RiskReportingUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RiskReportingUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rruo *RiskReportingUpdateOne) defaults() {
	if _, ok := rruo.mutation.UpdatedAt(); !ok {
		v := riskreporting.UpdateDefaultUpdatedAt()
		rruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *RiskReportingUpdateOne) check() error {
	if v, ok := rruo.mutation.CreatedBy(); ok {
		if err := riskreporting.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.created_by": %w`, err)}
		}
	}
	if v, ok := rruo.mutation.Title(); ok {
		if err := riskreporting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.title": %w`, err)}
		}
	}
	if v, ok := rruo.mutation.RiskCategoryID(); ok {
		if err := riskreporting.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_category_id": %w`, err)}
		}
	}
	if v, ok := rruo.mutation.RiskLocationID(); ok {
		if err := riskreporting.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.risk_location_id": %w`, err)}
		}
	}
	if v, ok := rruo.mutation.Maintainer(); ok {
		if err := riskreporting.MaintainerValidator(v); err != nil {
			return &ValidationError{Name: "maintainer", err: fmt.Errorf(`ent: validator failed for field "RiskReporting.maintainer": %w`, err)}
		}
	}
	return nil
}

func (rruo *RiskReportingUpdateOne) sqlSave(ctx context.Context) (_node *RiskReporting, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskreporting.Table, riskreporting.Columns, sqlgraph.NewFieldSpec(riskreporting.FieldID, field.TypeInt))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RiskReporting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riskreporting.FieldID)
		for _, f := range fields {
			if !riskreporting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != riskreporting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rruo.mutation.UpdatedAt(); ok {
		_spec.SetField(riskreporting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rruo.mutation.DeletedAt(); ok {
		_spec.SetField(riskreporting.FieldDeletedAt, field.TypeTime, value)
	}
	if rruo.mutation.DeletedAtCleared() {
		_spec.ClearField(riskreporting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rruo.mutation.Title(); ok {
		_spec.SetField(riskreporting.FieldTitle, field.TypeString, value)
	}
	if value, ok := rruo.mutation.Content(); ok {
		_spec.SetField(riskreporting.FieldContent, field.TypeString, value)
	}
	if value, ok := rruo.mutation.Images(); ok {
		_spec.SetField(riskreporting.FieldImages, field.TypeJSON, value)
	}
	if value, ok := rruo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskreporting.FieldImages, value)
		})
	}
	if value, ok := rruo.mutation.RiskCategoryID(); ok {
		_spec.SetField(riskreporting.FieldRiskCategoryID, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.AddedRiskCategoryID(); ok {
		_spec.AddField(riskreporting.FieldRiskCategoryID, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.RiskLocationID(); ok {
		_spec.SetField(riskreporting.FieldRiskLocationID, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.AddedRiskLocationID(); ok {
		_spec.AddField(riskreporting.FieldRiskLocationID, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.Maintainer(); ok {
		_spec.SetField(riskreporting.FieldMaintainer, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.AddedMaintainer(); ok {
		_spec.AddField(riskreporting.FieldMaintainer, field.TypeInt, value)
	}
	if value, ok := rruo.mutation.Measures(); ok {
		_spec.SetField(riskreporting.FieldMeasures, field.TypeString, value)
	}
	if rruo.mutation.MeasuresCleared() {
		_spec.ClearField(riskreporting.FieldMeasures, field.TypeString)
	}
	if value, ok := rruo.mutation.DueTime(); ok {
		_spec.SetField(riskreporting.FieldDueTime, field.TypeTime, value)
	}
	if rruo.mutation.AdminRiskReportingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskreporting.AdminRiskReportingTable,
			Columns: []string{riskreporting.AdminRiskReportingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.AdminRiskReportingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskreporting.AdminRiskReportingTable,
			Columns: []string{riskreporting.AdminRiskReportingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RiskReporting{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskreporting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
