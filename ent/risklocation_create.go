// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/risklocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RiskLocationCreate is the builder for creating a RiskLocation entity.
type RiskLocationCreate struct {
	config
	mutation *RiskLocationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rlc *RiskLocationCreate) SetCreatedAt(t time.Time) *RiskLocationCreate {
	rlc.mutation.SetCreatedAt(t)
	return rlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rlc *RiskLocationCreate) SetNillableCreatedAt(t *time.Time) *RiskLocationCreate {
	if t != nil {
		rlc.SetCreatedAt(*t)
	}
	return rlc
}

// SetUpdatedAt sets the "updated_at" field.
func (rlc *RiskLocationCreate) SetUpdatedAt(t time.Time) *RiskLocationCreate {
	rlc.mutation.SetUpdatedAt(t)
	return rlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rlc *RiskLocationCreate) SetNillableUpdatedAt(t *time.Time) *RiskLocationCreate {
	if t != nil {
		rlc.SetUpdatedAt(*t)
	}
	return rlc
}

// SetDeletedAt sets the "deleted_at" field.
func (rlc *RiskLocationCreate) SetDeletedAt(t time.Time) *RiskLocationCreate {
	rlc.mutation.SetDeletedAt(t)
	return rlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rlc *RiskLocationCreate) SetNillableDeletedAt(t *time.Time) *RiskLocationCreate {
	if t != nil {
		rlc.SetDeletedAt(*t)
	}
	return rlc
}

// SetTitle sets the "title" field.
func (rlc *RiskLocationCreate) SetTitle(s string) *RiskLocationCreate {
	rlc.mutation.SetTitle(s)
	return rlc
}

// Mutation returns the RiskLocationMutation object of the builder.
func (rlc *RiskLocationCreate) Mutation() *RiskLocationMutation {
	return rlc.mutation
}

// Save creates the RiskLocation in the database.
func (rlc *RiskLocationCreate) Save(ctx context.Context) (*RiskLocation, error) {
	rlc.defaults()
	return withHooks(ctx, rlc.sqlSave, rlc.mutation, rlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *RiskLocationCreate) SaveX(ctx context.Context) *RiskLocation {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlc *RiskLocationCreate) Exec(ctx context.Context) error {
	_, err := rlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlc *RiskLocationCreate) ExecX(ctx context.Context) {
	if err := rlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlc *RiskLocationCreate) defaults() {
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		v := risklocation.DefaultCreatedAt()
		rlc.mutation.SetCreatedAt(v)
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		v := risklocation.DefaultUpdatedAt()
		rlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlc *RiskLocationCreate) check() error {
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RiskLocation.created_at"`)}
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RiskLocation.updated_at"`)}
	}
	if _, ok := rlc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "RiskLocation.title"`)}
	}
	if v, ok := rlc.mutation.Title(); ok {
		if err := risklocation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RiskLocation.title": %w`, err)}
		}
	}
	return nil
}

func (rlc *RiskLocationCreate) sqlSave(ctx context.Context) (*RiskLocation, error) {
	if err := rlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rlc.mutation.id = &_node.ID
	rlc.mutation.done = true
	return _node, nil
}

func (rlc *RiskLocationCreate) createSpec() (*RiskLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &RiskLocation{config: rlc.config}
		_spec = sqlgraph.NewCreateSpec(risklocation.Table, sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt))
	)
	if value, ok := rlc.mutation.CreatedAt(); ok {
		_spec.SetField(risklocation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rlc.mutation.UpdatedAt(); ok {
		_spec.SetField(risklocation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rlc.mutation.DeletedAt(); ok {
		_spec.SetField(risklocation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rlc.mutation.Title(); ok {
		_spec.SetField(risklocation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	return _node, _spec
}

// RiskLocationCreateBulk is the builder for creating many RiskLocation entities in bulk.
type RiskLocationCreateBulk struct {
	config
	err      error
	builders []*RiskLocationCreate
}

// Save creates the RiskLocation entities in the database.
func (rlcb *RiskLocationCreateBulk) Save(ctx context.Context) ([]*RiskLocation, error) {
	if rlcb.err != nil {
		return nil, rlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*RiskLocation, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiskLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlcb *RiskLocationCreateBulk) SaveX(ctx context.Context) []*RiskLocation {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlcb *RiskLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := rlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlcb *RiskLocationCreateBulk) ExecX(ctx context.Context) {
	if err := rlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
