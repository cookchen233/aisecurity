// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/risklocation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RiskLocation is the model entity for the RiskLocation schema.
type RiskLocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 标题
	Title        string `json:"title,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RiskLocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case risklocation.FieldID:
			values[i] = new(sql.NullInt64)
		case risklocation.FieldTitle:
			values[i] = new(sql.NullString)
		case risklocation.FieldCreatedAt, risklocation.FieldUpdatedAt, risklocation.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RiskLocation fields.
func (rl *RiskLocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case risklocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case risklocation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rl.CreatedAt = value.Time
			}
		case risklocation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rl.UpdatedAt = value.Time
			}
		case risklocation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rl.DeletedAt = value.Time
			}
		case risklocation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rl.Title = value.String
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RiskLocation.
// This includes values selected through modifiers, order, etc.
func (rl *RiskLocation) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// Update returns a builder for updating this RiskLocation.
// Note that you need to call RiskLocation.Unwrap() before calling this method if this RiskLocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *RiskLocation) Update() *RiskLocationUpdateOne {
	return NewRiskLocationClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the RiskLocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *RiskLocation) Unwrap() *RiskLocation {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: RiskLocation is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *RiskLocation) String() string {
	var builder strings.Builder
	builder.WriteString("RiskLocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(rl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rl.Title)
	builder.WriteByte(')')
	return builder.String()
}

// RiskLocations is a parsable slice of RiskLocation.
type RiskLocations []*RiskLocation
