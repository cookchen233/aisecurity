// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"aisecurity/ent/migrate"

	"aisecurity/ent/admin"
	"aisecurity/ent/dept"
	"aisecurity/ent/deptadmin"
	"aisecurity/ent/riskcategory"
	"aisecurity/ent/risklocation"
	"aisecurity/ent/riskreporting"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Dept is the client for interacting with the Dept builders.
	Dept *DeptClient
	// DeptAdmin is the client for interacting with the DeptAdmin builders.
	DeptAdmin *DeptAdminClient
	// RiskCategory is the client for interacting with the RiskCategory builders.
	RiskCategory *RiskCategoryClient
	// RiskLocation is the client for interacting with the RiskLocation builders.
	RiskLocation *RiskLocationClient
	// RiskReporting is the client for interacting with the RiskReporting builders.
	RiskReporting *RiskReportingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.Dept = NewDeptClient(c.config)
	c.DeptAdmin = NewDeptAdminClient(c.config)
	c.RiskCategory = NewRiskCategoryClient(c.config)
	c.RiskLocation = NewRiskLocationClient(c.config)
	c.RiskReporting = NewRiskReportingClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Admin:         NewAdminClient(cfg),
		Dept:          NewDeptClient(cfg),
		DeptAdmin:     NewDeptAdminClient(cfg),
		RiskCategory:  NewRiskCategoryClient(cfg),
		RiskLocation:  NewRiskLocationClient(cfg),
		RiskReporting: NewRiskReportingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Admin:         NewAdminClient(cfg),
		Dept:          NewDeptClient(cfg),
		DeptAdmin:     NewDeptAdminClient(cfg),
		RiskCategory:  NewRiskCategoryClient(cfg),
		RiskLocation:  NewRiskLocationClient(cfg),
		RiskReporting: NewRiskReportingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Admin, c.Dept, c.DeptAdmin, c.RiskCategory, c.RiskLocation, c.RiskReporting,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Admin, c.Dept, c.DeptAdmin, c.RiskCategory, c.RiskLocation, c.RiskReporting,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminMutation:
		return c.Admin.mutate(ctx, m)
	case *DeptMutation:
		return c.Dept.mutate(ctx, m)
	case *DeptAdminMutation:
		return c.DeptAdmin.mutate(ctx, m)
	case *RiskCategoryMutation:
		return c.RiskCategory.mutate(ctx, m)
	case *RiskLocationMutation:
		return c.RiskLocation.mutate(ctx, m)
	case *RiskReportingMutation:
		return c.RiskReporting.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `admin.Intercept(f(g(h())))`.
func (c *AdminClient) Intercept(interceptors ...Interceptor) {
	c.inters.Admin = append(c.inters.Admin, interceptors...)
}

// Create returns a builder for creating a Admin entity.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminClient) MapCreateBulk(slice any, setFunc func(*AdminCreate, int)) *AdminCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminCreateBulk{err: fmt.Errorf("calling to AdminClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdmin},
		inters: c.Interceptors(),
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRiskReportingAdmin queries the RiskReportingAdmin edge of a Admin.
func (c *AdminClient) QueryRiskReportingAdmin(a *Admin) *RiskReportingQuery {
	query := (&RiskReportingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(riskreporting.Table, riskreporting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskReportingAdminTable, admin.RiskReportingAdminColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// Interceptors returns the client interceptors.
func (c *AdminClient) Interceptors() []Interceptor {
	return c.inters.Admin
}

func (c *AdminClient) mutate(ctx context.Context, m *AdminMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Admin mutation op: %q", m.Op())
	}
}

// DeptClient is a client for the Dept schema.
type DeptClient struct {
	config
}

// NewDeptClient returns a client for the Dept from the given config.
func NewDeptClient(c config) *DeptClient {
	return &DeptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dept.Hooks(f(g(h())))`.
func (c *DeptClient) Use(hooks ...Hook) {
	c.hooks.Dept = append(c.hooks.Dept, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dept.Intercept(f(g(h())))`.
func (c *DeptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Dept = append(c.inters.Dept, interceptors...)
}

// Create returns a builder for creating a Dept entity.
func (c *DeptClient) Create() *DeptCreate {
	mutation := newDeptMutation(c.config, OpCreate)
	return &DeptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dept entities.
func (c *DeptClient) CreateBulk(builders ...*DeptCreate) *DeptCreateBulk {
	return &DeptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeptClient) MapCreateBulk(slice any, setFunc func(*DeptCreate, int)) *DeptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeptCreateBulk{err: fmt.Errorf("calling to DeptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dept.
func (c *DeptClient) Update() *DeptUpdate {
	mutation := newDeptMutation(c.config, OpUpdate)
	return &DeptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeptClient) UpdateOne(d *Dept) *DeptUpdateOne {
	mutation := newDeptMutation(c.config, OpUpdateOne, withDept(d))
	return &DeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeptClient) UpdateOneID(id int) *DeptUpdateOne {
	mutation := newDeptMutation(c.config, OpUpdateOne, withDeptID(id))
	return &DeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dept.
func (c *DeptClient) Delete() *DeptDelete {
	mutation := newDeptMutation(c.config, OpDelete)
	return &DeptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeptClient) DeleteOne(d *Dept) *DeptDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeptClient) DeleteOneID(id int) *DeptDeleteOne {
	builder := c.Delete().Where(dept.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeptDeleteOne{builder}
}

// Query returns a query builder for Dept.
func (c *DeptClient) Query() *DeptQuery {
	return &DeptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDept},
		inters: c.Interceptors(),
	}
}

// Get returns a Dept entity by its id.
func (c *DeptClient) Get(ctx context.Context, id int) (*Dept, error) {
	return c.Query().Where(dept.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeptClient) GetX(ctx context.Context, id int) *Dept {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeptClient) Hooks() []Hook {
	return c.hooks.Dept
}

// Interceptors returns the client interceptors.
func (c *DeptClient) Interceptors() []Interceptor {
	return c.inters.Dept
}

func (c *DeptClient) mutate(ctx context.Context, m *DeptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Dept mutation op: %q", m.Op())
	}
}

// DeptAdminClient is a client for the DeptAdmin schema.
type DeptAdminClient struct {
	config
}

// NewDeptAdminClient returns a client for the DeptAdmin from the given config.
func NewDeptAdminClient(c config) *DeptAdminClient {
	return &DeptAdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deptadmin.Hooks(f(g(h())))`.
func (c *DeptAdminClient) Use(hooks ...Hook) {
	c.hooks.DeptAdmin = append(c.hooks.DeptAdmin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deptadmin.Intercept(f(g(h())))`.
func (c *DeptAdminClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeptAdmin = append(c.inters.DeptAdmin, interceptors...)
}

// Create returns a builder for creating a DeptAdmin entity.
func (c *DeptAdminClient) Create() *DeptAdminCreate {
	mutation := newDeptAdminMutation(c.config, OpCreate)
	return &DeptAdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeptAdmin entities.
func (c *DeptAdminClient) CreateBulk(builders ...*DeptAdminCreate) *DeptAdminCreateBulk {
	return &DeptAdminCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeptAdminClient) MapCreateBulk(slice any, setFunc func(*DeptAdminCreate, int)) *DeptAdminCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeptAdminCreateBulk{err: fmt.Errorf("calling to DeptAdminClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeptAdminCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeptAdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeptAdmin.
func (c *DeptAdminClient) Update() *DeptAdminUpdate {
	mutation := newDeptAdminMutation(c.config, OpUpdate)
	return &DeptAdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeptAdminClient) UpdateOne(da *DeptAdmin) *DeptAdminUpdateOne {
	mutation := newDeptAdminMutation(c.config, OpUpdateOne, withDeptAdmin(da))
	return &DeptAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeptAdminClient) UpdateOneID(id int) *DeptAdminUpdateOne {
	mutation := newDeptAdminMutation(c.config, OpUpdateOne, withDeptAdminID(id))
	return &DeptAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeptAdmin.
func (c *DeptAdminClient) Delete() *DeptAdminDelete {
	mutation := newDeptAdminMutation(c.config, OpDelete)
	return &DeptAdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeptAdminClient) DeleteOne(da *DeptAdmin) *DeptAdminDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeptAdminClient) DeleteOneID(id int) *DeptAdminDeleteOne {
	builder := c.Delete().Where(deptadmin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeptAdminDeleteOne{builder}
}

// Query returns a query builder for DeptAdmin.
func (c *DeptAdminClient) Query() *DeptAdminQuery {
	return &DeptAdminQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeptAdmin},
		inters: c.Interceptors(),
	}
}

// Get returns a DeptAdmin entity by its id.
func (c *DeptAdminClient) Get(ctx context.Context, id int) (*DeptAdmin, error) {
	return c.Query().Where(deptadmin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeptAdminClient) GetX(ctx context.Context, id int) *DeptAdmin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeptAdminClient) Hooks() []Hook {
	return c.hooks.DeptAdmin
}

// Interceptors returns the client interceptors.
func (c *DeptAdminClient) Interceptors() []Interceptor {
	return c.inters.DeptAdmin
}

func (c *DeptAdminClient) mutate(ctx context.Context, m *DeptAdminMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeptAdminCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeptAdminUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeptAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeptAdminDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeptAdmin mutation op: %q", m.Op())
	}
}

// RiskCategoryClient is a client for the RiskCategory schema.
type RiskCategoryClient struct {
	config
}

// NewRiskCategoryClient returns a client for the RiskCategory from the given config.
func NewRiskCategoryClient(c config) *RiskCategoryClient {
	return &RiskCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riskcategory.Hooks(f(g(h())))`.
func (c *RiskCategoryClient) Use(hooks ...Hook) {
	c.hooks.RiskCategory = append(c.hooks.RiskCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riskcategory.Intercept(f(g(h())))`.
func (c *RiskCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiskCategory = append(c.inters.RiskCategory, interceptors...)
}

// Create returns a builder for creating a RiskCategory entity.
func (c *RiskCategoryClient) Create() *RiskCategoryCreate {
	mutation := newRiskCategoryMutation(c.config, OpCreate)
	return &RiskCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiskCategory entities.
func (c *RiskCategoryClient) CreateBulk(builders ...*RiskCategoryCreate) *RiskCategoryCreateBulk {
	return &RiskCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskCategoryClient) MapCreateBulk(slice any, setFunc func(*RiskCategoryCreate, int)) *RiskCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskCategoryCreateBulk{err: fmt.Errorf("calling to RiskCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiskCategory.
func (c *RiskCategoryClient) Update() *RiskCategoryUpdate {
	mutation := newRiskCategoryMutation(c.config, OpUpdate)
	return &RiskCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskCategoryClient) UpdateOne(rc *RiskCategory) *RiskCategoryUpdateOne {
	mutation := newRiskCategoryMutation(c.config, OpUpdateOne, withRiskCategory(rc))
	return &RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskCategoryClient) UpdateOneID(id int) *RiskCategoryUpdateOne {
	mutation := newRiskCategoryMutation(c.config, OpUpdateOne, withRiskCategoryID(id))
	return &RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiskCategory.
func (c *RiskCategoryClient) Delete() *RiskCategoryDelete {
	mutation := newRiskCategoryMutation(c.config, OpDelete)
	return &RiskCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskCategoryClient) DeleteOne(rc *RiskCategory) *RiskCategoryDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskCategoryClient) DeleteOneID(id int) *RiskCategoryDeleteOne {
	builder := c.Delete().Where(riskcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskCategoryDeleteOne{builder}
}

// Query returns a query builder for RiskCategory.
func (c *RiskCategoryClient) Query() *RiskCategoryQuery {
	return &RiskCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiskCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a RiskCategory entity by its id.
func (c *RiskCategoryClient) Get(ctx context.Context, id int) (*RiskCategory, error) {
	return c.Query().Where(riskcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskCategoryClient) GetX(ctx context.Context, id int) *RiskCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RiskCategoryClient) Hooks() []Hook {
	return c.hooks.RiskCategory
}

// Interceptors returns the client interceptors.
func (c *RiskCategoryClient) Interceptors() []Interceptor {
	return c.inters.RiskCategory
}

func (c *RiskCategoryClient) mutate(ctx context.Context, m *RiskCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiskCategory mutation op: %q", m.Op())
	}
}

// RiskLocationClient is a client for the RiskLocation schema.
type RiskLocationClient struct {
	config
}

// NewRiskLocationClient returns a client for the RiskLocation from the given config.
func NewRiskLocationClient(c config) *RiskLocationClient {
	return &RiskLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `risklocation.Hooks(f(g(h())))`.
func (c *RiskLocationClient) Use(hooks ...Hook) {
	c.hooks.RiskLocation = append(c.hooks.RiskLocation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `risklocation.Intercept(f(g(h())))`.
func (c *RiskLocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiskLocation = append(c.inters.RiskLocation, interceptors...)
}

// Create returns a builder for creating a RiskLocation entity.
func (c *RiskLocationClient) Create() *RiskLocationCreate {
	mutation := newRiskLocationMutation(c.config, OpCreate)
	return &RiskLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiskLocation entities.
func (c *RiskLocationClient) CreateBulk(builders ...*RiskLocationCreate) *RiskLocationCreateBulk {
	return &RiskLocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskLocationClient) MapCreateBulk(slice any, setFunc func(*RiskLocationCreate, int)) *RiskLocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskLocationCreateBulk{err: fmt.Errorf("calling to RiskLocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskLocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiskLocation.
func (c *RiskLocationClient) Update() *RiskLocationUpdate {
	mutation := newRiskLocationMutation(c.config, OpUpdate)
	return &RiskLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskLocationClient) UpdateOne(rl *RiskLocation) *RiskLocationUpdateOne {
	mutation := newRiskLocationMutation(c.config, OpUpdateOne, withRiskLocation(rl))
	return &RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskLocationClient) UpdateOneID(id int) *RiskLocationUpdateOne {
	mutation := newRiskLocationMutation(c.config, OpUpdateOne, withRiskLocationID(id))
	return &RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiskLocation.
func (c *RiskLocationClient) Delete() *RiskLocationDelete {
	mutation := newRiskLocationMutation(c.config, OpDelete)
	return &RiskLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskLocationClient) DeleteOne(rl *RiskLocation) *RiskLocationDeleteOne {
	return c.DeleteOneID(rl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskLocationClient) DeleteOneID(id int) *RiskLocationDeleteOne {
	builder := c.Delete().Where(risklocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskLocationDeleteOne{builder}
}

// Query returns a query builder for RiskLocation.
func (c *RiskLocationClient) Query() *RiskLocationQuery {
	return &RiskLocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiskLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a RiskLocation entity by its id.
func (c *RiskLocationClient) Get(ctx context.Context, id int) (*RiskLocation, error) {
	return c.Query().Where(risklocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskLocationClient) GetX(ctx context.Context, id int) *RiskLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RiskLocationClient) Hooks() []Hook {
	return c.hooks.RiskLocation
}

// Interceptors returns the client interceptors.
func (c *RiskLocationClient) Interceptors() []Interceptor {
	return c.inters.RiskLocation
}

func (c *RiskLocationClient) mutate(ctx context.Context, m *RiskLocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskLocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskLocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiskLocation mutation op: %q", m.Op())
	}
}

// RiskReportingClient is a client for the RiskReporting schema.
type RiskReportingClient struct {
	config
}

// NewRiskReportingClient returns a client for the RiskReporting from the given config.
func NewRiskReportingClient(c config) *RiskReportingClient {
	return &RiskReportingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riskreporting.Hooks(f(g(h())))`.
func (c *RiskReportingClient) Use(hooks ...Hook) {
	c.hooks.RiskReporting = append(c.hooks.RiskReporting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riskreporting.Intercept(f(g(h())))`.
func (c *RiskReportingClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiskReporting = append(c.inters.RiskReporting, interceptors...)
}

// Create returns a builder for creating a RiskReporting entity.
func (c *RiskReportingClient) Create() *RiskReportingCreate {
	mutation := newRiskReportingMutation(c.config, OpCreate)
	return &RiskReportingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiskReporting entities.
func (c *RiskReportingClient) CreateBulk(builders ...*RiskReportingCreate) *RiskReportingCreateBulk {
	return &RiskReportingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskReportingClient) MapCreateBulk(slice any, setFunc func(*RiskReportingCreate, int)) *RiskReportingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskReportingCreateBulk{err: fmt.Errorf("calling to RiskReportingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskReportingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskReportingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiskReporting.
func (c *RiskReportingClient) Update() *RiskReportingUpdate {
	mutation := newRiskReportingMutation(c.config, OpUpdate)
	return &RiskReportingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskReportingClient) UpdateOne(rr *RiskReporting) *RiskReportingUpdateOne {
	mutation := newRiskReportingMutation(c.config, OpUpdateOne, withRiskReporting(rr))
	return &RiskReportingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskReportingClient) UpdateOneID(id int) *RiskReportingUpdateOne {
	mutation := newRiskReportingMutation(c.config, OpUpdateOne, withRiskReportingID(id))
	return &RiskReportingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiskReporting.
func (c *RiskReportingClient) Delete() *RiskReportingDelete {
	mutation := newRiskReportingMutation(c.config, OpDelete)
	return &RiskReportingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskReportingClient) DeleteOne(rr *RiskReporting) *RiskReportingDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskReportingClient) DeleteOneID(id int) *RiskReportingDeleteOne {
	builder := c.Delete().Where(riskreporting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskReportingDeleteOne{builder}
}

// Query returns a query builder for RiskReporting.
func (c *RiskReportingClient) Query() *RiskReportingQuery {
	return &RiskReportingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiskReporting},
		inters: c.Interceptors(),
	}
}

// Get returns a RiskReporting entity by its id.
func (c *RiskReportingClient) Get(ctx context.Context, id int) (*RiskReporting, error) {
	return c.Query().Where(riskreporting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskReportingClient) GetX(ctx context.Context, id int) *RiskReporting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdminRiskReporting queries the AdminRiskReporting edge of a RiskReporting.
func (c *RiskReportingClient) QueryAdminRiskReporting(rr *RiskReporting) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riskreporting.Table, riskreporting.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riskreporting.AdminRiskReportingTable, riskreporting.AdminRiskReportingColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiskReportingClient) Hooks() []Hook {
	return c.hooks.RiskReporting
}

// Interceptors returns the client interceptors.
func (c *RiskReportingClient) Interceptors() []Interceptor {
	return c.inters.RiskReporting
}

func (c *RiskReportingClient) mutate(ctx context.Context, m *RiskReportingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskReportingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskReportingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskReportingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskReportingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiskReporting mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Admin, Dept, DeptAdmin, RiskCategory, RiskLocation, RiskReporting []ent.Hook
	}
	inters struct {
		Admin, Dept, DeptAdmin, RiskCategory, RiskLocation,
		RiskReporting []ent.Interceptor
	}
)
