// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/predicate"
	"aisecurity/ent/risklocation"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RiskLocationDelete is the builder for deleting a RiskLocation entity.
type RiskLocationDelete struct {
	config
	hooks    []Hook
	mutation *RiskLocationMutation
}

// Where appends a list predicates to the RiskLocationDelete builder.
func (rld *RiskLocationDelete) Where(ps ...predicate.RiskLocation) *RiskLocationDelete {
	rld.mutation.Where(ps...)
	return rld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rld *RiskLocationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rld.sqlExec, rld.mutation, rld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rld *RiskLocationDelete) ExecX(ctx context.Context) int {
	n, err := rld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rld *RiskLocationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(risklocation.Table, sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt))
	if ps := rld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rld.mutation.done = true
	return affected, err
}

// RiskLocationDeleteOne is the builder for deleting a single RiskLocation entity.
type RiskLocationDeleteOne struct {
	rld *RiskLocationDelete
}

// Where appends a list predicates to the RiskLocationDelete builder.
func (rldo *RiskLocationDeleteOne) Where(ps ...predicate.RiskLocation) *RiskLocationDeleteOne {
	rldo.rld.mutation.Where(ps...)
	return rldo
}

// Exec executes the deletion query.
func (rldo *RiskLocationDeleteOne) Exec(ctx context.Context) error {
	n, err := rldo.rld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{risklocation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rldo *RiskLocationDeleteOne) ExecX(ctx context.Context) {
	if err := rldo.Exec(ctx); err != nil {
		panic(err)
	}
}
