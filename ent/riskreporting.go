// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/admin"
	"aisecurity/ent/riskreporting"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RiskReporting is the model entity for the RiskReporting schema.
type RiskReporting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 创建人
	CreatedBy int `json:"created_by,omitempty"`
	// 标题
	Title string `json:"title,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 图片
	Images []struct {
		Title string "json:\"title\""
		URL   string "json:\"url\""
	} `json:"images,omitempty"`
	// 风险类别
	RiskCategoryID int `json:"risk_category_id,omitempty"`
	// 地点
	RiskLocationID int `json:"risk_location_id,omitempty"`
	// 整改人
	Maintainer int `json:"maintainer,omitempty"`
	// 整改措施
	Measures *string `json:"measures,omitempty"`
	// 计划完成日期
	DueTime time.Time `json:"due_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RiskReportingQuery when eager-loading is set.
	Edges        RiskReportingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RiskReportingEdges holds the relations/edges for other nodes in the graph.
type RiskReportingEdges struct {
	// AdminRiskReporting holds the value of the AdminRiskReporting edge.
	AdminRiskReporting *Admin `json:"AdminRiskReporting,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AdminRiskReportingOrErr returns the AdminRiskReporting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskReportingEdges) AdminRiskReportingOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.AdminRiskReporting == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.AdminRiskReporting, nil
	}
	return nil, &NotLoadedError{edge: "AdminRiskReporting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RiskReporting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case riskreporting.FieldImages:
			values[i] = new([]byte)
		case riskreporting.FieldID, riskreporting.FieldCreatedBy, riskreporting.FieldRiskCategoryID, riskreporting.FieldRiskLocationID, riskreporting.FieldMaintainer:
			values[i] = new(sql.NullInt64)
		case riskreporting.FieldTitle, riskreporting.FieldContent, riskreporting.FieldMeasures:
			values[i] = new(sql.NullString)
		case riskreporting.FieldCreatedAt, riskreporting.FieldUpdatedAt, riskreporting.FieldDeletedAt, riskreporting.FieldDueTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RiskReporting fields.
func (rr *RiskReporting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case riskreporting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rr.ID = int(value.Int64)
		case riskreporting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rr.CreatedAt = value.Time
			}
		case riskreporting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rr.UpdatedAt = value.Time
			}
		case riskreporting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rr.DeletedAt = value.Time
			}
		case riskreporting.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				rr.CreatedBy = int(value.Int64)
			}
		case riskreporting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rr.Title = value.String
			}
		case riskreporting.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				rr.Content = value.String
			}
		case riskreporting.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rr.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case riskreporting.FieldRiskCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_category_id", values[i])
			} else if value.Valid {
				rr.RiskCategoryID = int(value.Int64)
			}
		case riskreporting.FieldRiskLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_location_id", values[i])
			} else if value.Valid {
				rr.RiskLocationID = int(value.Int64)
			}
		case riskreporting.FieldMaintainer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintainer", values[i])
			} else if value.Valid {
				rr.Maintainer = int(value.Int64)
			}
		case riskreporting.FieldMeasures:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measures", values[i])
			} else if value.Valid {
				rr.Measures = new(string)
				*rr.Measures = value.String
			}
		case riskreporting.FieldDueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_time", values[i])
			} else if value.Valid {
				rr.DueTime = value.Time
			}
		default:
			rr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RiskReporting.
// This includes values selected through modifiers, order, etc.
func (rr *RiskReporting) Value(name string) (ent.Value, error) {
	return rr.selectValues.Get(name)
}

// QueryAdminRiskReporting queries the "AdminRiskReporting" edge of the RiskReporting entity.
func (rr *RiskReporting) QueryAdminRiskReporting() *AdminQuery {
	return NewRiskReportingClient(rr.config).QueryAdminRiskReporting(rr)
}

// Update returns a builder for updating this RiskReporting.
// Note that you need to call RiskReporting.Unwrap() before calling this method if this RiskReporting
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *RiskReporting) Update() *RiskReportingUpdateOne {
	return NewRiskReportingClient(rr.config).UpdateOne(rr)
}

// Unwrap unwraps the RiskReporting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rr *RiskReporting) Unwrap() *RiskReporting {
	_tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: RiskReporting is not a transactional entity")
	}
	rr.config.driver = _tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *RiskReporting) String() string {
	var builder strings.Builder
	builder.WriteString("RiskReporting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(rr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", rr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rr.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(rr.Content)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", rr.Images))
	builder.WriteString(", ")
	builder.WriteString("risk_category_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.RiskCategoryID))
	builder.WriteString(", ")
	builder.WriteString("risk_location_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.RiskLocationID))
	builder.WriteString(", ")
	builder.WriteString("maintainer=")
	builder.WriteString(fmt.Sprintf("%v", rr.Maintainer))
	builder.WriteString(", ")
	if v := rr.Measures; v != nil {
		builder.WriteString("measures=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("due_time=")
	builder.WriteString(rr.DueTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RiskReportings is a parsable slice of RiskReporting.
type RiskReportings []*RiskReporting
