// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeviceInstallation is the model entity for the DeviceInstallation schema.
type DeviceInstallation struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time"`
	// 创建者
	CreatorID int `json:"creator_id"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time"`
	// 最后更新者
	UpdaterID int `json:"updater_id"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time"`
	// 设备ID
	DeviceID int `json:"device_id" validate:"required"`
	// 区域ID
	AreaID int `json:"area_id" validate:"required"`
	// 设备别名
	AliasName string `json:"alias_name"`
	// 经度
	Longitude float64 `json:"longitude" validate:"required"`
	// 纬度
	Latitude float64 `json:"latitude" validate:"required"`
	// 其他位置数据
	LocationData string `json:"location_data"`
	// 位置描述
	Location string `json:"location"`
	// 安装人
	Installer string `json:"installer"`
	// 安装时间
	InstallTime time.Time `json:"install_time"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceInstallationQuery when eager-loading is set.
	Edges        DeviceInstallationEdges `json:"edges"`
	selectValues sql.SelectValues

	AreaName              string `json:"area_name"`
	LocationWithAliasName string `json:"location_with_alias_name"`
}

// DeviceInstallationEdges holds the relations/edges for other nodes in the graph.
type DeviceInstallationEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceInstallationEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceInstallationEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceInstallationEdges) AreaOrErr() (*Area, error) {
	if e.loadedTypes[2] {
		if e.Area == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: area.Label}
		}
		return e.Area, nil
	}
	return nil, &NotLoadedError{edge: "area"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceInstallationEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[3] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceInstallation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deviceinstallation.FieldLongitude, deviceinstallation.FieldLatitude:
			values[i] = new(sql.NullFloat64)
		case deviceinstallation.FieldID, deviceinstallation.FieldCreatorID, deviceinstallation.FieldUpdaterID, deviceinstallation.FieldDeviceID, deviceinstallation.FieldAreaID:
			values[i] = new(sql.NullInt64)
		case deviceinstallation.FieldAliasName, deviceinstallation.FieldLocationData, deviceinstallation.FieldLocation, deviceinstallation.FieldInstaller:
			values[i] = new(sql.NullString)
		case deviceinstallation.FieldCreateTime, deviceinstallation.FieldDeleteTime, deviceinstallation.FieldUpdateTime, deviceinstallation.FieldInstallTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceInstallation fields.
func (di *DeviceInstallation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deviceinstallation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int(value.Int64)
		case deviceinstallation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				di.CreateTime = value.Time
			}
		case deviceinstallation.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				di.CreatorID = int(value.Int64)
			}
		case deviceinstallation.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				di.DeleteTime = new(time.Time)
				*di.DeleteTime = value.Time
			}
		case deviceinstallation.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				di.UpdaterID = int(value.Int64)
			}
		case deviceinstallation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				di.UpdateTime = value.Time
			}
		case deviceinstallation.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				di.DeviceID = int(value.Int64)
			}
		case deviceinstallation.FieldAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value.Valid {
				di.AreaID = int(value.Int64)
			}
		case deviceinstallation.FieldAliasName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias_name", values[i])
			} else if value.Valid {
				di.AliasName = value.String
			}
		case deviceinstallation.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				di.Longitude = value.Float64
			}
		case deviceinstallation.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				di.Latitude = value.Float64
			}
		case deviceinstallation.FieldLocationData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_data", values[i])
			} else if value.Valid {
				di.LocationData = value.String
			}
		case deviceinstallation.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				di.Location = value.String
			}
		case deviceinstallation.FieldInstaller:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field installer", values[i])
			} else if value.Valid {
				di.Installer = value.String
			}
		case deviceinstallation.FieldInstallTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field install_time", values[i])
			} else if value.Valid {
				di.InstallTime = value.Time
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceInstallation.
// This includes values selected through modifiers, order, etc.
func (di *DeviceInstallation) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the DeviceInstallation entity.
func (di *DeviceInstallation) QueryCreator() *AdminQuery {
	return NewDeviceInstallationClient(di.config).QueryCreator(di)
}

// QueryUpdater queries the "updater" edge of the DeviceInstallation entity.
func (di *DeviceInstallation) QueryUpdater() *AdminQuery {
	return NewDeviceInstallationClient(di.config).QueryUpdater(di)
}

// QueryArea queries the "area" edge of the DeviceInstallation entity.
func (di *DeviceInstallation) QueryArea() *AreaQuery {
	return NewDeviceInstallationClient(di.config).QueryArea(di)
}

// QueryDevice queries the "device" edge of the DeviceInstallation entity.
func (di *DeviceInstallation) QueryDevice() *DeviceQuery {
	return NewDeviceInstallationClient(di.config).QueryDevice(di)
}

// Update returns a builder for updating this DeviceInstallation.
// Note that you need to call DeviceInstallation.Unwrap() before calling this method if this DeviceInstallation
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DeviceInstallation) Update() *DeviceInstallationUpdateOne {
	return NewDeviceInstallationClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DeviceInstallation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DeviceInstallation) Unwrap() *DeviceInstallation {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("dao: DeviceInstallation is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DeviceInstallation) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceInstallation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("create_time=")
	builder.WriteString(di.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", di.CreatorID))
	builder.WriteString(", ")
	if v := di.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", di.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(di.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", di.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("area_id=")
	builder.WriteString(fmt.Sprintf("%v", di.AreaID))
	builder.WriteString(", ")
	builder.WriteString("alias_name=")
	builder.WriteString(di.AliasName)
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", di.Longitude))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", di.Latitude))
	builder.WriteString(", ")
	builder.WriteString("location_data=")
	builder.WriteString(di.LocationData)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(di.Location)
	builder.WriteString(", ")
	builder.WriteString("installer=")
	builder.WriteString(di.Installer)
	builder.WriteString(", ")
	builder.WriteString("install_time=")
	builder.WriteString(di.InstallTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceInstallations is a parsable slice of DeviceInstallation.
type DeviceInstallations []*DeviceInstallation
