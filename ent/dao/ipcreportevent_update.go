// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/ipcreportevent"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// IPCReportEventUpdate is the builder for updating IPCReportEvent entities.
type IPCReportEventUpdate struct {
	config
	hooks    []Hook
	mutation *IPCReportEventMutation
}

// Where appends a list predicates to the IPCReportEventUpdate builder.
func (ireu *IPCReportEventUpdate) Where(ps ...predicate.IPCReportEvent) *IPCReportEventUpdate {
	ireu.mutation.Where(ps...)
	return ireu
}

// SetDeletedAt sets the "deleted_at" field.
func (ireu *IPCReportEventUpdate) SetDeletedAt(t time.Time) *IPCReportEventUpdate {
	ireu.mutation.SetDeletedAt(t)
	return ireu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableDeletedAt(t *time.Time) *IPCReportEventUpdate {
	if t != nil {
		ireu.SetDeletedAt(*t)
	}
	return ireu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ireu *IPCReportEventUpdate) ClearDeletedAt() *IPCReportEventUpdate {
	ireu.mutation.ClearDeletedAt()
	return ireu
}

// SetUpdatedBy sets the "updated_by" field.
func (ireu *IPCReportEventUpdate) SetUpdatedBy(i int) *IPCReportEventUpdate {
	ireu.mutation.SetUpdatedBy(i)
	return ireu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableUpdatedBy(i *int) *IPCReportEventUpdate {
	if i != nil {
		ireu.SetUpdatedBy(*i)
	}
	return ireu
}

// SetUpdatedAt sets the "updated_at" field.
func (ireu *IPCReportEventUpdate) SetUpdatedAt(t time.Time) *IPCReportEventUpdate {
	ireu.mutation.SetUpdatedAt(t)
	return ireu
}

// SetEventType sets the "event_type" field.
func (ireu *IPCReportEventUpdate) SetEventType(eret enums.IPCReportEventType) *IPCReportEventUpdate {
	ireu.mutation.ResetEventType()
	ireu.mutation.SetEventType(eret)
	return ireu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableEventType(eret *enums.IPCReportEventType) *IPCReportEventUpdate {
	if eret != nil {
		ireu.SetEventType(*eret)
	}
	return ireu
}

// AddEventType adds eret to the "event_type" field.
func (ireu *IPCReportEventUpdate) AddEventType(eret enums.IPCReportEventType) *IPCReportEventUpdate {
	ireu.mutation.AddEventType(eret)
	return ireu
}

// SetEventStatus sets the "event_status" field.
func (ireu *IPCReportEventUpdate) SetEventStatus(eres enums.IPCReportEventStatus) *IPCReportEventUpdate {
	ireu.mutation.ResetEventStatus()
	ireu.mutation.SetEventStatus(eres)
	return ireu
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableEventStatus(eres *enums.IPCReportEventStatus) *IPCReportEventUpdate {
	if eres != nil {
		ireu.SetEventStatus(*eres)
	}
	return ireu
}

// AddEventStatus adds eres to the "event_status" field.
func (ireu *IPCReportEventUpdate) AddEventStatus(eres enums.IPCReportEventStatus) *IPCReportEventUpdate {
	ireu.mutation.AddEventStatus(eres)
	return ireu
}

// SetImages sets the "images" field.
func (ireu *IPCReportEventUpdate) SetImages(ti []*types.UploadedImage) *IPCReportEventUpdate {
	ireu.mutation.SetImages(ti)
	return ireu
}

// AppendImages appends ti to the "images" field.
func (ireu *IPCReportEventUpdate) AppendImages(ti []*types.UploadedImage) *IPCReportEventUpdate {
	ireu.mutation.AppendImages(ti)
	return ireu
}

// ClearImages clears the value of the "images" field.
func (ireu *IPCReportEventUpdate) ClearImages() *IPCReportEventUpdate {
	ireu.mutation.ClearImages()
	return ireu
}

// SetLabeledImages sets the "labeled_images" field.
func (ireu *IPCReportEventUpdate) SetLabeledImages(ti []*types.UploadedImage) *IPCReportEventUpdate {
	ireu.mutation.SetLabeledImages(ti)
	return ireu
}

// AppendLabeledImages appends ti to the "labeled_images" field.
func (ireu *IPCReportEventUpdate) AppendLabeledImages(ti []*types.UploadedImage) *IPCReportEventUpdate {
	ireu.mutation.AppendLabeledImages(ti)
	return ireu
}

// ClearLabeledImages clears the value of the "labeled_images" field.
func (ireu *IPCReportEventUpdate) ClearLabeledImages() *IPCReportEventUpdate {
	ireu.mutation.ClearLabeledImages()
	return ireu
}

// SetVideoID sets the "video_id" field.
func (ireu *IPCReportEventUpdate) SetVideoID(i int) *IPCReportEventUpdate {
	ireu.mutation.SetVideoID(i)
	return ireu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableVideoID(i *int) *IPCReportEventUpdate {
	if i != nil {
		ireu.SetVideoID(*i)
	}
	return ireu
}

// ClearVideoID clears the value of the "video_id" field.
func (ireu *IPCReportEventUpdate) ClearVideoID() *IPCReportEventUpdate {
	ireu.mutation.ClearVideoID()
	return ireu
}

// SetDescription sets the "description" field.
func (ireu *IPCReportEventUpdate) SetDescription(s string) *IPCReportEventUpdate {
	ireu.mutation.SetDescription(s)
	return ireu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableDescription(s *string) *IPCReportEventUpdate {
	if s != nil {
		ireu.SetDescription(*s)
	}
	return ireu
}

// ClearDescription clears the value of the "description" field.
func (ireu *IPCReportEventUpdate) ClearDescription() *IPCReportEventUpdate {
	ireu.mutation.ClearDescription()
	return ireu
}

// SetRawData sets the "raw_data" field.
func (ireu *IPCReportEventUpdate) SetRawData(s string) *IPCReportEventUpdate {
	ireu.mutation.SetRawData(s)
	return ireu
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (ireu *IPCReportEventUpdate) SetNillableRawData(s *string) *IPCReportEventUpdate {
	if s != nil {
		ireu.SetRawData(*s)
	}
	return ireu
}

// ClearRawData clears the value of the "raw_data" field.
func (ireu *IPCReportEventUpdate) ClearRawData() *IPCReportEventUpdate {
	ireu.mutation.ClearRawData()
	return ireu
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ireu *IPCReportEventUpdate) SetUpdaterID(id int) *IPCReportEventUpdate {
	ireu.mutation.SetUpdaterID(id)
	return ireu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ireu *IPCReportEventUpdate) SetUpdater(a *Admin) *IPCReportEventUpdate {
	return ireu.SetUpdaterID(a.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (ireu *IPCReportEventUpdate) SetVideo(v *Video) *IPCReportEventUpdate {
	return ireu.SetVideoID(v.ID)
}

// Mutation returns the IPCReportEventMutation object of the builder.
func (ireu *IPCReportEventUpdate) Mutation() *IPCReportEventMutation {
	return ireu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ireu *IPCReportEventUpdate) ClearUpdater() *IPCReportEventUpdate {
	ireu.mutation.ClearUpdater()
	return ireu
}

// ClearVideo clears the "video" edge to the Video entity.
func (ireu *IPCReportEventUpdate) ClearVideo() *IPCReportEventUpdate {
	ireu.mutation.ClearVideo()
	return ireu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ireu *IPCReportEventUpdate) Save(ctx context.Context) (int, error) {
	if err := ireu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ireu.sqlSave, ireu.mutation, ireu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ireu *IPCReportEventUpdate) SaveX(ctx context.Context) int {
	affected, err := ireu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ireu *IPCReportEventUpdate) Exec(ctx context.Context) error {
	_, err := ireu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ireu *IPCReportEventUpdate) ExecX(ctx context.Context) {
	if err := ireu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ireu *IPCReportEventUpdate) defaults() error {
	if _, ok := ireu.mutation.UpdatedAt(); !ok {
		if ipcreportevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcreportevent.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcreportevent.UpdateDefaultUpdatedAt()
		ireu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ireu *IPCReportEventUpdate) check() error {
	if v, ok := ireu.mutation.UpdatedBy(); ok {
		if err := ipcreportevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.updated_by": %w`, err)}
		}
	}
	if v, ok := ireu.mutation.EventType(); ok {
		if err := ipcreportevent.EventTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_type": %w`, err)}
		}
	}
	if v, ok := ireu.mutation.EventStatus(); ok {
		if err := ipcreportevent.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_status": %w`, err)}
		}
	}
	if v, ok := ireu.mutation.VideoID(); ok {
		if err := ipcreportevent.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.video_id": %w`, err)}
		}
	}
	if _, ok := ireu.mutation.CreatorID(); ireu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCReportEvent.creator"`)
	}
	if _, ok := ireu.mutation.UpdaterID(); ireu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCReportEvent.updater"`)
	}
	return nil
}

func (ireu *IPCReportEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ireu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipcreportevent.Table, ipcreportevent.Columns, sqlgraph.NewFieldSpec(ipcreportevent.FieldID, field.TypeInt))
	if ps := ireu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ireu.mutation.DeletedAt(); ok {
		_spec.SetField(ipcreportevent.FieldDeletedAt, field.TypeTime, value)
	}
	if ireu.mutation.DeletedAtCleared() {
		_spec.ClearField(ipcreportevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ireu.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcreportevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ireu.mutation.EventType(); ok {
		_spec.SetField(ipcreportevent.FieldEventType, field.TypeInt, value)
	}
	if value, ok := ireu.mutation.AddedEventType(); ok {
		_spec.AddField(ipcreportevent.FieldEventType, field.TypeInt, value)
	}
	if value, ok := ireu.mutation.EventStatus(); ok {
		_spec.SetField(ipcreportevent.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := ireu.mutation.AddedEventStatus(); ok {
		_spec.AddField(ipcreportevent.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := ireu.mutation.Images(); ok {
		_spec.SetField(ipcreportevent.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ireu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcreportevent.FieldImages, value)
		})
	}
	if ireu.mutation.ImagesCleared() {
		_spec.ClearField(ipcreportevent.FieldImages, field.TypeJSON)
	}
	if value, ok := ireu.mutation.LabeledImages(); ok {
		_spec.SetField(ipcreportevent.FieldLabeledImages, field.TypeJSON, value)
	}
	if value, ok := ireu.mutation.AppendedLabeledImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcreportevent.FieldLabeledImages, value)
		})
	}
	if ireu.mutation.LabeledImagesCleared() {
		_spec.ClearField(ipcreportevent.FieldLabeledImages, field.TypeJSON)
	}
	if value, ok := ireu.mutation.Description(); ok {
		_spec.SetField(ipcreportevent.FieldDescription, field.TypeString, value)
	}
	if ireu.mutation.DescriptionCleared() {
		_spec.ClearField(ipcreportevent.FieldDescription, field.TypeString)
	}
	if value, ok := ireu.mutation.RawData(); ok {
		_spec.SetField(ipcreportevent.FieldRawData, field.TypeString, value)
	}
	if ireu.mutation.RawDataCleared() {
		_spec.ClearField(ipcreportevent.FieldRawData, field.TypeString)
	}
	if ireu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ireu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ireu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.VideoTable,
			Columns: []string{ipcreportevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ireu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.VideoTable,
			Columns: []string{ipcreportevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ireu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipcreportevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ireu.mutation.done = true
	return n, nil
}

// IPCReportEventUpdateOne is the builder for updating a single IPCReportEvent entity.
type IPCReportEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPCReportEventMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ireuo *IPCReportEventUpdateOne) SetDeletedAt(t time.Time) *IPCReportEventUpdateOne {
	ireuo.mutation.SetDeletedAt(t)
	return ireuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableDeletedAt(t *time.Time) *IPCReportEventUpdateOne {
	if t != nil {
		ireuo.SetDeletedAt(*t)
	}
	return ireuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ireuo *IPCReportEventUpdateOne) ClearDeletedAt() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearDeletedAt()
	return ireuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ireuo *IPCReportEventUpdateOne) SetUpdatedBy(i int) *IPCReportEventUpdateOne {
	ireuo.mutation.SetUpdatedBy(i)
	return ireuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableUpdatedBy(i *int) *IPCReportEventUpdateOne {
	if i != nil {
		ireuo.SetUpdatedBy(*i)
	}
	return ireuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ireuo *IPCReportEventUpdateOne) SetUpdatedAt(t time.Time) *IPCReportEventUpdateOne {
	ireuo.mutation.SetUpdatedAt(t)
	return ireuo
}

// SetEventType sets the "event_type" field.
func (ireuo *IPCReportEventUpdateOne) SetEventType(eret enums.IPCReportEventType) *IPCReportEventUpdateOne {
	ireuo.mutation.ResetEventType()
	ireuo.mutation.SetEventType(eret)
	return ireuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableEventType(eret *enums.IPCReportEventType) *IPCReportEventUpdateOne {
	if eret != nil {
		ireuo.SetEventType(*eret)
	}
	return ireuo
}

// AddEventType adds eret to the "event_type" field.
func (ireuo *IPCReportEventUpdateOne) AddEventType(eret enums.IPCReportEventType) *IPCReportEventUpdateOne {
	ireuo.mutation.AddEventType(eret)
	return ireuo
}

// SetEventStatus sets the "event_status" field.
func (ireuo *IPCReportEventUpdateOne) SetEventStatus(eres enums.IPCReportEventStatus) *IPCReportEventUpdateOne {
	ireuo.mutation.ResetEventStatus()
	ireuo.mutation.SetEventStatus(eres)
	return ireuo
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableEventStatus(eres *enums.IPCReportEventStatus) *IPCReportEventUpdateOne {
	if eres != nil {
		ireuo.SetEventStatus(*eres)
	}
	return ireuo
}

// AddEventStatus adds eres to the "event_status" field.
func (ireuo *IPCReportEventUpdateOne) AddEventStatus(eres enums.IPCReportEventStatus) *IPCReportEventUpdateOne {
	ireuo.mutation.AddEventStatus(eres)
	return ireuo
}

// SetImages sets the "images" field.
func (ireuo *IPCReportEventUpdateOne) SetImages(ti []*types.UploadedImage) *IPCReportEventUpdateOne {
	ireuo.mutation.SetImages(ti)
	return ireuo
}

// AppendImages appends ti to the "images" field.
func (ireuo *IPCReportEventUpdateOne) AppendImages(ti []*types.UploadedImage) *IPCReportEventUpdateOne {
	ireuo.mutation.AppendImages(ti)
	return ireuo
}

// ClearImages clears the value of the "images" field.
func (ireuo *IPCReportEventUpdateOne) ClearImages() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearImages()
	return ireuo
}

// SetLabeledImages sets the "labeled_images" field.
func (ireuo *IPCReportEventUpdateOne) SetLabeledImages(ti []*types.UploadedImage) *IPCReportEventUpdateOne {
	ireuo.mutation.SetLabeledImages(ti)
	return ireuo
}

// AppendLabeledImages appends ti to the "labeled_images" field.
func (ireuo *IPCReportEventUpdateOne) AppendLabeledImages(ti []*types.UploadedImage) *IPCReportEventUpdateOne {
	ireuo.mutation.AppendLabeledImages(ti)
	return ireuo
}

// ClearLabeledImages clears the value of the "labeled_images" field.
func (ireuo *IPCReportEventUpdateOne) ClearLabeledImages() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearLabeledImages()
	return ireuo
}

// SetVideoID sets the "video_id" field.
func (ireuo *IPCReportEventUpdateOne) SetVideoID(i int) *IPCReportEventUpdateOne {
	ireuo.mutation.SetVideoID(i)
	return ireuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableVideoID(i *int) *IPCReportEventUpdateOne {
	if i != nil {
		ireuo.SetVideoID(*i)
	}
	return ireuo
}

// ClearVideoID clears the value of the "video_id" field.
func (ireuo *IPCReportEventUpdateOne) ClearVideoID() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearVideoID()
	return ireuo
}

// SetDescription sets the "description" field.
func (ireuo *IPCReportEventUpdateOne) SetDescription(s string) *IPCReportEventUpdateOne {
	ireuo.mutation.SetDescription(s)
	return ireuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableDescription(s *string) *IPCReportEventUpdateOne {
	if s != nil {
		ireuo.SetDescription(*s)
	}
	return ireuo
}

// ClearDescription clears the value of the "description" field.
func (ireuo *IPCReportEventUpdateOne) ClearDescription() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearDescription()
	return ireuo
}

// SetRawData sets the "raw_data" field.
func (ireuo *IPCReportEventUpdateOne) SetRawData(s string) *IPCReportEventUpdateOne {
	ireuo.mutation.SetRawData(s)
	return ireuo
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (ireuo *IPCReportEventUpdateOne) SetNillableRawData(s *string) *IPCReportEventUpdateOne {
	if s != nil {
		ireuo.SetRawData(*s)
	}
	return ireuo
}

// ClearRawData clears the value of the "raw_data" field.
func (ireuo *IPCReportEventUpdateOne) ClearRawData() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearRawData()
	return ireuo
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ireuo *IPCReportEventUpdateOne) SetUpdaterID(id int) *IPCReportEventUpdateOne {
	ireuo.mutation.SetUpdaterID(id)
	return ireuo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ireuo *IPCReportEventUpdateOne) SetUpdater(a *Admin) *IPCReportEventUpdateOne {
	return ireuo.SetUpdaterID(a.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (ireuo *IPCReportEventUpdateOne) SetVideo(v *Video) *IPCReportEventUpdateOne {
	return ireuo.SetVideoID(v.ID)
}

// Mutation returns the IPCReportEventMutation object of the builder.
func (ireuo *IPCReportEventUpdateOne) Mutation() *IPCReportEventMutation {
	return ireuo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ireuo *IPCReportEventUpdateOne) ClearUpdater() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearUpdater()
	return ireuo
}

// ClearVideo clears the "video" edge to the Video entity.
func (ireuo *IPCReportEventUpdateOne) ClearVideo() *IPCReportEventUpdateOne {
	ireuo.mutation.ClearVideo()
	return ireuo
}

// Where appends a list predicates to the IPCReportEventUpdate builder.
func (ireuo *IPCReportEventUpdateOne) Where(ps ...predicate.IPCReportEvent) *IPCReportEventUpdateOne {
	ireuo.mutation.Where(ps...)
	return ireuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ireuo *IPCReportEventUpdateOne) Select(field string, fields ...string) *IPCReportEventUpdateOne {
	ireuo.fields = append([]string{field}, fields...)
	return ireuo
}

// Save executes the query and returns the updated IPCReportEvent entity.
func (ireuo *IPCReportEventUpdateOne) Save(ctx context.Context) (*IPCReportEvent, error) {
	if err := ireuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ireuo.sqlSave, ireuo.mutation, ireuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ireuo *IPCReportEventUpdateOne) SaveX(ctx context.Context) *IPCReportEvent {
	node, err := ireuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ireuo *IPCReportEventUpdateOne) Exec(ctx context.Context) error {
	_, err := ireuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ireuo *IPCReportEventUpdateOne) ExecX(ctx context.Context) {
	if err := ireuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ireuo *IPCReportEventUpdateOne) defaults() error {
	if _, ok := ireuo.mutation.UpdatedAt(); !ok {
		if ipcreportevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcreportevent.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcreportevent.UpdateDefaultUpdatedAt()
		ireuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ireuo *IPCReportEventUpdateOne) check() error {
	if v, ok := ireuo.mutation.UpdatedBy(); ok {
		if err := ipcreportevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.updated_by": %w`, err)}
		}
	}
	if v, ok := ireuo.mutation.EventType(); ok {
		if err := ipcreportevent.EventTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_type": %w`, err)}
		}
	}
	if v, ok := ireuo.mutation.EventStatus(); ok {
		if err := ipcreportevent.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_status": %w`, err)}
		}
	}
	if v, ok := ireuo.mutation.VideoID(); ok {
		if err := ipcreportevent.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.video_id": %w`, err)}
		}
	}
	if _, ok := ireuo.mutation.CreatorID(); ireuo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCReportEvent.creator"`)
	}
	if _, ok := ireuo.mutation.UpdaterID(); ireuo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCReportEvent.updater"`)
	}
	return nil
}

func (ireuo *IPCReportEventUpdateOne) sqlSave(ctx context.Context) (_node *IPCReportEvent, err error) {
	if err := ireuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipcreportevent.Table, ipcreportevent.Columns, sqlgraph.NewFieldSpec(ipcreportevent.FieldID, field.TypeInt))
	id, ok := ireuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "IPCReportEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ireuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipcreportevent.FieldID)
		for _, f := range fields {
			if !ipcreportevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != ipcreportevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ireuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ireuo.mutation.DeletedAt(); ok {
		_spec.SetField(ipcreportevent.FieldDeletedAt, field.TypeTime, value)
	}
	if ireuo.mutation.DeletedAtCleared() {
		_spec.ClearField(ipcreportevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ireuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcreportevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ireuo.mutation.EventType(); ok {
		_spec.SetField(ipcreportevent.FieldEventType, field.TypeInt, value)
	}
	if value, ok := ireuo.mutation.AddedEventType(); ok {
		_spec.AddField(ipcreportevent.FieldEventType, field.TypeInt, value)
	}
	if value, ok := ireuo.mutation.EventStatus(); ok {
		_spec.SetField(ipcreportevent.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := ireuo.mutation.AddedEventStatus(); ok {
		_spec.AddField(ipcreportevent.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := ireuo.mutation.Images(); ok {
		_spec.SetField(ipcreportevent.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ireuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcreportevent.FieldImages, value)
		})
	}
	if ireuo.mutation.ImagesCleared() {
		_spec.ClearField(ipcreportevent.FieldImages, field.TypeJSON)
	}
	if value, ok := ireuo.mutation.LabeledImages(); ok {
		_spec.SetField(ipcreportevent.FieldLabeledImages, field.TypeJSON, value)
	}
	if value, ok := ireuo.mutation.AppendedLabeledImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcreportevent.FieldLabeledImages, value)
		})
	}
	if ireuo.mutation.LabeledImagesCleared() {
		_spec.ClearField(ipcreportevent.FieldLabeledImages, field.TypeJSON)
	}
	if value, ok := ireuo.mutation.Description(); ok {
		_spec.SetField(ipcreportevent.FieldDescription, field.TypeString, value)
	}
	if ireuo.mutation.DescriptionCleared() {
		_spec.ClearField(ipcreportevent.FieldDescription, field.TypeString)
	}
	if value, ok := ireuo.mutation.RawData(); ok {
		_spec.SetField(ipcreportevent.FieldRawData, field.TypeString, value)
	}
	if ireuo.mutation.RawDataCleared() {
		_spec.ClearField(ipcreportevent.FieldRawData, field.TypeString)
	}
	if ireuo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ireuo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ireuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.VideoTable,
			Columns: []string{ipcreportevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ireuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.VideoTable,
			Columns: []string{ipcreportevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPCReportEvent{config: ireuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ireuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipcreportevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ireuo.mutation.done = true
	return _node, nil
}
