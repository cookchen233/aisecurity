// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SweepResultDetails is the model entity for the SweepResultDetails schema.
type SweepResultDetails struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time"`
	// 创建者
	CreatorID int `json:"creator_id"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time"`
	// 最后更新者
	UpdaterID int `json:"updater_id"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time"`
	// 排查模板ID
	SweepID int `json:"sweep_id"`
	// 排查任务ID
	SweepScheduleID int `json:"sweep_schedule_id"`
	// 排查结果ID
	SweepResultID int `json:"sweep_result_id"`
	// 排查项标题
	Title string `json:"title" validate:"required"`
	// 排查结果
	Result int `json:"result"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SweepResultDetailsQuery when eager-loading is set.
	Edges        SweepResultDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SweepResultDetailsEdges holds the relations/edges for other nodes in the graph.
type SweepResultDetailsEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Sweep holds the value of the sweep edge.
	Sweep *Sweep `json:"sweep,omitempty"`
	// SweepSchedule holds the value of the sweep_schedule edge.
	SweepSchedule *SweepSchedule `json:"sweep_schedule,omitempty"`
	// SweepResult holds the value of the sweep_result edge.
	SweepResult *SweepResult `json:"sweep_result,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepResultDetailsEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepResultDetailsEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// SweepOrErr returns the Sweep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepResultDetailsEdges) SweepOrErr() (*Sweep, error) {
	if e.loadedTypes[2] {
		if e.Sweep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sweep.Label}
		}
		return e.Sweep, nil
	}
	return nil, &NotLoadedError{edge: "sweep"}
}

// SweepScheduleOrErr returns the SweepSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepResultDetailsEdges) SweepScheduleOrErr() (*SweepSchedule, error) {
	if e.loadedTypes[3] {
		if e.SweepSchedule == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sweepschedule.Label}
		}
		return e.SweepSchedule, nil
	}
	return nil, &NotLoadedError{edge: "sweep_schedule"}
}

// SweepResultOrErr returns the SweepResult value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepResultDetailsEdges) SweepResultOrErr() (*SweepResult, error) {
	if e.loadedTypes[4] {
		if e.SweepResult == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sweepresult.Label}
		}
		return e.SweepResult, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SweepResultDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sweepresultdetails.FieldID, sweepresultdetails.FieldCreatorID, sweepresultdetails.FieldUpdaterID, sweepresultdetails.FieldSweepID, sweepresultdetails.FieldSweepScheduleID, sweepresultdetails.FieldSweepResultID, sweepresultdetails.FieldResult:
			values[i] = new(sql.NullInt64)
		case sweepresultdetails.FieldTitle:
			values[i] = new(sql.NullString)
		case sweepresultdetails.FieldCreateTime, sweepresultdetails.FieldDeleteTime, sweepresultdetails.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SweepResultDetails fields.
func (srd *SweepResultDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sweepresultdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			srd.ID = int(value.Int64)
		case sweepresultdetails.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				srd.CreateTime = value.Time
			}
		case sweepresultdetails.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				srd.CreatorID = int(value.Int64)
			}
		case sweepresultdetails.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				srd.DeleteTime = new(time.Time)
				*srd.DeleteTime = value.Time
			}
		case sweepresultdetails.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				srd.UpdaterID = int(value.Int64)
			}
		case sweepresultdetails.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				srd.UpdateTime = value.Time
			}
		case sweepresultdetails.FieldSweepID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sweep_id", values[i])
			} else if value.Valid {
				srd.SweepID = int(value.Int64)
			}
		case sweepresultdetails.FieldSweepScheduleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sweep_schedule_id", values[i])
			} else if value.Valid {
				srd.SweepScheduleID = int(value.Int64)
			}
		case sweepresultdetails.FieldSweepResultID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sweep_result_id", values[i])
			} else if value.Valid {
				srd.SweepResultID = int(value.Int64)
			}
		case sweepresultdetails.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				srd.Title = value.String
			}
		case sweepresultdetails.FieldResult:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				srd.Result = int(value.Int64)
			}
		default:
			srd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SweepResultDetails.
// This includes values selected through modifiers, order, etc.
func (srd *SweepResultDetails) Value(name string) (ent.Value, error) {
	return srd.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the SweepResultDetails entity.
func (srd *SweepResultDetails) QueryCreator() *AdminQuery {
	return NewSweepResultDetailsClient(srd.config).QueryCreator(srd)
}

// QueryUpdater queries the "updater" edge of the SweepResultDetails entity.
func (srd *SweepResultDetails) QueryUpdater() *AdminQuery {
	return NewSweepResultDetailsClient(srd.config).QueryUpdater(srd)
}

// QuerySweep queries the "sweep" edge of the SweepResultDetails entity.
func (srd *SweepResultDetails) QuerySweep() *SweepQuery {
	return NewSweepResultDetailsClient(srd.config).QuerySweep(srd)
}

// QuerySweepSchedule queries the "sweep_schedule" edge of the SweepResultDetails entity.
func (srd *SweepResultDetails) QuerySweepSchedule() *SweepScheduleQuery {
	return NewSweepResultDetailsClient(srd.config).QuerySweepSchedule(srd)
}

// QuerySweepResult queries the "sweep_result" edge of the SweepResultDetails entity.
func (srd *SweepResultDetails) QuerySweepResult() *SweepResultQuery {
	return NewSweepResultDetailsClient(srd.config).QuerySweepResult(srd)
}

// Update returns a builder for updating this SweepResultDetails.
// Note that you need to call SweepResultDetails.Unwrap() before calling this method if this SweepResultDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (srd *SweepResultDetails) Update() *SweepResultDetailsUpdateOne {
	return NewSweepResultDetailsClient(srd.config).UpdateOne(srd)
}

// Unwrap unwraps the SweepResultDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (srd *SweepResultDetails) Unwrap() *SweepResultDetails {
	_tx, ok := srd.config.driver.(*txDriver)
	if !ok {
		panic("dao: SweepResultDetails is not a transactional entity")
	}
	srd.config.driver = _tx.drv
	return srd
}

// String implements the fmt.Stringer.
func (srd *SweepResultDetails) String() string {
	var builder strings.Builder
	builder.WriteString("SweepResultDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", srd.ID))
	builder.WriteString("create_time=")
	builder.WriteString(srd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", srd.CreatorID))
	builder.WriteString(", ")
	if v := srd.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", srd.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(srd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sweep_id=")
	builder.WriteString(fmt.Sprintf("%v", srd.SweepID))
	builder.WriteString(", ")
	builder.WriteString("sweep_schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", srd.SweepScheduleID))
	builder.WriteString(", ")
	builder.WriteString("sweep_result_id=")
	builder.WriteString(fmt.Sprintf("%v", srd.SweepResultID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(srd.Title)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", srd.Result))
	builder.WriteByte(')')
	return builder.String()
}

// SweepResultDetailsSlice is a parsable slice of SweepResultDetails.
type SweepResultDetailsSlice []*SweepResultDetails
