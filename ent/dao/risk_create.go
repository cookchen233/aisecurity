// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/properties"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RiskCreate is the builder for creating a Risk entity.
type RiskCreate struct {
	config
	mutation *RiskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RiskCreate) SetCreatedAt(t time.Time) *RiskCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableCreatedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RiskCreate) SetCreatedBy(i int) *RiskCreate {
	rc.mutation.SetCreatedBy(i)
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RiskCreate) SetDeletedAt(t time.Time) *RiskCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableDeletedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RiskCreate) SetUpdatedBy(i int) *RiskCreate {
	rc.mutation.SetUpdatedBy(i)
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RiskCreate) SetUpdatedAt(t time.Time) *RiskCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableUpdatedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetTitle sets the "title" field.
func (rc *RiskCreate) SetTitle(s string) *RiskCreate {
	rc.mutation.SetTitle(s)
	return rc
}

// SetContent sets the "content" field.
func (rc *RiskCreate) SetContent(s string) *RiskCreate {
	rc.mutation.SetContent(s)
	return rc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rc *RiskCreate) SetNillableContent(s *string) *RiskCreate {
	if s != nil {
		rc.SetContent(*s)
	}
	return rc
}

// SetImages sets the "images" field.
func (rc *RiskCreate) SetImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) *RiskCreate {
	rc.mutation.SetImages(s)
	return rc
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (rc *RiskCreate) SetRiskCategoryID(i int) *RiskCreate {
	rc.mutation.SetRiskCategoryID(i)
	return rc
}

// SetRiskLocationID sets the "risk_location_id" field.
func (rc *RiskCreate) SetRiskLocationID(i int) *RiskCreate {
	rc.mutation.SetRiskLocationID(i)
	return rc
}

// SetReporterID sets the "reporter_id" field.
func (rc *RiskCreate) SetReporterID(i int) *RiskCreate {
	rc.mutation.SetReporterID(i)
	return rc
}

// SetMaintainerID sets the "maintainer_id" field.
func (rc *RiskCreate) SetMaintainerID(i int) *RiskCreate {
	rc.mutation.SetMaintainerID(i)
	return rc
}

// SetMeasures sets the "measures" field.
func (rc *RiskCreate) SetMeasures(s string) *RiskCreate {
	rc.mutation.SetMeasures(s)
	return rc
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (rc *RiskCreate) SetNillableMeasures(s *string) *RiskCreate {
	if s != nil {
		rc.SetMeasures(*s)
	}
	return rc
}

// SetMaintainStatus sets the "maintain_status" field.
func (rc *RiskCreate) SetMaintainStatus(ps properties.MaintainStatus) *RiskCreate {
	rc.mutation.SetMaintainStatus(ps)
	return rc
}

// SetNillableMaintainStatus sets the "maintain_status" field if the given value is not nil.
func (rc *RiskCreate) SetNillableMaintainStatus(ps *properties.MaintainStatus) *RiskCreate {
	if ps != nil {
		rc.SetMaintainStatus(*ps)
	}
	return rc
}

// SetDueTime sets the "due_time" field.
func (rc *RiskCreate) SetDueTime(t time.Time) *RiskCreate {
	rc.mutation.SetDueTime(t)
	return rc
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (rc *RiskCreate) SetCreatorID(id int) *RiskCreate {
	rc.mutation.SetCreatorID(id)
	return rc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (rc *RiskCreate) SetCreator(a *Admin) *RiskCreate {
	return rc.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (rc *RiskCreate) SetUpdaterID(id int) *RiskCreate {
	rc.mutation.SetUpdaterID(id)
	return rc
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (rc *RiskCreate) SetUpdater(a *Admin) *RiskCreate {
	return rc.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (rc *RiskCreate) SetRiskCategory(r *RiskCategory) *RiskCreate {
	return rc.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (rc *RiskCreate) SetRiskLocation(r *RiskLocation) *RiskCreate {
	return rc.SetRiskLocationID(r.ID)
}

// SetReporter sets the "reporter" edge to the Employee entity.
func (rc *RiskCreate) SetReporter(e *Employee) *RiskCreate {
	return rc.SetReporterID(e.ID)
}

// SetMaintainer sets the "maintainer" edge to the Employee entity.
func (rc *RiskCreate) SetMaintainer(e *Employee) *RiskCreate {
	return rc.SetMaintainerID(e.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (rc *RiskCreate) Mutation() *RiskMutation {
	return rc.mutation
}

// Save creates the Risk in the database.
func (rc *RiskCreate) Save(ctx context.Context) (*Risk, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RiskCreate) SaveX(ctx context.Context) *Risk {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RiskCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RiskCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RiskCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if risk.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized risk.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := risk.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if risk.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized risk.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := risk.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.MaintainStatus(); !ok {
		v := risk.DefaultMaintainStatus
		rc.mutation.SetMaintainStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RiskCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "Risk.created_at"`)}
	}
	if _, ok := rc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "Risk.created_by"`)}
	}
	if v, ok := rc.mutation.CreatedBy(); ok {
		if err := risk.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "Risk.created_by": %w`, err)}
		}
	}
	if _, ok := rc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "Risk.updated_by"`)}
	}
	if v, ok := rc.mutation.UpdatedBy(); ok {
		if err := risk.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Risk.updated_by": %w`, err)}
		}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "Risk.updated_at"`)}
	}
	if _, ok := rc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`dao: missing required field "Risk.title"`)}
	}
	if v, ok := rc.mutation.Title(); ok {
		if err := risk.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`dao: validator failed for field "Risk.title": %w`, err)}
		}
	}
	if _, ok := rc.mutation.RiskCategoryID(); !ok {
		return &ValidationError{Name: "risk_category_id", err: errors.New(`dao: missing required field "Risk.risk_category_id"`)}
	}
	if v, ok := rc.mutation.RiskCategoryID(); ok {
		if err := risk.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_category_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.RiskLocationID(); !ok {
		return &ValidationError{Name: "risk_location_id", err: errors.New(`dao: missing required field "Risk.risk_location_id"`)}
	}
	if v, ok := rc.mutation.RiskLocationID(); ok {
		if err := risk.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_location_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ReporterID(); !ok {
		return &ValidationError{Name: "reporter_id", err: errors.New(`dao: missing required field "Risk.reporter_id"`)}
	}
	if v, ok := rc.mutation.ReporterID(); ok {
		if err := risk.ReporterIDValidator(v); err != nil {
			return &ValidationError{Name: "reporter_id", err: fmt.Errorf(`dao: validator failed for field "Risk.reporter_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.MaintainerID(); !ok {
		return &ValidationError{Name: "maintainer_id", err: errors.New(`dao: missing required field "Risk.maintainer_id"`)}
	}
	if v, ok := rc.mutation.MaintainerID(); ok {
		if err := risk.MaintainerIDValidator(v); err != nil {
			return &ValidationError{Name: "maintainer_id", err: fmt.Errorf(`dao: validator failed for field "Risk.maintainer_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.MaintainStatus(); !ok {
		return &ValidationError{Name: "maintain_status", err: errors.New(`dao: missing required field "Risk.maintain_status"`)}
	}
	if v, ok := rc.mutation.MaintainStatus(); ok {
		if err := risk.MaintainStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "maintain_status", err: fmt.Errorf(`dao: validator failed for field "Risk.maintain_status": %w`, err)}
		}
	}
	if _, ok := rc.mutation.DueTime(); !ok {
		return &ValidationError{Name: "due_time", err: errors.New(`dao: missing required field "Risk.due_time"`)}
	}
	if _, ok := rc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Risk.creator"`)}
	}
	if _, ok := rc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Risk.updater"`)}
	}
	if _, ok := rc.mutation.RiskCategoryID(); !ok {
		return &ValidationError{Name: "risk_category", err: errors.New(`dao: missing required edge "Risk.risk_category"`)}
	}
	if _, ok := rc.mutation.RiskLocationID(); !ok {
		return &ValidationError{Name: "risk_location", err: errors.New(`dao: missing required edge "Risk.risk_location"`)}
	}
	if _, ok := rc.mutation.ReporterID(); !ok {
		return &ValidationError{Name: "reporter", err: errors.New(`dao: missing required edge "Risk.reporter"`)}
	}
	if _, ok := rc.mutation.MaintainerID(); !ok {
		return &ValidationError{Name: "maintainer", err: errors.New(`dao: missing required edge "Risk.maintainer"`)}
	}
	return nil
}

func (rc *RiskCreate) sqlSave(ctx context.Context) (*Risk, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RiskCreate) createSpec() (*Risk, *sqlgraph.CreateSpec) {
	var (
		_node = &Risk{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(risk.Table, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(risk.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Title(); ok {
		_spec.SetField(risk.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rc.mutation.Content(); ok {
		_spec.SetField(risk.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := rc.mutation.Images(); ok {
		_spec.SetField(risk.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := rc.mutation.Measures(); ok {
		_spec.SetField(risk.FieldMeasures, field.TypeString, value)
		_node.Measures = value
	}
	if value, ok := rc.mutation.MaintainStatus(); ok {
		_spec.SetField(risk.FieldMaintainStatus, field.TypeInt, value)
		_node.MaintainStatus = value
	}
	if value, ok := rc.mutation.DueTime(); ok {
		_spec.SetField(risk.FieldDueTime, field.TypeTime, value)
		_node.DueTime = value
	}
	if nodes := rc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.CreatorTable,
			Columns: []string{risk.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiskCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiskLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.ReporterTable,
			Columns: []string{risk.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReporterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MaintainerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RiskCreateBulk is the builder for creating many Risk entities in bulk.
type RiskCreateBulk struct {
	config
	err      error
	builders []*RiskCreate
}

// Save creates the Risk entities in the database.
func (rcb *RiskCreateBulk) Save(ctx context.Context) ([]*Risk, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Risk, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RiskCreateBulk) SaveX(ctx context.Context) []*Risk {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RiskCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RiskCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
