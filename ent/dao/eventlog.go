// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/enums"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventLog is the model entity for the EventLog schema.
type EventLog struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time"`
	// 创建者
	CreatorID int `json:"creator_id"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time"`
	// 最后更新者
	UpdaterID int `json:"updater_id"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time"`
	// 设备ID
	DeviceID int `json:"device_id" validate:"required"`
	// 事件ID
	EventID int `json:"event_id" validate:"required"`
	// 当事人
	ActorID int `json:"actor_id"`
	// 当事人2
	Actor2ID int `json:"actor2_id"`
	// 日志类型
	LogType enums.EventLogType `json:"log_type" validate:"required"`
	// 备注
	Notes string `json:"notes"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventLogQuery when eager-loading is set.
	Edges        EventLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventLogEdges holds the relations/edges for other nodes in the graph.
type EventLogEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// Actor holds the value of the actor edge.
	Actor *Admin `json:"actor,omitempty"`
	// Actor2 holds the value of the actor2 edge.
	Actor2 *Admin `json:"actor2,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[2] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[3] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// ActorOrErr returns the Actor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) ActorOrErr() (*Admin, error) {
	if e.loadedTypes[4] {
		if e.Actor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Actor, nil
	}
	return nil, &NotLoadedError{edge: "actor"}
}

// Actor2OrErr returns the Actor2 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) Actor2OrErr() (*Admin, error) {
	if e.loadedTypes[5] {
		if e.Actor2 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Actor2, nil
	}
	return nil, &NotLoadedError{edge: "actor2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventlog.FieldID, eventlog.FieldCreatorID, eventlog.FieldUpdaterID, eventlog.FieldDeviceID, eventlog.FieldEventID, eventlog.FieldActorID, eventlog.FieldActor2ID, eventlog.FieldLogType:
			values[i] = new(sql.NullInt64)
		case eventlog.FieldNotes:
			values[i] = new(sql.NullString)
		case eventlog.FieldCreateTime, eventlog.FieldDeleteTime, eventlog.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventLog fields.
func (el *EventLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int(value.Int64)
		case eventlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				el.CreateTime = value.Time
			}
		case eventlog.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				el.CreatorID = int(value.Int64)
			}
		case eventlog.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				el.DeleteTime = new(time.Time)
				*el.DeleteTime = value.Time
			}
		case eventlog.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				el.UpdaterID = int(value.Int64)
			}
		case eventlog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				el.UpdateTime = value.Time
			}
		case eventlog.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				el.DeviceID = int(value.Int64)
			}
		case eventlog.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				el.EventID = int(value.Int64)
			}
		case eventlog.FieldActorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field actor_id", values[i])
			} else if value.Valid {
				el.ActorID = int(value.Int64)
			}
		case eventlog.FieldActor2ID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field actor2_id", values[i])
			} else if value.Valid {
				el.Actor2ID = int(value.Int64)
			}
		case eventlog.FieldLogType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field log_type", values[i])
			} else if value.Valid {
				el.LogType = enums.EventLogType(value.Int64)
			}
		case eventlog.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				el.Notes = value.String
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventLog.
// This includes values selected through modifiers, order, etc.
func (el *EventLog) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the EventLog entity.
func (el *EventLog) QueryCreator() *AdminQuery {
	return NewEventLogClient(el.config).QueryCreator(el)
}

// QueryUpdater queries the "updater" edge of the EventLog entity.
func (el *EventLog) QueryUpdater() *AdminQuery {
	return NewEventLogClient(el.config).QueryUpdater(el)
}

// QueryEvent queries the "event" edge of the EventLog entity.
func (el *EventLog) QueryEvent() *EventQuery {
	return NewEventLogClient(el.config).QueryEvent(el)
}

// QueryDevice queries the "device" edge of the EventLog entity.
func (el *EventLog) QueryDevice() *DeviceQuery {
	return NewEventLogClient(el.config).QueryDevice(el)
}

// QueryActor queries the "actor" edge of the EventLog entity.
func (el *EventLog) QueryActor() *AdminQuery {
	return NewEventLogClient(el.config).QueryActor(el)
}

// QueryActor2 queries the "actor2" edge of the EventLog entity.
func (el *EventLog) QueryActor2() *AdminQuery {
	return NewEventLogClient(el.config).QueryActor2(el)
}

// Update returns a builder for updating this EventLog.
// Note that you need to call EventLog.Unwrap() before calling this method if this EventLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EventLog) Update() *EventLogUpdateOne {
	return NewEventLogClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EventLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EventLog) Unwrap() *EventLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("dao: EventLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EventLog) String() string {
	var builder strings.Builder
	builder.WriteString("EventLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("create_time=")
	builder.WriteString(el.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", el.CreatorID))
	builder.WriteString(", ")
	if v := el.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(el.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", el.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", el.EventID))
	builder.WriteString(", ")
	builder.WriteString("actor_id=")
	builder.WriteString(fmt.Sprintf("%v", el.ActorID))
	builder.WriteString(", ")
	builder.WriteString("actor2_id=")
	builder.WriteString(fmt.Sprintf("%v", el.Actor2ID))
	builder.WriteString(", ")
	builder.WriteString("log_type=")
	builder.WriteString(fmt.Sprintf("%v", el.LogType))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(el.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// EventLogs is a parsable slice of EventLog.
type EventLogs []*EventLog
