// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/ipcreportevent"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 9)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
		Type: "Admin",
		Fields: map[string]*sqlgraph.FieldSpec{
			admin.FieldCreatedAt: {Type: field.TypeTime, Column: admin.FieldCreatedAt},
			admin.FieldCreatedBy: {Type: field.TypeInt, Column: admin.FieldCreatedBy},
			admin.FieldDeletedAt: {Type: field.TypeTime, Column: admin.FieldDeletedAt},
			admin.FieldUpdatedBy: {Type: field.TypeInt, Column: admin.FieldUpdatedBy},
			admin.FieldUpdatedAt: {Type: field.TypeTime, Column: admin.FieldUpdatedAt},
			admin.FieldUsername:  {Type: field.TypeString, Column: admin.FieldUsername},
			admin.FieldPassword:  {Type: field.TypeString, Column: admin.FieldPassword},
			admin.FieldNickname:  {Type: field.TypeString, Column: admin.FieldNickname},
			admin.FieldRealName:  {Type: field.TypeString, Column: admin.FieldRealName},
			admin.FieldAvatar:    {Type: field.TypeString, Column: admin.FieldAvatar},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adminrole.Table,
			Columns: adminrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrole.FieldID,
			},
		},
		Type: "AdminRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			adminrole.FieldCreatedAt: {Type: field.TypeTime, Column: adminrole.FieldCreatedAt},
			adminrole.FieldCreatedBy: {Type: field.TypeInt, Column: adminrole.FieldCreatedBy},
			adminrole.FieldName:      {Type: field.TypeString, Column: adminrole.FieldName},
			adminrole.FieldDeletedAt: {Type: field.TypeTime, Column: adminrole.FieldDeletedAt},
			adminrole.FieldUpdatedBy: {Type: field.TypeInt, Column: adminrole.FieldUpdatedBy},
			adminrole.FieldUpdatedAt: {Type: field.TypeTime, Column: adminrole.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: department.FieldID,
			},
		},
		Type: "Department",
		Fields: map[string]*sqlgraph.FieldSpec{
			department.FieldCreatedAt: {Type: field.TypeTime, Column: department.FieldCreatedAt},
			department.FieldCreatedBy: {Type: field.TypeInt, Column: department.FieldCreatedBy},
			department.FieldDeletedAt: {Type: field.TypeTime, Column: department.FieldDeletedAt},
			department.FieldUpdatedBy: {Type: field.TypeInt, Column: department.FieldUpdatedBy},
			department.FieldUpdatedAt: {Type: field.TypeTime, Column: department.FieldUpdatedAt},
			department.FieldName:      {Type: field.TypeString, Column: department.FieldName},
			department.FieldParentID:  {Type: field.TypeInt, Column: department.FieldParentID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreatedAt:    {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldCreatedBy:    {Type: field.TypeInt, Column: employee.FieldCreatedBy},
			employee.FieldDeletedAt:    {Type: field.TypeTime, Column: employee.FieldDeletedAt},
			employee.FieldUpdatedBy:    {Type: field.TypeInt, Column: employee.FieldUpdatedBy},
			employee.FieldUpdatedAt:    {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldAdminID:      {Type: field.TypeInt, Column: employee.FieldAdminID},
			employee.FieldDepartmentID: {Type: field.TypeInt, Column: employee.FieldDepartmentID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ipcreportevent.Table,
			Columns: ipcreportevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipcreportevent.FieldID,
			},
		},
		Type: "IPCReportEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			ipcreportevent.FieldCreatedAt:     {Type: field.TypeTime, Column: ipcreportevent.FieldCreatedAt},
			ipcreportevent.FieldCreatedBy:     {Type: field.TypeInt, Column: ipcreportevent.FieldCreatedBy},
			ipcreportevent.FieldDeletedAt:     {Type: field.TypeTime, Column: ipcreportevent.FieldDeletedAt},
			ipcreportevent.FieldUpdatedBy:     {Type: field.TypeInt, Column: ipcreportevent.FieldUpdatedBy},
			ipcreportevent.FieldUpdatedAt:     {Type: field.TypeTime, Column: ipcreportevent.FieldUpdatedAt},
			ipcreportevent.FieldDeviceID:      {Type: field.TypeString, Column: ipcreportevent.FieldDeviceID},
			ipcreportevent.FieldEventID:       {Type: field.TypeString, Column: ipcreportevent.FieldEventID},
			ipcreportevent.FieldEventTime:     {Type: field.TypeTime, Column: ipcreportevent.FieldEventTime},
			ipcreportevent.FieldEventType:     {Type: field.TypeInt, Column: ipcreportevent.FieldEventType},
			ipcreportevent.FieldEventStatus:   {Type: field.TypeInt, Column: ipcreportevent.FieldEventStatus},
			ipcreportevent.FieldImages:        {Type: field.TypeJSON, Column: ipcreportevent.FieldImages},
			ipcreportevent.FieldLabeledImages: {Type: field.TypeJSON, Column: ipcreportevent.FieldLabeledImages},
			ipcreportevent.FieldVideos:        {Type: field.TypeJSON, Column: ipcreportevent.FieldVideos},
			ipcreportevent.FieldDescription:   {Type: field.TypeString, Column: ipcreportevent.FieldDescription},
			ipcreportevent.FieldRawData:       {Type: field.TypeString, Column: ipcreportevent.FieldRawData},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   occupation.Table,
			Columns: occupation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: occupation.FieldID,
			},
		},
		Type: "Occupation",
		Fields: map[string]*sqlgraph.FieldSpec{
			occupation.FieldCreatedAt:   {Type: field.TypeTime, Column: occupation.FieldCreatedAt},
			occupation.FieldCreatedBy:   {Type: field.TypeInt, Column: occupation.FieldCreatedBy},
			occupation.FieldDeletedAt:   {Type: field.TypeTime, Column: occupation.FieldDeletedAt},
			occupation.FieldUpdatedBy:   {Type: field.TypeInt, Column: occupation.FieldUpdatedBy},
			occupation.FieldUpdatedAt:   {Type: field.TypeTime, Column: occupation.FieldUpdatedAt},
			occupation.FieldName:        {Type: field.TypeString, Column: occupation.FieldName},
			occupation.FieldDescription: {Type: field.TypeString, Column: occupation.FieldDescription},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risk.Table,
			Columns: risk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risk.FieldID,
			},
		},
		Type: "Risk",
		Fields: map[string]*sqlgraph.FieldSpec{
			risk.FieldCreatedAt:      {Type: field.TypeTime, Column: risk.FieldCreatedAt},
			risk.FieldCreatedBy:      {Type: field.TypeInt, Column: risk.FieldCreatedBy},
			risk.FieldDeletedAt:      {Type: field.TypeTime, Column: risk.FieldDeletedAt},
			risk.FieldUpdatedBy:      {Type: field.TypeInt, Column: risk.FieldUpdatedBy},
			risk.FieldUpdatedAt:      {Type: field.TypeTime, Column: risk.FieldUpdatedAt},
			risk.FieldTitle:          {Type: field.TypeString, Column: risk.FieldTitle},
			risk.FieldContent:        {Type: field.TypeString, Column: risk.FieldContent},
			risk.FieldImages:         {Type: field.TypeJSON, Column: risk.FieldImages},
			risk.FieldRiskCategoryID: {Type: field.TypeInt, Column: risk.FieldRiskCategoryID},
			risk.FieldRiskLocationID: {Type: field.TypeInt, Column: risk.FieldRiskLocationID},
			risk.FieldReporterID:     {Type: field.TypeInt, Column: risk.FieldReporterID},
			risk.FieldMaintainerID:   {Type: field.TypeInt, Column: risk.FieldMaintainerID},
			risk.FieldMeasures:       {Type: field.TypeString, Column: risk.FieldMeasures},
			risk.FieldMaintainStatus: {Type: field.TypeInt, Column: risk.FieldMaintainStatus},
			risk.FieldDueTime:        {Type: field.TypeTime, Column: risk.FieldDueTime},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riskcategory.Table,
			Columns: riskcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: riskcategory.FieldID,
			},
		},
		Type: "RiskCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			riskcategory.FieldCreatedAt: {Type: field.TypeTime, Column: riskcategory.FieldCreatedAt},
			riskcategory.FieldCreatedBy: {Type: field.TypeInt, Column: riskcategory.FieldCreatedBy},
			riskcategory.FieldDeletedAt: {Type: field.TypeTime, Column: riskcategory.FieldDeletedAt},
			riskcategory.FieldUpdatedBy: {Type: field.TypeInt, Column: riskcategory.FieldUpdatedBy},
			riskcategory.FieldUpdatedAt: {Type: field.TypeTime, Column: riskcategory.FieldUpdatedAt},
			riskcategory.FieldName:      {Type: field.TypeString, Column: riskcategory.FieldName},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risklocation.Table,
			Columns: risklocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risklocation.FieldID,
			},
		},
		Type: "RiskLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			risklocation.FieldCreatedAt: {Type: field.TypeTime, Column: risklocation.FieldCreatedAt},
			risklocation.FieldCreatedBy: {Type: field.TypeInt, Column: risklocation.FieldCreatedBy},
			risklocation.FieldDeletedAt: {Type: field.TypeTime, Column: risklocation.FieldDeletedAt},
			risklocation.FieldUpdatedBy: {Type: field.TypeInt, Column: risklocation.FieldUpdatedBy},
			risklocation.FieldUpdatedAt: {Type: field.TypeTime, Column: risklocation.FieldUpdatedAt},
			risklocation.FieldName:      {Type: field.TypeString, Column: risklocation.FieldName},
		},
	}
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.CreatorTable,
			Columns: []string{admin.CreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"admin_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_role_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"admin_role_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"risk_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_location_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_location_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_category_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_category_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"department_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"department_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"employee_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"occupation_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"occupation_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"ipc_report_event_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcReportEventCreatorTable,
			Columns: []string{admin.IpcReportEventCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"IPCReportEvent",
	)
	graph.MustAddE(
		"ipc_report_event_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcReportEventUpdaterTable,
			Columns: []string{admin.IpcReportEventUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"IPCReportEvent",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdaterTable,
			Columns: []string{adminrole.UpdaterColumn},
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"admins",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.CreatorTable,
			Columns: []string{department.CreatorColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
		},
		"Department",
		"Employee",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.CreatorTable,
			Columns: []string{employee.CreatorColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"admin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AdminTable,
			Columns: []string{employee.AdminColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
		},
		"Employee",
		"Department",
	)
	graph.MustAddE(
		"occupations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.OccupationsTable,
			Columns: employee.OccupationsPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"Occupation",
	)
	graph.MustAddE(
		"risk_reporter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RiskReporterTable,
			Columns: []string{employee.RiskReporterColumn},
			Bidi:    false,
		},
		"Employee",
		"Risk",
	)
	graph.MustAddE(
		"risk_maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RiskMaintainerTable,
			Columns: []string{employee.RiskMaintainerColumn},
			Bidi:    false,
		},
		"Employee",
		"Risk",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.CreatorTable,
			Columns: []string{ipcreportevent.CreatorColumn},
			Bidi:    false,
		},
		"IPCReportEvent",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
		},
		"IPCReportEvent",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.CreatorTable,
			Columns: []string{occupation.CreatorColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.UpdaterTable,
			Columns: []string{occupation.UpdaterColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occupation.EmployeesTable,
			Columns: occupation.EmployeesPrimaryKey,
			Bidi:    false,
		},
		"Occupation",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.CreatorTable,
			Columns: []string{risk.CreatorColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"risk_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskLocation",
	)
	graph.MustAddE(
		"reporter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.ReporterTable,
			Columns: []string{risk.ReporterColumn},
			Bidi:    false,
		},
		"Risk",
		"Employee",
	)
	graph.MustAddE(
		"maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
		},
		"Risk",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.CreatorTable,
			Columns: []string{riskcategory.CreatorColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.UpdaterTable,
			Columns: []string{riskcategory.UpdaterColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   riskcategory.RiskTable,
			Columns: []string{riskcategory.RiskColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Risk",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.CreatorTable,
			Columns: []string{risklocation.CreatorColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.UpdaterTable,
			Columns: []string{risklocation.UpdaterColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risklocation.RiskTable,
			Columns: []string{risklocation.RiskColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Risk",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AdminQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminQuery builder.
func (aq *AdminQuery) Filter() *AdminFilter {
	return &AdminFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminMutation builder.
func (m *AdminMutation) Filter() *AdminFilter {
	return &AdminFilter{config: m.config, predicateAdder: m}
}

// AdminFilter provides a generic filtering capability at runtime for AdminQuery.
type AdminFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdminFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(admin.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *AdminFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(admin.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AdminFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *AdminFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(admin.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AdminFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldUpdatedAt))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AdminFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(admin.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *AdminFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(admin.FieldPassword))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *AdminFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(admin.FieldNickname))
}

// WhereRealName applies the entql string predicate on the real_name field.
func (f *AdminFilter) WhereRealName(p entql.StringP) {
	f.Where(p.Field(admin.FieldRealName))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *AdminFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(admin.FieldAvatar))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AdminFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AdminFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoles applies a predicate to check if query has an edge admin_roles.
func (f *AdminFilter) WhereHasAdminRoles() {
	f.Where(entql.HasEdge("admin_roles"))
}

// WhereHasAdminRolesWith applies a predicate to check if query has an edge admin_roles with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRolesWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminCreator applies a predicate to check if query has an edge admin_creator.
func (f *AdminFilter) WhereHasAdminCreator() {
	f.Where(entql.HasEdge("admin_creator"))
}

// WhereHasAdminCreatorWith applies a predicate to check if query has an edge admin_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminUpdater applies a predicate to check if query has an edge admin_updater.
func (f *AdminFilter) WhereHasAdminUpdater() {
	f.Where(entql.HasEdge("admin_updater"))
}

// WhereHasAdminUpdaterWith applies a predicate to check if query has an edge admin_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoleCreator applies a predicate to check if query has an edge admin_role_creator.
func (f *AdminFilter) WhereHasAdminRoleCreator() {
	f.Where(entql.HasEdge("admin_role_creator"))
}

// WhereHasAdminRoleCreatorWith applies a predicate to check if query has an edge admin_role_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRoleCreatorWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_role_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoleUpdater applies a predicate to check if query has an edge admin_role_updater.
func (f *AdminFilter) WhereHasAdminRoleUpdater() {
	f.Where(entql.HasEdge("admin_role_updater"))
}

// WhereHasAdminRoleUpdaterWith applies a predicate to check if query has an edge admin_role_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRoleUpdaterWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_role_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCreator applies a predicate to check if query has an edge risk_creator.
func (f *AdminFilter) WhereHasRiskCreator() {
	f.Where(entql.HasEdge("risk_creator"))
}

// WhereHasRiskCreatorWith applies a predicate to check if query has an edge risk_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCreatorWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskUpdater applies a predicate to check if query has an edge risk_updater.
func (f *AdminFilter) WhereHasRiskUpdater() {
	f.Where(entql.HasEdge("risk_updater"))
}

// WhereHasRiskUpdaterWith applies a predicate to check if query has an edge risk_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskUpdaterWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationCreator applies a predicate to check if query has an edge risk_location_creator.
func (f *AdminFilter) WhereHasRiskLocationCreator() {
	f.Where(entql.HasEdge("risk_location_creator"))
}

// WhereHasRiskLocationCreatorWith applies a predicate to check if query has an edge risk_location_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationCreatorWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationUpdater applies a predicate to check if query has an edge risk_location_updater.
func (f *AdminFilter) WhereHasRiskLocationUpdater() {
	f.Where(entql.HasEdge("risk_location_updater"))
}

// WhereHasRiskLocationUpdaterWith applies a predicate to check if query has an edge risk_location_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationUpdaterWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryCreator applies a predicate to check if query has an edge risk_category_creator.
func (f *AdminFilter) WhereHasRiskCategoryCreator() {
	f.Where(entql.HasEdge("risk_category_creator"))
}

// WhereHasRiskCategoryCreatorWith applies a predicate to check if query has an edge risk_category_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryCreatorWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryUpdater applies a predicate to check if query has an edge risk_category_updater.
func (f *AdminFilter) WhereHasRiskCategoryUpdater() {
	f.Where(entql.HasEdge("risk_category_updater"))
}

// WhereHasRiskCategoryUpdaterWith applies a predicate to check if query has an edge risk_category_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryUpdaterWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentCreator applies a predicate to check if query has an edge department_creator.
func (f *AdminFilter) WhereHasDepartmentCreator() {
	f.Where(entql.HasEdge("department_creator"))
}

// WhereHasDepartmentCreatorWith applies a predicate to check if query has an edge department_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentCreatorWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentUpdater applies a predicate to check if query has an edge department_updater.
func (f *AdminFilter) WhereHasDepartmentUpdater() {
	f.Where(entql.HasEdge("department_updater"))
}

// WhereHasDepartmentUpdaterWith applies a predicate to check if query has an edge department_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentUpdaterWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeCreator applies a predicate to check if query has an edge employee_creator.
func (f *AdminFilter) WhereHasEmployeeCreator() {
	f.Where(entql.HasEdge("employee_creator"))
}

// WhereHasEmployeeCreatorWith applies a predicate to check if query has an edge employee_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeCreatorWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeUpdater applies a predicate to check if query has an edge employee_updater.
func (f *AdminFilter) WhereHasEmployeeUpdater() {
	f.Where(entql.HasEdge("employee_updater"))
}

// WhereHasEmployeeUpdaterWith applies a predicate to check if query has an edge employee_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeUpdaterWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AdminFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationCreator applies a predicate to check if query has an edge occupation_creator.
func (f *AdminFilter) WhereHasOccupationCreator() {
	f.Where(entql.HasEdge("occupation_creator"))
}

// WhereHasOccupationCreatorWith applies a predicate to check if query has an edge occupation_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationCreatorWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationUpdater applies a predicate to check if query has an edge occupation_updater.
func (f *AdminFilter) WhereHasOccupationUpdater() {
	f.Where(entql.HasEdge("occupation_updater"))
}

// WhereHasOccupationUpdaterWith applies a predicate to check if query has an edge occupation_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationUpdaterWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcReportEventCreator applies a predicate to check if query has an edge ipc_report_event_creator.
func (f *AdminFilter) WhereHasIpcReportEventCreator() {
	f.Where(entql.HasEdge("ipc_report_event_creator"))
}

// WhereHasIpcReportEventCreatorWith applies a predicate to check if query has an edge ipc_report_event_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasIpcReportEventCreatorWith(preds ...predicate.IPCReportEvent) {
	f.Where(entql.HasEdgeWith("ipc_report_event_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcReportEventUpdater applies a predicate to check if query has an edge ipc_report_event_updater.
func (f *AdminFilter) WhereHasIpcReportEventUpdater() {
	f.Where(entql.HasEdge("ipc_report_event_updater"))
}

// WhereHasIpcReportEventUpdaterWith applies a predicate to check if query has an edge ipc_report_event_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasIpcReportEventUpdaterWith(preds ...predicate.IPCReportEvent) {
	f.Where(entql.HasEdgeWith("ipc_report_event_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (arq *AdminRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	arq.predicates = append(arq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminRoleQuery builder.
func (arq *AdminRoleQuery) Filter() *AdminRoleFilter {
	return &AdminRoleFilter{config: arq.config, predicateAdder: arq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminRoleMutation builder.
func (m *AdminRoleMutation) Filter() *AdminRoleFilter {
	return &AdminRoleFilter{config: m.config, predicateAdder: m}
}

// AdminRoleFilter provides a generic filtering capability at runtime for AdminRoleQuery.
type AdminRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdminRoleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminRoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *AdminRoleFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldCreatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *AdminRoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(adminrole.FieldName))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AdminRoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *AdminRoleFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AdminRoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldUpdatedAt))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AdminRoleFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AdminRoleFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmins applies a predicate to check if query has an edge admins.
func (f *AdminRoleFilter) WhereHasAdmins() {
	f.Where(entql.HasEdge("admins"))
}

// WhereHasAdminsWith applies a predicate to check if query has an edge admins with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasAdminsWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admins", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DepartmentQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepartmentQuery builder.
func (dq *DepartmentQuery) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DepartmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepartmentMutation builder.
func (m *DepartmentMutation) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: m.config, predicateAdder: m}
}

// DepartmentFilter provides a generic filtering capability at runtime for DepartmentQuery.
type DepartmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepartmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DepartmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(department.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DepartmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DepartmentFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(department.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DepartmentFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DepartmentFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(department.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DepartmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *DepartmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(department.FieldName))
}

// WhereParentID applies the entql int predicate on the parent_id field.
func (f *DepartmentFilter) WhereParentID(p entql.IntP) {
	f.Where(p.Field(department.FieldParentID))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DepartmentFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DepartmentFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DepartmentFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasParentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *DepartmentFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DepartmentFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasChildrenWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: m.config, predicateAdder: m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *EmployeeFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(employee.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmployeeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *EmployeeFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(employee.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereAdminID applies the entql int predicate on the admin_id field.
func (f *EmployeeFilter) WhereAdminID(p entql.IntP) {
	f.Where(p.Field(employee.FieldAdminID))
}

// WhereDepartmentID applies the entql int predicate on the department_id field.
func (f *EmployeeFilter) WhereDepartmentID(p entql.IntP) {
	f.Where(p.Field(employee.FieldDepartmentID))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EmployeeFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EmployeeFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmin applies a predicate to check if query has an edge admin.
func (f *EmployeeFilter) WhereHasAdmin() {
	f.Where(entql.HasEdge("admin"))
}

// WhereHasAdminWith applies a predicate to check if query has an edge admin with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAdminWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *EmployeeFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupations applies a predicate to check if query has an edge occupations.
func (f *EmployeeFilter) WhereHasOccupations() {
	f.Where(entql.HasEdge("occupations"))
}

// WhereHasOccupationsWith applies a predicate to check if query has an edge occupations with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasOccupationsWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskReporter applies a predicate to check if query has an edge risk_reporter.
func (f *EmployeeFilter) WhereHasRiskReporter() {
	f.Where(entql.HasEdge("risk_reporter"))
}

// WhereHasRiskReporterWith applies a predicate to check if query has an edge risk_reporter with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasRiskReporterWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_reporter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskMaintainer applies a predicate to check if query has an edge risk_maintainer.
func (f *EmployeeFilter) WhereHasRiskMaintainer() {
	f.Where(entql.HasEdge("risk_maintainer"))
}

// WhereHasRiskMaintainerWith applies a predicate to check if query has an edge risk_maintainer with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasRiskMaintainerWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ireq *IPCReportEventQuery) addPredicate(pred func(s *sql.Selector)) {
	ireq.predicates = append(ireq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IPCReportEventQuery builder.
func (ireq *IPCReportEventQuery) Filter() *IPCReportEventFilter {
	return &IPCReportEventFilter{config: ireq.config, predicateAdder: ireq}
}

// addPredicate implements the predicateAdder interface.
func (m *IPCReportEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IPCReportEventMutation builder.
func (m *IPCReportEventMutation) Filter() *IPCReportEventFilter {
	return &IPCReportEventFilter{config: m.config, predicateAdder: m}
}

// IPCReportEventFilter provides a generic filtering capability at runtime for IPCReportEventQuery.
type IPCReportEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IPCReportEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *IPCReportEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(ipcreportevent.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IPCReportEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ipcreportevent.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *IPCReportEventFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(ipcreportevent.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IPCReportEventFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(ipcreportevent.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *IPCReportEventFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(ipcreportevent.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IPCReportEventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ipcreportevent.FieldUpdatedAt))
}

// WhereDeviceID applies the entql string predicate on the device_id field.
func (f *IPCReportEventFilter) WhereDeviceID(p entql.StringP) {
	f.Where(p.Field(ipcreportevent.FieldDeviceID))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *IPCReportEventFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(ipcreportevent.FieldEventID))
}

// WhereEventTime applies the entql time.Time predicate on the event_time field.
func (f *IPCReportEventFilter) WhereEventTime(p entql.TimeP) {
	f.Where(p.Field(ipcreportevent.FieldEventTime))
}

// WhereEventType applies the entql int predicate on the event_type field.
func (f *IPCReportEventFilter) WhereEventType(p entql.IntP) {
	f.Where(p.Field(ipcreportevent.FieldEventType))
}

// WhereEventStatus applies the entql int predicate on the event_status field.
func (f *IPCReportEventFilter) WhereEventStatus(p entql.IntP) {
	f.Where(p.Field(ipcreportevent.FieldEventStatus))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *IPCReportEventFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(ipcreportevent.FieldImages))
}

// WhereLabeledImages applies the entql json.RawMessage predicate on the labeled_images field.
func (f *IPCReportEventFilter) WhereLabeledImages(p entql.BytesP) {
	f.Where(p.Field(ipcreportevent.FieldLabeledImages))
}

// WhereVideos applies the entql json.RawMessage predicate on the videos field.
func (f *IPCReportEventFilter) WhereVideos(p entql.BytesP) {
	f.Where(p.Field(ipcreportevent.FieldVideos))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IPCReportEventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(ipcreportevent.FieldDescription))
}

// WhereRawData applies the entql string predicate on the raw_data field.
func (f *IPCReportEventFilter) WhereRawData(p entql.StringP) {
	f.Where(p.Field(ipcreportevent.FieldRawData))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *IPCReportEventFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *IPCReportEventFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *IPCReportEventFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *IPCReportEventFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OccupationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OccupationQuery builder.
func (oq *OccupationQuery) Filter() *OccupationFilter {
	return &OccupationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OccupationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OccupationMutation builder.
func (m *OccupationMutation) Filter() *OccupationFilter {
	return &OccupationFilter{config: m.config, predicateAdder: m}
}

// OccupationFilter provides a generic filtering capability at runtime for OccupationQuery.
type OccupationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OccupationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OccupationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(occupation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OccupationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *OccupationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(occupation.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OccupationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *OccupationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(occupation.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OccupationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *OccupationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(occupation.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OccupationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(occupation.FieldDescription))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *OccupationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *OccupationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *OccupationFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiskQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskQuery builder.
func (rq *RiskQuery) Filter() *RiskFilter {
	return &RiskFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskMutation builder.
func (m *RiskMutation) Filter() *RiskFilter {
	return &RiskFilter{config: m.config, predicateAdder: m}
}

// RiskFilter provides a generic filtering capability at runtime for RiskQuery.
type RiskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risk.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(risk.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(risk.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldUpdatedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *RiskFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(risk.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *RiskFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(risk.FieldContent))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *RiskFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(risk.FieldImages))
}

// WhereRiskCategoryID applies the entql int predicate on the risk_category_id field.
func (f *RiskFilter) WhereRiskCategoryID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskCategoryID))
}

// WhereRiskLocationID applies the entql int predicate on the risk_location_id field.
func (f *RiskFilter) WhereRiskLocationID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskLocationID))
}

// WhereReporterID applies the entql int predicate on the reporter_id field.
func (f *RiskFilter) WhereReporterID(p entql.IntP) {
	f.Where(p.Field(risk.FieldReporterID))
}

// WhereMaintainerID applies the entql int predicate on the maintainer_id field.
func (f *RiskFilter) WhereMaintainerID(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainerID))
}

// WhereMeasures applies the entql string predicate on the measures field.
func (f *RiskFilter) WhereMeasures(p entql.StringP) {
	f.Where(p.Field(risk.FieldMeasures))
}

// WhereMaintainStatus applies the entql int predicate on the maintain_status field.
func (f *RiskFilter) WhereMaintainStatus(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainStatus))
}

// WhereDueTime applies the entql time.Time predicate on the due_time field.
func (f *RiskFilter) WhereDueTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDueTime))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategory applies a predicate to check if query has an edge risk_category.
func (f *RiskFilter) WhereHasRiskCategory() {
	f.Where(entql.HasEdge("risk_category"))
}

// WhereHasRiskCategoryWith applies a predicate to check if query has an edge risk_category with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskCategoryWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocation applies a predicate to check if query has an edge risk_location.
func (f *RiskFilter) WhereHasRiskLocation() {
	f.Where(entql.HasEdge("risk_location"))
}

// WhereHasRiskLocationWith applies a predicate to check if query has an edge risk_location with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskLocationWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReporter applies a predicate to check if query has an edge reporter.
func (f *RiskFilter) WhereHasReporter() {
	f.Where(entql.HasEdge("reporter"))
}

// WhereHasReporterWith applies a predicate to check if query has an edge reporter with a given conditions (other predicates).
func (f *RiskFilter) WhereHasReporterWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("reporter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMaintainer applies a predicate to check if query has an edge maintainer.
func (f *RiskFilter) WhereHasMaintainer() {
	f.Where(entql.HasEdge("maintainer"))
}

// WhereHasMaintainerWith applies a predicate to check if query has an edge maintainer with a given conditions (other predicates).
func (f *RiskFilter) WhereHasMaintainerWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RiskCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskCategoryQuery builder.
func (rcq *RiskCategoryQuery) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskCategoryMutation builder.
func (m *RiskCategoryMutation) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: m.config, predicateAdder: m}
}

// RiskCategoryFilter provides a generic filtering capability at runtime for RiskCategoryQuery.
type RiskCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskCategoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskCategoryFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskCategoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskCategoryFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(riskcategory.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskCategoryFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskCategoryFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskCategoryFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rlq *RiskLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	rlq.predicates = append(rlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskLocationQuery builder.
func (rlq *RiskLocationQuery) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: rlq.config, predicateAdder: rlq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskLocationMutation builder.
func (m *RiskLocationMutation) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: m.config, predicateAdder: m}
}

// RiskLocationFilter provides a generic filtering capability at runtime for RiskLocationQuery.
type RiskLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskLocationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskLocationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskLocationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskLocationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskLocationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskLocationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskLocationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(risklocation.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskLocationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskLocationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskLocationFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
