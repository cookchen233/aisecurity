// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/permission"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/ent/dao/user"
	"aisecurity/ent/dao/video"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 21)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
		Type: "Admin",
		Fields: map[string]*sqlgraph.FieldSpec{
			admin.FieldCreateTime:   {Type: field.TypeTime, Column: admin.FieldCreateTime},
			admin.FieldCreatorID:    {Type: field.TypeInt, Column: admin.FieldCreatorID},
			admin.FieldDeleteTime:   {Type: field.TypeTime, Column: admin.FieldDeleteTime},
			admin.FieldUpdaterID:    {Type: field.TypeInt, Column: admin.FieldUpdaterID},
			admin.FieldUpdateTime:   {Type: field.TypeTime, Column: admin.FieldUpdateTime},
			admin.FieldUsername:     {Type: field.TypeString, Column: admin.FieldUsername},
			admin.FieldPassword:     {Type: field.TypeString, Column: admin.FieldPassword},
			admin.FieldNickname:     {Type: field.TypeString, Column: admin.FieldNickname},
			admin.FieldRealName:     {Type: field.TypeString, Column: admin.FieldRealName},
			admin.FieldMobile:       {Type: field.TypeString, Column: admin.FieldMobile},
			admin.FieldWechatOpenid: {Type: field.TypeString, Column: admin.FieldWechatOpenid},
			admin.FieldAvatar:       {Type: field.TypeJSON, Column: admin.FieldAvatar},
			admin.FieldAdminStatus:  {Type: field.TypeInt, Column: admin.FieldAdminStatus},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: area.FieldID,
			},
		},
		Type: "Area",
		Fields: map[string]*sqlgraph.FieldSpec{
			area.FieldCreateTime:  {Type: field.TypeTime, Column: area.FieldCreateTime},
			area.FieldCreatorID:   {Type: field.TypeInt, Column: area.FieldCreatorID},
			area.FieldDeleteTime:  {Type: field.TypeTime, Column: area.FieldDeleteTime},
			area.FieldUpdaterID:   {Type: field.TypeInt, Column: area.FieldUpdaterID},
			area.FieldUpdateTime:  {Type: field.TypeTime, Column: area.FieldUpdateTime},
			area.FieldName:        {Type: field.TypeString, Column: area.FieldName},
			area.FieldDescription: {Type: field.TypeString, Column: area.FieldDescription},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: department.FieldID,
			},
		},
		Type: "Department",
		Fields: map[string]*sqlgraph.FieldSpec{
			department.FieldCreateTime: {Type: field.TypeTime, Column: department.FieldCreateTime},
			department.FieldCreatorID:  {Type: field.TypeInt, Column: department.FieldCreatorID},
			department.FieldDeleteTime: {Type: field.TypeTime, Column: department.FieldDeleteTime},
			department.FieldUpdaterID:  {Type: field.TypeInt, Column: department.FieldUpdaterID},
			department.FieldUpdateTime: {Type: field.TypeTime, Column: department.FieldUpdateTime},
			department.FieldName:       {Type: field.TypeString, Column: department.FieldName},
			department.FieldParentID:   {Type: field.TypeInt, Column: department.FieldParentID},
			department.FieldNotes:      {Type: field.TypeString, Column: department.FieldNotes},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
		Type: "Device",
		Fields: map[string]*sqlgraph.FieldSpec{
			device.FieldCreateTime: {Type: field.TypeTime, Column: device.FieldCreateTime},
			device.FieldCreatorID:  {Type: field.TypeInt, Column: device.FieldCreatorID},
			device.FieldDeleteTime: {Type: field.TypeTime, Column: device.FieldDeleteTime},
			device.FieldUpdaterID:  {Type: field.TypeInt, Column: device.FieldUpdaterID},
			device.FieldUpdateTime: {Type: field.TypeTime, Column: device.FieldUpdateTime},
			device.FieldBrand:      {Type: field.TypeInt, Column: device.FieldBrand},
			device.FieldModel:      {Type: field.TypeInt, Column: device.FieldModel},
			device.FieldName:       {Type: field.TypeString, Column: device.FieldName},
			device.FieldSn:         {Type: field.TypeString, Column: device.FieldSn},
			device.FieldDeviceType: {Type: field.TypeInt, Column: device.FieldDeviceType},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceinstallation.Table,
			Columns: deviceinstallation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deviceinstallation.FieldID,
			},
		},
		Type: "DeviceInstallation",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceinstallation.FieldCreateTime:   {Type: field.TypeTime, Column: deviceinstallation.FieldCreateTime},
			deviceinstallation.FieldCreatorID:    {Type: field.TypeInt, Column: deviceinstallation.FieldCreatorID},
			deviceinstallation.FieldDeleteTime:   {Type: field.TypeTime, Column: deviceinstallation.FieldDeleteTime},
			deviceinstallation.FieldUpdaterID:    {Type: field.TypeInt, Column: deviceinstallation.FieldUpdaterID},
			deviceinstallation.FieldUpdateTime:   {Type: field.TypeTime, Column: deviceinstallation.FieldUpdateTime},
			deviceinstallation.FieldDeviceID:     {Type: field.TypeInt, Column: deviceinstallation.FieldDeviceID},
			deviceinstallation.FieldAreaID:       {Type: field.TypeInt, Column: deviceinstallation.FieldAreaID},
			deviceinstallation.FieldAliasName:    {Type: field.TypeString, Column: deviceinstallation.FieldAliasName},
			deviceinstallation.FieldLongitude:    {Type: field.TypeFloat64, Column: deviceinstallation.FieldLongitude},
			deviceinstallation.FieldLatitude:     {Type: field.TypeFloat64, Column: deviceinstallation.FieldLatitude},
			deviceinstallation.FieldLocationData: {Type: field.TypeString, Column: deviceinstallation.FieldLocationData},
			deviceinstallation.FieldLocation:     {Type: field.TypeString, Column: deviceinstallation.FieldLocation},
			deviceinstallation.FieldInstaller:    {Type: field.TypeString, Column: deviceinstallation.FieldInstaller},
			deviceinstallation.FieldInstallTime:  {Type: field.TypeTime, Column: deviceinstallation.FieldInstallTime},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreateTime:   {Type: field.TypeTime, Column: employee.FieldCreateTime},
			employee.FieldCreatorID:    {Type: field.TypeInt, Column: employee.FieldCreatorID},
			employee.FieldDeleteTime:   {Type: field.TypeTime, Column: employee.FieldDeleteTime},
			employee.FieldUpdaterID:    {Type: field.TypeInt, Column: employee.FieldUpdaterID},
			employee.FieldUpdateTime:   {Type: field.TypeTime, Column: employee.FieldUpdateTime},
			employee.FieldAdminID:      {Type: field.TypeInt, Column: employee.FieldAdminID},
			employee.FieldDepartmentID: {Type: field.TypeInt, Column: employee.FieldDepartmentID},
			employee.FieldOccupationID: {Type: field.TypeInt, Column: employee.FieldOccupationID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreateTime:    {Type: field.TypeTime, Column: event.FieldCreateTime},
			event.FieldCreatorID:     {Type: field.TypeInt, Column: event.FieldCreatorID},
			event.FieldDeleteTime:    {Type: field.TypeTime, Column: event.FieldDeleteTime},
			event.FieldUpdaterID:     {Type: field.TypeInt, Column: event.FieldUpdaterID},
			event.FieldUpdateTime:    {Type: field.TypeTime, Column: event.FieldUpdateTime},
			event.FieldDeviceID:      {Type: field.TypeInt, Column: event.FieldDeviceID},
			event.FieldVideoID:       {Type: field.TypeInt, Column: event.FieldVideoID},
			event.FieldEventTime:     {Type: field.TypeTime, Column: event.FieldEventTime},
			event.FieldEventType:     {Type: field.TypeInt, Column: event.FieldEventType},
			event.FieldEventStatus:   {Type: field.TypeInt, Column: event.FieldEventStatus},
			event.FieldImages:        {Type: field.TypeJSON, Column: event.FieldImages},
			event.FieldLabeledImages: {Type: field.TypeJSON, Column: event.FieldLabeledImages},
			event.FieldDataID:        {Type: field.TypeString, Column: event.FieldDataID},
			event.FieldDescription:   {Type: field.TypeString, Column: event.FieldDescription},
			event.FieldRawData:       {Type: field.TypeString, Column: event.FieldRawData},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventlevel.Table,
			Columns: eventlevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlevel.FieldID,
			},
		},
		Type: "EventLevel",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventlevel.FieldCreateTime:  {Type: field.TypeTime, Column: eventlevel.FieldCreateTime},
			eventlevel.FieldCreatorID:   {Type: field.TypeInt, Column: eventlevel.FieldCreatorID},
			eventlevel.FieldDeleteTime:  {Type: field.TypeTime, Column: eventlevel.FieldDeleteTime},
			eventlevel.FieldUpdaterID:   {Type: field.TypeInt, Column: eventlevel.FieldUpdaterID},
			eventlevel.FieldUpdateTime:  {Type: field.TypeTime, Column: eventlevel.FieldUpdateTime},
			eventlevel.FieldName:        {Type: field.TypeString, Column: eventlevel.FieldName},
			eventlevel.FieldEventTypes:  {Type: field.TypeJSON, Column: eventlevel.FieldEventTypes},
			eventlevel.FieldDescription: {Type: field.TypeString, Column: eventlevel.FieldDescription},
			eventlevel.FieldIcon:        {Type: field.TypeString, Column: eventlevel.FieldIcon},
			eventlevel.FieldNotifyTypes: {Type: field.TypeJSON, Column: eventlevel.FieldNotifyTypes},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventlog.Table,
			Columns: eventlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlog.FieldID,
			},
		},
		Type: "EventLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventlog.FieldCreateTime: {Type: field.TypeTime, Column: eventlog.FieldCreateTime},
			eventlog.FieldCreatorID:  {Type: field.TypeInt, Column: eventlog.FieldCreatorID},
			eventlog.FieldDeleteTime: {Type: field.TypeTime, Column: eventlog.FieldDeleteTime},
			eventlog.FieldUpdaterID:  {Type: field.TypeInt, Column: eventlog.FieldUpdaterID},
			eventlog.FieldUpdateTime: {Type: field.TypeTime, Column: eventlog.FieldUpdateTime},
			eventlog.FieldDeviceID:   {Type: field.TypeInt, Column: eventlog.FieldDeviceID},
			eventlog.FieldEventID:    {Type: field.TypeInt, Column: eventlog.FieldEventID},
			eventlog.FieldActorID:    {Type: field.TypeInt, Column: eventlog.FieldActorID},
			eventlog.FieldActor2ID:   {Type: field.TypeInt, Column: eventlog.FieldActor2ID},
			eventlog.FieldLogType:    {Type: field.TypeInt, Column: eventlog.FieldLogType},
			eventlog.FieldNotes:      {Type: field.TypeString, Column: eventlog.FieldNotes},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fixing.Table,
			Columns: fixing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixing.FieldID,
			},
		},
		Type: "Fixing",
		Fields: map[string]*sqlgraph.FieldSpec{
			fixing.FieldCreateTime:    {Type: field.TypeTime, Column: fixing.FieldCreateTime},
			fixing.FieldCreatorID:     {Type: field.TypeInt, Column: fixing.FieldCreatorID},
			fixing.FieldDeleteTime:    {Type: field.TypeTime, Column: fixing.FieldDeleteTime},
			fixing.FieldUpdaterID:     {Type: field.TypeInt, Column: fixing.FieldUpdaterID},
			fixing.FieldUpdateTime:    {Type: field.TypeTime, Column: fixing.FieldUpdateTime},
			fixing.FieldFixerID:       {Type: field.TypeInt, Column: fixing.FieldFixerID},
			fixing.FieldEventID:       {Type: field.TypeInt, Column: fixing.FieldEventID},
			fixing.FieldDeviceID:      {Type: field.TypeInt, Column: fixing.FieldDeviceID},
			fixing.FieldAssignNotes:   {Type: field.TypeString, Column: fixing.FieldAssignNotes},
			fixing.FieldFixTime:       {Type: field.TypeTime, Column: fixing.FieldFixTime},
			fixing.FieldCompleteTime:  {Type: field.TypeTime, Column: fixing.FieldCompleteTime},
			fixing.FieldCompleteNotes: {Type: field.TypeString, Column: fixing.FieldCompleteNotes},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   occupation.Table,
			Columns: occupation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: occupation.FieldID,
			},
		},
		Type: "Occupation",
		Fields: map[string]*sqlgraph.FieldSpec{
			occupation.FieldCreateTime:  {Type: field.TypeTime, Column: occupation.FieldCreateTime},
			occupation.FieldCreatorID:   {Type: field.TypeInt, Column: occupation.FieldCreatorID},
			occupation.FieldDeleteTime:  {Type: field.TypeTime, Column: occupation.FieldDeleteTime},
			occupation.FieldUpdaterID:   {Type: field.TypeInt, Column: occupation.FieldUpdaterID},
			occupation.FieldUpdateTime:  {Type: field.TypeTime, Column: occupation.FieldUpdateTime},
			occupation.FieldName:        {Type: field.TypeString, Column: occupation.FieldName},
			occupation.FieldDescription: {Type: field.TypeString, Column: occupation.FieldDescription},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldCreateTime: {Type: field.TypeTime, Column: permission.FieldCreateTime},
			permission.FieldCreatorID:  {Type: field.TypeInt, Column: permission.FieldCreatorID},
			permission.FieldDeleteTime: {Type: field.TypeTime, Column: permission.FieldDeleteTime},
			permission.FieldUpdaterID:  {Type: field.TypeInt, Column: permission.FieldUpdaterID},
			permission.FieldUpdateTime: {Type: field.TypeTime, Column: permission.FieldUpdateTime},
			permission.FieldName:       {Type: field.TypeString, Column: permission.FieldName},
			permission.FieldAccessIds:  {Type: field.TypeJSON, Column: permission.FieldAccessIds},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risk.Table,
			Columns: risk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risk.FieldID,
			},
		},
		Type: "Risk",
		Fields: map[string]*sqlgraph.FieldSpec{
			risk.FieldCreateTime:       {Type: field.TypeTime, Column: risk.FieldCreateTime},
			risk.FieldCreatorID:        {Type: field.TypeInt, Column: risk.FieldCreatorID},
			risk.FieldDeleteTime:       {Type: field.TypeTime, Column: risk.FieldDeleteTime},
			risk.FieldUpdaterID:        {Type: field.TypeInt, Column: risk.FieldUpdaterID},
			risk.FieldUpdateTime:       {Type: field.TypeTime, Column: risk.FieldUpdateTime},
			risk.FieldTitle:            {Type: field.TypeString, Column: risk.FieldTitle},
			risk.FieldContent:          {Type: field.TypeString, Column: risk.FieldContent},
			risk.FieldImages:           {Type: field.TypeJSON, Column: risk.FieldImages},
			risk.FieldMaintainedImages: {Type: field.TypeJSON, Column: risk.FieldMaintainedImages},
			risk.FieldRiskCategoryID:   {Type: field.TypeInt, Column: risk.FieldRiskCategoryID},
			risk.FieldRiskLocationID:   {Type: field.TypeInt, Column: risk.FieldRiskLocationID},
			risk.FieldMaintainerID:     {Type: field.TypeInt, Column: risk.FieldMaintainerID},
			risk.FieldMeasures:         {Type: field.TypeString, Column: risk.FieldMeasures},
			risk.FieldMaintainStatus:   {Type: field.TypeInt, Column: risk.FieldMaintainStatus},
			risk.FieldDueTime:          {Type: field.TypeTime, Column: risk.FieldDueTime},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riskcategory.Table,
			Columns: riskcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: riskcategory.FieldID,
			},
		},
		Type: "RiskCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			riskcategory.FieldCreateTime: {Type: field.TypeTime, Column: riskcategory.FieldCreateTime},
			riskcategory.FieldCreatorID:  {Type: field.TypeInt, Column: riskcategory.FieldCreatorID},
			riskcategory.FieldDeleteTime: {Type: field.TypeTime, Column: riskcategory.FieldDeleteTime},
			riskcategory.FieldUpdaterID:  {Type: field.TypeInt, Column: riskcategory.FieldUpdaterID},
			riskcategory.FieldUpdateTime: {Type: field.TypeTime, Column: riskcategory.FieldUpdateTime},
			riskcategory.FieldName:       {Type: field.TypeString, Column: riskcategory.FieldName},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risklocation.Table,
			Columns: risklocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risklocation.FieldID,
			},
		},
		Type: "RiskLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			risklocation.FieldCreateTime: {Type: field.TypeTime, Column: risklocation.FieldCreateTime},
			risklocation.FieldCreatorID:  {Type: field.TypeInt, Column: risklocation.FieldCreatorID},
			risklocation.FieldDeleteTime: {Type: field.TypeTime, Column: risklocation.FieldDeleteTime},
			risklocation.FieldUpdaterID:  {Type: field.TypeInt, Column: risklocation.FieldUpdaterID},
			risklocation.FieldUpdateTime: {Type: field.TypeTime, Column: risklocation.FieldUpdateTime},
			risklocation.FieldName:       {Type: field.TypeString, Column: risklocation.FieldName},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sweep.Table,
			Columns: sweep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sweep.FieldID,
			},
		},
		Type: "Sweep",
		Fields: map[string]*sqlgraph.FieldSpec{
			sweep.FieldCreateTime:     {Type: field.TypeTime, Column: sweep.FieldCreateTime},
			sweep.FieldCreatorID:      {Type: field.TypeInt, Column: sweep.FieldCreatorID},
			sweep.FieldDeleteTime:     {Type: field.TypeTime, Column: sweep.FieldDeleteTime},
			sweep.FieldUpdaterID:      {Type: field.TypeInt, Column: sweep.FieldUpdaterID},
			sweep.FieldUpdateTime:     {Type: field.TypeTime, Column: sweep.FieldUpdateTime},
			sweep.FieldName:           {Type: field.TypeString, Column: sweep.FieldName},
			sweep.FieldRiskCategoryID: {Type: field.TypeInt, Column: sweep.FieldRiskCategoryID},
			sweep.FieldRiskLocationID: {Type: field.TypeInt, Column: sweep.FieldRiskLocationID},
			sweep.FieldSweepJobs:      {Type: field.TypeJSON, Column: sweep.FieldSweepJobs},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sweepresult.Table,
			Columns: sweepresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sweepresult.FieldID,
			},
		},
		Type: "SweepResult",
		Fields: map[string]*sqlgraph.FieldSpec{
			sweepresult.FieldCreateTime:      {Type: field.TypeTime, Column: sweepresult.FieldCreateTime},
			sweepresult.FieldCreatorID:       {Type: field.TypeInt, Column: sweepresult.FieldCreatorID},
			sweepresult.FieldDeleteTime:      {Type: field.TypeTime, Column: sweepresult.FieldDeleteTime},
			sweepresult.FieldUpdaterID:       {Type: field.TypeInt, Column: sweepresult.FieldUpdaterID},
			sweepresult.FieldUpdateTime:      {Type: field.TypeTime, Column: sweepresult.FieldUpdateTime},
			sweepresult.FieldSweepID:         {Type: field.TypeInt, Column: sweepresult.FieldSweepID},
			sweepresult.FieldSweepScheduleID: {Type: field.TypeInt, Column: sweepresult.FieldSweepScheduleID},
			sweepresult.FieldCheckInTime:     {Type: field.TypeTime, Column: sweepresult.FieldCheckInTime},
			sweepresult.FieldCheckInImage:    {Type: field.TypeJSON, Column: sweepresult.FieldCheckInImage},
			sweepresult.FieldSweepJobs:       {Type: field.TypeJSON, Column: sweepresult.FieldSweepJobs},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sweepresultdetails.Table,
			Columns: sweepresultdetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sweepresultdetails.FieldID,
			},
		},
		Type: "SweepResultDetails",
		Fields: map[string]*sqlgraph.FieldSpec{
			sweepresultdetails.FieldCreateTime:      {Type: field.TypeTime, Column: sweepresultdetails.FieldCreateTime},
			sweepresultdetails.FieldCreatorID:       {Type: field.TypeInt, Column: sweepresultdetails.FieldCreatorID},
			sweepresultdetails.FieldDeleteTime:      {Type: field.TypeTime, Column: sweepresultdetails.FieldDeleteTime},
			sweepresultdetails.FieldUpdaterID:       {Type: field.TypeInt, Column: sweepresultdetails.FieldUpdaterID},
			sweepresultdetails.FieldUpdateTime:      {Type: field.TypeTime, Column: sweepresultdetails.FieldUpdateTime},
			sweepresultdetails.FieldSweepID:         {Type: field.TypeInt, Column: sweepresultdetails.FieldSweepID},
			sweepresultdetails.FieldSweepScheduleID: {Type: field.TypeInt, Column: sweepresultdetails.FieldSweepScheduleID},
			sweepresultdetails.FieldSweepResultID:   {Type: field.TypeInt, Column: sweepresultdetails.FieldSweepResultID},
			sweepresultdetails.FieldTitle:           {Type: field.TypeString, Column: sweepresultdetails.FieldTitle},
			sweepresultdetails.FieldResult:          {Type: field.TypeInt, Column: sweepresultdetails.FieldResult},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sweepschedule.Table,
			Columns: sweepschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sweepschedule.FieldID,
			},
		},
		Type: "SweepSchedule",
		Fields: map[string]*sqlgraph.FieldSpec{
			sweepschedule.FieldCreateTime:    {Type: field.TypeTime, Column: sweepschedule.FieldCreateTime},
			sweepschedule.FieldCreatorID:     {Type: field.TypeInt, Column: sweepschedule.FieldCreatorID},
			sweepschedule.FieldDeleteTime:    {Type: field.TypeTime, Column: sweepschedule.FieldDeleteTime},
			sweepschedule.FieldUpdaterID:     {Type: field.TypeInt, Column: sweepschedule.FieldUpdaterID},
			sweepschedule.FieldUpdateTime:    {Type: field.TypeTime, Column: sweepschedule.FieldUpdateTime},
			sweepschedule.FieldName:          {Type: field.TypeString, Column: sweepschedule.FieldName},
			sweepschedule.FieldSweepID:       {Type: field.TypeInt, Column: sweepschedule.FieldSweepID},
			sweepschedule.FieldEnabledStatus: {Type: field.TypeInt, Column: sweepschedule.FieldEnabledStatus},
			sweepschedule.FieldActionTime:    {Type: field.TypeTime, Column: sweepschedule.FieldActionTime},
			sweepschedule.FieldRemind:        {Type: field.TypeJSON, Column: sweepschedule.FieldRemind},
			sweepschedule.FieldRepeat:        {Type: field.TypeJSON, Column: sweepschedule.FieldRepeat},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime:   {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldDeleteTime:   {Type: field.TypeTime, Column: user.FieldDeleteTime},
			user.FieldUpdateTime:   {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUpdaterID:    {Type: field.TypeInt, Column: user.FieldUpdaterID},
			user.FieldUsername:     {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPassword:     {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldNickname:     {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldRealName:     {Type: field.TypeString, Column: user.FieldRealName},
			user.FieldMobile:       {Type: field.TypeString, Column: user.FieldMobile},
			user.FieldWechatOpenid: {Type: field.TypeString, Column: user.FieldWechatOpenid},
			user.FieldAvatar:       {Type: field.TypeJSON, Column: user.FieldAvatar},
			user.FieldUserStatus:   {Type: field.TypeInt, Column: user.FieldUserStatus},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
		Type: "Video",
		Fields: map[string]*sqlgraph.FieldSpec{
			video.FieldCreateTime: {Type: field.TypeTime, Column: video.FieldCreateTime},
			video.FieldCreatorID:  {Type: field.TypeInt, Column: video.FieldCreatorID},
			video.FieldDeleteTime: {Type: field.TypeTime, Column: video.FieldDeleteTime},
			video.FieldUpdaterID:  {Type: field.TypeInt, Column: video.FieldUpdaterID},
			video.FieldUpdateTime: {Type: field.TypeTime, Column: video.FieldUpdateTime},
			video.FieldName:       {Type: field.TypeString, Column: video.FieldName},
			video.FieldURL:        {Type: field.TypeString, Column: video.FieldURL},
			video.FieldSize:       {Type: field.TypeInt64, Column: video.FieldSize},
			video.FieldDuration:   {Type: field.TypeString, Column: video.FieldDuration},
			video.FieldUploadedAt: {Type: field.TypeTime, Column: video.FieldUploadedAt},
		},
	}
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.CreatorTable,
			Columns: []string{admin.CreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
		},
		"Admin",
		"Permission",
	)
	graph.MustAddE(
		"admin_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"permission_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Permission",
	)
	graph.MustAddE(
		"permission_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Permission",
	)
	graph.MustAddE(
		"risk_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_location_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_location_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_category_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_category_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"department_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"department_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"employee_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"occupation_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"occupation_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"event_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Event",
	)
	graph.MustAddE(
		"event_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Event",
	)
	graph.MustAddE(
		"video_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Video",
	)
	graph.MustAddE(
		"video_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Video",
	)
	graph.MustAddE(
		"area_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Area",
	)
	graph.MustAddE(
		"area_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Area",
	)
	graph.MustAddE(
		"device_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Device",
	)
	graph.MustAddE(
		"device_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Device",
	)
	graph.MustAddE(
		"device_installation_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"device_installation_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"event_level_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLevel",
	)
	graph.MustAddE(
		"event_level_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLevel",
	)
	graph.MustAddE(
		"fixing_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Fixing",
	)
	graph.MustAddE(
		"fixing_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Fixing",
	)
	graph.MustAddE(
		"fixer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
		},
		"Admin",
		"Fixing",
	)
	graph.MustAddE(
		"event_log_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLog",
	)
	graph.MustAddE(
		"event_log_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLog",
	)
	graph.MustAddE(
		"event_log_actor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLog",
	)
	graph.MustAddE(
		"event_log_actor2",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
		},
		"Admin",
		"EventLog",
	)
	graph.MustAddE(
		"sweep_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Sweep",
	)
	graph.MustAddE(
		"sweep_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Sweep",
	)
	graph.MustAddE(
		"sweep_schedule_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_schedule_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
		},
		"Admin",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_result_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepResult",
	)
	graph.MustAddE(
		"sweep_result_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepResult",
	)
	graph.MustAddE(
		"sweep_result_details_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepResultDetails",
	)
	graph.MustAddE(
		"sweep_result_details_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"SweepResultDetails",
	)
	graph.MustAddE(
		"user_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"User",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.CreatorTable,
			Columns: []string{area.CreatorColumn},
			Bidi:    false,
		},
		"Area",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
		},
		"Area",
		"Admin",
	)
	graph.MustAddE(
		"device_installation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
		},
		"Area",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.CreatorTable,
			Columns: []string{department.CreatorColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.PermissionsTable,
			Columns: department.PermissionsPrimaryKey,
			Bidi:    false,
		},
		"Department",
		"Permission",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
		},
		"Department",
		"Employee",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
		},
		"Device",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
		},
		"Device",
		"Admin",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
		},
		"Device",
		"Event",
	)
	graph.MustAddE(
		"device_installation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
		},
		"Device",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"event_log",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
		},
		"Device",
		"EventLog",
	)
	graph.MustAddE(
		"fixing",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
		},
		"Device",
		"Fixing",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.CreatorTable,
			Columns: []string{deviceinstallation.CreatorColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.UpdaterTable,
			Columns: []string{deviceinstallation.UpdaterColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Admin",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.AreaTable,
			Columns: []string{deviceinstallation.AreaColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Area",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.DeviceTable,
			Columns: []string{deviceinstallation.DeviceColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Device",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.CreatorTable,
			Columns: []string{employee.CreatorColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"admin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employee.AdminTable,
			Columns: []string{employee.AdminColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"occupation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.OccupationTable,
			Columns: []string{employee.OccupationColumn},
			Bidi:    false,
		},
		"Employee",
		"Occupation",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
		},
		"Employee",
		"Department",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatorTable,
			Columns: []string{event.CreatorColumn},
			Bidi:    false,
		},
		"Event",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
		},
		"Event",
		"Admin",
	)
	graph.MustAddE(
		"video",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.VideoTable,
			Columns: []string{event.VideoColumn},
			Bidi:    false,
		},
		"Event",
		"Video",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
		},
		"Event",
		"Device",
	)
	graph.MustAddE(
		"fixing",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
		},
		"Event",
		"Fixing",
	)
	graph.MustAddE(
		"event_log",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
		},
		"Event",
		"EventLog",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.CreatorTable,
			Columns: []string{eventlevel.CreatorColumn},
			Bidi:    false,
		},
		"EventLevel",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
		},
		"EventLevel",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.CreatorTable,
			Columns: []string{eventlog.CreatorColumn},
			Bidi:    false,
		},
		"EventLog",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
		},
		"EventLog",
		"Admin",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.EventTable,
			Columns: []string{eventlog.EventColumn},
			Bidi:    false,
		},
		"EventLog",
		"Event",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.DeviceTable,
			Columns: []string{eventlog.DeviceColumn},
			Bidi:    false,
		},
		"EventLog",
		"Device",
	)
	graph.MustAddE(
		"actor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ActorTable,
			Columns: []string{eventlog.ActorColumn},
			Bidi:    false,
		},
		"EventLog",
		"Admin",
	)
	graph.MustAddE(
		"actor2",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.Actor2Table,
			Columns: []string{eventlog.Actor2Column},
			Bidi:    false,
		},
		"EventLog",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.CreatorTable,
			Columns: []string{fixing.CreatorColumn},
			Bidi:    false,
		},
		"Fixing",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
		},
		"Fixing",
		"Admin",
	)
	graph.MustAddE(
		"fixer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
		},
		"Fixing",
		"Admin",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fixing.EventTable,
			Columns: []string{fixing.EventColumn},
			Bidi:    false,
		},
		"Fixing",
		"Event",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.DeviceTable,
			Columns: []string{fixing.DeviceColumn},
			Bidi:    false,
		},
		"Fixing",
		"Device",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.CreatorTable,
			Columns: []string{occupation.CreatorColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.UpdaterTable,
			Columns: []string{occupation.UpdaterColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occupation.EmployeeTable,
			Columns: []string{occupation.EmployeeColumn},
			Bidi:    false,
		},
		"Occupation",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.CreatorTable,
			Columns: []string{permission.CreatorColumn},
			Bidi:    false,
		},
		"Permission",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.UpdaterTable,
			Columns: []string{permission.UpdaterColumn},
			Bidi:    false,
		},
		"Permission",
		"Admin",
	)
	graph.MustAddE(
		"admin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Admin",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Department",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.CreatorTable,
			Columns: []string{risk.CreatorColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"risk_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskLocation",
	)
	graph.MustAddE(
		"maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.CreatorTable,
			Columns: []string{riskcategory.CreatorColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.UpdaterTable,
			Columns: []string{riskcategory.UpdaterColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   riskcategory.RiskTable,
			Columns: []string{riskcategory.RiskColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Risk",
	)
	graph.MustAddE(
		"sweep",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   riskcategory.SweepTable,
			Columns: []string{riskcategory.SweepColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Sweep",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.CreatorTable,
			Columns: []string{risklocation.CreatorColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.UpdaterTable,
			Columns: []string{risklocation.UpdaterColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risklocation.RiskTable,
			Columns: []string{risklocation.RiskColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Risk",
	)
	graph.MustAddE(
		"sweep",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risklocation.SweepTable,
			Columns: []string{risklocation.SweepColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Sweep",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.CreatorTable,
			Columns: []string{sweep.CreatorColumn},
			Bidi:    false,
		},
		"Sweep",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
		},
		"Sweep",
		"Admin",
	)
	graph.MustAddE(
		"risk_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
		},
		"Sweep",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
		},
		"Sweep",
		"RiskLocation",
	)
	graph.MustAddE(
		"sweep_schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
		},
		"Sweep",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_result",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
		},
		"Sweep",
		"SweepResult",
	)
	graph.MustAddE(
		"sweep_result_details",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
		},
		"Sweep",
		"SweepResultDetails",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.CreatorTable,
			Columns: []string{sweepresult.CreatorColumn},
			Bidi:    false,
		},
		"SweepResult",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.UpdaterTable,
			Columns: []string{sweepresult.UpdaterColumn},
			Bidi:    false,
		},
		"SweepResult",
		"Admin",
	)
	graph.MustAddE(
		"sweep",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.SweepTable,
			Columns: []string{sweepresult.SweepColumn},
			Bidi:    false,
		},
		"SweepResult",
		"Sweep",
	)
	graph.MustAddE(
		"sweep_schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.SweepScheduleTable,
			Columns: []string{sweepresult.SweepScheduleColumn},
			Bidi:    false,
		},
		"SweepResult",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_result_details",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepresult.SweepResultDetailsTable,
			Columns: []string{sweepresult.SweepResultDetailsColumn},
			Bidi:    false,
		},
		"SweepResult",
		"SweepResultDetails",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.CreatorTable,
			Columns: []string{sweepresultdetails.CreatorColumn},
			Bidi:    false,
		},
		"SweepResultDetails",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.UpdaterTable,
			Columns: []string{sweepresultdetails.UpdaterColumn},
			Bidi:    false,
		},
		"SweepResultDetails",
		"Admin",
	)
	graph.MustAddE(
		"sweep",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepTable,
			Columns: []string{sweepresultdetails.SweepColumn},
			Bidi:    false,
		},
		"SweepResultDetails",
		"Sweep",
	)
	graph.MustAddE(
		"sweep_schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepScheduleTable,
			Columns: []string{sweepresultdetails.SweepScheduleColumn},
			Bidi:    false,
		},
		"SweepResultDetails",
		"SweepSchedule",
	)
	graph.MustAddE(
		"sweep_result",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepResultTable,
			Columns: []string{sweepresultdetails.SweepResultColumn},
			Bidi:    false,
		},
		"SweepResultDetails",
		"SweepResult",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.CreatorTable,
			Columns: []string{sweepschedule.CreatorColumn},
			Bidi:    false,
		},
		"SweepSchedule",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
		},
		"SweepSchedule",
		"Admin",
	)
	graph.MustAddE(
		"sweep",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
		},
		"SweepSchedule",
		"Sweep",
	)
	graph.MustAddE(
		"workers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
		},
		"SweepSchedule",
		"Admin",
	)
	graph.MustAddE(
		"sweep_result",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
		},
		"SweepSchedule",
		"SweepResult",
	)
	graph.MustAddE(
		"sweep_result_details",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
		},
		"SweepSchedule",
		"SweepResultDetails",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UpdaterTable,
			Columns: []string{user.UpdaterColumn},
			Bidi:    false,
		},
		"User",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CreatorTable,
			Columns: []string{video.CreatorColumn},
			Bidi:    false,
		},
		"Video",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UpdaterTable,
			Columns: []string{video.UpdaterColumn},
			Bidi:    false,
		},
		"Video",
		"Admin",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.EventTable,
			Columns: []string{video.EventColumn},
			Bidi:    false,
		},
		"Video",
		"Event",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AdminQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminQuery builder.
func (aq *AdminQuery) Filter() *AdminFilter {
	return &AdminFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminMutation builder.
func (m *AdminMutation) Filter() *AdminFilter {
	return &AdminFilter{config: m.config, predicateAdder: m}
}

// AdminFilter provides a generic filtering capability at runtime for AdminQuery.
type AdminFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdminFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(admin.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AdminFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(admin.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *AdminFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(admin.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AdminFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(admin.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *AdminFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(admin.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AdminFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(admin.FieldUpdateTime))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AdminFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(admin.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *AdminFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(admin.FieldPassword))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *AdminFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(admin.FieldNickname))
}

// WhereRealName applies the entql string predicate on the real_name field.
func (f *AdminFilter) WhereRealName(p entql.StringP) {
	f.Where(p.Field(admin.FieldRealName))
}

// WhereMobile applies the entql string predicate on the mobile field.
func (f *AdminFilter) WhereMobile(p entql.StringP) {
	f.Where(p.Field(admin.FieldMobile))
}

// WhereWechatOpenid applies the entql string predicate on the wechat_openid field.
func (f *AdminFilter) WhereWechatOpenid(p entql.StringP) {
	f.Where(p.Field(admin.FieldWechatOpenid))
}

// WhereAvatar applies the entql json.RawMessage predicate on the avatar field.
func (f *AdminFilter) WhereAvatar(p entql.BytesP) {
	f.Where(p.Field(admin.FieldAvatar))
}

// WhereAdminStatus applies the entql int predicate on the admin_status field.
func (f *AdminFilter) WhereAdminStatus(p entql.IntP) {
	f.Where(p.Field(admin.FieldAdminStatus))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AdminFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AdminFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *AdminFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *AdminFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminCreator applies a predicate to check if query has an edge admin_creator.
func (f *AdminFilter) WhereHasAdminCreator() {
	f.Where(entql.HasEdge("admin_creator"))
}

// WhereHasAdminCreatorWith applies a predicate to check if query has an edge admin_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminUpdater applies a predicate to check if query has an edge admin_updater.
func (f *AdminFilter) WhereHasAdminUpdater() {
	f.Where(entql.HasEdge("admin_updater"))
}

// WhereHasAdminUpdaterWith applies a predicate to check if query has an edge admin_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissionCreator applies a predicate to check if query has an edge permission_creator.
func (f *AdminFilter) WhereHasPermissionCreator() {
	f.Where(entql.HasEdge("permission_creator"))
}

// WhereHasPermissionCreatorWith applies a predicate to check if query has an edge permission_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasPermissionCreatorWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissionUpdater applies a predicate to check if query has an edge permission_updater.
func (f *AdminFilter) WhereHasPermissionUpdater() {
	f.Where(entql.HasEdge("permission_updater"))
}

// WhereHasPermissionUpdaterWith applies a predicate to check if query has an edge permission_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasPermissionUpdaterWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCreator applies a predicate to check if query has an edge risk_creator.
func (f *AdminFilter) WhereHasRiskCreator() {
	f.Where(entql.HasEdge("risk_creator"))
}

// WhereHasRiskCreatorWith applies a predicate to check if query has an edge risk_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCreatorWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskUpdater applies a predicate to check if query has an edge risk_updater.
func (f *AdminFilter) WhereHasRiskUpdater() {
	f.Where(entql.HasEdge("risk_updater"))
}

// WhereHasRiskUpdaterWith applies a predicate to check if query has an edge risk_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskUpdaterWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskMaintainer applies a predicate to check if query has an edge risk_maintainer.
func (f *AdminFilter) WhereHasRiskMaintainer() {
	f.Where(entql.HasEdge("risk_maintainer"))
}

// WhereHasRiskMaintainerWith applies a predicate to check if query has an edge risk_maintainer with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskMaintainerWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationCreator applies a predicate to check if query has an edge risk_location_creator.
func (f *AdminFilter) WhereHasRiskLocationCreator() {
	f.Where(entql.HasEdge("risk_location_creator"))
}

// WhereHasRiskLocationCreatorWith applies a predicate to check if query has an edge risk_location_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationCreatorWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationUpdater applies a predicate to check if query has an edge risk_location_updater.
func (f *AdminFilter) WhereHasRiskLocationUpdater() {
	f.Where(entql.HasEdge("risk_location_updater"))
}

// WhereHasRiskLocationUpdaterWith applies a predicate to check if query has an edge risk_location_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationUpdaterWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryCreator applies a predicate to check if query has an edge risk_category_creator.
func (f *AdminFilter) WhereHasRiskCategoryCreator() {
	f.Where(entql.HasEdge("risk_category_creator"))
}

// WhereHasRiskCategoryCreatorWith applies a predicate to check if query has an edge risk_category_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryCreatorWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryUpdater applies a predicate to check if query has an edge risk_category_updater.
func (f *AdminFilter) WhereHasRiskCategoryUpdater() {
	f.Where(entql.HasEdge("risk_category_updater"))
}

// WhereHasRiskCategoryUpdaterWith applies a predicate to check if query has an edge risk_category_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryUpdaterWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentCreator applies a predicate to check if query has an edge department_creator.
func (f *AdminFilter) WhereHasDepartmentCreator() {
	f.Where(entql.HasEdge("department_creator"))
}

// WhereHasDepartmentCreatorWith applies a predicate to check if query has an edge department_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentCreatorWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentUpdater applies a predicate to check if query has an edge department_updater.
func (f *AdminFilter) WhereHasDepartmentUpdater() {
	f.Where(entql.HasEdge("department_updater"))
}

// WhereHasDepartmentUpdaterWith applies a predicate to check if query has an edge department_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentUpdaterWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeCreator applies a predicate to check if query has an edge employee_creator.
func (f *AdminFilter) WhereHasEmployeeCreator() {
	f.Where(entql.HasEdge("employee_creator"))
}

// WhereHasEmployeeCreatorWith applies a predicate to check if query has an edge employee_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeCreatorWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeUpdater applies a predicate to check if query has an edge employee_updater.
func (f *AdminFilter) WhereHasEmployeeUpdater() {
	f.Where(entql.HasEdge("employee_updater"))
}

// WhereHasEmployeeUpdaterWith applies a predicate to check if query has an edge employee_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeUpdaterWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AdminFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationCreator applies a predicate to check if query has an edge occupation_creator.
func (f *AdminFilter) WhereHasOccupationCreator() {
	f.Where(entql.HasEdge("occupation_creator"))
}

// WhereHasOccupationCreatorWith applies a predicate to check if query has an edge occupation_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationCreatorWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationUpdater applies a predicate to check if query has an edge occupation_updater.
func (f *AdminFilter) WhereHasOccupationUpdater() {
	f.Where(entql.HasEdge("occupation_updater"))
}

// WhereHasOccupationUpdaterWith applies a predicate to check if query has an edge occupation_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationUpdaterWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventCreator applies a predicate to check if query has an edge event_creator.
func (f *AdminFilter) WhereHasEventCreator() {
	f.Where(entql.HasEdge("event_creator"))
}

// WhereHasEventCreatorWith applies a predicate to check if query has an edge event_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventCreatorWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventUpdater applies a predicate to check if query has an edge event_updater.
func (f *AdminFilter) WhereHasEventUpdater() {
	f.Where(entql.HasEdge("event_updater"))
}

// WhereHasEventUpdaterWith applies a predicate to check if query has an edge event_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventUpdaterWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideoCreator applies a predicate to check if query has an edge video_creator.
func (f *AdminFilter) WhereHasVideoCreator() {
	f.Where(entql.HasEdge("video_creator"))
}

// WhereHasVideoCreatorWith applies a predicate to check if query has an edge video_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasVideoCreatorWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideoUpdater applies a predicate to check if query has an edge video_updater.
func (f *AdminFilter) WhereHasVideoUpdater() {
	f.Where(entql.HasEdge("video_updater"))
}

// WhereHasVideoUpdaterWith applies a predicate to check if query has an edge video_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasVideoUpdaterWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAreaCreator applies a predicate to check if query has an edge area_creator.
func (f *AdminFilter) WhereHasAreaCreator() {
	f.Where(entql.HasEdge("area_creator"))
}

// WhereHasAreaCreatorWith applies a predicate to check if query has an edge area_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAreaCreatorWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAreaUpdater applies a predicate to check if query has an edge area_updater.
func (f *AdminFilter) WhereHasAreaUpdater() {
	f.Where(entql.HasEdge("area_updater"))
}

// WhereHasAreaUpdaterWith applies a predicate to check if query has an edge area_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAreaUpdaterWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceCreator applies a predicate to check if query has an edge device_creator.
func (f *AdminFilter) WhereHasDeviceCreator() {
	f.Where(entql.HasEdge("device_creator"))
}

// WhereHasDeviceCreatorWith applies a predicate to check if query has an edge device_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceCreatorWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceUpdater applies a predicate to check if query has an edge device_updater.
func (f *AdminFilter) WhereHasDeviceUpdater() {
	f.Where(entql.HasEdge("device_updater"))
}

// WhereHasDeviceUpdaterWith applies a predicate to check if query has an edge device_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceUpdaterWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationCreator applies a predicate to check if query has an edge device_installation_creator.
func (f *AdminFilter) WhereHasDeviceInstallationCreator() {
	f.Where(entql.HasEdge("device_installation_creator"))
}

// WhereHasDeviceInstallationCreatorWith applies a predicate to check if query has an edge device_installation_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceInstallationCreatorWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationUpdater applies a predicate to check if query has an edge device_installation_updater.
func (f *AdminFilter) WhereHasDeviceInstallationUpdater() {
	f.Where(entql.HasEdge("device_installation_updater"))
}

// WhereHasDeviceInstallationUpdaterWith applies a predicate to check if query has an edge device_installation_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceInstallationUpdaterWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLevelCreator applies a predicate to check if query has an edge event_level_creator.
func (f *AdminFilter) WhereHasEventLevelCreator() {
	f.Where(entql.HasEdge("event_level_creator"))
}

// WhereHasEventLevelCreatorWith applies a predicate to check if query has an edge event_level_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLevelCreatorWith(preds ...predicate.EventLevel) {
	f.Where(entql.HasEdgeWith("event_level_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLevelUpdater applies a predicate to check if query has an edge event_level_updater.
func (f *AdminFilter) WhereHasEventLevelUpdater() {
	f.Where(entql.HasEdge("event_level_updater"))
}

// WhereHasEventLevelUpdaterWith applies a predicate to check if query has an edge event_level_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLevelUpdaterWith(preds ...predicate.EventLevel) {
	f.Where(entql.HasEdgeWith("event_level_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixingCreator applies a predicate to check if query has an edge fixing_creator.
func (f *AdminFilter) WhereHasFixingCreator() {
	f.Where(entql.HasEdge("fixing_creator"))
}

// WhereHasFixingCreatorWith applies a predicate to check if query has an edge fixing_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasFixingCreatorWith(preds ...predicate.Fixing) {
	f.Where(entql.HasEdgeWith("fixing_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixingUpdater applies a predicate to check if query has an edge fixing_updater.
func (f *AdminFilter) WhereHasFixingUpdater() {
	f.Where(entql.HasEdge("fixing_updater"))
}

// WhereHasFixingUpdaterWith applies a predicate to check if query has an edge fixing_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasFixingUpdaterWith(preds ...predicate.Fixing) {
	f.Where(entql.HasEdgeWith("fixing_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixer applies a predicate to check if query has an edge fixer.
func (f *AdminFilter) WhereHasFixer() {
	f.Where(entql.HasEdge("fixer"))
}

// WhereHasFixerWith applies a predicate to check if query has an edge fixer with a given conditions (other predicates).
func (f *AdminFilter) WhereHasFixerWith(preds ...predicate.Fixing) {
	f.Where(entql.HasEdgeWith("fixer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLogCreator applies a predicate to check if query has an edge event_log_creator.
func (f *AdminFilter) WhereHasEventLogCreator() {
	f.Where(entql.HasEdge("event_log_creator"))
}

// WhereHasEventLogCreatorWith applies a predicate to check if query has an edge event_log_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLogCreatorWith(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLogUpdater applies a predicate to check if query has an edge event_log_updater.
func (f *AdminFilter) WhereHasEventLogUpdater() {
	f.Where(entql.HasEdge("event_log_updater"))
}

// WhereHasEventLogUpdaterWith applies a predicate to check if query has an edge event_log_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLogUpdaterWith(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLogActor applies a predicate to check if query has an edge event_log_actor.
func (f *AdminFilter) WhereHasEventLogActor() {
	f.Where(entql.HasEdge("event_log_actor"))
}

// WhereHasEventLogActorWith applies a predicate to check if query has an edge event_log_actor with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLogActorWith(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log_actor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLogActor2 applies a predicate to check if query has an edge event_log_actor2.
func (f *AdminFilter) WhereHasEventLogActor2() {
	f.Where(entql.HasEdge("event_log_actor2"))
}

// WhereHasEventLogActor2With applies a predicate to check if query has an edge event_log_actor2 with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLogActor2With(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log_actor2", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepCreator applies a predicate to check if query has an edge sweep_creator.
func (f *AdminFilter) WhereHasSweepCreator() {
	f.Where(entql.HasEdge("sweep_creator"))
}

// WhereHasSweepCreatorWith applies a predicate to check if query has an edge sweep_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepCreatorWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepUpdater applies a predicate to check if query has an edge sweep_updater.
func (f *AdminFilter) WhereHasSweepUpdater() {
	f.Where(entql.HasEdge("sweep_updater"))
}

// WhereHasSweepUpdaterWith applies a predicate to check if query has an edge sweep_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepUpdaterWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepScheduleCreator applies a predicate to check if query has an edge sweep_schedule_creator.
func (f *AdminFilter) WhereHasSweepScheduleCreator() {
	f.Where(entql.HasEdge("sweep_schedule_creator"))
}

// WhereHasSweepScheduleCreatorWith applies a predicate to check if query has an edge sweep_schedule_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepScheduleCreatorWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepScheduleUpdater applies a predicate to check if query has an edge sweep_schedule_updater.
func (f *AdminFilter) WhereHasSweepScheduleUpdater() {
	f.Where(entql.HasEdge("sweep_schedule_updater"))
}

// WhereHasSweepScheduleUpdaterWith applies a predicate to check if query has an edge sweep_schedule_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepScheduleUpdaterWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepSchedule applies a predicate to check if query has an edge sweep_schedule.
func (f *AdminFilter) WhereHasSweepSchedule() {
	f.Where(entql.HasEdge("sweep_schedule"))
}

// WhereHasSweepScheduleWith applies a predicate to check if query has an edge sweep_schedule with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepScheduleWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultCreator applies a predicate to check if query has an edge sweep_result_creator.
func (f *AdminFilter) WhereHasSweepResultCreator() {
	f.Where(entql.HasEdge("sweep_result_creator"))
}

// WhereHasSweepResultCreatorWith applies a predicate to check if query has an edge sweep_result_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepResultCreatorWith(preds ...predicate.SweepResult) {
	f.Where(entql.HasEdgeWith("sweep_result_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultUpdater applies a predicate to check if query has an edge sweep_result_updater.
func (f *AdminFilter) WhereHasSweepResultUpdater() {
	f.Where(entql.HasEdge("sweep_result_updater"))
}

// WhereHasSweepResultUpdaterWith applies a predicate to check if query has an edge sweep_result_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepResultUpdaterWith(preds ...predicate.SweepResult) {
	f.Where(entql.HasEdgeWith("sweep_result_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultDetailsCreator applies a predicate to check if query has an edge sweep_result_details_creator.
func (f *AdminFilter) WhereHasSweepResultDetailsCreator() {
	f.Where(entql.HasEdge("sweep_result_details_creator"))
}

// WhereHasSweepResultDetailsCreatorWith applies a predicate to check if query has an edge sweep_result_details_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepResultDetailsCreatorWith(preds ...predicate.SweepResultDetails) {
	f.Where(entql.HasEdgeWith("sweep_result_details_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultDetailsUpdater applies a predicate to check if query has an edge sweep_result_details_updater.
func (f *AdminFilter) WhereHasSweepResultDetailsUpdater() {
	f.Where(entql.HasEdge("sweep_result_details_updater"))
}

// WhereHasSweepResultDetailsUpdaterWith applies a predicate to check if query has an edge sweep_result_details_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasSweepResultDetailsUpdaterWith(preds ...predicate.SweepResultDetails) {
	f.Where(entql.HasEdgeWith("sweep_result_details_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserUpdater applies a predicate to check if query has an edge user_updater.
func (f *AdminFilter) WhereHasUserUpdater() {
	f.Where(entql.HasEdge("user_updater"))
}

// WhereHasUserUpdaterWith applies a predicate to check if query has an edge user_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasUserUpdaterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AreaQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AreaQuery builder.
func (aq *AreaQuery) Filter() *AreaFilter {
	return &AreaFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AreaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AreaMutation builder.
func (m *AreaMutation) Filter() *AreaFilter {
	return &AreaFilter{config: m.config, predicateAdder: m}
}

// AreaFilter provides a generic filtering capability at runtime for AreaQuery.
type AreaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AreaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AreaFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(area.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AreaFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *AreaFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(area.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AreaFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *AreaFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(area.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AreaFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *AreaFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(area.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AreaFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(area.FieldDescription))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AreaFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AreaFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AreaFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AreaFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallation applies a predicate to check if query has an edge device_installation.
func (f *AreaFilter) WhereHasDeviceInstallation() {
	f.Where(entql.HasEdge("device_installation"))
}

// WhereHasDeviceInstallationWith applies a predicate to check if query has an edge device_installation with a given conditions (other predicates).
func (f *AreaFilter) WhereHasDeviceInstallationWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DepartmentQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepartmentQuery builder.
func (dq *DepartmentQuery) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DepartmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepartmentMutation builder.
func (m *DepartmentMutation) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: m.config, predicateAdder: m}
}

// DepartmentFilter provides a generic filtering capability at runtime for DepartmentQuery.
type DepartmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepartmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DepartmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(department.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DepartmentFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(department.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *DepartmentFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(department.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *DepartmentFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(department.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *DepartmentFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(department.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DepartmentFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(department.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *DepartmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(department.FieldName))
}

// WhereParentID applies the entql int predicate on the parent_id field.
func (f *DepartmentFilter) WhereParentID(p entql.IntP) {
	f.Where(p.Field(department.FieldParentID))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *DepartmentFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(department.FieldNotes))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DepartmentFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DepartmentFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DepartmentFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasParentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *DepartmentFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *DepartmentFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DepartmentFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasChildrenWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DeviceQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceQuery builder.
func (dq *DeviceQuery) Filter() *DeviceFilter {
	return &DeviceFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceMutation builder.
func (m *DeviceMutation) Filter() *DeviceFilter {
	return &DeviceFilter{config: m.config, predicateAdder: m}
}

// DeviceFilter provides a generic filtering capability at runtime for DeviceQuery.
type DeviceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeviceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(device.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DeviceFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(device.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *DeviceFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(device.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *DeviceFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(device.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *DeviceFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(device.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DeviceFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(device.FieldUpdateTime))
}

// WhereBrand applies the entql int predicate on the brand field.
func (f *DeviceFilter) WhereBrand(p entql.IntP) {
	f.Where(p.Field(device.FieldBrand))
}

// WhereModel applies the entql int predicate on the model field.
func (f *DeviceFilter) WhereModel(p entql.IntP) {
	f.Where(p.Field(device.FieldModel))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeviceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(device.FieldName))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *DeviceFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(device.FieldSn))
}

// WhereDeviceType applies the entql int predicate on the device_type field.
func (f *DeviceFilter) WhereDeviceType(p entql.IntP) {
	f.Where(p.Field(device.FieldDeviceType))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DeviceFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DeviceFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *DeviceFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallation applies a predicate to check if query has an edge device_installation.
func (f *DeviceFilter) WhereHasDeviceInstallation() {
	f.Where(entql.HasEdge("device_installation"))
}

// WhereHasDeviceInstallationWith applies a predicate to check if query has an edge device_installation with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasDeviceInstallationWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLog applies a predicate to check if query has an edge event_log.
func (f *DeviceFilter) WhereHasEventLog() {
	f.Where(entql.HasEdge("event_log"))
}

// WhereHasEventLogWith applies a predicate to check if query has an edge event_log with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasEventLogWith(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixing applies a predicate to check if query has an edge fixing.
func (f *DeviceFilter) WhereHasFixing() {
	f.Where(entql.HasEdge("fixing"))
}

// WhereHasFixingWith applies a predicate to check if query has an edge fixing with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasFixingWith(preds ...predicate.Fixing) {
	f.Where(entql.HasEdgeWith("fixing", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (diq *DeviceInstallationQuery) addPredicate(pred func(s *sql.Selector)) {
	diq.predicates = append(diq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceInstallationQuery builder.
func (diq *DeviceInstallationQuery) Filter() *DeviceInstallationFilter {
	return &DeviceInstallationFilter{config: diq.config, predicateAdder: diq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceInstallationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceInstallationMutation builder.
func (m *DeviceInstallationMutation) Filter() *DeviceInstallationFilter {
	return &DeviceInstallationFilter{config: m.config, predicateAdder: m}
}

// DeviceInstallationFilter provides a generic filtering capability at runtime for DeviceInstallationQuery.
type DeviceInstallationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceInstallationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeviceInstallationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DeviceInstallationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *DeviceInstallationFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *DeviceInstallationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *DeviceInstallationFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DeviceInstallationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldUpdateTime))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *DeviceInstallationFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldDeviceID))
}

// WhereAreaID applies the entql int predicate on the area_id field.
func (f *DeviceInstallationFilter) WhereAreaID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldAreaID))
}

// WhereAliasName applies the entql string predicate on the alias_name field.
func (f *DeviceInstallationFilter) WhereAliasName(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldAliasName))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *DeviceInstallationFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(deviceinstallation.FieldLongitude))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *DeviceInstallationFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(deviceinstallation.FieldLatitude))
}

// WhereLocationData applies the entql string predicate on the location_data field.
func (f *DeviceInstallationFilter) WhereLocationData(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldLocationData))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *DeviceInstallationFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldLocation))
}

// WhereInstaller applies the entql string predicate on the installer field.
func (f *DeviceInstallationFilter) WhereInstaller(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldInstaller))
}

// WhereInstallTime applies the entql time.Time predicate on the install_time field.
func (f *DeviceInstallationFilter) WhereInstallTime(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldInstallTime))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DeviceInstallationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DeviceInstallationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *DeviceInstallationFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *DeviceInstallationFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: m.config, predicateAdder: m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *EmployeeFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *EmployeeFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(employee.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *EmployeeFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *EmployeeFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(employee.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *EmployeeFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdateTime))
}

// WhereAdminID applies the entql int predicate on the admin_id field.
func (f *EmployeeFilter) WhereAdminID(p entql.IntP) {
	f.Where(p.Field(employee.FieldAdminID))
}

// WhereDepartmentID applies the entql int predicate on the department_id field.
func (f *EmployeeFilter) WhereDepartmentID(p entql.IntP) {
	f.Where(p.Field(employee.FieldDepartmentID))
}

// WhereOccupationID applies the entql int predicate on the occupation_id field.
func (f *EmployeeFilter) WhereOccupationID(p entql.IntP) {
	f.Where(p.Field(employee.FieldOccupationID))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EmployeeFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EmployeeFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmin applies a predicate to check if query has an edge admin.
func (f *EmployeeFilter) WhereHasAdmin() {
	f.Where(entql.HasEdge("admin"))
}

// WhereHasAdminWith applies a predicate to check if query has an edge admin with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAdminWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupation applies a predicate to check if query has an edge occupation.
func (f *EmployeeFilter) WhereHasOccupation() {
	f.Where(entql.HasEdge("occupation"))
}

// WhereHasOccupationWith applies a predicate to check if query has an edge occupation with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasOccupationWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *EmployeeFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *EventFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(event.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *EventFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(event.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *EventFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(event.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *EventFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(event.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *EventFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(event.FieldUpdateTime))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *EventFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(event.FieldDeviceID))
}

// WhereVideoID applies the entql int predicate on the video_id field.
func (f *EventFilter) WhereVideoID(p entql.IntP) {
	f.Where(p.Field(event.FieldVideoID))
}

// WhereEventTime applies the entql time.Time predicate on the event_time field.
func (f *EventFilter) WhereEventTime(p entql.TimeP) {
	f.Where(p.Field(event.FieldEventTime))
}

// WhereEventType applies the entql int predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.IntP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereEventStatus applies the entql int predicate on the event_status field.
func (f *EventFilter) WhereEventStatus(p entql.IntP) {
	f.Where(p.Field(event.FieldEventStatus))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *EventFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(event.FieldImages))
}

// WhereLabeledImages applies the entql json.RawMessage predicate on the labeled_images field.
func (f *EventFilter) WhereLabeledImages(p entql.BytesP) {
	f.Where(p.Field(event.FieldLabeledImages))
}

// WhereDataID applies the entql string predicate on the data_id field.
func (f *EventFilter) WhereDataID(p entql.StringP) {
	f.Where(p.Field(event.FieldDataID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(event.FieldDescription))
}

// WhereRawData applies the entql string predicate on the raw_data field.
func (f *EventFilter) WhereRawData(p entql.StringP) {
	f.Where(p.Field(event.FieldRawData))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EventFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EventFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EventFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EventFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideo applies a predicate to check if query has an edge video.
func (f *EventFilter) WhereHasVideo() {
	f.Where(entql.HasEdge("video"))
}

// WhereHasVideoWith applies a predicate to check if query has an edge video with a given conditions (other predicates).
func (f *EventFilter) WhereHasVideoWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *EventFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *EventFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixing applies a predicate to check if query has an edge fixing.
func (f *EventFilter) WhereHasFixing() {
	f.Where(entql.HasEdge("fixing"))
}

// WhereHasFixingWith applies a predicate to check if query has an edge fixing with a given conditions (other predicates).
func (f *EventFilter) WhereHasFixingWith(preds ...predicate.Fixing) {
	f.Where(entql.HasEdgeWith("fixing", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLog applies a predicate to check if query has an edge event_log.
func (f *EventFilter) WhereHasEventLog() {
	f.Where(entql.HasEdge("event_log"))
}

// WhereHasEventLogWith applies a predicate to check if query has an edge event_log with a given conditions (other predicates).
func (f *EventFilter) WhereHasEventLogWith(preds ...predicate.EventLog) {
	f.Where(entql.HasEdgeWith("event_log", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (elq *EventLevelQuery) addPredicate(pred func(s *sql.Selector)) {
	elq.predicates = append(elq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventLevelQuery builder.
func (elq *EventLevelQuery) Filter() *EventLevelFilter {
	return &EventLevelFilter{config: elq.config, predicateAdder: elq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventLevelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventLevelMutation builder.
func (m *EventLevelMutation) Filter() *EventLevelFilter {
	return &EventLevelFilter{config: m.config, predicateAdder: m}
}

// EventLevelFilter provides a generic filtering capability at runtime for EventLevelQuery.
type EventLevelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventLevelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventLevelFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *EventLevelFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *EventLevelFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *EventLevelFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *EventLevelFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *EventLevelFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *EventLevelFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(eventlevel.FieldName))
}

// WhereEventTypes applies the entql json.RawMessage predicate on the event_types field.
func (f *EventLevelFilter) WhereEventTypes(p entql.BytesP) {
	f.Where(p.Field(eventlevel.FieldEventTypes))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EventLevelFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(eventlevel.FieldDescription))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *EventLevelFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(eventlevel.FieldIcon))
}

// WhereNotifyTypes applies the entql json.RawMessage predicate on the notify_types field.
func (f *EventLevelFilter) WhereNotifyTypes(p entql.BytesP) {
	f.Where(p.Field(eventlevel.FieldNotifyTypes))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EventLevelFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EventLevelFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EventLevelFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EventLevelFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (elq *EventLogQuery) addPredicate(pred func(s *sql.Selector)) {
	elq.predicates = append(elq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventLogQuery builder.
func (elq *EventLogQuery) Filter() *EventLogFilter {
	return &EventLogFilter{config: elq.config, predicateAdder: elq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventLogMutation builder.
func (m *EventLogMutation) Filter() *EventLogFilter {
	return &EventLogFilter{config: m.config, predicateAdder: m}
}

// EventLogFilter provides a generic filtering capability at runtime for EventLogQuery.
type EventLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *EventLogFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(eventlog.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *EventLogFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *EventLogFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(eventlog.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *EventLogFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *EventLogFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(eventlog.FieldUpdateTime))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *EventLogFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldDeviceID))
}

// WhereEventID applies the entql int predicate on the event_id field.
func (f *EventLogFilter) WhereEventID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldEventID))
}

// WhereActorID applies the entql int predicate on the actor_id field.
func (f *EventLogFilter) WhereActorID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldActorID))
}

// WhereActor2ID applies the entql int predicate on the actor2_id field.
func (f *EventLogFilter) WhereActor2ID(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldActor2ID))
}

// WhereLogType applies the entql int predicate on the log_type field.
func (f *EventLogFilter) WhereLogType(p entql.IntP) {
	f.Where(p.Field(eventlog.FieldLogType))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *EventLogFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(eventlog.FieldNotes))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EventLogFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EventLogFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *EventLogFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *EventLogFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActor applies a predicate to check if query has an edge actor.
func (f *EventLogFilter) WhereHasActor() {
	f.Where(entql.HasEdge("actor"))
}

// WhereHasActorWith applies a predicate to check if query has an edge actor with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasActorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("actor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActor2 applies a predicate to check if query has an edge actor2.
func (f *EventLogFilter) WhereHasActor2() {
	f.Where(entql.HasEdge("actor2"))
}

// WhereHasActor2With applies a predicate to check if query has an edge actor2 with a given conditions (other predicates).
func (f *EventLogFilter) WhereHasActor2With(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("actor2", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fq *FixingQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FixingQuery builder.
func (fq *FixingQuery) Filter() *FixingFilter {
	return &FixingFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FixingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FixingMutation builder.
func (m *FixingMutation) Filter() *FixingFilter {
	return &FixingFilter{config: m.config, predicateAdder: m}
}

// FixingFilter provides a generic filtering capability at runtime for FixingQuery.
type FixingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FixingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *FixingFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *FixingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(fixing.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *FixingFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *FixingFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(fixing.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *FixingFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *FixingFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(fixing.FieldUpdateTime))
}

// WhereFixerID applies the entql int predicate on the fixer_id field.
func (f *FixingFilter) WhereFixerID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldFixerID))
}

// WhereEventID applies the entql int predicate on the event_id field.
func (f *FixingFilter) WhereEventID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldEventID))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *FixingFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(fixing.FieldDeviceID))
}

// WhereAssignNotes applies the entql string predicate on the assign_notes field.
func (f *FixingFilter) WhereAssignNotes(p entql.StringP) {
	f.Where(p.Field(fixing.FieldAssignNotes))
}

// WhereFixTime applies the entql time.Time predicate on the fix_time field.
func (f *FixingFilter) WhereFixTime(p entql.TimeP) {
	f.Where(p.Field(fixing.FieldFixTime))
}

// WhereCompleteTime applies the entql time.Time predicate on the complete_time field.
func (f *FixingFilter) WhereCompleteTime(p entql.TimeP) {
	f.Where(p.Field(fixing.FieldCompleteTime))
}

// WhereCompleteNotes applies the entql string predicate on the complete_notes field.
func (f *FixingFilter) WhereCompleteNotes(p entql.StringP) {
	f.Where(p.Field(fixing.FieldCompleteNotes))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *FixingFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *FixingFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *FixingFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *FixingFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixer applies a predicate to check if query has an edge fixer.
func (f *FixingFilter) WhereHasFixer() {
	f.Where(entql.HasEdge("fixer"))
}

// WhereHasFixerWith applies a predicate to check if query has an edge fixer with a given conditions (other predicates).
func (f *FixingFilter) WhereHasFixerWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("fixer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *FixingFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *FixingFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *FixingFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *FixingFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OccupationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OccupationQuery builder.
func (oq *OccupationQuery) Filter() *OccupationFilter {
	return &OccupationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OccupationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OccupationMutation builder.
func (m *OccupationMutation) Filter() *OccupationFilter {
	return &OccupationFilter{config: m.config, predicateAdder: m}
}

// OccupationFilter provides a generic filtering capability at runtime for OccupationQuery.
type OccupationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OccupationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OccupationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(occupation.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OccupationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *OccupationFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(occupation.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OccupationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *OccupationFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(occupation.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OccupationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OccupationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(occupation.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OccupationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(occupation.FieldDescription))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *OccupationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *OccupationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *OccupationFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (pq *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(permission.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *PermissionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *PermissionFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(permission.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *PermissionFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *PermissionFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(permission.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *PermissionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *PermissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(permission.FieldName))
}

// WhereAccessIds applies the entql json.RawMessage predicate on the access_ids field.
func (f *PermissionFilter) WhereAccessIds(p entql.BytesP) {
	f.Where(p.Field(permission.FieldAccessIds))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *PermissionFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *PermissionFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmin applies a predicate to check if query has an edge admin.
func (f *PermissionFilter) WhereHasAdmin() {
	f.Where(entql.HasEdge("admin"))
}

// WhereHasAdminWith applies a predicate to check if query has an edge admin with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasAdminWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *PermissionFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiskQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskQuery builder.
func (rq *RiskQuery) Filter() *RiskFilter {
	return &RiskFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskMutation builder.
func (m *RiskMutation) Filter() *RiskFilter {
	return &RiskFilter{config: m.config, predicateAdder: m}
}

// RiskFilter provides a generic filtering capability at runtime for RiskQuery.
type RiskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risk.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RiskFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *RiskFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(risk.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RiskFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *RiskFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(risk.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RiskFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldUpdateTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *RiskFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(risk.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *RiskFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(risk.FieldContent))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *RiskFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(risk.FieldImages))
}

// WhereMaintainedImages applies the entql json.RawMessage predicate on the maintained_images field.
func (f *RiskFilter) WhereMaintainedImages(p entql.BytesP) {
	f.Where(p.Field(risk.FieldMaintainedImages))
}

// WhereRiskCategoryID applies the entql int predicate on the risk_category_id field.
func (f *RiskFilter) WhereRiskCategoryID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskCategoryID))
}

// WhereRiskLocationID applies the entql int predicate on the risk_location_id field.
func (f *RiskFilter) WhereRiskLocationID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskLocationID))
}

// WhereMaintainerID applies the entql int predicate on the maintainer_id field.
func (f *RiskFilter) WhereMaintainerID(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainerID))
}

// WhereMeasures applies the entql string predicate on the measures field.
func (f *RiskFilter) WhereMeasures(p entql.StringP) {
	f.Where(p.Field(risk.FieldMeasures))
}

// WhereMaintainStatus applies the entql int predicate on the maintain_status field.
func (f *RiskFilter) WhereMaintainStatus(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainStatus))
}

// WhereDueTime applies the entql time.Time predicate on the due_time field.
func (f *RiskFilter) WhereDueTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDueTime))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategory applies a predicate to check if query has an edge risk_category.
func (f *RiskFilter) WhereHasRiskCategory() {
	f.Where(entql.HasEdge("risk_category"))
}

// WhereHasRiskCategoryWith applies a predicate to check if query has an edge risk_category with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskCategoryWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocation applies a predicate to check if query has an edge risk_location.
func (f *RiskFilter) WhereHasRiskLocation() {
	f.Where(entql.HasEdge("risk_location"))
}

// WhereHasRiskLocationWith applies a predicate to check if query has an edge risk_location with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskLocationWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMaintainer applies a predicate to check if query has an edge maintainer.
func (f *RiskFilter) WhereHasMaintainer() {
	f.Where(entql.HasEdge("maintainer"))
}

// WhereHasMaintainerWith applies a predicate to check if query has an edge maintainer with a given conditions (other predicates).
func (f *RiskFilter) WhereHasMaintainerWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RiskCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskCategoryQuery builder.
func (rcq *RiskCategoryQuery) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskCategoryMutation builder.
func (m *RiskCategoryMutation) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: m.config, predicateAdder: m}
}

// RiskCategoryFilter provides a generic filtering capability at runtime for RiskCategoryQuery.
type RiskCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskCategoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RiskCategoryFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *RiskCategoryFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RiskCategoryFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *RiskCategoryFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RiskCategoryFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(riskcategory.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskCategoryFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskCategoryFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskCategoryFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweep applies a predicate to check if query has an edge sweep.
func (f *RiskCategoryFilter) WhereHasSweep() {
	f.Where(entql.HasEdge("sweep"))
}

// WhereHasSweepWith applies a predicate to check if query has an edge sweep with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasSweepWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rlq *RiskLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	rlq.predicates = append(rlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskLocationQuery builder.
func (rlq *RiskLocationQuery) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: rlq.config, predicateAdder: rlq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskLocationMutation builder.
func (m *RiskLocationMutation) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: m.config, predicateAdder: m}
}

// RiskLocationFilter provides a generic filtering capability at runtime for RiskLocationQuery.
type RiskLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskLocationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RiskLocationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *RiskLocationFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RiskLocationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *RiskLocationFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RiskLocationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskLocationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(risklocation.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskLocationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskLocationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskLocationFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweep applies a predicate to check if query has an edge sweep.
func (f *RiskLocationFilter) WhereHasSweep() {
	f.Where(entql.HasEdge("sweep"))
}

// WhereHasSweepWith applies a predicate to check if query has an edge sweep with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasSweepWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SweepQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SweepQuery builder.
func (sq *SweepQuery) Filter() *SweepFilter {
	return &SweepFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SweepMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SweepMutation builder.
func (m *SweepMutation) Filter() *SweepFilter {
	return &SweepFilter{config: m.config, predicateAdder: m}
}

// SweepFilter provides a generic filtering capability at runtime for SweepQuery.
type SweepFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SweepFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SweepFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sweep.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SweepFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(sweep.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *SweepFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(sweep.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SweepFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(sweep.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *SweepFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(sweep.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SweepFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(sweep.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *SweepFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(sweep.FieldName))
}

// WhereRiskCategoryID applies the entql int predicate on the risk_category_id field.
func (f *SweepFilter) WhereRiskCategoryID(p entql.IntP) {
	f.Where(p.Field(sweep.FieldRiskCategoryID))
}

// WhereRiskLocationID applies the entql int predicate on the risk_location_id field.
func (f *SweepFilter) WhereRiskLocationID(p entql.IntP) {
	f.Where(p.Field(sweep.FieldRiskLocationID))
}

// WhereSweepJobs applies the entql json.RawMessage predicate on the sweep_jobs field.
func (f *SweepFilter) WhereSweepJobs(p entql.BytesP) {
	f.Where(p.Field(sweep.FieldSweepJobs))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *SweepFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *SweepFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *SweepFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *SweepFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategory applies a predicate to check if query has an edge risk_category.
func (f *SweepFilter) WhereHasRiskCategory() {
	f.Where(entql.HasEdge("risk_category"))
}

// WhereHasRiskCategoryWith applies a predicate to check if query has an edge risk_category with a given conditions (other predicates).
func (f *SweepFilter) WhereHasRiskCategoryWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocation applies a predicate to check if query has an edge risk_location.
func (f *SweepFilter) WhereHasRiskLocation() {
	f.Where(entql.HasEdge("risk_location"))
}

// WhereHasRiskLocationWith applies a predicate to check if query has an edge risk_location with a given conditions (other predicates).
func (f *SweepFilter) WhereHasRiskLocationWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepSchedule applies a predicate to check if query has an edge sweep_schedule.
func (f *SweepFilter) WhereHasSweepSchedule() {
	f.Where(entql.HasEdge("sweep_schedule"))
}

// WhereHasSweepScheduleWith applies a predicate to check if query has an edge sweep_schedule with a given conditions (other predicates).
func (f *SweepFilter) WhereHasSweepScheduleWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResult applies a predicate to check if query has an edge sweep_result.
func (f *SweepFilter) WhereHasSweepResult() {
	f.Where(entql.HasEdge("sweep_result"))
}

// WhereHasSweepResultWith applies a predicate to check if query has an edge sweep_result with a given conditions (other predicates).
func (f *SweepFilter) WhereHasSweepResultWith(preds ...predicate.SweepResult) {
	f.Where(entql.HasEdgeWith("sweep_result", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultDetails applies a predicate to check if query has an edge sweep_result_details.
func (f *SweepFilter) WhereHasSweepResultDetails() {
	f.Where(entql.HasEdge("sweep_result_details"))
}

// WhereHasSweepResultDetailsWith applies a predicate to check if query has an edge sweep_result_details with a given conditions (other predicates).
func (f *SweepFilter) WhereHasSweepResultDetailsWith(preds ...predicate.SweepResultDetails) {
	f.Where(entql.HasEdgeWith("sweep_result_details", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (srq *SweepResultQuery) addPredicate(pred func(s *sql.Selector)) {
	srq.predicates = append(srq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SweepResultQuery builder.
func (srq *SweepResultQuery) Filter() *SweepResultFilter {
	return &SweepResultFilter{config: srq.config, predicateAdder: srq}
}

// addPredicate implements the predicateAdder interface.
func (m *SweepResultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SweepResultMutation builder.
func (m *SweepResultMutation) Filter() *SweepResultFilter {
	return &SweepResultFilter{config: m.config, predicateAdder: m}
}

// SweepResultFilter provides a generic filtering capability at runtime for SweepResultQuery.
type SweepResultFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SweepResultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SweepResultFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sweepresult.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SweepResultFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(sweepresult.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *SweepResultFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(sweepresult.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SweepResultFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(sweepresult.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *SweepResultFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(sweepresult.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SweepResultFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(sweepresult.FieldUpdateTime))
}

// WhereSweepID applies the entql int predicate on the sweep_id field.
func (f *SweepResultFilter) WhereSweepID(p entql.IntP) {
	f.Where(p.Field(sweepresult.FieldSweepID))
}

// WhereSweepScheduleID applies the entql int predicate on the sweep_schedule_id field.
func (f *SweepResultFilter) WhereSweepScheduleID(p entql.IntP) {
	f.Where(p.Field(sweepresult.FieldSweepScheduleID))
}

// WhereCheckInTime applies the entql time.Time predicate on the check_in_time field.
func (f *SweepResultFilter) WhereCheckInTime(p entql.TimeP) {
	f.Where(p.Field(sweepresult.FieldCheckInTime))
}

// WhereCheckInImage applies the entql json.RawMessage predicate on the check_in_image field.
func (f *SweepResultFilter) WhereCheckInImage(p entql.BytesP) {
	f.Where(p.Field(sweepresult.FieldCheckInImage))
}

// WhereSweepJobs applies the entql json.RawMessage predicate on the sweep_jobs field.
func (f *SweepResultFilter) WhereSweepJobs(p entql.BytesP) {
	f.Where(p.Field(sweepresult.FieldSweepJobs))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *SweepResultFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *SweepResultFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *SweepResultFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *SweepResultFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweep applies a predicate to check if query has an edge sweep.
func (f *SweepResultFilter) WhereHasSweep() {
	f.Where(entql.HasEdge("sweep"))
}

// WhereHasSweepWith applies a predicate to check if query has an edge sweep with a given conditions (other predicates).
func (f *SweepResultFilter) WhereHasSweepWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepSchedule applies a predicate to check if query has an edge sweep_schedule.
func (f *SweepResultFilter) WhereHasSweepSchedule() {
	f.Where(entql.HasEdge("sweep_schedule"))
}

// WhereHasSweepScheduleWith applies a predicate to check if query has an edge sweep_schedule with a given conditions (other predicates).
func (f *SweepResultFilter) WhereHasSweepScheduleWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultDetails applies a predicate to check if query has an edge sweep_result_details.
func (f *SweepResultFilter) WhereHasSweepResultDetails() {
	f.Where(entql.HasEdge("sweep_result_details"))
}

// WhereHasSweepResultDetailsWith applies a predicate to check if query has an edge sweep_result_details with a given conditions (other predicates).
func (f *SweepResultFilter) WhereHasSweepResultDetailsWith(preds ...predicate.SweepResultDetails) {
	f.Where(entql.HasEdgeWith("sweep_result_details", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (srdq *SweepResultDetailsQuery) addPredicate(pred func(s *sql.Selector)) {
	srdq.predicates = append(srdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SweepResultDetailsQuery builder.
func (srdq *SweepResultDetailsQuery) Filter() *SweepResultDetailsFilter {
	return &SweepResultDetailsFilter{config: srdq.config, predicateAdder: srdq}
}

// addPredicate implements the predicateAdder interface.
func (m *SweepResultDetailsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SweepResultDetailsMutation builder.
func (m *SweepResultDetailsMutation) Filter() *SweepResultDetailsFilter {
	return &SweepResultDetailsFilter{config: m.config, predicateAdder: m}
}

// SweepResultDetailsFilter provides a generic filtering capability at runtime for SweepResultDetailsQuery.
type SweepResultDetailsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SweepResultDetailsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SweepResultDetailsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SweepResultDetailsFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(sweepresultdetails.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *SweepResultDetailsFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SweepResultDetailsFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(sweepresultdetails.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *SweepResultDetailsFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SweepResultDetailsFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(sweepresultdetails.FieldUpdateTime))
}

// WhereSweepID applies the entql int predicate on the sweep_id field.
func (f *SweepResultDetailsFilter) WhereSweepID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldSweepID))
}

// WhereSweepScheduleID applies the entql int predicate on the sweep_schedule_id field.
func (f *SweepResultDetailsFilter) WhereSweepScheduleID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldSweepScheduleID))
}

// WhereSweepResultID applies the entql int predicate on the sweep_result_id field.
func (f *SweepResultDetailsFilter) WhereSweepResultID(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldSweepResultID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *SweepResultDetailsFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(sweepresultdetails.FieldTitle))
}

// WhereResult applies the entql int predicate on the result field.
func (f *SweepResultDetailsFilter) WhereResult(p entql.IntP) {
	f.Where(p.Field(sweepresultdetails.FieldResult))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *SweepResultDetailsFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *SweepResultDetailsFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *SweepResultDetailsFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *SweepResultDetailsFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweep applies a predicate to check if query has an edge sweep.
func (f *SweepResultDetailsFilter) WhereHasSweep() {
	f.Where(entql.HasEdge("sweep"))
}

// WhereHasSweepWith applies a predicate to check if query has an edge sweep with a given conditions (other predicates).
func (f *SweepResultDetailsFilter) WhereHasSweepWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepSchedule applies a predicate to check if query has an edge sweep_schedule.
func (f *SweepResultDetailsFilter) WhereHasSweepSchedule() {
	f.Where(entql.HasEdge("sweep_schedule"))
}

// WhereHasSweepScheduleWith applies a predicate to check if query has an edge sweep_schedule with a given conditions (other predicates).
func (f *SweepResultDetailsFilter) WhereHasSweepScheduleWith(preds ...predicate.SweepSchedule) {
	f.Where(entql.HasEdgeWith("sweep_schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResult applies a predicate to check if query has an edge sweep_result.
func (f *SweepResultDetailsFilter) WhereHasSweepResult() {
	f.Where(entql.HasEdge("sweep_result"))
}

// WhereHasSweepResultWith applies a predicate to check if query has an edge sweep_result with a given conditions (other predicates).
func (f *SweepResultDetailsFilter) WhereHasSweepResultWith(preds ...predicate.SweepResult) {
	f.Where(entql.HasEdgeWith("sweep_result", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ssq *SweepScheduleQuery) addPredicate(pred func(s *sql.Selector)) {
	ssq.predicates = append(ssq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SweepScheduleQuery builder.
func (ssq *SweepScheduleQuery) Filter() *SweepScheduleFilter {
	return &SweepScheduleFilter{config: ssq.config, predicateAdder: ssq}
}

// addPredicate implements the predicateAdder interface.
func (m *SweepScheduleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SweepScheduleMutation builder.
func (m *SweepScheduleMutation) Filter() *SweepScheduleFilter {
	return &SweepScheduleFilter{config: m.config, predicateAdder: m}
}

// SweepScheduleFilter provides a generic filtering capability at runtime for SweepScheduleQuery.
type SweepScheduleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SweepScheduleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SweepScheduleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sweepschedule.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SweepScheduleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(sweepschedule.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *SweepScheduleFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(sweepschedule.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SweepScheduleFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(sweepschedule.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *SweepScheduleFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(sweepschedule.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SweepScheduleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(sweepschedule.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *SweepScheduleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(sweepschedule.FieldName))
}

// WhereSweepID applies the entql int predicate on the sweep_id field.
func (f *SweepScheduleFilter) WhereSweepID(p entql.IntP) {
	f.Where(p.Field(sweepschedule.FieldSweepID))
}

// WhereEnabledStatus applies the entql int predicate on the enabled_status field.
func (f *SweepScheduleFilter) WhereEnabledStatus(p entql.IntP) {
	f.Where(p.Field(sweepschedule.FieldEnabledStatus))
}

// WhereActionTime applies the entql time.Time predicate on the action_time field.
func (f *SweepScheduleFilter) WhereActionTime(p entql.TimeP) {
	f.Where(p.Field(sweepschedule.FieldActionTime))
}

// WhereRemind applies the entql json.RawMessage predicate on the remind field.
func (f *SweepScheduleFilter) WhereRemind(p entql.BytesP) {
	f.Where(p.Field(sweepschedule.FieldRemind))
}

// WhereRepeat applies the entql json.RawMessage predicate on the repeat field.
func (f *SweepScheduleFilter) WhereRepeat(p entql.BytesP) {
	f.Where(p.Field(sweepschedule.FieldRepeat))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *SweepScheduleFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *SweepScheduleFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweep applies a predicate to check if query has an edge sweep.
func (f *SweepScheduleFilter) WhereHasSweep() {
	f.Where(entql.HasEdge("sweep"))
}

// WhereHasSweepWith applies a predicate to check if query has an edge sweep with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasSweepWith(preds ...predicate.Sweep) {
	f.Where(entql.HasEdgeWith("sweep", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkers applies a predicate to check if query has an edge workers.
func (f *SweepScheduleFilter) WhereHasWorkers() {
	f.Where(entql.HasEdge("workers"))
}

// WhereHasWorkersWith applies a predicate to check if query has an edge workers with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasWorkersWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("workers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResult applies a predicate to check if query has an edge sweep_result.
func (f *SweepScheduleFilter) WhereHasSweepResult() {
	f.Where(entql.HasEdge("sweep_result"))
}

// WhereHasSweepResultWith applies a predicate to check if query has an edge sweep_result with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasSweepResultWith(preds ...predicate.SweepResult) {
	f.Where(entql.HasEdgeWith("sweep_result", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSweepResultDetails applies a predicate to check if query has an edge sweep_result_details.
func (f *SweepScheduleFilter) WhereHasSweepResultDetails() {
	f.Where(entql.HasEdge("sweep_result_details"))
}

// WhereHasSweepResultDetailsWith applies a predicate to check if query has an edge sweep_result_details with a given conditions (other predicates).
func (f *SweepScheduleFilter) WhereHasSweepResultDetailsWith(preds ...predicate.SweepResultDetails) {
	f.Where(entql.HasEdgeWith("sweep_result_details", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeleteTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *UserFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(user.FieldUpdaterID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereRealName applies the entql string predicate on the real_name field.
func (f *UserFilter) WhereRealName(p entql.StringP) {
	f.Where(p.Field(user.FieldRealName))
}

// WhereMobile applies the entql string predicate on the mobile field.
func (f *UserFilter) WhereMobile(p entql.StringP) {
	f.Where(p.Field(user.FieldMobile))
}

// WhereWechatOpenid applies the entql string predicate on the wechat_openid field.
func (f *UserFilter) WhereWechatOpenid(p entql.StringP) {
	f.Where(p.Field(user.FieldWechatOpenid))
}

// WhereAvatar applies the entql json.RawMessage predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.BytesP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereUserStatus applies the entql int predicate on the user_status field.
func (f *UserFilter) WhereUserStatus(p entql.IntP) {
	f.Where(p.Field(user.FieldUserStatus))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *UserFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *UserFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vq *VideoQuery) addPredicate(pred func(s *sql.Selector)) {
	vq.predicates = append(vq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VideoQuery builder.
func (vq *VideoQuery) Filter() *VideoFilter {
	return &VideoFilter{config: vq.config, predicateAdder: vq}
}

// addPredicate implements the predicateAdder interface.
func (m *VideoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VideoMutation builder.
func (m *VideoMutation) Filter() *VideoFilter {
	return &VideoFilter{config: m.config, predicateAdder: m}
}

// VideoFilter provides a generic filtering capability at runtime for VideoQuery.
type VideoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VideoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VideoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(video.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *VideoFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(video.FieldCreateTime))
}

// WhereCreatorID applies the entql int predicate on the creator_id field.
func (f *VideoFilter) WhereCreatorID(p entql.IntP) {
	f.Where(p.Field(video.FieldCreatorID))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *VideoFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(video.FieldDeleteTime))
}

// WhereUpdaterID applies the entql int predicate on the updater_id field.
func (f *VideoFilter) WhereUpdaterID(p entql.IntP) {
	f.Where(p.Field(video.FieldUpdaterID))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *VideoFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(video.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *VideoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(video.FieldName))
}

// WhereURL applies the entql string predicate on the url field.
func (f *VideoFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(video.FieldURL))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *VideoFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(video.FieldSize))
}

// WhereDuration applies the entql string predicate on the duration field.
func (f *VideoFilter) WhereDuration(p entql.StringP) {
	f.Where(p.Field(video.FieldDuration))
}

// WhereUploadedAt applies the entql time.Time predicate on the uploaded_at field.
func (f *VideoFilter) WhereUploadedAt(p entql.TimeP) {
	f.Where(p.Field(video.FieldUploadedAt))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *VideoFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *VideoFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *VideoFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *VideoFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *VideoFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *VideoFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
