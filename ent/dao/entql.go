// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/video"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 14)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
		Type: "Admin",
		Fields: map[string]*sqlgraph.FieldSpec{
			admin.FieldCreatedAt: {Type: field.TypeTime, Column: admin.FieldCreatedAt},
			admin.FieldCreatedBy: {Type: field.TypeInt, Column: admin.FieldCreatedBy},
			admin.FieldDeletedAt: {Type: field.TypeTime, Column: admin.FieldDeletedAt},
			admin.FieldUpdatedBy: {Type: field.TypeInt, Column: admin.FieldUpdatedBy},
			admin.FieldUpdatedAt: {Type: field.TypeTime, Column: admin.FieldUpdatedAt},
			admin.FieldUsername:  {Type: field.TypeString, Column: admin.FieldUsername},
			admin.FieldPassword:  {Type: field.TypeString, Column: admin.FieldPassword},
			admin.FieldNickname:  {Type: field.TypeString, Column: admin.FieldNickname},
			admin.FieldRealName:  {Type: field.TypeString, Column: admin.FieldRealName},
			admin.FieldAvatar:    {Type: field.TypeString, Column: admin.FieldAvatar},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adminrole.Table,
			Columns: adminrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrole.FieldID,
			},
		},
		Type: "AdminRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			adminrole.FieldCreatedAt: {Type: field.TypeTime, Column: adminrole.FieldCreatedAt},
			adminrole.FieldCreatedBy: {Type: field.TypeInt, Column: adminrole.FieldCreatedBy},
			adminrole.FieldName:      {Type: field.TypeString, Column: adminrole.FieldName},
			adminrole.FieldDeletedAt: {Type: field.TypeTime, Column: adminrole.FieldDeletedAt},
			adminrole.FieldUpdatedBy: {Type: field.TypeInt, Column: adminrole.FieldUpdatedBy},
			adminrole.FieldUpdatedAt: {Type: field.TypeTime, Column: adminrole.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: area.FieldID,
			},
		},
		Type: "Area",
		Fields: map[string]*sqlgraph.FieldSpec{
			area.FieldCreatedAt:   {Type: field.TypeTime, Column: area.FieldCreatedAt},
			area.FieldCreatedBy:   {Type: field.TypeInt, Column: area.FieldCreatedBy},
			area.FieldDeletedAt:   {Type: field.TypeTime, Column: area.FieldDeletedAt},
			area.FieldUpdatedBy:   {Type: field.TypeInt, Column: area.FieldUpdatedBy},
			area.FieldUpdatedAt:   {Type: field.TypeTime, Column: area.FieldUpdatedAt},
			area.FieldName:        {Type: field.TypeString, Column: area.FieldName},
			area.FieldDescription: {Type: field.TypeString, Column: area.FieldDescription},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: department.FieldID,
			},
		},
		Type: "Department",
		Fields: map[string]*sqlgraph.FieldSpec{
			department.FieldCreatedAt: {Type: field.TypeTime, Column: department.FieldCreatedAt},
			department.FieldCreatedBy: {Type: field.TypeInt, Column: department.FieldCreatedBy},
			department.FieldDeletedAt: {Type: field.TypeTime, Column: department.FieldDeletedAt},
			department.FieldUpdatedBy: {Type: field.TypeInt, Column: department.FieldUpdatedBy},
			department.FieldUpdatedAt: {Type: field.TypeTime, Column: department.FieldUpdatedAt},
			department.FieldName:      {Type: field.TypeString, Column: department.FieldName},
			department.FieldParentID:  {Type: field.TypeInt, Column: department.FieldParentID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
		Type: "Device",
		Fields: map[string]*sqlgraph.FieldSpec{
			device.FieldCreatedAt:  {Type: field.TypeTime, Column: device.FieldCreatedAt},
			device.FieldCreatedBy:  {Type: field.TypeInt, Column: device.FieldCreatedBy},
			device.FieldDeletedAt:  {Type: field.TypeTime, Column: device.FieldDeletedAt},
			device.FieldUpdatedBy:  {Type: field.TypeInt, Column: device.FieldUpdatedBy},
			device.FieldUpdatedAt:  {Type: field.TypeTime, Column: device.FieldUpdatedAt},
			device.FieldBrand:      {Type: field.TypeInt, Column: device.FieldBrand},
			device.FieldModel:      {Type: field.TypeInt, Column: device.FieldModel},
			device.FieldName:       {Type: field.TypeString, Column: device.FieldName},
			device.FieldSn:         {Type: field.TypeString, Column: device.FieldSn},
			device.FieldDeviceType: {Type: field.TypeInt, Column: device.FieldDeviceType},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceinstallation.Table,
			Columns: deviceinstallation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deviceinstallation.FieldID,
			},
		},
		Type: "DeviceInstallation",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceinstallation.FieldCreatedAt:    {Type: field.TypeTime, Column: deviceinstallation.FieldCreatedAt},
			deviceinstallation.FieldCreatedBy:    {Type: field.TypeInt, Column: deviceinstallation.FieldCreatedBy},
			deviceinstallation.FieldDeletedAt:    {Type: field.TypeTime, Column: deviceinstallation.FieldDeletedAt},
			deviceinstallation.FieldUpdatedBy:    {Type: field.TypeInt, Column: deviceinstallation.FieldUpdatedBy},
			deviceinstallation.FieldUpdatedAt:    {Type: field.TypeTime, Column: deviceinstallation.FieldUpdatedAt},
			deviceinstallation.FieldDeviceID:     {Type: field.TypeInt, Column: deviceinstallation.FieldDeviceID},
			deviceinstallation.FieldAreaID:       {Type: field.TypeInt, Column: deviceinstallation.FieldAreaID},
			deviceinstallation.FieldAliasName:    {Type: field.TypeString, Column: deviceinstallation.FieldAliasName},
			deviceinstallation.FieldLongitude:    {Type: field.TypeFloat64, Column: deviceinstallation.FieldLongitude},
			deviceinstallation.FieldLatitude:     {Type: field.TypeFloat64, Column: deviceinstallation.FieldLatitude},
			deviceinstallation.FieldLocationData: {Type: field.TypeString, Column: deviceinstallation.FieldLocationData},
			deviceinstallation.FieldLocation:     {Type: field.TypeString, Column: deviceinstallation.FieldLocation},
			deviceinstallation.FieldInstaller:    {Type: field.TypeString, Column: deviceinstallation.FieldInstaller},
			deviceinstallation.FieldInstallTime:  {Type: field.TypeTime, Column: deviceinstallation.FieldInstallTime},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreatedAt:    {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldCreatedBy:    {Type: field.TypeInt, Column: employee.FieldCreatedBy},
			employee.FieldDeletedAt:    {Type: field.TypeTime, Column: employee.FieldDeletedAt},
			employee.FieldUpdatedBy:    {Type: field.TypeInt, Column: employee.FieldUpdatedBy},
			employee.FieldUpdatedAt:    {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldAdminID:      {Type: field.TypeInt, Column: employee.FieldAdminID},
			employee.FieldDepartmentID: {Type: field.TypeInt, Column: employee.FieldDepartmentID},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventlevel.Table,
			Columns: eventlevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlevel.FieldID,
			},
		},
		Type: "EventLevel",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventlevel.FieldCreatedAt:   {Type: field.TypeTime, Column: eventlevel.FieldCreatedAt},
			eventlevel.FieldCreatedBy:   {Type: field.TypeInt, Column: eventlevel.FieldCreatedBy},
			eventlevel.FieldDeletedAt:   {Type: field.TypeTime, Column: eventlevel.FieldDeletedAt},
			eventlevel.FieldUpdatedBy:   {Type: field.TypeInt, Column: eventlevel.FieldUpdatedBy},
			eventlevel.FieldUpdatedAt:   {Type: field.TypeTime, Column: eventlevel.FieldUpdatedAt},
			eventlevel.FieldName:        {Type: field.TypeString, Column: eventlevel.FieldName},
			eventlevel.FieldEventTypes:  {Type: field.TypeJSON, Column: eventlevel.FieldEventTypes},
			eventlevel.FieldDescription: {Type: field.TypeString, Column: eventlevel.FieldDescription},
			eventlevel.FieldIsReport:    {Type: field.TypeBool, Column: eventlevel.FieldIsReport},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ipcevent.Table,
			Columns: ipcevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipcevent.FieldID,
			},
		},
		Type: "IPCEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			ipcevent.FieldCreatedAt:     {Type: field.TypeTime, Column: ipcevent.FieldCreatedAt},
			ipcevent.FieldCreatedBy:     {Type: field.TypeInt, Column: ipcevent.FieldCreatedBy},
			ipcevent.FieldDeletedAt:     {Type: field.TypeTime, Column: ipcevent.FieldDeletedAt},
			ipcevent.FieldUpdatedBy:     {Type: field.TypeInt, Column: ipcevent.FieldUpdatedBy},
			ipcevent.FieldUpdatedAt:     {Type: field.TypeTime, Column: ipcevent.FieldUpdatedAt},
			ipcevent.FieldDeviceID:      {Type: field.TypeInt, Column: ipcevent.FieldDeviceID},
			ipcevent.FieldVideoID:       {Type: field.TypeInt, Column: ipcevent.FieldVideoID},
			ipcevent.FieldEventTime:     {Type: field.TypeTime, Column: ipcevent.FieldEventTime},
			ipcevent.FieldEventType:     {Type: field.TypeInt, Column: ipcevent.FieldEventType},
			ipcevent.FieldEventStatus:   {Type: field.TypeInt, Column: ipcevent.FieldEventStatus},
			ipcevent.FieldImages:        {Type: field.TypeJSON, Column: ipcevent.FieldImages},
			ipcevent.FieldLabeledImages: {Type: field.TypeJSON, Column: ipcevent.FieldLabeledImages},
			ipcevent.FieldEventID:       {Type: field.TypeString, Column: ipcevent.FieldEventID},
			ipcevent.FieldDescription:   {Type: field.TypeString, Column: ipcevent.FieldDescription},
			ipcevent.FieldRawData:       {Type: field.TypeString, Column: ipcevent.FieldRawData},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   occupation.Table,
			Columns: occupation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: occupation.FieldID,
			},
		},
		Type: "Occupation",
		Fields: map[string]*sqlgraph.FieldSpec{
			occupation.FieldCreatedAt:   {Type: field.TypeTime, Column: occupation.FieldCreatedAt},
			occupation.FieldCreatedBy:   {Type: field.TypeInt, Column: occupation.FieldCreatedBy},
			occupation.FieldDeletedAt:   {Type: field.TypeTime, Column: occupation.FieldDeletedAt},
			occupation.FieldUpdatedBy:   {Type: field.TypeInt, Column: occupation.FieldUpdatedBy},
			occupation.FieldUpdatedAt:   {Type: field.TypeTime, Column: occupation.FieldUpdatedAt},
			occupation.FieldName:        {Type: field.TypeString, Column: occupation.FieldName},
			occupation.FieldDescription: {Type: field.TypeString, Column: occupation.FieldDescription},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risk.Table,
			Columns: risk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risk.FieldID,
			},
		},
		Type: "Risk",
		Fields: map[string]*sqlgraph.FieldSpec{
			risk.FieldCreatedAt:      {Type: field.TypeTime, Column: risk.FieldCreatedAt},
			risk.FieldCreatedBy:      {Type: field.TypeInt, Column: risk.FieldCreatedBy},
			risk.FieldDeletedAt:      {Type: field.TypeTime, Column: risk.FieldDeletedAt},
			risk.FieldUpdatedBy:      {Type: field.TypeInt, Column: risk.FieldUpdatedBy},
			risk.FieldUpdatedAt:      {Type: field.TypeTime, Column: risk.FieldUpdatedAt},
			risk.FieldTitle:          {Type: field.TypeString, Column: risk.FieldTitle},
			risk.FieldContent:        {Type: field.TypeString, Column: risk.FieldContent},
			risk.FieldImages:         {Type: field.TypeJSON, Column: risk.FieldImages},
			risk.FieldRiskCategoryID: {Type: field.TypeInt, Column: risk.FieldRiskCategoryID},
			risk.FieldRiskLocationID: {Type: field.TypeInt, Column: risk.FieldRiskLocationID},
			risk.FieldReporterID:     {Type: field.TypeInt, Column: risk.FieldReporterID},
			risk.FieldMaintainerID:   {Type: field.TypeInt, Column: risk.FieldMaintainerID},
			risk.FieldMeasures:       {Type: field.TypeString, Column: risk.FieldMeasures},
			risk.FieldMaintainStatus: {Type: field.TypeInt, Column: risk.FieldMaintainStatus},
			risk.FieldDueTime:        {Type: field.TypeTime, Column: risk.FieldDueTime},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riskcategory.Table,
			Columns: riskcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: riskcategory.FieldID,
			},
		},
		Type: "RiskCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			riskcategory.FieldCreatedAt: {Type: field.TypeTime, Column: riskcategory.FieldCreatedAt},
			riskcategory.FieldCreatedBy: {Type: field.TypeInt, Column: riskcategory.FieldCreatedBy},
			riskcategory.FieldDeletedAt: {Type: field.TypeTime, Column: riskcategory.FieldDeletedAt},
			riskcategory.FieldUpdatedBy: {Type: field.TypeInt, Column: riskcategory.FieldUpdatedBy},
			riskcategory.FieldUpdatedAt: {Type: field.TypeTime, Column: riskcategory.FieldUpdatedAt},
			riskcategory.FieldName:      {Type: field.TypeString, Column: riskcategory.FieldName},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risklocation.Table,
			Columns: risklocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risklocation.FieldID,
			},
		},
		Type: "RiskLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			risklocation.FieldCreatedAt: {Type: field.TypeTime, Column: risklocation.FieldCreatedAt},
			risklocation.FieldCreatedBy: {Type: field.TypeInt, Column: risklocation.FieldCreatedBy},
			risklocation.FieldDeletedAt: {Type: field.TypeTime, Column: risklocation.FieldDeletedAt},
			risklocation.FieldUpdatedBy: {Type: field.TypeInt, Column: risklocation.FieldUpdatedBy},
			risklocation.FieldUpdatedAt: {Type: field.TypeTime, Column: risklocation.FieldUpdatedAt},
			risklocation.FieldName:      {Type: field.TypeString, Column: risklocation.FieldName},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
		Type: "Video",
		Fields: map[string]*sqlgraph.FieldSpec{
			video.FieldCreatedAt:   {Type: field.TypeTime, Column: video.FieldCreatedAt},
			video.FieldCreatedBy:   {Type: field.TypeInt, Column: video.FieldCreatedBy},
			video.FieldDeletedAt:   {Type: field.TypeTime, Column: video.FieldDeletedAt},
			video.FieldUpdatedBy:   {Type: field.TypeInt, Column: video.FieldUpdatedBy},
			video.FieldUpdatedAt:   {Type: field.TypeTime, Column: video.FieldUpdatedAt},
			video.FieldName:        {Type: field.TypeString, Column: video.FieldName},
			video.FieldURL:         {Type: field.TypeString, Column: video.FieldURL},
			video.FieldSize:        {Type: field.TypeInt64, Column: video.FieldSize},
			video.FieldDuration:    {Type: field.TypeString, Column: video.FieldDuration},
			video.FieldUploadedAt:  {Type: field.TypeTime, Column: video.FieldUploadedAt},
			video.FieldUploadedAt2: {Type: field.TypeTime, Column: video.FieldUploadedAt2},
		},
	}
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.CreatorTable,
			Columns: []string{admin.CreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"admin_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Admin",
	)
	graph.MustAddE(
		"admin_role_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"admin_role_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"AdminRole",
	)
	graph.MustAddE(
		"risk_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Risk",
	)
	graph.MustAddE(
		"risk_location_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_location_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskLocation",
	)
	graph.MustAddE(
		"risk_category_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_category_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"RiskCategory",
	)
	graph.MustAddE(
		"department_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"department_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Department",
	)
	graph.MustAddE(
		"employee_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
		},
		"Admin",
		"Employee",
	)
	graph.MustAddE(
		"occupation_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"occupation_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Occupation",
	)
	graph.MustAddE(
		"ipc_event_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"IPCEvent",
	)
	graph.MustAddE(
		"ipc_event_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"IPCEvent",
	)
	graph.MustAddE(
		"video_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Video",
	)
	graph.MustAddE(
		"video_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Video",
	)
	graph.MustAddE(
		"area_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Area",
	)
	graph.MustAddE(
		"area_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Area",
	)
	graph.MustAddE(
		"device_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"Device",
	)
	graph.MustAddE(
		"device_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"Device",
	)
	graph.MustAddE(
		"device_installation_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"device_installation_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"event_level_creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLevel",
	)
	graph.MustAddE(
		"event_level_updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
		},
		"Admin",
		"EventLevel",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdaterTable,
			Columns: []string{adminrole.UpdaterColumn},
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"admins",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
		},
		"AdminRole",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.CreatorTable,
			Columns: []string{area.CreatorColumn},
			Bidi:    false,
		},
		"Area",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
		},
		"Area",
		"Admin",
	)
	graph.MustAddE(
		"device_installation_area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationAreaTable,
			Columns: []string{area.DeviceInstallationAreaColumn},
			Bidi:    false,
		},
		"Area",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.CreatorTable,
			Columns: []string{department.CreatorColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
		},
		"Department",
		"Admin",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
		},
		"Department",
		"Employee",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
		},
		"Device",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
		},
		"Device",
		"Admin",
	)
	graph.MustAddE(
		"ipc_event_device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.IpcEventDeviceTable,
			Columns: []string{device.IpcEventDeviceColumn},
			Bidi:    false,
		},
		"Device",
		"IPCEvent",
	)
	graph.MustAddE(
		"device_installation_device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationDeviceTable,
			Columns: []string{device.DeviceInstallationDeviceColumn},
			Bidi:    false,
		},
		"Device",
		"DeviceInstallation",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.CreatorTable,
			Columns: []string{deviceinstallation.CreatorColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.UpdaterTable,
			Columns: []string{deviceinstallation.UpdaterColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Admin",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.AreaTable,
			Columns: []string{deviceinstallation.AreaColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Area",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.DeviceTable,
			Columns: []string{deviceinstallation.DeviceColumn},
			Bidi:    false,
		},
		"DeviceInstallation",
		"Device",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.CreatorTable,
			Columns: []string{employee.CreatorColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"admin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AdminTable,
			Columns: []string{employee.AdminColumn},
			Bidi:    false,
		},
		"Employee",
		"Admin",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
		},
		"Employee",
		"Department",
	)
	graph.MustAddE(
		"occupations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.OccupationsTable,
			Columns: employee.OccupationsPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"Occupation",
	)
	graph.MustAddE(
		"ipc_events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.IpcEventsTable,
			Columns: employee.IpcEventsPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"IPCEvent",
	)
	graph.MustAddE(
		"risk_reporter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RiskReporterTable,
			Columns: []string{employee.RiskReporterColumn},
			Bidi:    false,
		},
		"Employee",
		"Risk",
	)
	graph.MustAddE(
		"risk_maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RiskMaintainerTable,
			Columns: []string{employee.RiskMaintainerColumn},
			Bidi:    false,
		},
		"Employee",
		"Risk",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.CreatorTable,
			Columns: []string{eventlevel.CreatorColumn},
			Bidi:    false,
		},
		"EventLevel",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
		},
		"EventLevel",
		"Admin",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.CreatorTable,
			Columns: []string{ipcevent.CreatorColumn},
			Bidi:    false,
		},
		"IPCEvent",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
		},
		"IPCEvent",
		"Admin",
	)
	graph.MustAddE(
		"video",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.VideoTable,
			Columns: []string{ipcevent.VideoColumn},
			Bidi:    false,
		},
		"IPCEvent",
		"Video",
	)
	graph.MustAddE(
		"device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.DeviceTable,
			Columns: []string{ipcevent.DeviceColumn},
			Bidi:    false,
		},
		"IPCEvent",
		"Device",
	)
	graph.MustAddE(
		"fixers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
		},
		"IPCEvent",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.CreatorTable,
			Columns: []string{occupation.CreatorColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occupation.UpdaterTable,
			Columns: []string{occupation.UpdaterColumn},
			Bidi:    false,
		},
		"Occupation",
		"Admin",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occupation.EmployeesTable,
			Columns: occupation.EmployeesPrimaryKey,
			Bidi:    false,
		},
		"Occupation",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.CreatorTable,
			Columns: []string{risk.CreatorColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
		},
		"Risk",
		"Admin",
	)
	graph.MustAddE(
		"risk_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskCategory",
	)
	graph.MustAddE(
		"risk_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
		},
		"Risk",
		"RiskLocation",
	)
	graph.MustAddE(
		"reporter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.ReporterTable,
			Columns: []string{risk.ReporterColumn},
			Bidi:    false,
		},
		"Risk",
		"Employee",
	)
	graph.MustAddE(
		"maintainer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
		},
		"Risk",
		"Employee",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.CreatorTable,
			Columns: []string{riskcategory.CreatorColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riskcategory.UpdaterTable,
			Columns: []string{riskcategory.UpdaterColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   riskcategory.RiskTable,
			Columns: []string{riskcategory.RiskColumn},
			Bidi:    false,
		},
		"RiskCategory",
		"Risk",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.CreatorTable,
			Columns: []string{risklocation.CreatorColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risklocation.UpdaterTable,
			Columns: []string{risklocation.UpdaterColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Admin",
	)
	graph.MustAddE(
		"risk",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risklocation.RiskTable,
			Columns: []string{risklocation.RiskColumn},
			Bidi:    false,
		},
		"RiskLocation",
		"Risk",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CreatorTable,
			Columns: []string{video.CreatorColumn},
			Bidi:    false,
		},
		"Video",
		"Admin",
	)
	graph.MustAddE(
		"updater",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UpdaterTable,
			Columns: []string{video.UpdaterColumn},
			Bidi:    false,
		},
		"Video",
		"Admin",
	)
	graph.MustAddE(
		"ipc_event_video",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.IpcEventVideoTable,
			Columns: []string{video.IpcEventVideoColumn},
			Bidi:    false,
		},
		"Video",
		"IPCEvent",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AdminQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminQuery builder.
func (aq *AdminQuery) Filter() *AdminFilter {
	return &AdminFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminMutation builder.
func (m *AdminMutation) Filter() *AdminFilter {
	return &AdminFilter{config: m.config, predicateAdder: m}
}

// AdminFilter provides a generic filtering capability at runtime for AdminQuery.
type AdminFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdminFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(admin.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *AdminFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(admin.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AdminFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *AdminFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(admin.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AdminFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(admin.FieldUpdatedAt))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AdminFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(admin.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *AdminFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(admin.FieldPassword))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *AdminFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(admin.FieldNickname))
}

// WhereRealName applies the entql string predicate on the real_name field.
func (f *AdminFilter) WhereRealName(p entql.StringP) {
	f.Where(p.Field(admin.FieldRealName))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *AdminFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(admin.FieldAvatar))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AdminFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AdminFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoles applies a predicate to check if query has an edge admin_roles.
func (f *AdminFilter) WhereHasAdminRoles() {
	f.Where(entql.HasEdge("admin_roles"))
}

// WhereHasAdminRolesWith applies a predicate to check if query has an edge admin_roles with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRolesWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminCreator applies a predicate to check if query has an edge admin_creator.
func (f *AdminFilter) WhereHasAdminCreator() {
	f.Where(entql.HasEdge("admin_creator"))
}

// WhereHasAdminCreatorWith applies a predicate to check if query has an edge admin_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminUpdater applies a predicate to check if query has an edge admin_updater.
func (f *AdminFilter) WhereHasAdminUpdater() {
	f.Where(entql.HasEdge("admin_updater"))
}

// WhereHasAdminUpdaterWith applies a predicate to check if query has an edge admin_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoleCreator applies a predicate to check if query has an edge admin_role_creator.
func (f *AdminFilter) WhereHasAdminRoleCreator() {
	f.Where(entql.HasEdge("admin_role_creator"))
}

// WhereHasAdminRoleCreatorWith applies a predicate to check if query has an edge admin_role_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRoleCreatorWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_role_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminRoleUpdater applies a predicate to check if query has an edge admin_role_updater.
func (f *AdminFilter) WhereHasAdminRoleUpdater() {
	f.Where(entql.HasEdge("admin_role_updater"))
}

// WhereHasAdminRoleUpdaterWith applies a predicate to check if query has an edge admin_role_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAdminRoleUpdaterWith(preds ...predicate.AdminRole) {
	f.Where(entql.HasEdgeWith("admin_role_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCreator applies a predicate to check if query has an edge risk_creator.
func (f *AdminFilter) WhereHasRiskCreator() {
	f.Where(entql.HasEdge("risk_creator"))
}

// WhereHasRiskCreatorWith applies a predicate to check if query has an edge risk_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCreatorWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskUpdater applies a predicate to check if query has an edge risk_updater.
func (f *AdminFilter) WhereHasRiskUpdater() {
	f.Where(entql.HasEdge("risk_updater"))
}

// WhereHasRiskUpdaterWith applies a predicate to check if query has an edge risk_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskUpdaterWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationCreator applies a predicate to check if query has an edge risk_location_creator.
func (f *AdminFilter) WhereHasRiskLocationCreator() {
	f.Where(entql.HasEdge("risk_location_creator"))
}

// WhereHasRiskLocationCreatorWith applies a predicate to check if query has an edge risk_location_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationCreatorWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocationUpdater applies a predicate to check if query has an edge risk_location_updater.
func (f *AdminFilter) WhereHasRiskLocationUpdater() {
	f.Where(entql.HasEdge("risk_location_updater"))
}

// WhereHasRiskLocationUpdaterWith applies a predicate to check if query has an edge risk_location_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskLocationUpdaterWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryCreator applies a predicate to check if query has an edge risk_category_creator.
func (f *AdminFilter) WhereHasRiskCategoryCreator() {
	f.Where(entql.HasEdge("risk_category_creator"))
}

// WhereHasRiskCategoryCreatorWith applies a predicate to check if query has an edge risk_category_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryCreatorWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategoryUpdater applies a predicate to check if query has an edge risk_category_updater.
func (f *AdminFilter) WhereHasRiskCategoryUpdater() {
	f.Where(entql.HasEdge("risk_category_updater"))
}

// WhereHasRiskCategoryUpdaterWith applies a predicate to check if query has an edge risk_category_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasRiskCategoryUpdaterWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentCreator applies a predicate to check if query has an edge department_creator.
func (f *AdminFilter) WhereHasDepartmentCreator() {
	f.Where(entql.HasEdge("department_creator"))
}

// WhereHasDepartmentCreatorWith applies a predicate to check if query has an edge department_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentCreatorWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartmentUpdater applies a predicate to check if query has an edge department_updater.
func (f *AdminFilter) WhereHasDepartmentUpdater() {
	f.Where(entql.HasEdge("department_updater"))
}

// WhereHasDepartmentUpdaterWith applies a predicate to check if query has an edge department_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDepartmentUpdaterWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeCreator applies a predicate to check if query has an edge employee_creator.
func (f *AdminFilter) WhereHasEmployeeCreator() {
	f.Where(entql.HasEdge("employee_creator"))
}

// WhereHasEmployeeCreatorWith applies a predicate to check if query has an edge employee_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeCreatorWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeUpdater applies a predicate to check if query has an edge employee_updater.
func (f *AdminFilter) WhereHasEmployeeUpdater() {
	f.Where(entql.HasEdge("employee_updater"))
}

// WhereHasEmployeeUpdaterWith applies a predicate to check if query has an edge employee_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeUpdaterWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AdminFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationCreator applies a predicate to check if query has an edge occupation_creator.
func (f *AdminFilter) WhereHasOccupationCreator() {
	f.Where(entql.HasEdge("occupation_creator"))
}

// WhereHasOccupationCreatorWith applies a predicate to check if query has an edge occupation_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationCreatorWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupationUpdater applies a predicate to check if query has an edge occupation_updater.
func (f *AdminFilter) WhereHasOccupationUpdater() {
	f.Where(entql.HasEdge("occupation_updater"))
}

// WhereHasOccupationUpdaterWith applies a predicate to check if query has an edge occupation_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasOccupationUpdaterWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupation_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcEventCreator applies a predicate to check if query has an edge ipc_event_creator.
func (f *AdminFilter) WhereHasIpcEventCreator() {
	f.Where(entql.HasEdge("ipc_event_creator"))
}

// WhereHasIpcEventCreatorWith applies a predicate to check if query has an edge ipc_event_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasIpcEventCreatorWith(preds ...predicate.IPCEvent) {
	f.Where(entql.HasEdgeWith("ipc_event_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcEventUpdater applies a predicate to check if query has an edge ipc_event_updater.
func (f *AdminFilter) WhereHasIpcEventUpdater() {
	f.Where(entql.HasEdge("ipc_event_updater"))
}

// WhereHasIpcEventUpdaterWith applies a predicate to check if query has an edge ipc_event_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasIpcEventUpdaterWith(preds ...predicate.IPCEvent) {
	f.Where(entql.HasEdgeWith("ipc_event_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideoCreator applies a predicate to check if query has an edge video_creator.
func (f *AdminFilter) WhereHasVideoCreator() {
	f.Where(entql.HasEdge("video_creator"))
}

// WhereHasVideoCreatorWith applies a predicate to check if query has an edge video_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasVideoCreatorWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideoUpdater applies a predicate to check if query has an edge video_updater.
func (f *AdminFilter) WhereHasVideoUpdater() {
	f.Where(entql.HasEdge("video_updater"))
}

// WhereHasVideoUpdaterWith applies a predicate to check if query has an edge video_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasVideoUpdaterWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAreaCreator applies a predicate to check if query has an edge area_creator.
func (f *AdminFilter) WhereHasAreaCreator() {
	f.Where(entql.HasEdge("area_creator"))
}

// WhereHasAreaCreatorWith applies a predicate to check if query has an edge area_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAreaCreatorWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAreaUpdater applies a predicate to check if query has an edge area_updater.
func (f *AdminFilter) WhereHasAreaUpdater() {
	f.Where(entql.HasEdge("area_updater"))
}

// WhereHasAreaUpdaterWith applies a predicate to check if query has an edge area_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasAreaUpdaterWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceCreator applies a predicate to check if query has an edge device_creator.
func (f *AdminFilter) WhereHasDeviceCreator() {
	f.Where(entql.HasEdge("device_creator"))
}

// WhereHasDeviceCreatorWith applies a predicate to check if query has an edge device_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceCreatorWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceUpdater applies a predicate to check if query has an edge device_updater.
func (f *AdminFilter) WhereHasDeviceUpdater() {
	f.Where(entql.HasEdge("device_updater"))
}

// WhereHasDeviceUpdaterWith applies a predicate to check if query has an edge device_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceUpdaterWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationCreator applies a predicate to check if query has an edge device_installation_creator.
func (f *AdminFilter) WhereHasDeviceInstallationCreator() {
	f.Where(entql.HasEdge("device_installation_creator"))
}

// WhereHasDeviceInstallationCreatorWith applies a predicate to check if query has an edge device_installation_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceInstallationCreatorWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationUpdater applies a predicate to check if query has an edge device_installation_updater.
func (f *AdminFilter) WhereHasDeviceInstallationUpdater() {
	f.Where(entql.HasEdge("device_installation_updater"))
}

// WhereHasDeviceInstallationUpdaterWith applies a predicate to check if query has an edge device_installation_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasDeviceInstallationUpdaterWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLevelCreator applies a predicate to check if query has an edge event_level_creator.
func (f *AdminFilter) WhereHasEventLevelCreator() {
	f.Where(entql.HasEdge("event_level_creator"))
}

// WhereHasEventLevelCreatorWith applies a predicate to check if query has an edge event_level_creator with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLevelCreatorWith(preds ...predicate.EventLevel) {
	f.Where(entql.HasEdgeWith("event_level_creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventLevelUpdater applies a predicate to check if query has an edge event_level_updater.
func (f *AdminFilter) WhereHasEventLevelUpdater() {
	f.Where(entql.HasEdge("event_level_updater"))
}

// WhereHasEventLevelUpdaterWith applies a predicate to check if query has an edge event_level_updater with a given conditions (other predicates).
func (f *AdminFilter) WhereHasEventLevelUpdaterWith(preds ...predicate.EventLevel) {
	f.Where(entql.HasEdgeWith("event_level_updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (arq *AdminRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	arq.predicates = append(arq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminRoleQuery builder.
func (arq *AdminRoleQuery) Filter() *AdminRoleFilter {
	return &AdminRoleFilter{config: arq.config, predicateAdder: arq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminRoleMutation builder.
func (m *AdminRoleMutation) Filter() *AdminRoleFilter {
	return &AdminRoleFilter{config: m.config, predicateAdder: m}
}

// AdminRoleFilter provides a generic filtering capability at runtime for AdminRoleQuery.
type AdminRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdminRoleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminRoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *AdminRoleFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldCreatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *AdminRoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(adminrole.FieldName))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AdminRoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *AdminRoleFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(adminrole.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AdminRoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(adminrole.FieldUpdatedAt))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AdminRoleFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AdminRoleFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmins applies a predicate to check if query has an edge admins.
func (f *AdminRoleFilter) WhereHasAdmins() {
	f.Where(entql.HasEdge("admins"))
}

// WhereHasAdminsWith applies a predicate to check if query has an edge admins with a given conditions (other predicates).
func (f *AdminRoleFilter) WhereHasAdminsWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admins", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AreaQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AreaQuery builder.
func (aq *AreaQuery) Filter() *AreaFilter {
	return &AreaFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AreaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AreaMutation builder.
func (m *AreaMutation) Filter() *AreaFilter {
	return &AreaFilter{config: m.config, predicateAdder: m}
}

// AreaFilter provides a generic filtering capability at runtime for AreaQuery.
type AreaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AreaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AreaFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(area.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AreaFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(area.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *AreaFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(area.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AreaFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(area.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *AreaFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(area.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AreaFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(area.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *AreaFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(area.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AreaFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(area.FieldDescription))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *AreaFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *AreaFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *AreaFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *AreaFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationArea applies a predicate to check if query has an edge device_installation_area.
func (f *AreaFilter) WhereHasDeviceInstallationArea() {
	f.Where(entql.HasEdge("device_installation_area"))
}

// WhereHasDeviceInstallationAreaWith applies a predicate to check if query has an edge device_installation_area with a given conditions (other predicates).
func (f *AreaFilter) WhereHasDeviceInstallationAreaWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DepartmentQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepartmentQuery builder.
func (dq *DepartmentQuery) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DepartmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepartmentMutation builder.
func (m *DepartmentMutation) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: m.config, predicateAdder: m}
}

// DepartmentFilter provides a generic filtering capability at runtime for DepartmentQuery.
type DepartmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepartmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DepartmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(department.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DepartmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DepartmentFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(department.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DepartmentFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DepartmentFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(department.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DepartmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *DepartmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(department.FieldName))
}

// WhereParentID applies the entql int predicate on the parent_id field.
func (f *DepartmentFilter) WhereParentID(p entql.IntP) {
	f.Where(p.Field(department.FieldParentID))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DepartmentFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DepartmentFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DepartmentFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasParentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *DepartmentFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DepartmentFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasChildrenWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DeviceQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceQuery builder.
func (dq *DeviceQuery) Filter() *DeviceFilter {
	return &DeviceFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceMutation builder.
func (m *DeviceMutation) Filter() *DeviceFilter {
	return &DeviceFilter{config: m.config, predicateAdder: m}
}

// DeviceFilter provides a generic filtering capability at runtime for DeviceQuery.
type DeviceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeviceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(device.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeviceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(device.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeviceFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(device.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DeviceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(device.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeviceFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(device.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeviceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(device.FieldUpdatedAt))
}

// WhereBrand applies the entql int predicate on the brand field.
func (f *DeviceFilter) WhereBrand(p entql.IntP) {
	f.Where(p.Field(device.FieldBrand))
}

// WhereModel applies the entql int predicate on the model field.
func (f *DeviceFilter) WhereModel(p entql.IntP) {
	f.Where(p.Field(device.FieldModel))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeviceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(device.FieldName))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *DeviceFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(device.FieldSn))
}

// WhereDeviceType applies the entql int predicate on the device_type field.
func (f *DeviceFilter) WhereDeviceType(p entql.IntP) {
	f.Where(p.Field(device.FieldDeviceType))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DeviceFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DeviceFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcEventDevice applies a predicate to check if query has an edge ipc_event_device.
func (f *DeviceFilter) WhereHasIpcEventDevice() {
	f.Where(entql.HasEdge("ipc_event_device"))
}

// WhereHasIpcEventDeviceWith applies a predicate to check if query has an edge ipc_event_device with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasIpcEventDeviceWith(preds ...predicate.IPCEvent) {
	f.Where(entql.HasEdgeWith("ipc_event_device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeviceInstallationDevice applies a predicate to check if query has an edge device_installation_device.
func (f *DeviceFilter) WhereHasDeviceInstallationDevice() {
	f.Where(entql.HasEdge("device_installation_device"))
}

// WhereHasDeviceInstallationDeviceWith applies a predicate to check if query has an edge device_installation_device with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasDeviceInstallationDeviceWith(preds ...predicate.DeviceInstallation) {
	f.Where(entql.HasEdgeWith("device_installation_device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (diq *DeviceInstallationQuery) addPredicate(pred func(s *sql.Selector)) {
	diq.predicates = append(diq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceInstallationQuery builder.
func (diq *DeviceInstallationQuery) Filter() *DeviceInstallationFilter {
	return &DeviceInstallationFilter{config: diq.config, predicateAdder: diq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceInstallationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceInstallationMutation builder.
func (m *DeviceInstallationMutation) Filter() *DeviceInstallationFilter {
	return &DeviceInstallationFilter{config: m.config, predicateAdder: m}
}

// DeviceInstallationFilter provides a generic filtering capability at runtime for DeviceInstallationQuery.
type DeviceInstallationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceInstallationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeviceInstallationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeviceInstallationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeviceInstallationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DeviceInstallationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeviceInstallationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeviceInstallationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldUpdatedAt))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *DeviceInstallationFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldDeviceID))
}

// WhereAreaID applies the entql int predicate on the area_id field.
func (f *DeviceInstallationFilter) WhereAreaID(p entql.IntP) {
	f.Where(p.Field(deviceinstallation.FieldAreaID))
}

// WhereAliasName applies the entql string predicate on the alias_name field.
func (f *DeviceInstallationFilter) WhereAliasName(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldAliasName))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *DeviceInstallationFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(deviceinstallation.FieldLongitude))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *DeviceInstallationFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(deviceinstallation.FieldLatitude))
}

// WhereLocationData applies the entql string predicate on the location_data field.
func (f *DeviceInstallationFilter) WhereLocationData(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldLocationData))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *DeviceInstallationFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldLocation))
}

// WhereInstaller applies the entql string predicate on the installer field.
func (f *DeviceInstallationFilter) WhereInstaller(p entql.StringP) {
	f.Where(p.Field(deviceinstallation.FieldInstaller))
}

// WhereInstallTime applies the entql time.Time predicate on the install_time field.
func (f *DeviceInstallationFilter) WhereInstallTime(p entql.TimeP) {
	f.Where(p.Field(deviceinstallation.FieldInstallTime))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *DeviceInstallationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *DeviceInstallationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *DeviceInstallationFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *DeviceInstallationFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *DeviceInstallationFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: m.config, predicateAdder: m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *EmployeeFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(employee.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmployeeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *EmployeeFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(employee.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereAdminID applies the entql int predicate on the admin_id field.
func (f *EmployeeFilter) WhereAdminID(p entql.IntP) {
	f.Where(p.Field(employee.FieldAdminID))
}

// WhereDepartmentID applies the entql int predicate on the department_id field.
func (f *EmployeeFilter) WhereDepartmentID(p entql.IntP) {
	f.Where(p.Field(employee.FieldDepartmentID))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EmployeeFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EmployeeFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdmin applies a predicate to check if query has an edge admin.
func (f *EmployeeFilter) WhereHasAdmin() {
	f.Where(entql.HasEdge("admin"))
}

// WhereHasAdminWith applies a predicate to check if query has an edge admin with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAdminWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("admin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *EmployeeFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOccupations applies a predicate to check if query has an edge occupations.
func (f *EmployeeFilter) WhereHasOccupations() {
	f.Where(entql.HasEdge("occupations"))
}

// WhereHasOccupationsWith applies a predicate to check if query has an edge occupations with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasOccupationsWith(preds ...predicate.Occupation) {
	f.Where(entql.HasEdgeWith("occupations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcEvents applies a predicate to check if query has an edge ipc_events.
func (f *EmployeeFilter) WhereHasIpcEvents() {
	f.Where(entql.HasEdge("ipc_events"))
}

// WhereHasIpcEventsWith applies a predicate to check if query has an edge ipc_events with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasIpcEventsWith(preds ...predicate.IPCEvent) {
	f.Where(entql.HasEdgeWith("ipc_events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskReporter applies a predicate to check if query has an edge risk_reporter.
func (f *EmployeeFilter) WhereHasRiskReporter() {
	f.Where(entql.HasEdge("risk_reporter"))
}

// WhereHasRiskReporterWith applies a predicate to check if query has an edge risk_reporter with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasRiskReporterWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_reporter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskMaintainer applies a predicate to check if query has an edge risk_maintainer.
func (f *EmployeeFilter) WhereHasRiskMaintainer() {
	f.Where(entql.HasEdge("risk_maintainer"))
}

// WhereHasRiskMaintainerWith applies a predicate to check if query has an edge risk_maintainer with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasRiskMaintainerWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (elq *EventLevelQuery) addPredicate(pred func(s *sql.Selector)) {
	elq.predicates = append(elq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventLevelQuery builder.
func (elq *EventLevelQuery) Filter() *EventLevelFilter {
	return &EventLevelFilter{config: elq.config, predicateAdder: elq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventLevelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventLevelMutation builder.
func (m *EventLevelMutation) Filter() *EventLevelFilter {
	return &EventLevelFilter{config: m.config, predicateAdder: m}
}

// EventLevelFilter provides a generic filtering capability at runtime for EventLevelQuery.
type EventLevelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventLevelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventLevelFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventLevelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *EventLevelFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EventLevelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *EventLevelFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(eventlevel.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventLevelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(eventlevel.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *EventLevelFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(eventlevel.FieldName))
}

// WhereEventTypes applies the entql json.RawMessage predicate on the event_types field.
func (f *EventLevelFilter) WhereEventTypes(p entql.BytesP) {
	f.Where(p.Field(eventlevel.FieldEventTypes))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EventLevelFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(eventlevel.FieldDescription))
}

// WhereIsReport applies the entql bool predicate on the is_report field.
func (f *EventLevelFilter) WhereIsReport(p entql.BoolP) {
	f.Where(p.Field(eventlevel.FieldIsReport))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *EventLevelFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *EventLevelFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *EventLevelFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *EventLevelFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ieq *IPCEventQuery) addPredicate(pred func(s *sql.Selector)) {
	ieq.predicates = append(ieq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IPCEventQuery builder.
func (ieq *IPCEventQuery) Filter() *IPCEventFilter {
	return &IPCEventFilter{config: ieq.config, predicateAdder: ieq}
}

// addPredicate implements the predicateAdder interface.
func (m *IPCEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IPCEventMutation builder.
func (m *IPCEventMutation) Filter() *IPCEventFilter {
	return &IPCEventFilter{config: m.config, predicateAdder: m}
}

// IPCEventFilter provides a generic filtering capability at runtime for IPCEventQuery.
type IPCEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IPCEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *IPCEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IPCEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ipcevent.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *IPCEventFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IPCEventFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(ipcevent.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *IPCEventFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IPCEventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ipcevent.FieldUpdatedAt))
}

// WhereDeviceID applies the entql int predicate on the device_id field.
func (f *IPCEventFilter) WhereDeviceID(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldDeviceID))
}

// WhereVideoID applies the entql int predicate on the video_id field.
func (f *IPCEventFilter) WhereVideoID(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldVideoID))
}

// WhereEventTime applies the entql time.Time predicate on the event_time field.
func (f *IPCEventFilter) WhereEventTime(p entql.TimeP) {
	f.Where(p.Field(ipcevent.FieldEventTime))
}

// WhereEventType applies the entql int predicate on the event_type field.
func (f *IPCEventFilter) WhereEventType(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldEventType))
}

// WhereEventStatus applies the entql int predicate on the event_status field.
func (f *IPCEventFilter) WhereEventStatus(p entql.IntP) {
	f.Where(p.Field(ipcevent.FieldEventStatus))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *IPCEventFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(ipcevent.FieldImages))
}

// WhereLabeledImages applies the entql json.RawMessage predicate on the labeled_images field.
func (f *IPCEventFilter) WhereLabeledImages(p entql.BytesP) {
	f.Where(p.Field(ipcevent.FieldLabeledImages))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *IPCEventFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(ipcevent.FieldEventID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IPCEventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(ipcevent.FieldDescription))
}

// WhereRawData applies the entql string predicate on the raw_data field.
func (f *IPCEventFilter) WhereRawData(p entql.StringP) {
	f.Where(p.Field(ipcevent.FieldRawData))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *IPCEventFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *IPCEventFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *IPCEventFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *IPCEventFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVideo applies a predicate to check if query has an edge video.
func (f *IPCEventFilter) WhereHasVideo() {
	f.Where(entql.HasEdge("video"))
}

// WhereHasVideoWith applies a predicate to check if query has an edge video with a given conditions (other predicates).
func (f *IPCEventFilter) WhereHasVideoWith(preds ...predicate.Video) {
	f.Where(entql.HasEdgeWith("video", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevice applies a predicate to check if query has an edge device.
func (f *IPCEventFilter) WhereHasDevice() {
	f.Where(entql.HasEdge("device"))
}

// WhereHasDeviceWith applies a predicate to check if query has an edge device with a given conditions (other predicates).
func (f *IPCEventFilter) WhereHasDeviceWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFixers applies a predicate to check if query has an edge fixers.
func (f *IPCEventFilter) WhereHasFixers() {
	f.Where(entql.HasEdge("fixers"))
}

// WhereHasFixersWith applies a predicate to check if query has an edge fixers with a given conditions (other predicates).
func (f *IPCEventFilter) WhereHasFixersWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("fixers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OccupationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OccupationQuery builder.
func (oq *OccupationQuery) Filter() *OccupationFilter {
	return &OccupationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OccupationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OccupationMutation builder.
func (m *OccupationMutation) Filter() *OccupationFilter {
	return &OccupationFilter{config: m.config, predicateAdder: m}
}

// OccupationFilter provides a generic filtering capability at runtime for OccupationQuery.
type OccupationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OccupationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OccupationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(occupation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OccupationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *OccupationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(occupation.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OccupationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *OccupationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(occupation.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OccupationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(occupation.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *OccupationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(occupation.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OccupationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(occupation.FieldDescription))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *OccupationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *OccupationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *OccupationFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *OccupationFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiskQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskQuery builder.
func (rq *RiskQuery) Filter() *RiskFilter {
	return &RiskFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskMutation builder.
func (m *RiskMutation) Filter() *RiskFilter {
	return &RiskFilter{config: m.config, predicateAdder: m}
}

// RiskFilter provides a generic filtering capability at runtime for RiskQuery.
type RiskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risk.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(risk.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(risk.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldUpdatedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *RiskFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(risk.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *RiskFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(risk.FieldContent))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *RiskFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(risk.FieldImages))
}

// WhereRiskCategoryID applies the entql int predicate on the risk_category_id field.
func (f *RiskFilter) WhereRiskCategoryID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskCategoryID))
}

// WhereRiskLocationID applies the entql int predicate on the risk_location_id field.
func (f *RiskFilter) WhereRiskLocationID(p entql.IntP) {
	f.Where(p.Field(risk.FieldRiskLocationID))
}

// WhereReporterID applies the entql int predicate on the reporter_id field.
func (f *RiskFilter) WhereReporterID(p entql.IntP) {
	f.Where(p.Field(risk.FieldReporterID))
}

// WhereMaintainerID applies the entql int predicate on the maintainer_id field.
func (f *RiskFilter) WhereMaintainerID(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainerID))
}

// WhereMeasures applies the entql string predicate on the measures field.
func (f *RiskFilter) WhereMeasures(p entql.StringP) {
	f.Where(p.Field(risk.FieldMeasures))
}

// WhereMaintainStatus applies the entql int predicate on the maintain_status field.
func (f *RiskFilter) WhereMaintainStatus(p entql.IntP) {
	f.Where(p.Field(risk.FieldMaintainStatus))
}

// WhereDueTime applies the entql time.Time predicate on the due_time field.
func (f *RiskFilter) WhereDueTime(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDueTime))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCategory applies a predicate to check if query has an edge risk_category.
func (f *RiskFilter) WhereHasRiskCategory() {
	f.Where(entql.HasEdge("risk_category"))
}

// WhereHasRiskCategoryWith applies a predicate to check if query has an edge risk_category with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskCategoryWith(preds ...predicate.RiskCategory) {
	f.Where(entql.HasEdgeWith("risk_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskLocation applies a predicate to check if query has an edge risk_location.
func (f *RiskFilter) WhereHasRiskLocation() {
	f.Where(entql.HasEdge("risk_location"))
}

// WhereHasRiskLocationWith applies a predicate to check if query has an edge risk_location with a given conditions (other predicates).
func (f *RiskFilter) WhereHasRiskLocationWith(preds ...predicate.RiskLocation) {
	f.Where(entql.HasEdgeWith("risk_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReporter applies a predicate to check if query has an edge reporter.
func (f *RiskFilter) WhereHasReporter() {
	f.Where(entql.HasEdge("reporter"))
}

// WhereHasReporterWith applies a predicate to check if query has an edge reporter with a given conditions (other predicates).
func (f *RiskFilter) WhereHasReporterWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("reporter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMaintainer applies a predicate to check if query has an edge maintainer.
func (f *RiskFilter) WhereHasMaintainer() {
	f.Where(entql.HasEdge("maintainer"))
}

// WhereHasMaintainerWith applies a predicate to check if query has an edge maintainer with a given conditions (other predicates).
func (f *RiskFilter) WhereHasMaintainerWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("maintainer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RiskCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskCategoryQuery builder.
func (rcq *RiskCategoryQuery) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskCategoryMutation builder.
func (m *RiskCategoryMutation) Filter() *RiskCategoryFilter {
	return &RiskCategoryFilter{config: m.config, predicateAdder: m}
}

// RiskCategoryFilter provides a generic filtering capability at runtime for RiskCategoryQuery.
type RiskCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskCategoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskCategoryFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskCategoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskCategoryFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(riskcategory.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(riskcategory.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(riskcategory.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskCategoryFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskCategoryFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskCategoryFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskCategoryFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rlq *RiskLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	rlq.predicates = append(rlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskLocationQuery builder.
func (rlq *RiskLocationQuery) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: rlq.config, predicateAdder: rlq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskLocationMutation builder.
func (m *RiskLocationMutation) Filter() *RiskLocationFilter {
	return &RiskLocationFilter{config: m.config, predicateAdder: m}
}

// RiskLocationFilter provides a generic filtering capability at runtime for RiskLocationQuery.
type RiskLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RiskLocationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskLocationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RiskLocationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskLocationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RiskLocationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(risklocation.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskLocationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(risklocation.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskLocationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(risklocation.FieldName))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *RiskLocationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *RiskLocationFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisk applies a predicate to check if query has an edge risk.
func (f *RiskLocationFilter) WhereHasRisk() {
	f.Where(entql.HasEdge("risk"))
}

// WhereHasRiskWith applies a predicate to check if query has an edge risk with a given conditions (other predicates).
func (f *RiskLocationFilter) WhereHasRiskWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vq *VideoQuery) addPredicate(pred func(s *sql.Selector)) {
	vq.predicates = append(vq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VideoQuery builder.
func (vq *VideoQuery) Filter() *VideoFilter {
	return &VideoFilter{config: vq.config, predicateAdder: vq}
}

// addPredicate implements the predicateAdder interface.
func (m *VideoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VideoMutation builder.
func (m *VideoMutation) Filter() *VideoFilter {
	return &VideoFilter{config: m.config, predicateAdder: m}
}

// VideoFilter provides a generic filtering capability at runtime for VideoQuery.
type VideoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VideoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VideoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(video.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VideoFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(video.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VideoFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(video.FieldCreatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *VideoFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(video.FieldDeletedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VideoFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(video.FieldUpdatedBy))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VideoFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(video.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *VideoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(video.FieldName))
}

// WhereURL applies the entql string predicate on the url field.
func (f *VideoFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(video.FieldURL))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *VideoFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(video.FieldSize))
}

// WhereDuration applies the entql string predicate on the duration field.
func (f *VideoFilter) WhereDuration(p entql.StringP) {
	f.Where(p.Field(video.FieldDuration))
}

// WhereUploadedAt applies the entql time.Time predicate on the uploaded_at field.
func (f *VideoFilter) WhereUploadedAt(p entql.TimeP) {
	f.Where(p.Field(video.FieldUploadedAt))
}

// WhereUploadedAt2 applies the entql time.Time predicate on the uploaded_at2 field.
func (f *VideoFilter) WhereUploadedAt2(p entql.TimeP) {
	f.Where(p.Field(video.FieldUploadedAt2))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *VideoFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *VideoFilter) WhereHasCreatorWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdater applies a predicate to check if query has an edge updater.
func (f *VideoFilter) WhereHasUpdater() {
	f.Where(entql.HasEdge("updater"))
}

// WhereHasUpdaterWith applies a predicate to check if query has an edge updater with a given conditions (other predicates).
func (f *VideoFilter) WhereHasUpdaterWith(preds ...predicate.Admin) {
	f.Where(entql.HasEdgeWith("updater", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIpcEventVideo applies a predicate to check if query has an edge ipc_event_video.
func (f *VideoFilter) WhereHasIpcEventVideo() {
	f.Where(entql.HasEdge("ipc_event_video"))
}

// WhereHasIpcEventVideoWith applies a predicate to check if query has an edge ipc_event_video with a given conditions (other predicates).
func (f *VideoFilter) WhereHasIpcEventVideoWith(preds ...predicate.IPCEvent) {
	f.Where(entql.HasEdgeWith("ipc_event_video", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
