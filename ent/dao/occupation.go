// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/occupation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Occupation is the model entity for the Occupation schema.
type Occupation struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建者
	CreatorID int `json:"creator_id,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 最后更新者
	UpdaterID int `json:"updater_id,omitempty"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 名称
	Name string `json:"name,omitempty" validate:"required"`
	// 描述
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OccupationQuery when eager-loading is set.
	Edges        OccupationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OccupationEdges holds the relations/edges for other nodes in the graph.
type OccupationEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Employee holds the value of the employee edge.
	Employee []*Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccupationEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccupationEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading.
func (e OccupationEdges) EmployeeOrErr() ([]*Employee, error) {
	if e.loadedTypes[2] {
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Occupation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case occupation.FieldID, occupation.FieldCreatorID, occupation.FieldUpdaterID:
			values[i] = new(sql.NullInt64)
		case occupation.FieldName, occupation.FieldDescription:
			values[i] = new(sql.NullString)
		case occupation.FieldCreateTime, occupation.FieldDeleteTime, occupation.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Occupation fields.
func (o *Occupation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case occupation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case occupation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case occupation.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				o.CreatorID = int(value.Int64)
			}
		case occupation.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				o.DeleteTime = new(time.Time)
				*o.DeleteTime = value.Time
			}
		case occupation.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				o.UpdaterID = int(value.Int64)
			}
		case occupation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case occupation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case occupation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Occupation.
// This includes values selected through modifiers, order, etc.
func (o *Occupation) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Occupation entity.
func (o *Occupation) QueryCreator() *AdminQuery {
	return NewOccupationClient(o.config).QueryCreator(o)
}

// QueryUpdater queries the "updater" edge of the Occupation entity.
func (o *Occupation) QueryUpdater() *AdminQuery {
	return NewOccupationClient(o.config).QueryUpdater(o)
}

// QueryEmployee queries the "employee" edge of the Occupation entity.
func (o *Occupation) QueryEmployee() *EmployeeQuery {
	return NewOccupationClient(o.config).QueryEmployee(o)
}

// Update returns a builder for updating this Occupation.
// Note that you need to call Occupation.Unwrap() before calling this method if this Occupation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Occupation) Update() *OccupationUpdateOne {
	return NewOccupationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Occupation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Occupation) Unwrap() *Occupation {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("dao: Occupation is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Occupation) String() string {
	var builder strings.Builder
	builder.WriteString("Occupation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatorID))
	builder.WriteString(", ")
	if v := o.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Occupations is a parsable slice of Occupation.
type Occupations []*Occupation
