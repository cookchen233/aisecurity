// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// SweepUpdate is the builder for updating Sweep entities.
type SweepUpdate struct {
	config
	hooks    []Hook
	mutation *SweepMutation
}

// Where appends a list predicates to the SweepUpdate builder.
func (su *SweepUpdate) Where(ps ...predicate.Sweep) *SweepUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDeleteTime sets the "delete_time" field.
func (su *SweepUpdate) SetDeleteTime(t time.Time) *SweepUpdate {
	su.mutation.SetDeleteTime(t)
	return su
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (su *SweepUpdate) SetNillableDeleteTime(t *time.Time) *SweepUpdate {
	if t != nil {
		su.SetDeleteTime(*t)
	}
	return su
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (su *SweepUpdate) ClearDeleteTime() *SweepUpdate {
	su.mutation.ClearDeleteTime()
	return su
}

// SetUpdaterID sets the "updater_id" field.
func (su *SweepUpdate) SetUpdaterID(i int) *SweepUpdate {
	su.mutation.SetUpdaterID(i)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SweepUpdate) SetUpdateTime(t time.Time) *SweepUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetName sets the "name" field.
func (su *SweepUpdate) SetName(s string) *SweepUpdate {
	su.mutation.SetName(s)
	return su
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (su *SweepUpdate) SetRiskCategoryID(i int) *SweepUpdate {
	su.mutation.SetRiskCategoryID(i)
	return su
}

// SetRiskLocationID sets the "risk_location_id" field.
func (su *SweepUpdate) SetRiskLocationID(i int) *SweepUpdate {
	su.mutation.SetRiskLocationID(i)
	return su
}

// SetSweepJobs sets the "sweep_jobs" field.
func (su *SweepUpdate) SetSweepJobs(tj []*types.SweepJob) *SweepUpdate {
	su.mutation.SetSweepJobs(tj)
	return su
}

// AppendSweepJobs appends tj to the "sweep_jobs" field.
func (su *SweepUpdate) AppendSweepJobs(tj []*types.SweepJob) *SweepUpdate {
	su.mutation.AppendSweepJobs(tj)
	return su
}

// ClearSweepJobs clears the value of the "sweep_jobs" field.
func (su *SweepUpdate) ClearSweepJobs() *SweepUpdate {
	su.mutation.ClearSweepJobs()
	return su
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (su *SweepUpdate) SetUpdater(a *Admin) *SweepUpdate {
	return su.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (su *SweepUpdate) SetRiskCategory(r *RiskCategory) *SweepUpdate {
	return su.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (su *SweepUpdate) SetRiskLocation(r *RiskLocation) *SweepUpdate {
	return su.SetRiskLocationID(r.ID)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (su *SweepUpdate) AddSweepScheduleIDs(ids ...int) *SweepUpdate {
	su.mutation.AddSweepScheduleIDs(ids...)
	return su
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (su *SweepUpdate) AddSweepSchedule(s ...*SweepSchedule) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSweepScheduleIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (su *SweepUpdate) AddSweepResultIDs(ids ...int) *SweepUpdate {
	su.mutation.AddSweepResultIDs(ids...)
	return su
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (su *SweepUpdate) AddSweepResult(s ...*SweepResult) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (su *SweepUpdate) AddSweepResultDetailIDs(ids ...int) *SweepUpdate {
	su.mutation.AddSweepResultDetailIDs(ids...)
	return su
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (su *SweepUpdate) AddSweepResultDetails(s ...*SweepResultDetails) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepMutation object of the builder.
func (su *SweepUpdate) Mutation() *SweepMutation {
	return su.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (su *SweepUpdate) ClearUpdater() *SweepUpdate {
	su.mutation.ClearUpdater()
	return su
}

// ClearRiskCategory clears the "risk_category" edge to the RiskCategory entity.
func (su *SweepUpdate) ClearRiskCategory() *SweepUpdate {
	su.mutation.ClearRiskCategory()
	return su
}

// ClearRiskLocation clears the "risk_location" edge to the RiskLocation entity.
func (su *SweepUpdate) ClearRiskLocation() *SweepUpdate {
	su.mutation.ClearRiskLocation()
	return su
}

// ClearSweepSchedule clears all "sweep_schedule" edges to the SweepSchedule entity.
func (su *SweepUpdate) ClearSweepSchedule() *SweepUpdate {
	su.mutation.ClearSweepSchedule()
	return su
}

// RemoveSweepScheduleIDs removes the "sweep_schedule" edge to SweepSchedule entities by IDs.
func (su *SweepUpdate) RemoveSweepScheduleIDs(ids ...int) *SweepUpdate {
	su.mutation.RemoveSweepScheduleIDs(ids...)
	return su
}

// RemoveSweepSchedule removes "sweep_schedule" edges to SweepSchedule entities.
func (su *SweepUpdate) RemoveSweepSchedule(s ...*SweepSchedule) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSweepScheduleIDs(ids...)
}

// ClearSweepResult clears all "sweep_result" edges to the SweepResult entity.
func (su *SweepUpdate) ClearSweepResult() *SweepUpdate {
	su.mutation.ClearSweepResult()
	return su
}

// RemoveSweepResultIDs removes the "sweep_result" edge to SweepResult entities by IDs.
func (su *SweepUpdate) RemoveSweepResultIDs(ids ...int) *SweepUpdate {
	su.mutation.RemoveSweepResultIDs(ids...)
	return su
}

// RemoveSweepResult removes "sweep_result" edges to SweepResult entities.
func (su *SweepUpdate) RemoveSweepResult(s ...*SweepResult) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSweepResultIDs(ids...)
}

// ClearSweepResultDetails clears all "sweep_result_details" edges to the SweepResultDetails entity.
func (su *SweepUpdate) ClearSweepResultDetails() *SweepUpdate {
	su.mutation.ClearSweepResultDetails()
	return su
}

// RemoveSweepResultDetailIDs removes the "sweep_result_details" edge to SweepResultDetails entities by IDs.
func (su *SweepUpdate) RemoveSweepResultDetailIDs(ids ...int) *SweepUpdate {
	su.mutation.RemoveSweepResultDetailIDs(ids...)
	return su
}

// RemoveSweepResultDetails removes "sweep_result_details" edges to SweepResultDetails entities.
func (su *SweepUpdate) RemoveSweepResultDetails(s ...*SweepResultDetails) *SweepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSweepResultDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SweepUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SweepUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SweepUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SweepUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SweepUpdate) defaults() error {
	if _, ok := su.mutation.UpdateTime(); !ok {
		if sweep.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweep.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweep.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SweepUpdate) check() error {
	if v, ok := su.mutation.UpdaterID(); ok {
		if err := sweep.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.updater_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := sweep.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Sweep.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.RiskCategoryID(); ok {
		if err := sweep.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_category_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.RiskLocationID(); ok {
		if err := sweep.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_location_id": %w`, err)}
		}
	}
	if _, ok := su.mutation.CreatorID(); su.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.creator"`)
	}
	if _, ok := su.mutation.UpdaterID(); su.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.updater"`)
	}
	if _, ok := su.mutation.RiskCategoryID(); su.mutation.RiskCategoryCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.risk_category"`)
	}
	if _, ok := su.mutation.RiskLocationID(); su.mutation.RiskLocationCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.risk_location"`)
	}
	return nil
}

func (su *SweepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sweep.Table, sweep.Columns, sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.DeleteTime(); ok {
		_spec.SetField(sweep.FieldDeleteTime, field.TypeTime, value)
	}
	if su.mutation.DeleteTimeCleared() {
		_spec.ClearField(sweep.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(sweep.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sweep.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.SweepJobs(); ok {
		_spec.SetField(sweep.FieldSweepJobs, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedSweepJobs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sweep.FieldSweepJobs, value)
		})
	}
	if su.mutation.SweepJobsCleared() {
		_spec.ClearField(sweep.FieldSweepJobs, field.TypeJSON)
	}
	if su.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RiskCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RiskLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSweepScheduleIDs(); len(nodes) > 0 && !su.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSweepResultIDs(); len(nodes) > 0 && !su.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSweepResultDetailsIDs(); len(nodes) > 0 && !su.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sweep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SweepUpdateOne is the builder for updating a single Sweep entity.
type SweepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SweepMutation
}

// SetDeleteTime sets the "delete_time" field.
func (suo *SweepUpdateOne) SetDeleteTime(t time.Time) *SweepUpdateOne {
	suo.mutation.SetDeleteTime(t)
	return suo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (suo *SweepUpdateOne) SetNillableDeleteTime(t *time.Time) *SweepUpdateOne {
	if t != nil {
		suo.SetDeleteTime(*t)
	}
	return suo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (suo *SweepUpdateOne) ClearDeleteTime() *SweepUpdateOne {
	suo.mutation.ClearDeleteTime()
	return suo
}

// SetUpdaterID sets the "updater_id" field.
func (suo *SweepUpdateOne) SetUpdaterID(i int) *SweepUpdateOne {
	suo.mutation.SetUpdaterID(i)
	return suo
}

// SetUpdateTime sets the "update_time" field.
func (suo *SweepUpdateOne) SetUpdateTime(t time.Time) *SweepUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetName sets the "name" field.
func (suo *SweepUpdateOne) SetName(s string) *SweepUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (suo *SweepUpdateOne) SetRiskCategoryID(i int) *SweepUpdateOne {
	suo.mutation.SetRiskCategoryID(i)
	return suo
}

// SetRiskLocationID sets the "risk_location_id" field.
func (suo *SweepUpdateOne) SetRiskLocationID(i int) *SweepUpdateOne {
	suo.mutation.SetRiskLocationID(i)
	return suo
}

// SetSweepJobs sets the "sweep_jobs" field.
func (suo *SweepUpdateOne) SetSweepJobs(tj []*types.SweepJob) *SweepUpdateOne {
	suo.mutation.SetSweepJobs(tj)
	return suo
}

// AppendSweepJobs appends tj to the "sweep_jobs" field.
func (suo *SweepUpdateOne) AppendSweepJobs(tj []*types.SweepJob) *SweepUpdateOne {
	suo.mutation.AppendSweepJobs(tj)
	return suo
}

// ClearSweepJobs clears the value of the "sweep_jobs" field.
func (suo *SweepUpdateOne) ClearSweepJobs() *SweepUpdateOne {
	suo.mutation.ClearSweepJobs()
	return suo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (suo *SweepUpdateOne) SetUpdater(a *Admin) *SweepUpdateOne {
	return suo.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (suo *SweepUpdateOne) SetRiskCategory(r *RiskCategory) *SweepUpdateOne {
	return suo.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (suo *SweepUpdateOne) SetRiskLocation(r *RiskLocation) *SweepUpdateOne {
	return suo.SetRiskLocationID(r.ID)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (suo *SweepUpdateOne) AddSweepScheduleIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.AddSweepScheduleIDs(ids...)
	return suo
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (suo *SweepUpdateOne) AddSweepSchedule(s ...*SweepSchedule) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSweepScheduleIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (suo *SweepUpdateOne) AddSweepResultIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.AddSweepResultIDs(ids...)
	return suo
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (suo *SweepUpdateOne) AddSweepResult(s ...*SweepResult) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (suo *SweepUpdateOne) AddSweepResultDetailIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.AddSweepResultDetailIDs(ids...)
	return suo
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (suo *SweepUpdateOne) AddSweepResultDetails(s ...*SweepResultDetails) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepMutation object of the builder.
func (suo *SweepUpdateOne) Mutation() *SweepMutation {
	return suo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (suo *SweepUpdateOne) ClearUpdater() *SweepUpdateOne {
	suo.mutation.ClearUpdater()
	return suo
}

// ClearRiskCategory clears the "risk_category" edge to the RiskCategory entity.
func (suo *SweepUpdateOne) ClearRiskCategory() *SweepUpdateOne {
	suo.mutation.ClearRiskCategory()
	return suo
}

// ClearRiskLocation clears the "risk_location" edge to the RiskLocation entity.
func (suo *SweepUpdateOne) ClearRiskLocation() *SweepUpdateOne {
	suo.mutation.ClearRiskLocation()
	return suo
}

// ClearSweepSchedule clears all "sweep_schedule" edges to the SweepSchedule entity.
func (suo *SweepUpdateOne) ClearSweepSchedule() *SweepUpdateOne {
	suo.mutation.ClearSweepSchedule()
	return suo
}

// RemoveSweepScheduleIDs removes the "sweep_schedule" edge to SweepSchedule entities by IDs.
func (suo *SweepUpdateOne) RemoveSweepScheduleIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.RemoveSweepScheduleIDs(ids...)
	return suo
}

// RemoveSweepSchedule removes "sweep_schedule" edges to SweepSchedule entities.
func (suo *SweepUpdateOne) RemoveSweepSchedule(s ...*SweepSchedule) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSweepScheduleIDs(ids...)
}

// ClearSweepResult clears all "sweep_result" edges to the SweepResult entity.
func (suo *SweepUpdateOne) ClearSweepResult() *SweepUpdateOne {
	suo.mutation.ClearSweepResult()
	return suo
}

// RemoveSweepResultIDs removes the "sweep_result" edge to SweepResult entities by IDs.
func (suo *SweepUpdateOne) RemoveSweepResultIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.RemoveSweepResultIDs(ids...)
	return suo
}

// RemoveSweepResult removes "sweep_result" edges to SweepResult entities.
func (suo *SweepUpdateOne) RemoveSweepResult(s ...*SweepResult) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSweepResultIDs(ids...)
}

// ClearSweepResultDetails clears all "sweep_result_details" edges to the SweepResultDetails entity.
func (suo *SweepUpdateOne) ClearSweepResultDetails() *SweepUpdateOne {
	suo.mutation.ClearSweepResultDetails()
	return suo
}

// RemoveSweepResultDetailIDs removes the "sweep_result_details" edge to SweepResultDetails entities by IDs.
func (suo *SweepUpdateOne) RemoveSweepResultDetailIDs(ids ...int) *SweepUpdateOne {
	suo.mutation.RemoveSweepResultDetailIDs(ids...)
	return suo
}

// RemoveSweepResultDetails removes "sweep_result_details" edges to SweepResultDetails entities.
func (suo *SweepUpdateOne) RemoveSweepResultDetails(s ...*SweepResultDetails) *SweepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSweepResultDetailIDs(ids...)
}

// Where appends a list predicates to the SweepUpdate builder.
func (suo *SweepUpdateOne) Where(ps ...predicate.Sweep) *SweepUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SweepUpdateOne) Select(field string, fields ...string) *SweepUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sweep entity.
func (suo *SweepUpdateOne) Save(ctx context.Context) (*Sweep, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SweepUpdateOne) SaveX(ctx context.Context) *Sweep {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SweepUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SweepUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SweepUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		if sweep.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweep.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweep.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SweepUpdateOne) check() error {
	if v, ok := suo.mutation.UpdaterID(); ok {
		if err := sweep.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.updater_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := sweep.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Sweep.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RiskCategoryID(); ok {
		if err := sweep.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_category_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RiskLocationID(); ok {
		if err := sweep.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_location_id": %w`, err)}
		}
	}
	if _, ok := suo.mutation.CreatorID(); suo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.creator"`)
	}
	if _, ok := suo.mutation.UpdaterID(); suo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.updater"`)
	}
	if _, ok := suo.mutation.RiskCategoryID(); suo.mutation.RiskCategoryCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.risk_category"`)
	}
	if _, ok := suo.mutation.RiskLocationID(); suo.mutation.RiskLocationCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Sweep.risk_location"`)
	}
	return nil
}

func (suo *SweepUpdateOne) sqlSave(ctx context.Context) (_node *Sweep, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sweep.Table, sweep.Columns, sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Sweep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sweep.FieldID)
		for _, f := range fields {
			if !sweep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != sweep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.DeleteTime(); ok {
		_spec.SetField(sweep.FieldDeleteTime, field.TypeTime, value)
	}
	if suo.mutation.DeleteTimeCleared() {
		_spec.ClearField(sweep.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(sweep.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sweep.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.SweepJobs(); ok {
		_spec.SetField(sweep.FieldSweepJobs, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedSweepJobs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sweep.FieldSweepJobs, value)
		})
	}
	if suo.mutation.SweepJobsCleared() {
		_spec.ClearField(sweep.FieldSweepJobs, field.TypeJSON)
	}
	if suo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RiskCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RiskLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSweepScheduleIDs(); len(nodes) > 0 && !suo.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSweepResultIDs(); len(nodes) > 0 && !suo.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSweepResultDetailsIDs(); len(nodes) > 0 && !suo.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sweep{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sweep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
