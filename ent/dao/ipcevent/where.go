// Code generated by ent, DO NOT EDIT.

package ipcevent

import (
	"aisecurity/ent/dao/predicate"
	"aisecurity/enums"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldCreatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDeviceID, v))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldVideoID, v))
}

// EventTime applies equality check predicate on the "event_time" field. It's identical to EventTimeEQ.
func EventTime(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldEventTime, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldEQ(FieldEventType, vc))
}

// EventStatus applies equality check predicate on the "event_status" field. It's identical to EventStatusEQ.
func EventStatus(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldEQ(FieldEventStatus, vc))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldEventID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDescription, v))
}

// RawData applies equality check predicate on the "raw_data" field. It's identical to RawDataEQ.
func RawData(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldRawData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldDeletedAt))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldDeviceID, vs...))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...int) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldVideoID, vs...))
}

// VideoIDIsNil applies the IsNil predicate on the "video_id" field.
func VideoIDIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldVideoID))
}

// VideoIDNotNil applies the NotNil predicate on the "video_id" field.
func VideoIDNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldVideoID))
}

// EventTimeEQ applies the EQ predicate on the "event_time" field.
func EventTimeEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldEventTime, v))
}

// EventTimeNEQ applies the NEQ predicate on the "event_time" field.
func EventTimeNEQ(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldEventTime, v))
}

// EventTimeIn applies the In predicate on the "event_time" field.
func EventTimeIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldEventTime, vs...))
}

// EventTimeNotIn applies the NotIn predicate on the "event_time" field.
func EventTimeNotIn(vs ...time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldEventTime, vs...))
}

// EventTimeGT applies the GT predicate on the "event_time" field.
func EventTimeGT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldEventTime, v))
}

// EventTimeGTE applies the GTE predicate on the "event_time" field.
func EventTimeGTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldEventTime, v))
}

// EventTimeLT applies the LT predicate on the "event_time" field.
func EventTimeLT(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldEventTime, v))
}

// EventTimeLTE applies the LTE predicate on the "event_time" field.
func EventTimeLTE(v time.Time) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldEventTime, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldEQ(FieldEventType, vc))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldNEQ(FieldEventType, vc))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...enums.EventType) predicate.IPCEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.IPCEvent(sql.FieldIn(FieldEventType, v...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...enums.EventType) predicate.IPCEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.IPCEvent(sql.FieldNotIn(FieldEventType, v...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldGT(FieldEventType, vc))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldGTE(FieldEventType, vc))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldLT(FieldEventType, vc))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v enums.EventType) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldLTE(FieldEventType, vc))
}

// EventStatusEQ applies the EQ predicate on the "event_status" field.
func EventStatusEQ(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldEQ(FieldEventStatus, vc))
}

// EventStatusNEQ applies the NEQ predicate on the "event_status" field.
func EventStatusNEQ(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldNEQ(FieldEventStatus, vc))
}

// EventStatusIn applies the In predicate on the "event_status" field.
func EventStatusIn(vs ...enums.EventStatus) predicate.IPCEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.IPCEvent(sql.FieldIn(FieldEventStatus, v...))
}

// EventStatusNotIn applies the NotIn predicate on the "event_status" field.
func EventStatusNotIn(vs ...enums.EventStatus) predicate.IPCEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.IPCEvent(sql.FieldNotIn(FieldEventStatus, v...))
}

// EventStatusGT applies the GT predicate on the "event_status" field.
func EventStatusGT(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldGT(FieldEventStatus, vc))
}

// EventStatusGTE applies the GTE predicate on the "event_status" field.
func EventStatusGTE(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldGTE(FieldEventStatus, vc))
}

// EventStatusLT applies the LT predicate on the "event_status" field.
func EventStatusLT(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldLT(FieldEventStatus, vc))
}

// EventStatusLTE applies the LTE predicate on the "event_status" field.
func EventStatusLTE(v enums.EventStatus) predicate.IPCEvent {
	vc := int(v)
	return predicate.IPCEvent(sql.FieldLTE(FieldEventStatus, vc))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldImages))
}

// LabeledImagesIsNil applies the IsNil predicate on the "labeled_images" field.
func LabeledImagesIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldLabeledImages))
}

// LabeledImagesNotNil applies the NotNil predicate on the "labeled_images" field.
func LabeledImagesNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldLabeledImages))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContainsFold(FieldEventID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContainsFold(FieldDescription, v))
}

// RawDataEQ applies the EQ predicate on the "raw_data" field.
func RawDataEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEQ(FieldRawData, v))
}

// RawDataNEQ applies the NEQ predicate on the "raw_data" field.
func RawDataNEQ(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNEQ(FieldRawData, v))
}

// RawDataIn applies the In predicate on the "raw_data" field.
func RawDataIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIn(FieldRawData, vs...))
}

// RawDataNotIn applies the NotIn predicate on the "raw_data" field.
func RawDataNotIn(vs ...string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotIn(FieldRawData, vs...))
}

// RawDataGT applies the GT predicate on the "raw_data" field.
func RawDataGT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGT(FieldRawData, v))
}

// RawDataGTE applies the GTE predicate on the "raw_data" field.
func RawDataGTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldGTE(FieldRawData, v))
}

// RawDataLT applies the LT predicate on the "raw_data" field.
func RawDataLT(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLT(FieldRawData, v))
}

// RawDataLTE applies the LTE predicate on the "raw_data" field.
func RawDataLTE(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldLTE(FieldRawData, v))
}

// RawDataContains applies the Contains predicate on the "raw_data" field.
func RawDataContains(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContains(FieldRawData, v))
}

// RawDataHasPrefix applies the HasPrefix predicate on the "raw_data" field.
func RawDataHasPrefix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasPrefix(FieldRawData, v))
}

// RawDataHasSuffix applies the HasSuffix predicate on the "raw_data" field.
func RawDataHasSuffix(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldHasSuffix(FieldRawData, v))
}

// RawDataIsNil applies the IsNil predicate on the "raw_data" field.
func RawDataIsNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldIsNull(FieldRawData))
}

// RawDataNotNil applies the NotNil predicate on the "raw_data" field.
func RawDataNotNil() predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldNotNull(FieldRawData))
}

// RawDataEqualFold applies the EqualFold predicate on the "raw_data" field.
func RawDataEqualFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldEqualFold(FieldRawData, v))
}

// RawDataContainsFold applies the ContainsFold predicate on the "raw_data" field.
func RawDataContainsFold(v string) predicate.IPCEvent {
	return predicate.IPCEvent(sql.FieldContainsFold(FieldRawData, v))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Admin) predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdater applies the HasEdge predicate on the "updater" edge.
func HasUpdater() predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdaterWith applies the HasEdge predicate on the "updater" edge with a given conditions (other predicates).
func HasUpdaterWith(preds ...predicate.Admin) predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := newUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideo applies the HasEdge predicate on the "video" edge.
func HasVideo() predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoWith applies the HasEdge predicate on the "video" edge with a given conditions (other predicates).
func HasVideoWith(preds ...predicate.Video) predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := newVideoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixers applies the HasEdge predicate on the "fixers" edge.
func HasFixers() predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FixersTable, FixersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixersWith applies the HasEdge predicate on the "fixers" edge with a given conditions (other predicates).
func HasFixersWith(preds ...predicate.Employee) predicate.IPCEvent {
	return predicate.IPCEvent(func(s *sql.Selector) {
		step := newFixersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IPCEvent) predicate.IPCEvent {
	return predicate.IPCEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IPCEvent) predicate.IPCEvent {
	return predicate.IPCEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IPCEvent) predicate.IPCEvent {
	return predicate.IPCEvent(sql.NotPredicates(p))
}
