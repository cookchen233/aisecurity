// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepResultDetailsCreate is the builder for creating a SweepResultDetails entity.
type SweepResultDetailsCreate struct {
	config
	mutation *SweepResultDetailsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (srdc *SweepResultDetailsCreate) SetCreateTime(t time.Time) *SweepResultDetailsCreate {
	srdc.mutation.SetCreateTime(t)
	return srdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (srdc *SweepResultDetailsCreate) SetNillableCreateTime(t *time.Time) *SweepResultDetailsCreate {
	if t != nil {
		srdc.SetCreateTime(*t)
	}
	return srdc
}

// SetCreatorID sets the "creator_id" field.
func (srdc *SweepResultDetailsCreate) SetCreatorID(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetCreatorID(i)
	return srdc
}

// SetDeleteTime sets the "delete_time" field.
func (srdc *SweepResultDetailsCreate) SetDeleteTime(t time.Time) *SweepResultDetailsCreate {
	srdc.mutation.SetDeleteTime(t)
	return srdc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (srdc *SweepResultDetailsCreate) SetNillableDeleteTime(t *time.Time) *SweepResultDetailsCreate {
	if t != nil {
		srdc.SetDeleteTime(*t)
	}
	return srdc
}

// SetUpdaterID sets the "updater_id" field.
func (srdc *SweepResultDetailsCreate) SetUpdaterID(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetUpdaterID(i)
	return srdc
}

// SetUpdateTime sets the "update_time" field.
func (srdc *SweepResultDetailsCreate) SetUpdateTime(t time.Time) *SweepResultDetailsCreate {
	srdc.mutation.SetUpdateTime(t)
	return srdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (srdc *SweepResultDetailsCreate) SetNillableUpdateTime(t *time.Time) *SweepResultDetailsCreate {
	if t != nil {
		srdc.SetUpdateTime(*t)
	}
	return srdc
}

// SetSweepID sets the "sweep_id" field.
func (srdc *SweepResultDetailsCreate) SetSweepID(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetSweepID(i)
	return srdc
}

// SetSweepScheduleID sets the "sweep_schedule_id" field.
func (srdc *SweepResultDetailsCreate) SetSweepScheduleID(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetSweepScheduleID(i)
	return srdc
}

// SetSweepResultID sets the "sweep_result_id" field.
func (srdc *SweepResultDetailsCreate) SetSweepResultID(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetSweepResultID(i)
	return srdc
}

// SetTitle sets the "title" field.
func (srdc *SweepResultDetailsCreate) SetTitle(s string) *SweepResultDetailsCreate {
	srdc.mutation.SetTitle(s)
	return srdc
}

// SetResult sets the "result" field.
func (srdc *SweepResultDetailsCreate) SetResult(i int) *SweepResultDetailsCreate {
	srdc.mutation.SetResult(i)
	return srdc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (srdc *SweepResultDetailsCreate) SetCreator(a *Admin) *SweepResultDetailsCreate {
	return srdc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (srdc *SweepResultDetailsCreate) SetUpdater(a *Admin) *SweepResultDetailsCreate {
	return srdc.SetUpdaterID(a.ID)
}

// SetSweep sets the "sweep" edge to the Sweep entity.
func (srdc *SweepResultDetailsCreate) SetSweep(s *Sweep) *SweepResultDetailsCreate {
	return srdc.SetSweepID(s.ID)
}

// SetSweepSchedule sets the "sweep_schedule" edge to the SweepSchedule entity.
func (srdc *SweepResultDetailsCreate) SetSweepSchedule(s *SweepSchedule) *SweepResultDetailsCreate {
	return srdc.SetSweepScheduleID(s.ID)
}

// SetSweepResult sets the "sweep_result" edge to the SweepResult entity.
func (srdc *SweepResultDetailsCreate) SetSweepResult(s *SweepResult) *SweepResultDetailsCreate {
	return srdc.SetSweepResultID(s.ID)
}

// Mutation returns the SweepResultDetailsMutation object of the builder.
func (srdc *SweepResultDetailsCreate) Mutation() *SweepResultDetailsMutation {
	return srdc.mutation
}

// Save creates the SweepResultDetails in the database.
func (srdc *SweepResultDetailsCreate) Save(ctx context.Context) (*SweepResultDetails, error) {
	if err := srdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, srdc.sqlSave, srdc.mutation, srdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srdc *SweepResultDetailsCreate) SaveX(ctx context.Context) *SweepResultDetails {
	v, err := srdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srdc *SweepResultDetailsCreate) Exec(ctx context.Context) error {
	_, err := srdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srdc *SweepResultDetailsCreate) ExecX(ctx context.Context) {
	if err := srdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srdc *SweepResultDetailsCreate) defaults() error {
	if _, ok := srdc.mutation.CreateTime(); !ok {
		if sweepresultdetails.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepresultdetails.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := sweepresultdetails.DefaultCreateTime()
		srdc.mutation.SetCreateTime(v)
	}
	if _, ok := srdc.mutation.UpdateTime(); !ok {
		if sweepresultdetails.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepresultdetails.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweepresultdetails.DefaultUpdateTime()
		srdc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (srdc *SweepResultDetailsCreate) check() error {
	if _, ok := srdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "SweepResultDetails.create_time"`)}
	}
	if _, ok := srdc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "SweepResultDetails.creator_id"`)}
	}
	if v, ok := srdc.mutation.CreatorID(); ok {
		if err := sweepresultdetails.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.creator_id": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "SweepResultDetails.updater_id"`)}
	}
	if v, ok := srdc.mutation.UpdaterID(); ok {
		if err := sweepresultdetails.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.updater_id": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "SweepResultDetails.update_time"`)}
	}
	if _, ok := srdc.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep_id", err: errors.New(`dao: missing required field "SweepResultDetails.sweep_id"`)}
	}
	if v, ok := srdc.mutation.SweepID(); ok {
		if err := sweepresultdetails.SweepIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_id", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.sweep_id": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.SweepScheduleID(); !ok {
		return &ValidationError{Name: "sweep_schedule_id", err: errors.New(`dao: missing required field "SweepResultDetails.sweep_schedule_id"`)}
	}
	if v, ok := srdc.mutation.SweepScheduleID(); ok {
		if err := sweepresultdetails.SweepScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_schedule_id", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.sweep_schedule_id": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.SweepResultID(); !ok {
		return &ValidationError{Name: "sweep_result_id", err: errors.New(`dao: missing required field "SweepResultDetails.sweep_result_id"`)}
	}
	if v, ok := srdc.mutation.SweepResultID(); ok {
		if err := sweepresultdetails.SweepResultIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_result_id", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.sweep_result_id": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`dao: missing required field "SweepResultDetails.title"`)}
	}
	if v, ok := srdc.mutation.Title(); ok {
		if err := sweepresultdetails.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.title": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`dao: missing required field "SweepResultDetails.result"`)}
	}
	if v, ok := srdc.mutation.Result(); ok {
		if err := sweepresultdetails.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`dao: validator failed for field "SweepResultDetails.result": %w`, err)}
		}
	}
	if _, ok := srdc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "SweepResultDetails.creator"`)}
	}
	if _, ok := srdc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "SweepResultDetails.updater"`)}
	}
	if _, ok := srdc.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep", err: errors.New(`dao: missing required edge "SweepResultDetails.sweep"`)}
	}
	if _, ok := srdc.mutation.SweepScheduleID(); !ok {
		return &ValidationError{Name: "sweep_schedule", err: errors.New(`dao: missing required edge "SweepResultDetails.sweep_schedule"`)}
	}
	if _, ok := srdc.mutation.SweepResultID(); !ok {
		return &ValidationError{Name: "sweep_result", err: errors.New(`dao: missing required edge "SweepResultDetails.sweep_result"`)}
	}
	return nil
}

func (srdc *SweepResultDetailsCreate) sqlSave(ctx context.Context) (*SweepResultDetails, error) {
	if err := srdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := srdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, srdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	srdc.mutation.id = &_node.ID
	srdc.mutation.done = true
	return _node, nil
}

func (srdc *SweepResultDetailsCreate) createSpec() (*SweepResultDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &SweepResultDetails{config: srdc.config}
		_spec = sqlgraph.NewCreateSpec(sweepresultdetails.Table, sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt))
	)
	if value, ok := srdc.mutation.CreateTime(); ok {
		_spec.SetField(sweepresultdetails.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := srdc.mutation.DeleteTime(); ok {
		_spec.SetField(sweepresultdetails.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := srdc.mutation.UpdateTime(); ok {
		_spec.SetField(sweepresultdetails.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := srdc.mutation.Title(); ok {
		_spec.SetField(sweepresultdetails.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := srdc.mutation.Result(); ok {
		_spec.SetField(sweepresultdetails.FieldResult, field.TypeInt, value)
		_node.Result = value
	}
	if nodes := srdc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.CreatorTable,
			Columns: []string{sweepresultdetails.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srdc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.UpdaterTable,
			Columns: []string{sweepresultdetails.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srdc.mutation.SweepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepTable,
			Columns: []string{sweepresultdetails.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srdc.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepScheduleTable,
			Columns: []string{sweepresultdetails.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srdc.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresultdetails.SweepResultTable,
			Columns: []string{sweepresultdetails.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepResultID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SweepResultDetailsCreateBulk is the builder for creating many SweepResultDetails entities in bulk.
type SweepResultDetailsCreateBulk struct {
	config
	err      error
	builders []*SweepResultDetailsCreate
}

// Save creates the SweepResultDetails entities in the database.
func (srdcb *SweepResultDetailsCreateBulk) Save(ctx context.Context) ([]*SweepResultDetails, error) {
	if srdcb.err != nil {
		return nil, srdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srdcb.builders))
	nodes := make([]*SweepResultDetails, len(srdcb.builders))
	mutators := make([]Mutator, len(srdcb.builders))
	for i := range srdcb.builders {
		func(i int, root context.Context) {
			builder := srdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SweepResultDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srdcb *SweepResultDetailsCreateBulk) SaveX(ctx context.Context) []*SweepResultDetails {
	v, err := srdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srdcb *SweepResultDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := srdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srdcb *SweepResultDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := srdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
