// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/sweepresultdetails"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepResultDetailsDelete is the builder for deleting a SweepResultDetails entity.
type SweepResultDetailsDelete struct {
	config
	hooks    []Hook
	mutation *SweepResultDetailsMutation
}

// Where appends a list predicates to the SweepResultDetailsDelete builder.
func (srdd *SweepResultDetailsDelete) Where(ps ...predicate.SweepResultDetails) *SweepResultDetailsDelete {
	srdd.mutation.Where(ps...)
	return srdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srdd *SweepResultDetailsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srdd.sqlExec, srdd.mutation, srdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srdd *SweepResultDetailsDelete) ExecX(ctx context.Context) int {
	n, err := srdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srdd *SweepResultDetailsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sweepresultdetails.Table, sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt))
	if ps := srdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srdd.mutation.done = true
	return affected, err
}

// SweepResultDetailsDeleteOne is the builder for deleting a single SweepResultDetails entity.
type SweepResultDetailsDeleteOne struct {
	srdd *SweepResultDetailsDelete
}

// Where appends a list predicates to the SweepResultDetailsDelete builder.
func (srddo *SweepResultDetailsDeleteOne) Where(ps ...predicate.SweepResultDetails) *SweepResultDetailsDeleteOne {
	srddo.srdd.mutation.Where(ps...)
	return srddo
}

// Exec executes the deletion query.
func (srddo *SweepResultDetailsDeleteOne) Exec(ctx context.Context) error {
	n, err := srddo.srdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sweepresultdetails.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srddo *SweepResultDetailsDeleteOne) ExecX(ctx context.Context) {
	if err := srddo.Exec(ctx); err != nil {
		panic(err)
	}
}
