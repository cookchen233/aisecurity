// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/fixing"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Fixing is the model entity for the Fixing schema.
type Fixing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time"`
	// 创建者
	CreatorID int `json:"creator_id"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time"`
	// 最后更新者
	UpdaterID int `json:"updater_id"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time"`
	// 处理人ID
	FixerID int `json:"fixer_id"`
	// 事件ID
	EventID int `json:"event_id"`
	// 设备ID
	DeviceID int `json:"device_id"`
	// 分派备注
	AssignNotes string `json:"assign_notes"`
	// 处理时间
	FixTime time.Time `json:"fix_time"`
	// 处理完成时间
	CompleteTime time.Time `json:"complete_time"`
	// 处理完成备注
	CompleteNotes string `json:"complete_notes"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixingQuery when eager-loading is set.
	Edges        FixingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FixingEdges holds the relations/edges for other nodes in the graph.
type FixingEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Fixer holds the value of the fixer edge.
	Fixer *Admin `json:"fixer,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixingEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixingEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// FixerOrErr returns the Fixer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixingEdges) FixerOrErr() (*Admin, error) {
	if e.loadedTypes[2] {
		if e.Fixer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Fixer, nil
	}
	return nil, &NotLoadedError{edge: "fixer"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixingEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[3] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixingEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[4] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fixing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fixing.FieldID, fixing.FieldCreatorID, fixing.FieldUpdaterID, fixing.FieldFixerID, fixing.FieldEventID, fixing.FieldDeviceID:
			values[i] = new(sql.NullInt64)
		case fixing.FieldAssignNotes, fixing.FieldCompleteNotes:
			values[i] = new(sql.NullString)
		case fixing.FieldCreateTime, fixing.FieldDeleteTime, fixing.FieldUpdateTime, fixing.FieldFixTime, fixing.FieldCompleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fixing fields.
func (f *Fixing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fixing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case fixing.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		case fixing.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				f.CreatorID = int(value.Int64)
			}
		case fixing.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				f.DeleteTime = new(time.Time)
				*f.DeleteTime = value.Time
			}
		case fixing.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				f.UpdaterID = int(value.Int64)
			}
		case fixing.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				f.UpdateTime = value.Time
			}
		case fixing.FieldFixerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fixer_id", values[i])
			} else if value.Valid {
				f.FixerID = int(value.Int64)
			}
		case fixing.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				f.EventID = int(value.Int64)
			}
		case fixing.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				f.DeviceID = int(value.Int64)
			}
		case fixing.FieldAssignNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assign_notes", values[i])
			} else if value.Valid {
				f.AssignNotes = value.String
			}
		case fixing.FieldFixTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field fix_time", values[i])
			} else if value.Valid {
				f.FixTime = value.Time
			}
		case fixing.FieldCompleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field complete_time", values[i])
			} else if value.Valid {
				f.CompleteTime = value.Time
			}
		case fixing.FieldCompleteNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field complete_notes", values[i])
			} else if value.Valid {
				f.CompleteNotes = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fixing.
// This includes values selected through modifiers, order, etc.
func (f *Fixing) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Fixing entity.
func (f *Fixing) QueryCreator() *AdminQuery {
	return NewFixingClient(f.config).QueryCreator(f)
}

// QueryUpdater queries the "updater" edge of the Fixing entity.
func (f *Fixing) QueryUpdater() *AdminQuery {
	return NewFixingClient(f.config).QueryUpdater(f)
}

// QueryFixer queries the "fixer" edge of the Fixing entity.
func (f *Fixing) QueryFixer() *AdminQuery {
	return NewFixingClient(f.config).QueryFixer(f)
}

// QueryEvent queries the "event" edge of the Fixing entity.
func (f *Fixing) QueryEvent() *EventQuery {
	return NewFixingClient(f.config).QueryEvent(f)
}

// QueryDevice queries the "device" edge of the Fixing entity.
func (f *Fixing) QueryDevice() *DeviceQuery {
	return NewFixingClient(f.config).QueryDevice(f)
}

// Update returns a builder for updating this Fixing.
// Note that you need to call Fixing.Unwrap() before calling this method if this Fixing
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fixing) Update() *FixingUpdateOne {
	return NewFixingClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fixing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fixing) Unwrap() *Fixing {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("dao: Fixing is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fixing) String() string {
	var builder strings.Builder
	builder.WriteString("Fixing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatorID))
	builder.WriteString(", ")
	if v := f.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(f.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fixer_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FixerID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", f.EventID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", f.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("assign_notes=")
	builder.WriteString(f.AssignNotes)
	builder.WriteString(", ")
	builder.WriteString("fix_time=")
	builder.WriteString(f.FixTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("complete_time=")
	builder.WriteString(f.CompleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("complete_notes=")
	builder.WriteString(f.CompleteNotes)
	builder.WriteByte(')')
	return builder.String()
}

// Fixings is a parsable slice of Fixing.
type Fixings []*Fixing
