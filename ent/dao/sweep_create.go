// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepCreate is the builder for creating a Sweep entity.
type SweepCreate struct {
	config
	mutation *SweepMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SweepCreate) SetCreateTime(t time.Time) *SweepCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SweepCreate) SetNillableCreateTime(t *time.Time) *SweepCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetCreatorID sets the "creator_id" field.
func (sc *SweepCreate) SetCreatorID(i int) *SweepCreate {
	sc.mutation.SetCreatorID(i)
	return sc
}

// SetDeleteTime sets the "delete_time" field.
func (sc *SweepCreate) SetDeleteTime(t time.Time) *SweepCreate {
	sc.mutation.SetDeleteTime(t)
	return sc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sc *SweepCreate) SetNillableDeleteTime(t *time.Time) *SweepCreate {
	if t != nil {
		sc.SetDeleteTime(*t)
	}
	return sc
}

// SetUpdaterID sets the "updater_id" field.
func (sc *SweepCreate) SetUpdaterID(i int) *SweepCreate {
	sc.mutation.SetUpdaterID(i)
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SweepCreate) SetUpdateTime(t time.Time) *SweepCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SweepCreate) SetNillableUpdateTime(t *time.Time) *SweepCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SweepCreate) SetName(s string) *SweepCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (sc *SweepCreate) SetRiskCategoryID(i int) *SweepCreate {
	sc.mutation.SetRiskCategoryID(i)
	return sc
}

// SetRiskLocationID sets the "risk_location_id" field.
func (sc *SweepCreate) SetRiskLocationID(i int) *SweepCreate {
	sc.mutation.SetRiskLocationID(i)
	return sc
}

// SetSweepJobs sets the "sweep_jobs" field.
func (sc *SweepCreate) SetSweepJobs(tj []*types.SweepJob) *SweepCreate {
	sc.mutation.SetSweepJobs(tj)
	return sc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (sc *SweepCreate) SetCreator(a *Admin) *SweepCreate {
	return sc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (sc *SweepCreate) SetUpdater(a *Admin) *SweepCreate {
	return sc.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (sc *SweepCreate) SetRiskCategory(r *RiskCategory) *SweepCreate {
	return sc.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (sc *SweepCreate) SetRiskLocation(r *RiskLocation) *SweepCreate {
	return sc.SetRiskLocationID(r.ID)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (sc *SweepCreate) AddSweepScheduleIDs(ids ...int) *SweepCreate {
	sc.mutation.AddSweepScheduleIDs(ids...)
	return sc
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (sc *SweepCreate) AddSweepSchedule(s ...*SweepSchedule) *SweepCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSweepScheduleIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (sc *SweepCreate) AddSweepResultIDs(ids ...int) *SweepCreate {
	sc.mutation.AddSweepResultIDs(ids...)
	return sc
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (sc *SweepCreate) AddSweepResult(s ...*SweepResult) *SweepCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (sc *SweepCreate) AddSweepResultDetailIDs(ids ...int) *SweepCreate {
	sc.mutation.AddSweepResultDetailIDs(ids...)
	return sc
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (sc *SweepCreate) AddSweepResultDetails(s ...*SweepResultDetails) *SweepCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepMutation object of the builder.
func (sc *SweepCreate) Mutation() *SweepMutation {
	return sc.mutation
}

// Save creates the Sweep in the database.
func (sc *SweepCreate) Save(ctx context.Context) (*Sweep, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SweepCreate) SaveX(ctx context.Context) *Sweep {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SweepCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SweepCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SweepCreate) defaults() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		if sweep.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized sweep.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := sweep.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		if sweep.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweep.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweep.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SweepCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "Sweep.create_time"`)}
	}
	if _, ok := sc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "Sweep.creator_id"`)}
	}
	if v, ok := sc.mutation.CreatorID(); ok {
		if err := sweep.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.creator_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "Sweep.updater_id"`)}
	}
	if v, ok := sc.mutation.UpdaterID(); ok {
		if err := sweep.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.updater_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "Sweep.update_time"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`dao: missing required field "Sweep.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := sweep.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Sweep.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RiskCategoryID(); !ok {
		return &ValidationError{Name: "risk_category_id", err: errors.New(`dao: missing required field "Sweep.risk_category_id"`)}
	}
	if v, ok := sc.mutation.RiskCategoryID(); ok {
		if err := sweep.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_category_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RiskLocationID(); !ok {
		return &ValidationError{Name: "risk_location_id", err: errors.New(`dao: missing required field "Sweep.risk_location_id"`)}
	}
	if v, ok := sc.mutation.RiskLocationID(); ok {
		if err := sweep.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Sweep.risk_location_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Sweep.creator"`)}
	}
	if _, ok := sc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Sweep.updater"`)}
	}
	if _, ok := sc.mutation.RiskCategoryID(); !ok {
		return &ValidationError{Name: "risk_category", err: errors.New(`dao: missing required edge "Sweep.risk_category"`)}
	}
	if _, ok := sc.mutation.RiskLocationID(); !ok {
		return &ValidationError{Name: "risk_location", err: errors.New(`dao: missing required edge "Sweep.risk_location"`)}
	}
	return nil
}

func (sc *SweepCreate) sqlSave(ctx context.Context) (*Sweep, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SweepCreate) createSpec() (*Sweep, *sqlgraph.CreateSpec) {
	var (
		_node = &Sweep{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sweep.Table, sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(sweep.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.DeleteTime(); ok {
		_spec.SetField(sweep.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(sweep.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(sweep.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.SweepJobs(); ok {
		_spec.SetField(sweep.FieldSweepJobs, field.TypeJSON, value)
		_node.SweepJobs = value
	}
	if nodes := sc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.CreatorTable,
			Columns: []string{sweep.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.UpdaterTable,
			Columns: []string{sweep.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskCategoryTable,
			Columns: []string{sweep.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiskCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweep.RiskLocationTable,
			Columns: []string{sweep.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiskLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepScheduleTable,
			Columns: []string{sweep.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultTable,
			Columns: []string{sweep.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweep.SweepResultDetailsTable,
			Columns: []string{sweep.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SweepCreateBulk is the builder for creating many Sweep entities in bulk.
type SweepCreateBulk struct {
	config
	err      error
	builders []*SweepCreate
}

// Save creates the Sweep entities in the database.
func (scb *SweepCreateBulk) Save(ctx context.Context) ([]*Sweep, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sweep, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SweepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SweepCreateBulk) SaveX(ctx context.Context) []*Sweep {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SweepCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SweepCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
