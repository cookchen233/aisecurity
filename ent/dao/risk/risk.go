// Code generated by ent, DO NOT EDIT.

package risk

import (
	"aisecurity/properties"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the risk type in the database.
	Label = "risk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldRiskCategoryID holds the string denoting the risk_category_id field in the database.
	FieldRiskCategoryID = "risk_category_id"
	// FieldRiskLocationID holds the string denoting the risk_location_id field in the database.
	FieldRiskLocationID = "risk_location_id"
	// FieldMaintainer holds the string denoting the maintainer field in the database.
	FieldMaintainer = "maintainer"
	// FieldMeasures holds the string denoting the measures field in the database.
	FieldMeasures = "measures"
	// FieldMaintainStatus holds the string denoting the maintain_status field in the database.
	FieldMaintainStatus = "maintain_status"
	// FieldDueTime holds the string denoting the due_time field in the database.
	FieldDueTime = "due_time"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeMaintainerAdmin holds the string denoting the maintainer_admin edge name in mutations.
	EdgeMaintainerAdmin = "maintainer_admin"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// Table holds the table name of the risk in the database.
	Table = "risks"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "risks"
	// CreatorInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	CreatorInverseTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// MaintainerAdminTable is the table that holds the maintainer_admin relation/edge.
	MaintainerAdminTable = "risks"
	// MaintainerAdminInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	MaintainerAdminInverseTable = "admins"
	// MaintainerAdminColumn is the table column denoting the maintainer_admin relation/edge.
	MaintainerAdminColumn = "maintainer"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "risks"
	// CategoryInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	CategoryInverseTable = "risk_categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "risk_category_id"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "risks"
	// LocationInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	LocationInverseTable = "risk_locations"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "risk_location_id"
)

// Columns holds all SQL columns for risk fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldDeletedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldTitle,
	FieldContent,
	FieldImages,
	FieldRiskCategoryID,
	FieldRiskLocationID,
	FieldMaintainer,
	FieldMeasures,
	FieldMaintainStatus,
	FieldDueTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "risks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"admin_risk_updator",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// RiskCategoryIDValidator is a validator for the "risk_category_id" field. It is called by the builders before save.
	RiskCategoryIDValidator func(int) error
	// RiskLocationIDValidator is a validator for the "risk_location_id" field. It is called by the builders before save.
	RiskLocationIDValidator func(int) error
	// MaintainerValidator is a validator for the "maintainer" field. It is called by the builders before save.
	MaintainerValidator func(int) error
	// DefaultMaintainStatus holds the default value on creation for the "maintain_status" field.
	DefaultMaintainStatus properties.MaintainStatus
	// MaintainStatusValidator is a validator for the "maintain_status" field. It is called by the builders before save.
	MaintainStatusValidator func(int) error
)

// OrderOption defines the ordering options for the Risk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByRiskCategoryID orders the results by the risk_category_id field.
func ByRiskCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskCategoryID, opts...).ToFunc()
}

// ByRiskLocationID orders the results by the risk_location_id field.
func ByRiskLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskLocationID, opts...).ToFunc()
}

// ByMaintainer orders the results by the maintainer field.
func ByMaintainer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintainer, opts...).ToFunc()
}

// ByMeasures orders the results by the measures field.
func ByMeasures(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeasures, opts...).ToFunc()
}

// ByMaintainStatus orders the results by the maintain_status field.
func ByMaintainStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintainStatus, opts...).ToFunc()
}

// ByDueTime orders the results by the due_time field.
func ByDueTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueTime, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByMaintainerAdminField orders the results by maintainer_admin field.
func ByMaintainerAdminField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMaintainerAdminStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByLocationField orders the results by location field.
func ByLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), sql.OrderByField(field, opts...))
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newMaintainerAdminStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MaintainerAdminInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MaintainerAdminTable, MaintainerAdminColumn),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
	)
}
