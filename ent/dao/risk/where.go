// Code generated by ent, DO NOT EDIT.

package risk

import (
	"aisecurity/ent/dao/predicate"
	"aisecurity/properties"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldCreatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldDeletedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldUpdatedAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldContent, v))
}

// RiskCategoryID applies equality check predicate on the "risk_category_id" field. It's identical to RiskCategoryIDEQ.
func RiskCategoryID(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldRiskCategoryID, v))
}

// RiskLocationID applies equality check predicate on the "risk_location_id" field. It's identical to RiskLocationIDEQ.
func RiskLocationID(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldRiskLocationID, v))
}

// MaintainerID applies equality check predicate on the "maintainer_id" field. It's identical to MaintainerIDEQ.
func MaintainerID(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldMaintainerID, v))
}

// Measures applies equality check predicate on the "measures" field. It's identical to MeasuresEQ.
func Measures(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldMeasures, v))
}

// MaintainStatus applies equality check predicate on the "maintain_status" field. It's identical to MaintainStatusEQ.
func MaintainStatus(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldEQ(FieldMaintainStatus, vc))
}

// DueTime applies equality check predicate on the "due_time" field. It's identical to DueTimeEQ.
func DueTime(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldDueTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Risk {
	return predicate.Risk(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Risk {
	return predicate.Risk(sql.FieldNotNull(FieldDeletedAt))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContainsFold(FieldContent, v))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.Risk {
	return predicate.Risk(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.Risk {
	return predicate.Risk(sql.FieldNotNull(FieldImages))
}

// RiskCategoryIDEQ applies the EQ predicate on the "risk_category_id" field.
func RiskCategoryIDEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldRiskCategoryID, v))
}

// RiskCategoryIDNEQ applies the NEQ predicate on the "risk_category_id" field.
func RiskCategoryIDNEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldRiskCategoryID, v))
}

// RiskCategoryIDIn applies the In predicate on the "risk_category_id" field.
func RiskCategoryIDIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldRiskCategoryID, vs...))
}

// RiskCategoryIDNotIn applies the NotIn predicate on the "risk_category_id" field.
func RiskCategoryIDNotIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldRiskCategoryID, vs...))
}

// RiskLocationIDEQ applies the EQ predicate on the "risk_location_id" field.
func RiskLocationIDEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldRiskLocationID, v))
}

// RiskLocationIDNEQ applies the NEQ predicate on the "risk_location_id" field.
func RiskLocationIDNEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldRiskLocationID, v))
}

// RiskLocationIDIn applies the In predicate on the "risk_location_id" field.
func RiskLocationIDIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldRiskLocationID, vs...))
}

// RiskLocationIDNotIn applies the NotIn predicate on the "risk_location_id" field.
func RiskLocationIDNotIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldRiskLocationID, vs...))
}

// MaintainerIDEQ applies the EQ predicate on the "maintainer_id" field.
func MaintainerIDEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldMaintainerID, v))
}

// MaintainerIDNEQ applies the NEQ predicate on the "maintainer_id" field.
func MaintainerIDNEQ(v int) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldMaintainerID, v))
}

// MaintainerIDIn applies the In predicate on the "maintainer_id" field.
func MaintainerIDIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldMaintainerID, vs...))
}

// MaintainerIDNotIn applies the NotIn predicate on the "maintainer_id" field.
func MaintainerIDNotIn(vs ...int) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldMaintainerID, vs...))
}

// MeasuresEQ applies the EQ predicate on the "measures" field.
func MeasuresEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldMeasures, v))
}

// MeasuresNEQ applies the NEQ predicate on the "measures" field.
func MeasuresNEQ(v string) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldMeasures, v))
}

// MeasuresIn applies the In predicate on the "measures" field.
func MeasuresIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldMeasures, vs...))
}

// MeasuresNotIn applies the NotIn predicate on the "measures" field.
func MeasuresNotIn(vs ...string) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldMeasures, vs...))
}

// MeasuresGT applies the GT predicate on the "measures" field.
func MeasuresGT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldMeasures, v))
}

// MeasuresGTE applies the GTE predicate on the "measures" field.
func MeasuresGTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldMeasures, v))
}

// MeasuresLT applies the LT predicate on the "measures" field.
func MeasuresLT(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldMeasures, v))
}

// MeasuresLTE applies the LTE predicate on the "measures" field.
func MeasuresLTE(v string) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldMeasures, v))
}

// MeasuresContains applies the Contains predicate on the "measures" field.
func MeasuresContains(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContains(FieldMeasures, v))
}

// MeasuresHasPrefix applies the HasPrefix predicate on the "measures" field.
func MeasuresHasPrefix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasPrefix(FieldMeasures, v))
}

// MeasuresHasSuffix applies the HasSuffix predicate on the "measures" field.
func MeasuresHasSuffix(v string) predicate.Risk {
	return predicate.Risk(sql.FieldHasSuffix(FieldMeasures, v))
}

// MeasuresIsNil applies the IsNil predicate on the "measures" field.
func MeasuresIsNil() predicate.Risk {
	return predicate.Risk(sql.FieldIsNull(FieldMeasures))
}

// MeasuresNotNil applies the NotNil predicate on the "measures" field.
func MeasuresNotNil() predicate.Risk {
	return predicate.Risk(sql.FieldNotNull(FieldMeasures))
}

// MeasuresEqualFold applies the EqualFold predicate on the "measures" field.
func MeasuresEqualFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldEqualFold(FieldMeasures, v))
}

// MeasuresContainsFold applies the ContainsFold predicate on the "measures" field.
func MeasuresContainsFold(v string) predicate.Risk {
	return predicate.Risk(sql.FieldContainsFold(FieldMeasures, v))
}

// MaintainStatusEQ applies the EQ predicate on the "maintain_status" field.
func MaintainStatusEQ(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldEQ(FieldMaintainStatus, vc))
}

// MaintainStatusNEQ applies the NEQ predicate on the "maintain_status" field.
func MaintainStatusNEQ(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldNEQ(FieldMaintainStatus, vc))
}

// MaintainStatusIn applies the In predicate on the "maintain_status" field.
func MaintainStatusIn(vs ...properties.MaintainStatus) predicate.Risk {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Risk(sql.FieldIn(FieldMaintainStatus, v...))
}

// MaintainStatusNotIn applies the NotIn predicate on the "maintain_status" field.
func MaintainStatusNotIn(vs ...properties.MaintainStatus) predicate.Risk {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Risk(sql.FieldNotIn(FieldMaintainStatus, v...))
}

// MaintainStatusGT applies the GT predicate on the "maintain_status" field.
func MaintainStatusGT(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldGT(FieldMaintainStatus, vc))
}

// MaintainStatusGTE applies the GTE predicate on the "maintain_status" field.
func MaintainStatusGTE(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldGTE(FieldMaintainStatus, vc))
}

// MaintainStatusLT applies the LT predicate on the "maintain_status" field.
func MaintainStatusLT(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldLT(FieldMaintainStatus, vc))
}

// MaintainStatusLTE applies the LTE predicate on the "maintain_status" field.
func MaintainStatusLTE(v properties.MaintainStatus) predicate.Risk {
	vc := int(v)
	return predicate.Risk(sql.FieldLTE(FieldMaintainStatus, vc))
}

// DueTimeEQ applies the EQ predicate on the "due_time" field.
func DueTimeEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldEQ(FieldDueTime, v))
}

// DueTimeNEQ applies the NEQ predicate on the "due_time" field.
func DueTimeNEQ(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNEQ(FieldDueTime, v))
}

// DueTimeIn applies the In predicate on the "due_time" field.
func DueTimeIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldIn(FieldDueTime, vs...))
}

// DueTimeNotIn applies the NotIn predicate on the "due_time" field.
func DueTimeNotIn(vs ...time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldNotIn(FieldDueTime, vs...))
}

// DueTimeGT applies the GT predicate on the "due_time" field.
func DueTimeGT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGT(FieldDueTime, v))
}

// DueTimeGTE applies the GTE predicate on the "due_time" field.
func DueTimeGTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldGTE(FieldDueTime, v))
}

// DueTimeLT applies the LT predicate on the "due_time" field.
func DueTimeLT(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLT(FieldDueTime, v))
}

// DueTimeLTE applies the LTE predicate on the "due_time" field.
func DueTimeLTE(v time.Time) predicate.Risk {
	return predicate.Risk(sql.FieldLTE(FieldDueTime, v))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Employee) predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdator applies the HasEdge predicate on the "updator" edge.
func HasUpdator() predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdatorTable, UpdatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatorWith applies the HasEdge predicate on the "updator" edge with a given conditions (other predicates).
func HasUpdatorWith(preds ...predicate.Admin) predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := newUpdatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaintainer applies the HasEdge predicate on the "maintainer" edge.
func HasMaintainer() predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintainerWith applies the HasEdge predicate on the "maintainer" edge with a given conditions (other predicates).
func HasMaintainerWith(preds ...predicate.Employee) predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := newMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskCategory applies the HasEdge predicate on the "risk_category" edge.
func HasRiskCategory() predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiskCategoryTable, RiskCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskCategoryWith applies the HasEdge predicate on the "risk_category" edge with a given conditions (other predicates).
func HasRiskCategoryWith(preds ...predicate.RiskCategory) predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := newRiskCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskLocation applies the HasEdge predicate on the "risk_location" edge.
func HasRiskLocation() predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiskLocationTable, RiskLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskLocationWith applies the HasEdge predicate on the "risk_location" edge with a given conditions (other predicates).
func HasRiskLocationWith(preds ...predicate.RiskLocation) predicate.Risk {
	return predicate.Risk(func(s *sql.Selector) {
		step := newRiskLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Risk) predicate.Risk {
	return predicate.Risk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Risk) predicate.Risk {
	return predicate.Risk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Risk) predicate.Risk {
	return predicate.Risk(sql.NotPredicates(p))
}
