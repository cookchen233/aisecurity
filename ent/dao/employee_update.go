// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetDeleteTime sets the "delete_time" field.
func (eu *EmployeeUpdate) SetDeleteTime(t time.Time) *EmployeeUpdate {
	eu.mutation.SetDeleteTime(t)
	return eu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDeleteTime(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetDeleteTime(*t)
	}
	return eu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (eu *EmployeeUpdate) ClearDeleteTime() *EmployeeUpdate {
	eu.mutation.ClearDeleteTime()
	return eu
}

// SetUpdaterID sets the "updater_id" field.
func (eu *EmployeeUpdate) SetUpdaterID(i int) *EmployeeUpdate {
	eu.mutation.SetUpdaterID(i)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *EmployeeUpdate) SetUpdateTime(t time.Time) *EmployeeUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetDepartmentID sets the "department_id" field.
func (eu *EmployeeUpdate) SetDepartmentID(i int) *EmployeeUpdate {
	eu.mutation.SetDepartmentID(i)
	return eu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDepartmentID(i *int) *EmployeeUpdate {
	if i != nil {
		eu.SetDepartmentID(*i)
	}
	return eu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (eu *EmployeeUpdate) ClearDepartmentID() *EmployeeUpdate {
	eu.mutation.ClearDepartmentID()
	return eu
}

// SetOccupationID sets the "occupation_id" field.
func (eu *EmployeeUpdate) SetOccupationID(i int) *EmployeeUpdate {
	eu.mutation.SetOccupationID(i)
	return eu
}

// SetNillableOccupationID sets the "occupation_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableOccupationID(i *int) *EmployeeUpdate {
	if i != nil {
		eu.SetOccupationID(*i)
	}
	return eu
}

// ClearOccupationID clears the value of the "occupation_id" field.
func (eu *EmployeeUpdate) ClearOccupationID() *EmployeeUpdate {
	eu.mutation.ClearOccupationID()
	return eu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (eu *EmployeeUpdate) SetUpdater(a *Admin) *EmployeeUpdate {
	return eu.SetUpdaterID(a.ID)
}

// SetOccupation sets the "occupation" edge to the Occupation entity.
func (eu *EmployeeUpdate) SetOccupation(o *Occupation) *EmployeeUpdate {
	return eu.SetOccupationID(o.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (eu *EmployeeUpdate) SetDepartment(d *Department) *EmployeeUpdate {
	return eu.SetDepartmentID(d.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (eu *EmployeeUpdate) ClearUpdater() *EmployeeUpdate {
	eu.mutation.ClearUpdater()
	return eu
}

// ClearOccupation clears the "occupation" edge to the Occupation entity.
func (eu *EmployeeUpdate) ClearOccupation() *EmployeeUpdate {
	eu.mutation.ClearOccupation()
	return eu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (eu *EmployeeUpdate) ClearDepartment() *EmployeeUpdate {
	eu.mutation.ClearDepartment()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() error {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		if employee.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized employee.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := employee.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.UpdaterID(); ok {
		if err := employee.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Employee.updater_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.DepartmentID(); ok {
		if err := employee.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`dao: validator failed for field "Employee.department_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.OccupationID(); ok {
		if err := employee.OccupationIDValidator(v); err != nil {
			return &ValidationError{Name: "occupation_id", err: fmt.Errorf(`dao: validator failed for field "Employee.occupation_id": %w`, err)}
		}
	}
	if _, ok := eu.mutation.CreatorID(); eu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.creator"`)
	}
	if _, ok := eu.mutation.UpdaterID(); eu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.updater"`)
	}
	if _, ok := eu.mutation.AdminID(); eu.mutation.AdminCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.admin"`)
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.DeleteTime(); ok {
		_spec.SetField(employee.FieldDeleteTime, field.TypeTime, value)
	}
	if eu.mutation.DeleteTimeCleared() {
		_spec.ClearField(employee.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(employee.FieldUpdateTime, field.TypeTime, value)
	}
	if eu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OccupationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.OccupationTable,
			Columns: []string{employee.OccupationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OccupationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.OccupationTable,
			Columns: []string{employee.OccupationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetDeleteTime sets the "delete_time" field.
func (euo *EmployeeUpdateOne) SetDeleteTime(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetDeleteTime(t)
	return euo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDeleteTime(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetDeleteTime(*t)
	}
	return euo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (euo *EmployeeUpdateOne) ClearDeleteTime() *EmployeeUpdateOne {
	euo.mutation.ClearDeleteTime()
	return euo
}

// SetUpdaterID sets the "updater_id" field.
func (euo *EmployeeUpdateOne) SetUpdaterID(i int) *EmployeeUpdateOne {
	euo.mutation.SetUpdaterID(i)
	return euo
}

// SetUpdateTime sets the "update_time" field.
func (euo *EmployeeUpdateOne) SetUpdateTime(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetDepartmentID sets the "department_id" field.
func (euo *EmployeeUpdateOne) SetDepartmentID(i int) *EmployeeUpdateOne {
	euo.mutation.SetDepartmentID(i)
	return euo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDepartmentID(i *int) *EmployeeUpdateOne {
	if i != nil {
		euo.SetDepartmentID(*i)
	}
	return euo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (euo *EmployeeUpdateOne) ClearDepartmentID() *EmployeeUpdateOne {
	euo.mutation.ClearDepartmentID()
	return euo
}

// SetOccupationID sets the "occupation_id" field.
func (euo *EmployeeUpdateOne) SetOccupationID(i int) *EmployeeUpdateOne {
	euo.mutation.SetOccupationID(i)
	return euo
}

// SetNillableOccupationID sets the "occupation_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableOccupationID(i *int) *EmployeeUpdateOne {
	if i != nil {
		euo.SetOccupationID(*i)
	}
	return euo
}

// ClearOccupationID clears the value of the "occupation_id" field.
func (euo *EmployeeUpdateOne) ClearOccupationID() *EmployeeUpdateOne {
	euo.mutation.ClearOccupationID()
	return euo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (euo *EmployeeUpdateOne) SetUpdater(a *Admin) *EmployeeUpdateOne {
	return euo.SetUpdaterID(a.ID)
}

// SetOccupation sets the "occupation" edge to the Occupation entity.
func (euo *EmployeeUpdateOne) SetOccupation(o *Occupation) *EmployeeUpdateOne {
	return euo.SetOccupationID(o.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (euo *EmployeeUpdateOne) SetDepartment(d *Department) *EmployeeUpdateOne {
	return euo.SetDepartmentID(d.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (euo *EmployeeUpdateOne) ClearUpdater() *EmployeeUpdateOne {
	euo.mutation.ClearUpdater()
	return euo
}

// ClearOccupation clears the "occupation" edge to the Occupation entity.
func (euo *EmployeeUpdateOne) ClearOccupation() *EmployeeUpdateOne {
	euo.mutation.ClearOccupation()
	return euo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (euo *EmployeeUpdateOne) ClearDepartment() *EmployeeUpdateOne {
	euo.mutation.ClearDepartment()
	return euo
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		if employee.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized employee.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := employee.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.UpdaterID(); ok {
		if err := employee.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Employee.updater_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.DepartmentID(); ok {
		if err := employee.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`dao: validator failed for field "Employee.department_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.OccupationID(); ok {
		if err := employee.OccupationIDValidator(v); err != nil {
			return &ValidationError{Name: "occupation_id", err: fmt.Errorf(`dao: validator failed for field "Employee.occupation_id": %w`, err)}
		}
	}
	if _, ok := euo.mutation.CreatorID(); euo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.creator"`)
	}
	if _, ok := euo.mutation.UpdaterID(); euo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.updater"`)
	}
	if _, ok := euo.mutation.AdminID(); euo.mutation.AdminCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Employee.admin"`)
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.DeleteTime(); ok {
		_spec.SetField(employee.FieldDeleteTime, field.TypeTime, value)
	}
	if euo.mutation.DeleteTimeCleared() {
		_spec.ClearField(employee.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(employee.FieldUpdateTime, field.TypeTime, value)
	}
	if euo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.UpdaterTable,
			Columns: []string{employee.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OccupationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.OccupationTable,
			Columns: []string{employee.OccupationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OccupationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.OccupationTable,
			Columns: []string{employee.OccupationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
