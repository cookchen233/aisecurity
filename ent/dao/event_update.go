// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/predicate"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetDeleteTime sets the "delete_time" field.
func (eu *EventUpdate) SetDeleteTime(t time.Time) *EventUpdate {
	eu.mutation.SetDeleteTime(t)
	return eu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeleteTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDeleteTime(*t)
	}
	return eu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (eu *EventUpdate) ClearDeleteTime() *EventUpdate {
	eu.mutation.ClearDeleteTime()
	return eu
}

// SetUpdaterID sets the "updater_id" field.
func (eu *EventUpdate) SetUpdaterID(i int) *EventUpdate {
	eu.mutation.SetUpdaterID(i)
	return eu
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableUpdaterID(i *int) *EventUpdate {
	if i != nil {
		eu.SetUpdaterID(*i)
	}
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *EventUpdate) SetUpdateTime(t time.Time) *EventUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetEventStatus sets the "event_status" field.
func (eu *EventUpdate) SetEventStatus(es enums.EventStatus) *EventUpdate {
	eu.mutation.ResetEventStatus()
	eu.mutation.SetEventStatus(es)
	return eu
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventStatus(es *enums.EventStatus) *EventUpdate {
	if es != nil {
		eu.SetEventStatus(*es)
	}
	return eu
}

// AddEventStatus adds es to the "event_status" field.
func (eu *EventUpdate) AddEventStatus(es enums.EventStatus) *EventUpdate {
	eu.mutation.AddEventStatus(es)
	return eu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (eu *EventUpdate) SetUpdater(a *Admin) *EventUpdate {
	return eu.SetUpdaterID(a.ID)
}

// SetFixingID sets the "fixing" edge to the Fixing entity by ID.
func (eu *EventUpdate) SetFixingID(id int) *EventUpdate {
	eu.mutation.SetFixingID(id)
	return eu
}

// SetNillableFixingID sets the "fixing" edge to the Fixing entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableFixingID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetFixingID(*id)
	}
	return eu
}

// SetFixing sets the "fixing" edge to the Fixing entity.
func (eu *EventUpdate) SetFixing(f *Fixing) *EventUpdate {
	return eu.SetFixingID(f.ID)
}

// AddEventLogIDs adds the "event_log" edge to the EventLog entity by IDs.
func (eu *EventUpdate) AddEventLogIDs(ids ...int) *EventUpdate {
	eu.mutation.AddEventLogIDs(ids...)
	return eu
}

// AddEventLog adds the "event_log" edges to the EventLog entity.
func (eu *EventUpdate) AddEventLog(e ...*EventLog) *EventUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEventLogIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (eu *EventUpdate) ClearUpdater() *EventUpdate {
	eu.mutation.ClearUpdater()
	return eu
}

// ClearFixing clears the "fixing" edge to the Fixing entity.
func (eu *EventUpdate) ClearFixing() *EventUpdate {
	eu.mutation.ClearFixing()
	return eu
}

// ClearEventLog clears all "event_log" edges to the EventLog entity.
func (eu *EventUpdate) ClearEventLog() *EventUpdate {
	eu.mutation.ClearEventLog()
	return eu
}

// RemoveEventLogIDs removes the "event_log" edge to EventLog entities by IDs.
func (eu *EventUpdate) RemoveEventLogIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveEventLogIDs(ids...)
	return eu
}

// RemoveEventLog removes "event_log" edges to EventLog entities.
func (eu *EventUpdate) RemoveEventLog(e ...*EventLog) *EventUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEventLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		if event.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized event.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := event.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.UpdaterID(); ok {
		if err := event.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Event.updater_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.EventStatus(); ok {
		if err := event.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "Event.event_status": %w`, err)}
		}
	}
	if _, ok := eu.mutation.CreatorID(); eu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.creator"`)
	}
	if _, ok := eu.mutation.UpdaterID(); eu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.updater"`)
	}
	if _, ok := eu.mutation.DeviceID(); eu.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.device"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.DeleteTime(); ok {
		_spec.SetField(event.FieldDeleteTime, field.TypeTime, value)
	}
	if eu.mutation.DeleteTimeCleared() {
		_spec.ClearField(event.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EventStatus(); ok {
		_spec.SetField(event.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedEventStatus(); ok {
		_spec.AddField(event.FieldEventStatus, field.TypeInt, value)
	}
	if eu.mutation.ImagesCleared() {
		_spec.ClearField(event.FieldImages, field.TypeJSON)
	}
	if eu.mutation.LabeledImagesCleared() {
		_spec.ClearField(event.FieldLabeledImages, field.TypeJSON)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if eu.mutation.RawDataCleared() {
		_spec.ClearField(event.FieldRawData, field.TypeString)
	}
	if eu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FixingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventLogIDs(); len(nodes) > 0 && !eu.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetDeleteTime sets the "delete_time" field.
func (euo *EventUpdateOne) SetDeleteTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeleteTime(t)
	return euo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeleteTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDeleteTime(*t)
	}
	return euo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (euo *EventUpdateOne) ClearDeleteTime() *EventUpdateOne {
	euo.mutation.ClearDeleteTime()
	return euo
}

// SetUpdaterID sets the "updater_id" field.
func (euo *EventUpdateOne) SetUpdaterID(i int) *EventUpdateOne {
	euo.mutation.SetUpdaterID(i)
	return euo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUpdaterID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetUpdaterID(*i)
	}
	return euo
}

// SetUpdateTime sets the "update_time" field.
func (euo *EventUpdateOne) SetUpdateTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetEventStatus sets the "event_status" field.
func (euo *EventUpdateOne) SetEventStatus(es enums.EventStatus) *EventUpdateOne {
	euo.mutation.ResetEventStatus()
	euo.mutation.SetEventStatus(es)
	return euo
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventStatus(es *enums.EventStatus) *EventUpdateOne {
	if es != nil {
		euo.SetEventStatus(*es)
	}
	return euo
}

// AddEventStatus adds es to the "event_status" field.
func (euo *EventUpdateOne) AddEventStatus(es enums.EventStatus) *EventUpdateOne {
	euo.mutation.AddEventStatus(es)
	return euo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (euo *EventUpdateOne) SetUpdater(a *Admin) *EventUpdateOne {
	return euo.SetUpdaterID(a.ID)
}

// SetFixingID sets the "fixing" edge to the Fixing entity by ID.
func (euo *EventUpdateOne) SetFixingID(id int) *EventUpdateOne {
	euo.mutation.SetFixingID(id)
	return euo
}

// SetNillableFixingID sets the "fixing" edge to the Fixing entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFixingID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetFixingID(*id)
	}
	return euo
}

// SetFixing sets the "fixing" edge to the Fixing entity.
func (euo *EventUpdateOne) SetFixing(f *Fixing) *EventUpdateOne {
	return euo.SetFixingID(f.ID)
}

// AddEventLogIDs adds the "event_log" edge to the EventLog entity by IDs.
func (euo *EventUpdateOne) AddEventLogIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddEventLogIDs(ids...)
	return euo
}

// AddEventLog adds the "event_log" edges to the EventLog entity.
func (euo *EventUpdateOne) AddEventLog(e ...*EventLog) *EventUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEventLogIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (euo *EventUpdateOne) ClearUpdater() *EventUpdateOne {
	euo.mutation.ClearUpdater()
	return euo
}

// ClearFixing clears the "fixing" edge to the Fixing entity.
func (euo *EventUpdateOne) ClearFixing() *EventUpdateOne {
	euo.mutation.ClearFixing()
	return euo
}

// ClearEventLog clears all "event_log" edges to the EventLog entity.
func (euo *EventUpdateOne) ClearEventLog() *EventUpdateOne {
	euo.mutation.ClearEventLog()
	return euo
}

// RemoveEventLogIDs removes the "event_log" edge to EventLog entities by IDs.
func (euo *EventUpdateOne) RemoveEventLogIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveEventLogIDs(ids...)
	return euo
}

// RemoveEventLog removes "event_log" edges to EventLog entities.
func (euo *EventUpdateOne) RemoveEventLog(e ...*EventLog) *EventUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEventLogIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		if event.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized event.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := event.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.UpdaterID(); ok {
		if err := event.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Event.updater_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.EventStatus(); ok {
		if err := event.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "Event.event_status": %w`, err)}
		}
	}
	if _, ok := euo.mutation.CreatorID(); euo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.creator"`)
	}
	if _, ok := euo.mutation.UpdaterID(); euo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.updater"`)
	}
	if _, ok := euo.mutation.DeviceID(); euo.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Event.device"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.DeleteTime(); ok {
		_spec.SetField(event.FieldDeleteTime, field.TypeTime, value)
	}
	if euo.mutation.DeleteTimeCleared() {
		_spec.ClearField(event.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EventStatus(); ok {
		_spec.SetField(event.FieldEventStatus, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedEventStatus(); ok {
		_spec.AddField(event.FieldEventStatus, field.TypeInt, value)
	}
	if euo.mutation.ImagesCleared() {
		_spec.ClearField(event.FieldImages, field.TypeJSON)
	}
	if euo.mutation.LabeledImagesCleared() {
		_spec.ClearField(event.FieldLabeledImages, field.TypeJSON)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if euo.mutation.RawDataCleared() {
		_spec.ClearField(event.FieldRawData, field.TypeString)
	}
	if euo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FixingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventLogIDs(); len(nodes) > 0 && !euo.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
