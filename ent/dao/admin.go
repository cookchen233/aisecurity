// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/employee"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Admin is the model entity for the Admin schema.
type Admin struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time"`
	// 创建者
	CreatorID int `json:"creator_id"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time"`
	// 最后更新者
	UpdaterID int `json:"updater_id"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time"`
	// 用户名
	Username string `json:"username" validate:"required"`
	// 密码
	Password string `json:"-" validate:"-"`
	// 昵称
	Nickname string `json:"nickname" validate:"required"`
	// 姓名
	RealName string `json:"real_name" validate:"required"`
	// 手机号
	Mobile string `json:"mobile"`
	// 头像
	Avatar types.UploadedImage `json:"avatar"`
	// 账户状态
	AdminStatus enums.AdminStatus `json:"admin_status" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminQuery when eager-loading is set.
	Edges        AdminEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminEdges holds the relations/edges for other nodes in the graph.
type AdminEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// AdminCreator holds the value of the admin_creator edge.
	AdminCreator []*Admin `json:"admin_creator,omitempty"`
	// AdminUpdater holds the value of the admin_updater edge.
	AdminUpdater []*Admin `json:"admin_updater,omitempty"`
	// PermissionCreator holds the value of the permission_creator edge.
	PermissionCreator []*Permission `json:"permission_creator,omitempty"`
	// PermissionUpdater holds the value of the permission_updater edge.
	PermissionUpdater []*Permission `json:"permission_updater,omitempty"`
	// RiskCreator holds the value of the risk_creator edge.
	RiskCreator []*Risk `json:"risk_creator,omitempty"`
	// RiskUpdater holds the value of the risk_updater edge.
	RiskUpdater []*Risk `json:"risk_updater,omitempty"`
	// RiskMaintainer holds the value of the risk_maintainer edge.
	RiskMaintainer []*Risk `json:"risk_maintainer,omitempty"`
	// RiskLocationCreator holds the value of the risk_location_creator edge.
	RiskLocationCreator []*RiskLocation `json:"risk_location_creator,omitempty"`
	// RiskLocationUpdater holds the value of the risk_location_updater edge.
	RiskLocationUpdater []*RiskLocation `json:"risk_location_updater,omitempty"`
	// RiskCategoryCreator holds the value of the risk_category_creator edge.
	RiskCategoryCreator []*RiskCategory `json:"risk_category_creator,omitempty"`
	// RiskCategoryUpdater holds the value of the risk_category_updater edge.
	RiskCategoryUpdater []*RiskCategory `json:"risk_category_updater,omitempty"`
	// DepartmentCreator holds the value of the department_creator edge.
	DepartmentCreator []*Department `json:"department_creator,omitempty"`
	// DepartmentUpdater holds the value of the department_updater edge.
	DepartmentUpdater []*Department `json:"department_updater,omitempty"`
	// EmployeeCreator holds the value of the employee_creator edge.
	EmployeeCreator []*Employee `json:"employee_creator,omitempty"`
	// EmployeeUpdater holds the value of the employee_updater edge.
	EmployeeUpdater []*Employee `json:"employee_updater,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// OccupationCreator holds the value of the occupation_creator edge.
	OccupationCreator []*Occupation `json:"occupation_creator,omitempty"`
	// OccupationUpdater holds the value of the occupation_updater edge.
	OccupationUpdater []*Occupation `json:"occupation_updater,omitempty"`
	// EventCreator holds the value of the event_creator edge.
	EventCreator []*Event `json:"event_creator,omitempty"`
	// EventUpdater holds the value of the event_updater edge.
	EventUpdater []*Event `json:"event_updater,omitempty"`
	// VideoCreator holds the value of the video_creator edge.
	VideoCreator []*Video `json:"video_creator,omitempty"`
	// VideoUpdater holds the value of the video_updater edge.
	VideoUpdater []*Video `json:"video_updater,omitempty"`
	// AreaCreator holds the value of the area_creator edge.
	AreaCreator []*Area `json:"area_creator,omitempty"`
	// AreaUpdater holds the value of the area_updater edge.
	AreaUpdater []*Area `json:"area_updater,omitempty"`
	// DeviceCreator holds the value of the device_creator edge.
	DeviceCreator []*Device `json:"device_creator,omitempty"`
	// DeviceUpdater holds the value of the device_updater edge.
	DeviceUpdater []*Device `json:"device_updater,omitempty"`
	// DeviceInstallationCreator holds the value of the device_installation_creator edge.
	DeviceInstallationCreator []*DeviceInstallation `json:"device_installation_creator,omitempty"`
	// DeviceInstallationUpdater holds the value of the device_installation_updater edge.
	DeviceInstallationUpdater []*DeviceInstallation `json:"device_installation_updater,omitempty"`
	// EventLevelCreator holds the value of the event_level_creator edge.
	EventLevelCreator []*EventLevel `json:"event_level_creator,omitempty"`
	// EventLevelUpdater holds the value of the event_level_updater edge.
	EventLevelUpdater []*EventLevel `json:"event_level_updater,omitempty"`
	// FixingCreator holds the value of the fixing_creator edge.
	FixingCreator []*Fixing `json:"fixing_creator,omitempty"`
	// FixingUpdater holds the value of the fixing_updater edge.
	FixingUpdater []*Fixing `json:"fixing_updater,omitempty"`
	// Fixer holds the value of the fixer edge.
	Fixer []*Fixing `json:"fixer,omitempty"`
	// EventLogCreator holds the value of the event_log_creator edge.
	EventLogCreator []*EventLog `json:"event_log_creator,omitempty"`
	// EventLogUpdater holds the value of the event_log_updater edge.
	EventLogUpdater []*EventLog `json:"event_log_updater,omitempty"`
	// EventLogActor holds the value of the event_log_actor edge.
	EventLogActor []*EventLog `json:"event_log_actor,omitempty"`
	// EventLogActor2 holds the value of the event_log_actor2 edge.
	EventLogActor2 []*EventLog `json:"event_log_actor2,omitempty"`
	// SweepCreator holds the value of the sweep_creator edge.
	SweepCreator []*Sweep `json:"sweep_creator,omitempty"`
	// SweepUpdater holds the value of the sweep_updater edge.
	SweepUpdater []*Sweep `json:"sweep_updater,omitempty"`
	// SweepScheduleCreator holds the value of the sweep_schedule_creator edge.
	SweepScheduleCreator []*SweepSchedule `json:"sweep_schedule_creator,omitempty"`
	// SweepScheduleUpdater holds the value of the sweep_schedule_updater edge.
	SweepScheduleUpdater []*SweepSchedule `json:"sweep_schedule_updater,omitempty"`
	// SweepSchedule holds the value of the sweep_schedule edge.
	SweepSchedule []*SweepSchedule `json:"sweep_schedule,omitempty"`
	// SweepResultCreator holds the value of the sweep_result_creator edge.
	SweepResultCreator []*SweepResult `json:"sweep_result_creator,omitempty"`
	// SweepResultUpdater holds the value of the sweep_result_updater edge.
	SweepResultUpdater []*SweepResult `json:"sweep_result_updater,omitempty"`
	// SweepResultDetailsCreator holds the value of the sweep_result_details_creator edge.
	SweepResultDetailsCreator []*SweepResultDetails `json:"sweep_result_details_creator,omitempty"`
	// SweepResultDetailsUpdater holds the value of the sweep_result_details_updater edge.
	SweepResultDetailsUpdater []*SweepResultDetails `json:"sweep_result_details_updater,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [49]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[2] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// AdminCreatorOrErr returns the AdminCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminCreatorOrErr() ([]*Admin, error) {
	if e.loadedTypes[3] {
		return e.AdminCreator, nil
	}
	return nil, &NotLoadedError{edge: "admin_creator"}
}

// AdminUpdaterOrErr returns the AdminUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminUpdaterOrErr() ([]*Admin, error) {
	if e.loadedTypes[4] {
		return e.AdminUpdater, nil
	}
	return nil, &NotLoadedError{edge: "admin_updater"}
}

// PermissionCreatorOrErr returns the PermissionCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) PermissionCreatorOrErr() ([]*Permission, error) {
	if e.loadedTypes[5] {
		return e.PermissionCreator, nil
	}
	return nil, &NotLoadedError{edge: "permission_creator"}
}

// PermissionUpdaterOrErr returns the PermissionUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) PermissionUpdaterOrErr() ([]*Permission, error) {
	if e.loadedTypes[6] {
		return e.PermissionUpdater, nil
	}
	return nil, &NotLoadedError{edge: "permission_updater"}
}

// RiskCreatorOrErr returns the RiskCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCreatorOrErr() ([]*Risk, error) {
	if e.loadedTypes[7] {
		return e.RiskCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_creator"}
}

// RiskUpdaterOrErr returns the RiskUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskUpdaterOrErr() ([]*Risk, error) {
	if e.loadedTypes[8] {
		return e.RiskUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_updater"}
}

// RiskMaintainerOrErr returns the RiskMaintainer value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskMaintainerOrErr() ([]*Risk, error) {
	if e.loadedTypes[9] {
		return e.RiskMaintainer, nil
	}
	return nil, &NotLoadedError{edge: "risk_maintainer"}
}

// RiskLocationCreatorOrErr returns the RiskLocationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskLocationCreatorOrErr() ([]*RiskLocation, error) {
	if e.loadedTypes[10] {
		return e.RiskLocationCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_location_creator"}
}

// RiskLocationUpdaterOrErr returns the RiskLocationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskLocationUpdaterOrErr() ([]*RiskLocation, error) {
	if e.loadedTypes[11] {
		return e.RiskLocationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_location_updater"}
}

// RiskCategoryCreatorOrErr returns the RiskCategoryCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCategoryCreatorOrErr() ([]*RiskCategory, error) {
	if e.loadedTypes[12] {
		return e.RiskCategoryCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_category_creator"}
}

// RiskCategoryUpdaterOrErr returns the RiskCategoryUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCategoryUpdaterOrErr() ([]*RiskCategory, error) {
	if e.loadedTypes[13] {
		return e.RiskCategoryUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_category_updater"}
}

// DepartmentCreatorOrErr returns the DepartmentCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DepartmentCreatorOrErr() ([]*Department, error) {
	if e.loadedTypes[14] {
		return e.DepartmentCreator, nil
	}
	return nil, &NotLoadedError{edge: "department_creator"}
}

// DepartmentUpdaterOrErr returns the DepartmentUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DepartmentUpdaterOrErr() ([]*Department, error) {
	if e.loadedTypes[15] {
		return e.DepartmentUpdater, nil
	}
	return nil, &NotLoadedError{edge: "department_updater"}
}

// EmployeeCreatorOrErr returns the EmployeeCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EmployeeCreatorOrErr() ([]*Employee, error) {
	if e.loadedTypes[16] {
		return e.EmployeeCreator, nil
	}
	return nil, &NotLoadedError{edge: "employee_creator"}
}

// EmployeeUpdaterOrErr returns the EmployeeUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EmployeeUpdaterOrErr() ([]*Employee, error) {
	if e.loadedTypes[17] {
		return e.EmployeeUpdater, nil
	}
	return nil, &NotLoadedError{edge: "employee_updater"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[18] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// OccupationCreatorOrErr returns the OccupationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) OccupationCreatorOrErr() ([]*Occupation, error) {
	if e.loadedTypes[19] {
		return e.OccupationCreator, nil
	}
	return nil, &NotLoadedError{edge: "occupation_creator"}
}

// OccupationUpdaterOrErr returns the OccupationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) OccupationUpdaterOrErr() ([]*Occupation, error) {
	if e.loadedTypes[20] {
		return e.OccupationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "occupation_updater"}
}

// EventCreatorOrErr returns the EventCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventCreatorOrErr() ([]*Event, error) {
	if e.loadedTypes[21] {
		return e.EventCreator, nil
	}
	return nil, &NotLoadedError{edge: "event_creator"}
}

// EventUpdaterOrErr returns the EventUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventUpdaterOrErr() ([]*Event, error) {
	if e.loadedTypes[22] {
		return e.EventUpdater, nil
	}
	return nil, &NotLoadedError{edge: "event_updater"}
}

// VideoCreatorOrErr returns the VideoCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) VideoCreatorOrErr() ([]*Video, error) {
	if e.loadedTypes[23] {
		return e.VideoCreator, nil
	}
	return nil, &NotLoadedError{edge: "video_creator"}
}

// VideoUpdaterOrErr returns the VideoUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) VideoUpdaterOrErr() ([]*Video, error) {
	if e.loadedTypes[24] {
		return e.VideoUpdater, nil
	}
	return nil, &NotLoadedError{edge: "video_updater"}
}

// AreaCreatorOrErr returns the AreaCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AreaCreatorOrErr() ([]*Area, error) {
	if e.loadedTypes[25] {
		return e.AreaCreator, nil
	}
	return nil, &NotLoadedError{edge: "area_creator"}
}

// AreaUpdaterOrErr returns the AreaUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AreaUpdaterOrErr() ([]*Area, error) {
	if e.loadedTypes[26] {
		return e.AreaUpdater, nil
	}
	return nil, &NotLoadedError{edge: "area_updater"}
}

// DeviceCreatorOrErr returns the DeviceCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceCreatorOrErr() ([]*Device, error) {
	if e.loadedTypes[27] {
		return e.DeviceCreator, nil
	}
	return nil, &NotLoadedError{edge: "device_creator"}
}

// DeviceUpdaterOrErr returns the DeviceUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceUpdaterOrErr() ([]*Device, error) {
	if e.loadedTypes[28] {
		return e.DeviceUpdater, nil
	}
	return nil, &NotLoadedError{edge: "device_updater"}
}

// DeviceInstallationCreatorOrErr returns the DeviceInstallationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceInstallationCreatorOrErr() ([]*DeviceInstallation, error) {
	if e.loadedTypes[29] {
		return e.DeviceInstallationCreator, nil
	}
	return nil, &NotLoadedError{edge: "device_installation_creator"}
}

// DeviceInstallationUpdaterOrErr returns the DeviceInstallationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceInstallationUpdaterOrErr() ([]*DeviceInstallation, error) {
	if e.loadedTypes[30] {
		return e.DeviceInstallationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "device_installation_updater"}
}

// EventLevelCreatorOrErr returns the EventLevelCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLevelCreatorOrErr() ([]*EventLevel, error) {
	if e.loadedTypes[31] {
		return e.EventLevelCreator, nil
	}
	return nil, &NotLoadedError{edge: "event_level_creator"}
}

// EventLevelUpdaterOrErr returns the EventLevelUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLevelUpdaterOrErr() ([]*EventLevel, error) {
	if e.loadedTypes[32] {
		return e.EventLevelUpdater, nil
	}
	return nil, &NotLoadedError{edge: "event_level_updater"}
}

// FixingCreatorOrErr returns the FixingCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) FixingCreatorOrErr() ([]*Fixing, error) {
	if e.loadedTypes[33] {
		return e.FixingCreator, nil
	}
	return nil, &NotLoadedError{edge: "fixing_creator"}
}

// FixingUpdaterOrErr returns the FixingUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) FixingUpdaterOrErr() ([]*Fixing, error) {
	if e.loadedTypes[34] {
		return e.FixingUpdater, nil
	}
	return nil, &NotLoadedError{edge: "fixing_updater"}
}

// FixerOrErr returns the Fixer value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) FixerOrErr() ([]*Fixing, error) {
	if e.loadedTypes[35] {
		return e.Fixer, nil
	}
	return nil, &NotLoadedError{edge: "fixer"}
}

// EventLogCreatorOrErr returns the EventLogCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLogCreatorOrErr() ([]*EventLog, error) {
	if e.loadedTypes[36] {
		return e.EventLogCreator, nil
	}
	return nil, &NotLoadedError{edge: "event_log_creator"}
}

// EventLogUpdaterOrErr returns the EventLogUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLogUpdaterOrErr() ([]*EventLog, error) {
	if e.loadedTypes[37] {
		return e.EventLogUpdater, nil
	}
	return nil, &NotLoadedError{edge: "event_log_updater"}
}

// EventLogActorOrErr returns the EventLogActor value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLogActorOrErr() ([]*EventLog, error) {
	if e.loadedTypes[38] {
		return e.EventLogActor, nil
	}
	return nil, &NotLoadedError{edge: "event_log_actor"}
}

// EventLogActor2OrErr returns the EventLogActor2 value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLogActor2OrErr() ([]*EventLog, error) {
	if e.loadedTypes[39] {
		return e.EventLogActor2, nil
	}
	return nil, &NotLoadedError{edge: "event_log_actor2"}
}

// SweepCreatorOrErr returns the SweepCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepCreatorOrErr() ([]*Sweep, error) {
	if e.loadedTypes[40] {
		return e.SweepCreator, nil
	}
	return nil, &NotLoadedError{edge: "sweep_creator"}
}

// SweepUpdaterOrErr returns the SweepUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepUpdaterOrErr() ([]*Sweep, error) {
	if e.loadedTypes[41] {
		return e.SweepUpdater, nil
	}
	return nil, &NotLoadedError{edge: "sweep_updater"}
}

// SweepScheduleCreatorOrErr returns the SweepScheduleCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepScheduleCreatorOrErr() ([]*SweepSchedule, error) {
	if e.loadedTypes[42] {
		return e.SweepScheduleCreator, nil
	}
	return nil, &NotLoadedError{edge: "sweep_schedule_creator"}
}

// SweepScheduleUpdaterOrErr returns the SweepScheduleUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepScheduleUpdaterOrErr() ([]*SweepSchedule, error) {
	if e.loadedTypes[43] {
		return e.SweepScheduleUpdater, nil
	}
	return nil, &NotLoadedError{edge: "sweep_schedule_updater"}
}

// SweepScheduleOrErr returns the SweepSchedule value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepScheduleOrErr() ([]*SweepSchedule, error) {
	if e.loadedTypes[44] {
		return e.SweepSchedule, nil
	}
	return nil, &NotLoadedError{edge: "sweep_schedule"}
}

// SweepResultCreatorOrErr returns the SweepResultCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepResultCreatorOrErr() ([]*SweepResult, error) {
	if e.loadedTypes[45] {
		return e.SweepResultCreator, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result_creator"}
}

// SweepResultUpdaterOrErr returns the SweepResultUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepResultUpdaterOrErr() ([]*SweepResult, error) {
	if e.loadedTypes[46] {
		return e.SweepResultUpdater, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result_updater"}
}

// SweepResultDetailsCreatorOrErr returns the SweepResultDetailsCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepResultDetailsCreatorOrErr() ([]*SweepResultDetails, error) {
	if e.loadedTypes[47] {
		return e.SweepResultDetailsCreator, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result_details_creator"}
}

// SweepResultDetailsUpdaterOrErr returns the SweepResultDetailsUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) SweepResultDetailsUpdaterOrErr() ([]*SweepResultDetails, error) {
	if e.loadedTypes[48] {
		return e.SweepResultDetailsUpdater, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result_details_updater"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Admin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case admin.FieldAvatar:
			values[i] = new([]byte)
		case admin.FieldID, admin.FieldCreatorID, admin.FieldUpdaterID, admin.FieldAdminStatus:
			values[i] = new(sql.NullInt64)
		case admin.FieldUsername, admin.FieldPassword, admin.FieldNickname, admin.FieldRealName, admin.FieldMobile:
			values[i] = new(sql.NullString)
		case admin.FieldCreateTime, admin.FieldDeleteTime, admin.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Admin fields.
func (a *Admin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case admin.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case admin.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				a.CreatorID = int(value.Int64)
			}
		case admin.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = new(time.Time)
				*a.DeleteTime = value.Time
			}
		case admin.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				a.UpdaterID = int(value.Int64)
			}
		case admin.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case admin.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case admin.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case admin.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case admin.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				a.RealName = value.String
			}
		case admin.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				a.Mobile = value.String
			}
		case admin.FieldAvatar:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Avatar); err != nil {
					return fmt.Errorf("unmarshal field avatar: %w", err)
				}
			}
		case admin.FieldAdminStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_status", values[i])
			} else if value.Valid {
				a.AdminStatus = enums.AdminStatus(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Admin.
// This includes values selected through modifiers, order, etc.
func (a *Admin) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Admin entity.
func (a *Admin) QueryCreator() *AdminQuery {
	return NewAdminClient(a.config).QueryCreator(a)
}

// QueryUpdater queries the "updater" edge of the Admin entity.
func (a *Admin) QueryUpdater() *AdminQuery {
	return NewAdminClient(a.config).QueryUpdater(a)
}

// QueryPermissions queries the "permissions" edge of the Admin entity.
func (a *Admin) QueryPermissions() *PermissionQuery {
	return NewAdminClient(a.config).QueryPermissions(a)
}

// QueryAdminCreator queries the "admin_creator" edge of the Admin entity.
func (a *Admin) QueryAdminCreator() *AdminQuery {
	return NewAdminClient(a.config).QueryAdminCreator(a)
}

// QueryAdminUpdater queries the "admin_updater" edge of the Admin entity.
func (a *Admin) QueryAdminUpdater() *AdminQuery {
	return NewAdminClient(a.config).QueryAdminUpdater(a)
}

// QueryPermissionCreator queries the "permission_creator" edge of the Admin entity.
func (a *Admin) QueryPermissionCreator() *PermissionQuery {
	return NewAdminClient(a.config).QueryPermissionCreator(a)
}

// QueryPermissionUpdater queries the "permission_updater" edge of the Admin entity.
func (a *Admin) QueryPermissionUpdater() *PermissionQuery {
	return NewAdminClient(a.config).QueryPermissionUpdater(a)
}

// QueryRiskCreator queries the "risk_creator" edge of the Admin entity.
func (a *Admin) QueryRiskCreator() *RiskQuery {
	return NewAdminClient(a.config).QueryRiskCreator(a)
}

// QueryRiskUpdater queries the "risk_updater" edge of the Admin entity.
func (a *Admin) QueryRiskUpdater() *RiskQuery {
	return NewAdminClient(a.config).QueryRiskUpdater(a)
}

// QueryRiskMaintainer queries the "risk_maintainer" edge of the Admin entity.
func (a *Admin) QueryRiskMaintainer() *RiskQuery {
	return NewAdminClient(a.config).QueryRiskMaintainer(a)
}

// QueryRiskLocationCreator queries the "risk_location_creator" edge of the Admin entity.
func (a *Admin) QueryRiskLocationCreator() *RiskLocationQuery {
	return NewAdminClient(a.config).QueryRiskLocationCreator(a)
}

// QueryRiskLocationUpdater queries the "risk_location_updater" edge of the Admin entity.
func (a *Admin) QueryRiskLocationUpdater() *RiskLocationQuery {
	return NewAdminClient(a.config).QueryRiskLocationUpdater(a)
}

// QueryRiskCategoryCreator queries the "risk_category_creator" edge of the Admin entity.
func (a *Admin) QueryRiskCategoryCreator() *RiskCategoryQuery {
	return NewAdminClient(a.config).QueryRiskCategoryCreator(a)
}

// QueryRiskCategoryUpdater queries the "risk_category_updater" edge of the Admin entity.
func (a *Admin) QueryRiskCategoryUpdater() *RiskCategoryQuery {
	return NewAdminClient(a.config).QueryRiskCategoryUpdater(a)
}

// QueryDepartmentCreator queries the "department_creator" edge of the Admin entity.
func (a *Admin) QueryDepartmentCreator() *DepartmentQuery {
	return NewAdminClient(a.config).QueryDepartmentCreator(a)
}

// QueryDepartmentUpdater queries the "department_updater" edge of the Admin entity.
func (a *Admin) QueryDepartmentUpdater() *DepartmentQuery {
	return NewAdminClient(a.config).QueryDepartmentUpdater(a)
}

// QueryEmployeeCreator queries the "employee_creator" edge of the Admin entity.
func (a *Admin) QueryEmployeeCreator() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployeeCreator(a)
}

// QueryEmployeeUpdater queries the "employee_updater" edge of the Admin entity.
func (a *Admin) QueryEmployeeUpdater() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployeeUpdater(a)
}

// QueryEmployee queries the "employee" edge of the Admin entity.
func (a *Admin) QueryEmployee() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployee(a)
}

// QueryOccupationCreator queries the "occupation_creator" edge of the Admin entity.
func (a *Admin) QueryOccupationCreator() *OccupationQuery {
	return NewAdminClient(a.config).QueryOccupationCreator(a)
}

// QueryOccupationUpdater queries the "occupation_updater" edge of the Admin entity.
func (a *Admin) QueryOccupationUpdater() *OccupationQuery {
	return NewAdminClient(a.config).QueryOccupationUpdater(a)
}

// QueryEventCreator queries the "event_creator" edge of the Admin entity.
func (a *Admin) QueryEventCreator() *EventQuery {
	return NewAdminClient(a.config).QueryEventCreator(a)
}

// QueryEventUpdater queries the "event_updater" edge of the Admin entity.
func (a *Admin) QueryEventUpdater() *EventQuery {
	return NewAdminClient(a.config).QueryEventUpdater(a)
}

// QueryVideoCreator queries the "video_creator" edge of the Admin entity.
func (a *Admin) QueryVideoCreator() *VideoQuery {
	return NewAdminClient(a.config).QueryVideoCreator(a)
}

// QueryVideoUpdater queries the "video_updater" edge of the Admin entity.
func (a *Admin) QueryVideoUpdater() *VideoQuery {
	return NewAdminClient(a.config).QueryVideoUpdater(a)
}

// QueryAreaCreator queries the "area_creator" edge of the Admin entity.
func (a *Admin) QueryAreaCreator() *AreaQuery {
	return NewAdminClient(a.config).QueryAreaCreator(a)
}

// QueryAreaUpdater queries the "area_updater" edge of the Admin entity.
func (a *Admin) QueryAreaUpdater() *AreaQuery {
	return NewAdminClient(a.config).QueryAreaUpdater(a)
}

// QueryDeviceCreator queries the "device_creator" edge of the Admin entity.
func (a *Admin) QueryDeviceCreator() *DeviceQuery {
	return NewAdminClient(a.config).QueryDeviceCreator(a)
}

// QueryDeviceUpdater queries the "device_updater" edge of the Admin entity.
func (a *Admin) QueryDeviceUpdater() *DeviceQuery {
	return NewAdminClient(a.config).QueryDeviceUpdater(a)
}

// QueryDeviceInstallationCreator queries the "device_installation_creator" edge of the Admin entity.
func (a *Admin) QueryDeviceInstallationCreator() *DeviceInstallationQuery {
	return NewAdminClient(a.config).QueryDeviceInstallationCreator(a)
}

// QueryDeviceInstallationUpdater queries the "device_installation_updater" edge of the Admin entity.
func (a *Admin) QueryDeviceInstallationUpdater() *DeviceInstallationQuery {
	return NewAdminClient(a.config).QueryDeviceInstallationUpdater(a)
}

// QueryEventLevelCreator queries the "event_level_creator" edge of the Admin entity.
func (a *Admin) QueryEventLevelCreator() *EventLevelQuery {
	return NewAdminClient(a.config).QueryEventLevelCreator(a)
}

// QueryEventLevelUpdater queries the "event_level_updater" edge of the Admin entity.
func (a *Admin) QueryEventLevelUpdater() *EventLevelQuery {
	return NewAdminClient(a.config).QueryEventLevelUpdater(a)
}

// QueryFixingCreator queries the "fixing_creator" edge of the Admin entity.
func (a *Admin) QueryFixingCreator() *FixingQuery {
	return NewAdminClient(a.config).QueryFixingCreator(a)
}

// QueryFixingUpdater queries the "fixing_updater" edge of the Admin entity.
func (a *Admin) QueryFixingUpdater() *FixingQuery {
	return NewAdminClient(a.config).QueryFixingUpdater(a)
}

// QueryFixer queries the "fixer" edge of the Admin entity.
func (a *Admin) QueryFixer() *FixingQuery {
	return NewAdminClient(a.config).QueryFixer(a)
}

// QueryEventLogCreator queries the "event_log_creator" edge of the Admin entity.
func (a *Admin) QueryEventLogCreator() *EventLogQuery {
	return NewAdminClient(a.config).QueryEventLogCreator(a)
}

// QueryEventLogUpdater queries the "event_log_updater" edge of the Admin entity.
func (a *Admin) QueryEventLogUpdater() *EventLogQuery {
	return NewAdminClient(a.config).QueryEventLogUpdater(a)
}

// QueryEventLogActor queries the "event_log_actor" edge of the Admin entity.
func (a *Admin) QueryEventLogActor() *EventLogQuery {
	return NewAdminClient(a.config).QueryEventLogActor(a)
}

// QueryEventLogActor2 queries the "event_log_actor2" edge of the Admin entity.
func (a *Admin) QueryEventLogActor2() *EventLogQuery {
	return NewAdminClient(a.config).QueryEventLogActor2(a)
}

// QuerySweepCreator queries the "sweep_creator" edge of the Admin entity.
func (a *Admin) QuerySweepCreator() *SweepQuery {
	return NewAdminClient(a.config).QuerySweepCreator(a)
}

// QuerySweepUpdater queries the "sweep_updater" edge of the Admin entity.
func (a *Admin) QuerySweepUpdater() *SweepQuery {
	return NewAdminClient(a.config).QuerySweepUpdater(a)
}

// QuerySweepScheduleCreator queries the "sweep_schedule_creator" edge of the Admin entity.
func (a *Admin) QuerySweepScheduleCreator() *SweepScheduleQuery {
	return NewAdminClient(a.config).QuerySweepScheduleCreator(a)
}

// QuerySweepScheduleUpdater queries the "sweep_schedule_updater" edge of the Admin entity.
func (a *Admin) QuerySweepScheduleUpdater() *SweepScheduleQuery {
	return NewAdminClient(a.config).QuerySweepScheduleUpdater(a)
}

// QuerySweepSchedule queries the "sweep_schedule" edge of the Admin entity.
func (a *Admin) QuerySweepSchedule() *SweepScheduleQuery {
	return NewAdminClient(a.config).QuerySweepSchedule(a)
}

// QuerySweepResultCreator queries the "sweep_result_creator" edge of the Admin entity.
func (a *Admin) QuerySweepResultCreator() *SweepResultQuery {
	return NewAdminClient(a.config).QuerySweepResultCreator(a)
}

// QuerySweepResultUpdater queries the "sweep_result_updater" edge of the Admin entity.
func (a *Admin) QuerySweepResultUpdater() *SweepResultQuery {
	return NewAdminClient(a.config).QuerySweepResultUpdater(a)
}

// QuerySweepResultDetailsCreator queries the "sweep_result_details_creator" edge of the Admin entity.
func (a *Admin) QuerySweepResultDetailsCreator() *SweepResultDetailsQuery {
	return NewAdminClient(a.config).QuerySweepResultDetailsCreator(a)
}

// QuerySweepResultDetailsUpdater queries the "sweep_result_details_updater" edge of the Admin entity.
func (a *Admin) QuerySweepResultDetailsUpdater() *SweepResultDetailsQuery {
	return NewAdminClient(a.config).QuerySweepResultDetailsUpdater(a)
}

// Update returns a builder for updating this Admin.
// Note that you need to call Admin.Unwrap() before calling this method if this Admin
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Admin) Update() *AdminUpdateOne {
	return NewAdminClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Admin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Admin) Unwrap() *Admin {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("dao: Admin is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Admin) String() string {
	var builder strings.Builder
	builder.WriteString("Admin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatorID))
	builder.WriteString(", ")
	if v := a.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("real_name=")
	builder.WriteString(a.RealName)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(a.Mobile)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(fmt.Sprintf("%v", a.Avatar))
	builder.WriteString(", ")
	builder.WriteString("admin_status=")
	builder.WriteString(fmt.Sprintf("%v", a.AdminStatus))
	builder.WriteByte(')')
	return builder.String()
}

// Admins is a parsable slice of Admin.
type Admins []*Admin
