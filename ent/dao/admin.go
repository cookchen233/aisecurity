// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Admin is the model entity for the Admin schema.
type Admin struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 用户名
	Username string `json:"username" validate:"required"`
	// 密码
	Password string `json:"-" validate:"-"`
	// 昵称
	Nickname string `json:"nickname" validate:"required"`
	// 姓名
	RealName string `json:"real_name" validate:"required"`
	// 头像
	Avatar string `json:"avatar"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminQuery when eager-loading is set.
	Edges        AdminEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminEdges holds the relations/edges for other nodes in the graph.
type AdminEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// AdminRoles holds the value of the admin_roles edge.
	AdminRoles []*AdminRole `json:"admin_roles,omitempty"`
	// AdminCreator holds the value of the admin_creator edge.
	AdminCreator []*Admin `json:"admin_creator,omitempty"`
	// AdminUpdater holds the value of the admin_updater edge.
	AdminUpdater []*Admin `json:"admin_updater,omitempty"`
	// AdminRoleCreator holds the value of the admin_role_creator edge.
	AdminRoleCreator []*AdminRole `json:"admin_role_creator,omitempty"`
	// AdminRoleUpdater holds the value of the admin_role_updater edge.
	AdminRoleUpdater []*AdminRole `json:"admin_role_updater,omitempty"`
	// RiskCreator holds the value of the risk_creator edge.
	RiskCreator []*Risk `json:"risk_creator,omitempty"`
	// RiskUpdater holds the value of the risk_updater edge.
	RiskUpdater []*Risk `json:"risk_updater,omitempty"`
	// RiskLocationCreator holds the value of the risk_location_creator edge.
	RiskLocationCreator []*RiskLocation `json:"risk_location_creator,omitempty"`
	// RiskLocationUpdater holds the value of the risk_location_updater edge.
	RiskLocationUpdater []*RiskLocation `json:"risk_location_updater,omitempty"`
	// RiskCategoryCreator holds the value of the risk_category_creator edge.
	RiskCategoryCreator []*RiskCategory `json:"risk_category_creator,omitempty"`
	// RiskCategoryUpdater holds the value of the risk_category_updater edge.
	RiskCategoryUpdater []*RiskCategory `json:"risk_category_updater,omitempty"`
	// DepartmentCreator holds the value of the department_creator edge.
	DepartmentCreator []*Department `json:"department_creator,omitempty"`
	// DepartmentUpdater holds the value of the department_updater edge.
	DepartmentUpdater []*Department `json:"department_updater,omitempty"`
	// EmployeeCreator holds the value of the employee_creator edge.
	EmployeeCreator []*Employee `json:"employee_creator,omitempty"`
	// EmployeeUpdater holds the value of the employee_updater edge.
	EmployeeUpdater []*Employee `json:"employee_updater,omitempty"`
	// Employee holds the value of the employee edge.
	Employee []*Employee `json:"employee,omitempty"`
	// OccupationCreator holds the value of the occupation_creator edge.
	OccupationCreator []*Occupation `json:"occupation_creator,omitempty"`
	// OccupationUpdater holds the value of the occupation_updater edge.
	OccupationUpdater []*Occupation `json:"occupation_updater,omitempty"`
	// IpcEventCreator holds the value of the ipc_event_creator edge.
	IpcEventCreator []*IPCEvent `json:"ipc_event_creator,omitempty"`
	// IpcEventUpdater holds the value of the ipc_event_updater edge.
	IpcEventUpdater []*IPCEvent `json:"ipc_event_updater,omitempty"`
	// VideoCreator holds the value of the video_creator edge.
	VideoCreator []*Video `json:"video_creator,omitempty"`
	// VideoUpdater holds the value of the video_updater edge.
	VideoUpdater []*Video `json:"video_updater,omitempty"`
	// AreaCreator holds the value of the area_creator edge.
	AreaCreator []*Area `json:"area_creator,omitempty"`
	// AreaUpdater holds the value of the area_updater edge.
	AreaUpdater []*Area `json:"area_updater,omitempty"`
	// DeviceCreator holds the value of the device_creator edge.
	DeviceCreator []*Device `json:"device_creator,omitempty"`
	// DeviceUpdater holds the value of the device_updater edge.
	DeviceUpdater []*Device `json:"device_updater,omitempty"`
	// DeviceInstallationCreator holds the value of the device_installation_creator edge.
	DeviceInstallationCreator []*DeviceInstallation `json:"device_installation_creator,omitempty"`
	// DeviceInstallationUpdater holds the value of the device_installation_updater edge.
	DeviceInstallationUpdater []*DeviceInstallation `json:"device_installation_updater,omitempty"`
	// EventLevelCreator holds the value of the event_level_creator edge.
	EventLevelCreator []*EventLevel `json:"event_level_creator,omitempty"`
	// EventLevelUpdater holds the value of the event_level_updater edge.
	EventLevelUpdater []*EventLevel `json:"event_level_updater,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [32]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// AdminRolesOrErr returns the AdminRoles value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminRolesOrErr() ([]*AdminRole, error) {
	if e.loadedTypes[2] {
		return e.AdminRoles, nil
	}
	return nil, &NotLoadedError{edge: "admin_roles"}
}

// AdminCreatorOrErr returns the AdminCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminCreatorOrErr() ([]*Admin, error) {
	if e.loadedTypes[3] {
		return e.AdminCreator, nil
	}
	return nil, &NotLoadedError{edge: "admin_creator"}
}

// AdminUpdaterOrErr returns the AdminUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminUpdaterOrErr() ([]*Admin, error) {
	if e.loadedTypes[4] {
		return e.AdminUpdater, nil
	}
	return nil, &NotLoadedError{edge: "admin_updater"}
}

// AdminRoleCreatorOrErr returns the AdminRoleCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminRoleCreatorOrErr() ([]*AdminRole, error) {
	if e.loadedTypes[5] {
		return e.AdminRoleCreator, nil
	}
	return nil, &NotLoadedError{edge: "admin_role_creator"}
}

// AdminRoleUpdaterOrErr returns the AdminRoleUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminRoleUpdaterOrErr() ([]*AdminRole, error) {
	if e.loadedTypes[6] {
		return e.AdminRoleUpdater, nil
	}
	return nil, &NotLoadedError{edge: "admin_role_updater"}
}

// RiskCreatorOrErr returns the RiskCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCreatorOrErr() ([]*Risk, error) {
	if e.loadedTypes[7] {
		return e.RiskCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_creator"}
}

// RiskUpdaterOrErr returns the RiskUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskUpdaterOrErr() ([]*Risk, error) {
	if e.loadedTypes[8] {
		return e.RiskUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_updater"}
}

// RiskLocationCreatorOrErr returns the RiskLocationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskLocationCreatorOrErr() ([]*RiskLocation, error) {
	if e.loadedTypes[9] {
		return e.RiskLocationCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_location_creator"}
}

// RiskLocationUpdaterOrErr returns the RiskLocationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskLocationUpdaterOrErr() ([]*RiskLocation, error) {
	if e.loadedTypes[10] {
		return e.RiskLocationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_location_updater"}
}

// RiskCategoryCreatorOrErr returns the RiskCategoryCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCategoryCreatorOrErr() ([]*RiskCategory, error) {
	if e.loadedTypes[11] {
		return e.RiskCategoryCreator, nil
	}
	return nil, &NotLoadedError{edge: "risk_category_creator"}
}

// RiskCategoryUpdaterOrErr returns the RiskCategoryUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RiskCategoryUpdaterOrErr() ([]*RiskCategory, error) {
	if e.loadedTypes[12] {
		return e.RiskCategoryUpdater, nil
	}
	return nil, &NotLoadedError{edge: "risk_category_updater"}
}

// DepartmentCreatorOrErr returns the DepartmentCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DepartmentCreatorOrErr() ([]*Department, error) {
	if e.loadedTypes[13] {
		return e.DepartmentCreator, nil
	}
	return nil, &NotLoadedError{edge: "department_creator"}
}

// DepartmentUpdaterOrErr returns the DepartmentUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DepartmentUpdaterOrErr() ([]*Department, error) {
	if e.loadedTypes[14] {
		return e.DepartmentUpdater, nil
	}
	return nil, &NotLoadedError{edge: "department_updater"}
}

// EmployeeCreatorOrErr returns the EmployeeCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EmployeeCreatorOrErr() ([]*Employee, error) {
	if e.loadedTypes[15] {
		return e.EmployeeCreator, nil
	}
	return nil, &NotLoadedError{edge: "employee_creator"}
}

// EmployeeUpdaterOrErr returns the EmployeeUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EmployeeUpdaterOrErr() ([]*Employee, error) {
	if e.loadedTypes[16] {
		return e.EmployeeUpdater, nil
	}
	return nil, &NotLoadedError{edge: "employee_updater"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EmployeeOrErr() ([]*Employee, error) {
	if e.loadedTypes[17] {
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// OccupationCreatorOrErr returns the OccupationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) OccupationCreatorOrErr() ([]*Occupation, error) {
	if e.loadedTypes[18] {
		return e.OccupationCreator, nil
	}
	return nil, &NotLoadedError{edge: "occupation_creator"}
}

// OccupationUpdaterOrErr returns the OccupationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) OccupationUpdaterOrErr() ([]*Occupation, error) {
	if e.loadedTypes[19] {
		return e.OccupationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "occupation_updater"}
}

// IpcEventCreatorOrErr returns the IpcEventCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) IpcEventCreatorOrErr() ([]*IPCEvent, error) {
	if e.loadedTypes[20] {
		return e.IpcEventCreator, nil
	}
	return nil, &NotLoadedError{edge: "ipc_event_creator"}
}

// IpcEventUpdaterOrErr returns the IpcEventUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) IpcEventUpdaterOrErr() ([]*IPCEvent, error) {
	if e.loadedTypes[21] {
		return e.IpcEventUpdater, nil
	}
	return nil, &NotLoadedError{edge: "ipc_event_updater"}
}

// VideoCreatorOrErr returns the VideoCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) VideoCreatorOrErr() ([]*Video, error) {
	if e.loadedTypes[22] {
		return e.VideoCreator, nil
	}
	return nil, &NotLoadedError{edge: "video_creator"}
}

// VideoUpdaterOrErr returns the VideoUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) VideoUpdaterOrErr() ([]*Video, error) {
	if e.loadedTypes[23] {
		return e.VideoUpdater, nil
	}
	return nil, &NotLoadedError{edge: "video_updater"}
}

// AreaCreatorOrErr returns the AreaCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AreaCreatorOrErr() ([]*Area, error) {
	if e.loadedTypes[24] {
		return e.AreaCreator, nil
	}
	return nil, &NotLoadedError{edge: "area_creator"}
}

// AreaUpdaterOrErr returns the AreaUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AreaUpdaterOrErr() ([]*Area, error) {
	if e.loadedTypes[25] {
		return e.AreaUpdater, nil
	}
	return nil, &NotLoadedError{edge: "area_updater"}
}

// DeviceCreatorOrErr returns the DeviceCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceCreatorOrErr() ([]*Device, error) {
	if e.loadedTypes[26] {
		return e.DeviceCreator, nil
	}
	return nil, &NotLoadedError{edge: "device_creator"}
}

// DeviceUpdaterOrErr returns the DeviceUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceUpdaterOrErr() ([]*Device, error) {
	if e.loadedTypes[27] {
		return e.DeviceUpdater, nil
	}
	return nil, &NotLoadedError{edge: "device_updater"}
}

// DeviceInstallationCreatorOrErr returns the DeviceInstallationCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceInstallationCreatorOrErr() ([]*DeviceInstallation, error) {
	if e.loadedTypes[28] {
		return e.DeviceInstallationCreator, nil
	}
	return nil, &NotLoadedError{edge: "device_installation_creator"}
}

// DeviceInstallationUpdaterOrErr returns the DeviceInstallationUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) DeviceInstallationUpdaterOrErr() ([]*DeviceInstallation, error) {
	if e.loadedTypes[29] {
		return e.DeviceInstallationUpdater, nil
	}
	return nil, &NotLoadedError{edge: "device_installation_updater"}
}

// EventLevelCreatorOrErr returns the EventLevelCreator value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLevelCreatorOrErr() ([]*EventLevel, error) {
	if e.loadedTypes[30] {
		return e.EventLevelCreator, nil
	}
	return nil, &NotLoadedError{edge: "event_level_creator"}
}

// EventLevelUpdaterOrErr returns the EventLevelUpdater value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) EventLevelUpdaterOrErr() ([]*EventLevel, error) {
	if e.loadedTypes[31] {
		return e.EventLevelUpdater, nil
	}
	return nil, &NotLoadedError{edge: "event_level_updater"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Admin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case admin.FieldID, admin.FieldCreatedBy, admin.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case admin.FieldUsername, admin.FieldPassword, admin.FieldNickname, admin.FieldRealName, admin.FieldAvatar:
			values[i] = new(sql.NullString)
		case admin.FieldCreatedAt, admin.FieldDeletedAt, admin.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Admin fields.
func (a *Admin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case admin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case admin.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				a.CreatedBy = int(value.Int64)
			}
		case admin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case admin.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				a.UpdatedBy = int(value.Int64)
			}
		case admin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case admin.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case admin.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case admin.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case admin.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				a.RealName = value.String
			}
		case admin.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				a.Avatar = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Admin.
// This includes values selected through modifiers, order, etc.
func (a *Admin) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Admin entity.
func (a *Admin) QueryCreator() *AdminQuery {
	return NewAdminClient(a.config).QueryCreator(a)
}

// QueryUpdater queries the "updater" edge of the Admin entity.
func (a *Admin) QueryUpdater() *AdminQuery {
	return NewAdminClient(a.config).QueryUpdater(a)
}

// QueryAdminRoles queries the "admin_roles" edge of the Admin entity.
func (a *Admin) QueryAdminRoles() *AdminRoleQuery {
	return NewAdminClient(a.config).QueryAdminRoles(a)
}

// QueryAdminCreator queries the "admin_creator" edge of the Admin entity.
func (a *Admin) QueryAdminCreator() *AdminQuery {
	return NewAdminClient(a.config).QueryAdminCreator(a)
}

// QueryAdminUpdater queries the "admin_updater" edge of the Admin entity.
func (a *Admin) QueryAdminUpdater() *AdminQuery {
	return NewAdminClient(a.config).QueryAdminUpdater(a)
}

// QueryAdminRoleCreator queries the "admin_role_creator" edge of the Admin entity.
func (a *Admin) QueryAdminRoleCreator() *AdminRoleQuery {
	return NewAdminClient(a.config).QueryAdminRoleCreator(a)
}

// QueryAdminRoleUpdater queries the "admin_role_updater" edge of the Admin entity.
func (a *Admin) QueryAdminRoleUpdater() *AdminRoleQuery {
	return NewAdminClient(a.config).QueryAdminRoleUpdater(a)
}

// QueryRiskCreator queries the "risk_creator" edge of the Admin entity.
func (a *Admin) QueryRiskCreator() *RiskQuery {
	return NewAdminClient(a.config).QueryRiskCreator(a)
}

// QueryRiskUpdater queries the "risk_updater" edge of the Admin entity.
func (a *Admin) QueryRiskUpdater() *RiskQuery {
	return NewAdminClient(a.config).QueryRiskUpdater(a)
}

// QueryRiskLocationCreator queries the "risk_location_creator" edge of the Admin entity.
func (a *Admin) QueryRiskLocationCreator() *RiskLocationQuery {
	return NewAdminClient(a.config).QueryRiskLocationCreator(a)
}

// QueryRiskLocationUpdater queries the "risk_location_updater" edge of the Admin entity.
func (a *Admin) QueryRiskLocationUpdater() *RiskLocationQuery {
	return NewAdminClient(a.config).QueryRiskLocationUpdater(a)
}

// QueryRiskCategoryCreator queries the "risk_category_creator" edge of the Admin entity.
func (a *Admin) QueryRiskCategoryCreator() *RiskCategoryQuery {
	return NewAdminClient(a.config).QueryRiskCategoryCreator(a)
}

// QueryRiskCategoryUpdater queries the "risk_category_updater" edge of the Admin entity.
func (a *Admin) QueryRiskCategoryUpdater() *RiskCategoryQuery {
	return NewAdminClient(a.config).QueryRiskCategoryUpdater(a)
}

// QueryDepartmentCreator queries the "department_creator" edge of the Admin entity.
func (a *Admin) QueryDepartmentCreator() *DepartmentQuery {
	return NewAdminClient(a.config).QueryDepartmentCreator(a)
}

// QueryDepartmentUpdater queries the "department_updater" edge of the Admin entity.
func (a *Admin) QueryDepartmentUpdater() *DepartmentQuery {
	return NewAdminClient(a.config).QueryDepartmentUpdater(a)
}

// QueryEmployeeCreator queries the "employee_creator" edge of the Admin entity.
func (a *Admin) QueryEmployeeCreator() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployeeCreator(a)
}

// QueryEmployeeUpdater queries the "employee_updater" edge of the Admin entity.
func (a *Admin) QueryEmployeeUpdater() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployeeUpdater(a)
}

// QueryEmployee queries the "employee" edge of the Admin entity.
func (a *Admin) QueryEmployee() *EmployeeQuery {
	return NewAdminClient(a.config).QueryEmployee(a)
}

// QueryOccupationCreator queries the "occupation_creator" edge of the Admin entity.
func (a *Admin) QueryOccupationCreator() *OccupationQuery {
	return NewAdminClient(a.config).QueryOccupationCreator(a)
}

// QueryOccupationUpdater queries the "occupation_updater" edge of the Admin entity.
func (a *Admin) QueryOccupationUpdater() *OccupationQuery {
	return NewAdminClient(a.config).QueryOccupationUpdater(a)
}

// QueryIpcEventCreator queries the "ipc_event_creator" edge of the Admin entity.
func (a *Admin) QueryIpcEventCreator() *IPCEventQuery {
	return NewAdminClient(a.config).QueryIpcEventCreator(a)
}

// QueryIpcEventUpdater queries the "ipc_event_updater" edge of the Admin entity.
func (a *Admin) QueryIpcEventUpdater() *IPCEventQuery {
	return NewAdminClient(a.config).QueryIpcEventUpdater(a)
}

// QueryVideoCreator queries the "video_creator" edge of the Admin entity.
func (a *Admin) QueryVideoCreator() *VideoQuery {
	return NewAdminClient(a.config).QueryVideoCreator(a)
}

// QueryVideoUpdater queries the "video_updater" edge of the Admin entity.
func (a *Admin) QueryVideoUpdater() *VideoQuery {
	return NewAdminClient(a.config).QueryVideoUpdater(a)
}

// QueryAreaCreator queries the "area_creator" edge of the Admin entity.
func (a *Admin) QueryAreaCreator() *AreaQuery {
	return NewAdminClient(a.config).QueryAreaCreator(a)
}

// QueryAreaUpdater queries the "area_updater" edge of the Admin entity.
func (a *Admin) QueryAreaUpdater() *AreaQuery {
	return NewAdminClient(a.config).QueryAreaUpdater(a)
}

// QueryDeviceCreator queries the "device_creator" edge of the Admin entity.
func (a *Admin) QueryDeviceCreator() *DeviceQuery {
	return NewAdminClient(a.config).QueryDeviceCreator(a)
}

// QueryDeviceUpdater queries the "device_updater" edge of the Admin entity.
func (a *Admin) QueryDeviceUpdater() *DeviceQuery {
	return NewAdminClient(a.config).QueryDeviceUpdater(a)
}

// QueryDeviceInstallationCreator queries the "device_installation_creator" edge of the Admin entity.
func (a *Admin) QueryDeviceInstallationCreator() *DeviceInstallationQuery {
	return NewAdminClient(a.config).QueryDeviceInstallationCreator(a)
}

// QueryDeviceInstallationUpdater queries the "device_installation_updater" edge of the Admin entity.
func (a *Admin) QueryDeviceInstallationUpdater() *DeviceInstallationQuery {
	return NewAdminClient(a.config).QueryDeviceInstallationUpdater(a)
}

// QueryEventLevelCreator queries the "event_level_creator" edge of the Admin entity.
func (a *Admin) QueryEventLevelCreator() *EventLevelQuery {
	return NewAdminClient(a.config).QueryEventLevelCreator(a)
}

// QueryEventLevelUpdater queries the "event_level_updater" edge of the Admin entity.
func (a *Admin) QueryEventLevelUpdater() *EventLevelQuery {
	return NewAdminClient(a.config).QueryEventLevelUpdater(a)
}

// Update returns a builder for updating this Admin.
// Note that you need to call Admin.Unwrap() before calling this method if this Admin
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Admin) Update() *AdminUpdateOne {
	return NewAdminClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Admin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Admin) Unwrap() *Admin {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("dao: Admin is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Admin) String() string {
	var builder strings.Builder
	builder.WriteString("Admin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedBy))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("real_name=")
	builder.WriteString(a.RealName)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(a.Avatar)
	builder.WriteByte(')')
	return builder.String()
}

// Admins is a parsable slice of Admin.
type Admins []*Admin
