// Code generated by ent, DO NOT EDIT.

package admin

import (
	"aisecurity/ent/dao/predicate"
	"aisecurity/enums"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldCreateTime, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldCreatorID, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldDeleteTime, v))
}

// UpdaterID applies equality check predicate on the "updater_id" field. It's identical to UpdaterIDEQ.
func UpdaterID(v int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUpdaterID, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUpdateTime, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldPassword, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldNickname, v))
}

// RealName applies equality check predicate on the "real_name" field. It's identical to RealNameEQ.
func RealName(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldRealName, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldMobile, v))
}

// AdminStatus applies equality check predicate on the "admin_status" field. It's identical to AdminStatusEQ.
func AdminStatus(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldEQ(FieldAdminStatus, vc))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldCreateTime, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v int) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...int) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...int) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldCreatorID, vs...))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Admin {
	return predicate.Admin(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Admin {
	return predicate.Admin(sql.FieldNotNull(FieldDeleteTime))
}

// UpdaterIDEQ applies the EQ predicate on the "updater_id" field.
func UpdaterIDEQ(v int) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUpdaterID, v))
}

// UpdaterIDNEQ applies the NEQ predicate on the "updater_id" field.
func UpdaterIDNEQ(v int) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldUpdaterID, v))
}

// UpdaterIDIn applies the In predicate on the "updater_id" field.
func UpdaterIDIn(vs ...int) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldUpdaterID, vs...))
}

// UpdaterIDNotIn applies the NotIn predicate on the "updater_id" field.
func UpdaterIDNotIn(vs ...int) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldUpdaterID, vs...))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldUpdateTime, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContainsFold(FieldPassword, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContainsFold(FieldNickname, v))
}

// RealNameEQ applies the EQ predicate on the "real_name" field.
func RealNameEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldRealName, v))
}

// RealNameNEQ applies the NEQ predicate on the "real_name" field.
func RealNameNEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldRealName, v))
}

// RealNameIn applies the In predicate on the "real_name" field.
func RealNameIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldRealName, vs...))
}

// RealNameNotIn applies the NotIn predicate on the "real_name" field.
func RealNameNotIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldRealName, vs...))
}

// RealNameGT applies the GT predicate on the "real_name" field.
func RealNameGT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldRealName, v))
}

// RealNameGTE applies the GTE predicate on the "real_name" field.
func RealNameGTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldRealName, v))
}

// RealNameLT applies the LT predicate on the "real_name" field.
func RealNameLT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldRealName, v))
}

// RealNameLTE applies the LTE predicate on the "real_name" field.
func RealNameLTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldRealName, v))
}

// RealNameContains applies the Contains predicate on the "real_name" field.
func RealNameContains(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContains(FieldRealName, v))
}

// RealNameHasPrefix applies the HasPrefix predicate on the "real_name" field.
func RealNameHasPrefix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasPrefix(FieldRealName, v))
}

// RealNameHasSuffix applies the HasSuffix predicate on the "real_name" field.
func RealNameHasSuffix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasSuffix(FieldRealName, v))
}

// RealNameEqualFold applies the EqualFold predicate on the "real_name" field.
func RealNameEqualFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEqualFold(FieldRealName, v))
}

// RealNameContainsFold applies the ContainsFold predicate on the "real_name" field.
func RealNameContainsFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContainsFold(FieldRealName, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.Admin {
	return predicate.Admin(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.Admin {
	return predicate.Admin(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.Admin {
	return predicate.Admin(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.Admin {
	return predicate.Admin(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "mobile" field.
func MobileIsNil() predicate.Admin {
	return predicate.Admin(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "mobile" field.
func MobileNotNil() predicate.Admin {
	return predicate.Admin(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.Admin {
	return predicate.Admin(sql.FieldContainsFold(FieldMobile, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.Admin {
	return predicate.Admin(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.Admin {
	return predicate.Admin(sql.FieldNotNull(FieldAvatar))
}

// AdminStatusEQ applies the EQ predicate on the "admin_status" field.
func AdminStatusEQ(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldEQ(FieldAdminStatus, vc))
}

// AdminStatusNEQ applies the NEQ predicate on the "admin_status" field.
func AdminStatusNEQ(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldNEQ(FieldAdminStatus, vc))
}

// AdminStatusIn applies the In predicate on the "admin_status" field.
func AdminStatusIn(vs ...enums.AdminStatus) predicate.Admin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Admin(sql.FieldIn(FieldAdminStatus, v...))
}

// AdminStatusNotIn applies the NotIn predicate on the "admin_status" field.
func AdminStatusNotIn(vs ...enums.AdminStatus) predicate.Admin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Admin(sql.FieldNotIn(FieldAdminStatus, v...))
}

// AdminStatusGT applies the GT predicate on the "admin_status" field.
func AdminStatusGT(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldGT(FieldAdminStatus, vc))
}

// AdminStatusGTE applies the GTE predicate on the "admin_status" field.
func AdminStatusGTE(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldGTE(FieldAdminStatus, vc))
}

// AdminStatusLT applies the LT predicate on the "admin_status" field.
func AdminStatusLT(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldLT(FieldAdminStatus, vc))
}

// AdminStatusLTE applies the LTE predicate on the "admin_status" field.
func AdminStatusLTE(v enums.AdminStatus) predicate.Admin {
	vc := int(v)
	return predicate.Admin(sql.FieldLTE(FieldAdminStatus, vc))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdater applies the HasEdge predicate on the "updater" edge.
func HasUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdaterWith applies the HasEdge predicate on the "updater" edge with a given conditions (other predicates).
func HasUpdaterWith(preds ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissions applies the HasEdge predicate on the "permissions" edge.
func HasPermissions() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PermissionsTable, PermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
func HasPermissionsWith(preds ...predicate.Permission) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminCreator applies the HasEdge predicate on the "admin_creator" edge.
func HasAdminCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdminCreatorTable, AdminCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminCreatorWith applies the HasEdge predicate on the "admin_creator" edge with a given conditions (other predicates).
func HasAdminCreatorWith(preds ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newAdminCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminUpdater applies the HasEdge predicate on the "admin_updater" edge.
func HasAdminUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdminUpdaterTable, AdminUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminUpdaterWith applies the HasEdge predicate on the "admin_updater" edge with a given conditions (other predicates).
func HasAdminUpdaterWith(preds ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newAdminUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionCreator applies the HasEdge predicate on the "permission_creator" edge.
func HasPermissionCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermissionCreatorTable, PermissionCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionCreatorWith applies the HasEdge predicate on the "permission_creator" edge with a given conditions (other predicates).
func HasPermissionCreatorWith(preds ...predicate.Permission) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newPermissionCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionUpdater applies the HasEdge predicate on the "permission_updater" edge.
func HasPermissionUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermissionUpdaterTable, PermissionUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionUpdaterWith applies the HasEdge predicate on the "permission_updater" edge with a given conditions (other predicates).
func HasPermissionUpdaterWith(preds ...predicate.Permission) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newPermissionUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskCreator applies the HasEdge predicate on the "risk_creator" edge.
func HasRiskCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorTable, RiskCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskCreatorWith applies the HasEdge predicate on the "risk_creator" edge with a given conditions (other predicates).
func HasRiskCreatorWith(preds ...predicate.Risk) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskUpdater applies the HasEdge predicate on the "risk_updater" edge.
func HasRiskUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskUpdaterTable, RiskUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskUpdaterWith applies the HasEdge predicate on the "risk_updater" edge with a given conditions (other predicates).
func HasRiskUpdaterWith(preds ...predicate.Risk) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskMaintainer applies the HasEdge predicate on the "risk_maintainer" edge.
func HasRiskMaintainer() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskMaintainerTable, RiskMaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskMaintainerWith applies the HasEdge predicate on the "risk_maintainer" edge with a given conditions (other predicates).
func HasRiskMaintainerWith(preds ...predicate.Risk) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskLocationCreator applies the HasEdge predicate on the "risk_location_creator" edge.
func HasRiskLocationCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationCreatorTable, RiskLocationCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskLocationCreatorWith applies the HasEdge predicate on the "risk_location_creator" edge with a given conditions (other predicates).
func HasRiskLocationCreatorWith(preds ...predicate.RiskLocation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskLocationCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskLocationUpdater applies the HasEdge predicate on the "risk_location_updater" edge.
func HasRiskLocationUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationUpdaterTable, RiskLocationUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskLocationUpdaterWith applies the HasEdge predicate on the "risk_location_updater" edge with a given conditions (other predicates).
func HasRiskLocationUpdaterWith(preds ...predicate.RiskLocation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskLocationUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskCategoryCreator applies the HasEdge predicate on the "risk_category_creator" edge.
func HasRiskCategoryCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryCreatorTable, RiskCategoryCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskCategoryCreatorWith applies the HasEdge predicate on the "risk_category_creator" edge with a given conditions (other predicates).
func HasRiskCategoryCreatorWith(preds ...predicate.RiskCategory) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskCategoryCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskCategoryUpdater applies the HasEdge predicate on the "risk_category_updater" edge.
func HasRiskCategoryUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryUpdaterTable, RiskCategoryUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskCategoryUpdaterWith applies the HasEdge predicate on the "risk_category_updater" edge with a given conditions (other predicates).
func HasRiskCategoryUpdaterWith(preds ...predicate.RiskCategory) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newRiskCategoryUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartmentCreator applies the HasEdge predicate on the "department_creator" edge.
func HasDepartmentCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DepartmentCreatorTable, DepartmentCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentCreatorWith applies the HasEdge predicate on the "department_creator" edge with a given conditions (other predicates).
func HasDepartmentCreatorWith(preds ...predicate.Department) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDepartmentCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartmentUpdater applies the HasEdge predicate on the "department_updater" edge.
func HasDepartmentUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DepartmentUpdaterTable, DepartmentUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentUpdaterWith applies the HasEdge predicate on the "department_updater" edge with a given conditions (other predicates).
func HasDepartmentUpdaterWith(preds ...predicate.Department) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDepartmentUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployeeCreator applies the HasEdge predicate on the "employee_creator" edge.
func HasEmployeeCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployeeCreatorTable, EmployeeCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeCreatorWith applies the HasEdge predicate on the "employee_creator" edge with a given conditions (other predicates).
func HasEmployeeCreatorWith(preds ...predicate.Employee) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEmployeeCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployeeUpdater applies the HasEdge predicate on the "employee_updater" edge.
func HasEmployeeUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployeeUpdaterTable, EmployeeUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeUpdaterWith applies the HasEdge predicate on the "employee_updater" edge with a given conditions (other predicates).
func HasEmployeeUpdaterWith(preds ...predicate.Employee) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEmployeeUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOccupationCreator applies the HasEdge predicate on the "occupation_creator" edge.
func HasOccupationCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OccupationCreatorTable, OccupationCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccupationCreatorWith applies the HasEdge predicate on the "occupation_creator" edge with a given conditions (other predicates).
func HasOccupationCreatorWith(preds ...predicate.Occupation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newOccupationCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOccupationUpdater applies the HasEdge predicate on the "occupation_updater" edge.
func HasOccupationUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OccupationUpdaterTable, OccupationUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccupationUpdaterWith applies the HasEdge predicate on the "occupation_updater" edge with a given conditions (other predicates).
func HasOccupationUpdaterWith(preds ...predicate.Occupation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newOccupationUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventCreator applies the HasEdge predicate on the "event_creator" edge.
func HasEventCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventCreatorTable, EventCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventCreatorWith applies the HasEdge predicate on the "event_creator" edge with a given conditions (other predicates).
func HasEventCreatorWith(preds ...predicate.Event) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventUpdater applies the HasEdge predicate on the "event_updater" edge.
func HasEventUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventUpdaterTable, EventUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventUpdaterWith applies the HasEdge predicate on the "event_updater" edge with a given conditions (other predicates).
func HasEventUpdaterWith(preds ...predicate.Event) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideoCreator applies the HasEdge predicate on the "video_creator" edge.
func HasVideoCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoCreatorTable, VideoCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoCreatorWith applies the HasEdge predicate on the "video_creator" edge with a given conditions (other predicates).
func HasVideoCreatorWith(preds ...predicate.Video) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newVideoCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideoUpdater applies the HasEdge predicate on the "video_updater" edge.
func HasVideoUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoUpdaterTable, VideoUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoUpdaterWith applies the HasEdge predicate on the "video_updater" edge with a given conditions (other predicates).
func HasVideoUpdaterWith(preds ...predicate.Video) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newVideoUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAreaCreator applies the HasEdge predicate on the "area_creator" edge.
func HasAreaCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AreaCreatorTable, AreaCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaCreatorWith applies the HasEdge predicate on the "area_creator" edge with a given conditions (other predicates).
func HasAreaCreatorWith(preds ...predicate.Area) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newAreaCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAreaUpdater applies the HasEdge predicate on the "area_updater" edge.
func HasAreaUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AreaUpdaterTable, AreaUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaUpdaterWith applies the HasEdge predicate on the "area_updater" edge with a given conditions (other predicates).
func HasAreaUpdaterWith(preds ...predicate.Area) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newAreaUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceCreator applies the HasEdge predicate on the "device_creator" edge.
func HasDeviceCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceCreatorTable, DeviceCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceCreatorWith applies the HasEdge predicate on the "device_creator" edge with a given conditions (other predicates).
func HasDeviceCreatorWith(preds ...predicate.Device) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDeviceCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceUpdater applies the HasEdge predicate on the "device_updater" edge.
func HasDeviceUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceUpdaterTable, DeviceUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceUpdaterWith applies the HasEdge predicate on the "device_updater" edge with a given conditions (other predicates).
func HasDeviceUpdaterWith(preds ...predicate.Device) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDeviceUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceInstallationCreator applies the HasEdge predicate on the "device_installation_creator" edge.
func HasDeviceInstallationCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationCreatorTable, DeviceInstallationCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceInstallationCreatorWith applies the HasEdge predicate on the "device_installation_creator" edge with a given conditions (other predicates).
func HasDeviceInstallationCreatorWith(preds ...predicate.DeviceInstallation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDeviceInstallationCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceInstallationUpdater applies the HasEdge predicate on the "device_installation_updater" edge.
func HasDeviceInstallationUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationUpdaterTable, DeviceInstallationUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceInstallationUpdaterWith applies the HasEdge predicate on the "device_installation_updater" edge with a given conditions (other predicates).
func HasDeviceInstallationUpdaterWith(preds ...predicate.DeviceInstallation) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newDeviceInstallationUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLevelCreator applies the HasEdge predicate on the "event_level_creator" edge.
func HasEventLevelCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLevelCreatorTable, EventLevelCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLevelCreatorWith applies the HasEdge predicate on the "event_level_creator" edge with a given conditions (other predicates).
func HasEventLevelCreatorWith(preds ...predicate.EventLevel) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLevelCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLevelUpdater applies the HasEdge predicate on the "event_level_updater" edge.
func HasEventLevelUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLevelUpdaterTable, EventLevelUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLevelUpdaterWith applies the HasEdge predicate on the "event_level_updater" edge with a given conditions (other predicates).
func HasEventLevelUpdaterWith(preds ...predicate.EventLevel) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLevelUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixingCreator applies the HasEdge predicate on the "fixing_creator" edge.
func HasFixingCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixingCreatorTable, FixingCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixingCreatorWith applies the HasEdge predicate on the "fixing_creator" edge with a given conditions (other predicates).
func HasFixingCreatorWith(preds ...predicate.Fixing) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newFixingCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixingUpdater applies the HasEdge predicate on the "fixing_updater" edge.
func HasFixingUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixingUpdaterTable, FixingUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixingUpdaterWith applies the HasEdge predicate on the "fixing_updater" edge with a given conditions (other predicates).
func HasFixingUpdaterWith(preds ...predicate.Fixing) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newFixingUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixer applies the HasEdge predicate on the "fixer" edge.
func HasFixer() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixerTable, FixerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixerWith applies the HasEdge predicate on the "fixer" edge with a given conditions (other predicates).
func HasFixerWith(preds ...predicate.Fixing) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newFixerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLogCreator applies the HasEdge predicate on the "event_log_creator" edge.
func HasEventLogCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLogCreatorTable, EventLogCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLogCreatorWith applies the HasEdge predicate on the "event_log_creator" edge with a given conditions (other predicates).
func HasEventLogCreatorWith(preds ...predicate.EventLog) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLogCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLogUpdater applies the HasEdge predicate on the "event_log_updater" edge.
func HasEventLogUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLogUpdaterTable, EventLogUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLogUpdaterWith applies the HasEdge predicate on the "event_log_updater" edge with a given conditions (other predicates).
func HasEventLogUpdaterWith(preds ...predicate.EventLog) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLogUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLogActor applies the HasEdge predicate on the "event_log_actor" edge.
func HasEventLogActor() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLogActorTable, EventLogActorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLogActorWith applies the HasEdge predicate on the "event_log_actor" edge with a given conditions (other predicates).
func HasEventLogActorWith(preds ...predicate.EventLog) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLogActorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventLogActor2 applies the HasEdge predicate on the "event_log_actor2" edge.
func HasEventLogActor2() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventLogActor2Table, EventLogActor2Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventLogActor2With applies the HasEdge predicate on the "event_log_actor2" edge with a given conditions (other predicates).
func HasEventLogActor2With(preds ...predicate.EventLog) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newEventLogActor2Step()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepCreator applies the HasEdge predicate on the "sweep_creator" edge.
func HasSweepCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepCreatorTable, SweepCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepCreatorWith applies the HasEdge predicate on the "sweep_creator" edge with a given conditions (other predicates).
func HasSweepCreatorWith(preds ...predicate.Sweep) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepUpdater applies the HasEdge predicate on the "sweep_updater" edge.
func HasSweepUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepUpdaterTable, SweepUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepUpdaterWith applies the HasEdge predicate on the "sweep_updater" edge with a given conditions (other predicates).
func HasSweepUpdaterWith(preds ...predicate.Sweep) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepScheduleCreator applies the HasEdge predicate on the "sweep_schedule_creator" edge.
func HasSweepScheduleCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepScheduleCreatorTable, SweepScheduleCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepScheduleCreatorWith applies the HasEdge predicate on the "sweep_schedule_creator" edge with a given conditions (other predicates).
func HasSweepScheduleCreatorWith(preds ...predicate.SweepSchedule) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepScheduleCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepScheduleUpdater applies the HasEdge predicate on the "sweep_schedule_updater" edge.
func HasSweepScheduleUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepScheduleUpdaterTable, SweepScheduleUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepScheduleUpdaterWith applies the HasEdge predicate on the "sweep_schedule_updater" edge with a given conditions (other predicates).
func HasSweepScheduleUpdaterWith(preds ...predicate.SweepSchedule) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepScheduleUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepSchedule applies the HasEdge predicate on the "sweep_schedule" edge.
func HasSweepSchedule() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SweepScheduleTable, SweepSchedulePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepScheduleWith applies the HasEdge predicate on the "sweep_schedule" edge with a given conditions (other predicates).
func HasSweepScheduleWith(preds ...predicate.SweepSchedule) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepResultCreator applies the HasEdge predicate on the "sweep_result_creator" edge.
func HasSweepResultCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepResultCreatorTable, SweepResultCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepResultCreatorWith applies the HasEdge predicate on the "sweep_result_creator" edge with a given conditions (other predicates).
func HasSweepResultCreatorWith(preds ...predicate.SweepResult) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepResultCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepResultUpdater applies the HasEdge predicate on the "sweep_result_updater" edge.
func HasSweepResultUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepResultUpdaterTable, SweepResultUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepResultUpdaterWith applies the HasEdge predicate on the "sweep_result_updater" edge with a given conditions (other predicates).
func HasSweepResultUpdaterWith(preds ...predicate.SweepResult) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepResultUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepResultDetailsCreator applies the HasEdge predicate on the "sweep_result_details_creator" edge.
func HasSweepResultDetailsCreator() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepResultDetailsCreatorTable, SweepResultDetailsCreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepResultDetailsCreatorWith applies the HasEdge predicate on the "sweep_result_details_creator" edge with a given conditions (other predicates).
func HasSweepResultDetailsCreatorWith(preds ...predicate.SweepResultDetails) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepResultDetailsCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepResultDetailsUpdater applies the HasEdge predicate on the "sweep_result_details_updater" edge.
func HasSweepResultDetailsUpdater() predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepResultDetailsUpdaterTable, SweepResultDetailsUpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepResultDetailsUpdaterWith applies the HasEdge predicate on the "sweep_result_details_updater" edge with a given conditions (other predicates).
func HasSweepResultDetailsUpdaterWith(preds ...predicate.SweepResultDetails) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		step := newSweepResultDetailsUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Admin) predicate.Admin {
	return predicate.Admin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Admin) predicate.Admin {
	return predicate.Admin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Admin) predicate.Admin {
	return predicate.Admin(sql.NotPredicates(p))
}
