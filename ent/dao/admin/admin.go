// Code generated by ent, DO NOT EDIT.

package admin

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdator holds the string denoting the updator edge name in mutations.
	EdgeUpdator = "updator"
	// EdgeAdminRoles holds the string denoting the admin_roles edge name in mutations.
	EdgeAdminRoles = "admin_roles"
	// EdgeAdminCreator holds the string denoting the admin_creator edge name in mutations.
	EdgeAdminCreator = "admin_creator"
	// EdgeAdminUpdator holds the string denoting the admin_updator edge name in mutations.
	EdgeAdminUpdator = "admin_updator"
	// EdgeAdminRoleCreator holds the string denoting the admin_role_creator edge name in mutations.
	EdgeAdminRoleCreator = "admin_role_creator"
	// EdgeAdminRoleUpdator holds the string denoting the admin_role_updator edge name in mutations.
	EdgeAdminRoleUpdator = "admin_role_updator"
	// EdgeRiskCreator holds the string denoting the risk_creator edge name in mutations.
	EdgeRiskCreator = "risk_creator"
	// EdgeRiskUpdator holds the string denoting the risk_updator edge name in mutations.
	EdgeRiskUpdator = "risk_updator"
	// EdgeRiskMaintainer holds the string denoting the risk_maintainer edge name in mutations.
	EdgeRiskMaintainer = "risk_maintainer"
	// EdgeRiskLocationCreator holds the string denoting the risk_location_creator edge name in mutations.
	EdgeRiskLocationCreator = "risk_location_creator"
	// EdgeRiskLocationUpdator holds the string denoting the risk_location_updator edge name in mutations.
	EdgeRiskLocationUpdator = "risk_location_updator"
	// EdgeRiskCategoryCreator holds the string denoting the risk_category_creator edge name in mutations.
	EdgeRiskCategoryCreator = "risk_category_creator"
	// EdgeRiskCategoryUpdator holds the string denoting the risk_category_updator edge name in mutations.
	EdgeRiskCategoryUpdator = "risk_category_updator"
	// EdgeDepartmentCreator holds the string denoting the department_creator edge name in mutations.
	EdgeDepartmentCreator = "department_creator"
	// EdgeDepartmentUpdator holds the string denoting the department_updator edge name in mutations.
	EdgeDepartmentUpdator = "department_updator"
	// EdgeEmployeeCreator holds the string denoting the employee_creator edge name in mutations.
	EdgeEmployeeCreator = "employee_creator"
	// EdgeEmployeeUpdator holds the string denoting the employee_updator edge name in mutations.
	EdgeEmployeeUpdator = "employee_updator"
	// EdgeEmployeeAdmin holds the string denoting the employee_admin edge name in mutations.
	EdgeEmployeeAdmin = "employee_admin"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// UpdatorTable is the table that holds the updator relation/edge.
	UpdatorTable = "admins"
	// UpdatorColumn is the table column denoting the updator relation/edge.
	UpdatorColumn = "updated_by"
	// AdminRolesTable is the table that holds the admin_roles relation/edge. The primary key declared below.
	AdminRolesTable = "admin_role_admins"
	// AdminRolesInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRolesInverseTable = "admin_roles"
	// AdminCreatorTable is the table that holds the admin_creator relation/edge.
	AdminCreatorTable = "admins"
	// AdminCreatorColumn is the table column denoting the admin_creator relation/edge.
	AdminCreatorColumn = "created_by"
	// AdminUpdatorTable is the table that holds the admin_updator relation/edge.
	AdminUpdatorTable = "admins"
	// AdminUpdatorColumn is the table column denoting the admin_updator relation/edge.
	AdminUpdatorColumn = "updated_by"
	// AdminRoleCreatorTable is the table that holds the admin_role_creator relation/edge.
	AdminRoleCreatorTable = "admin_roles"
	// AdminRoleCreatorInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRoleCreatorInverseTable = "admin_roles"
	// AdminRoleCreatorColumn is the table column denoting the admin_role_creator relation/edge.
	AdminRoleCreatorColumn = "created_by"
	// AdminRoleUpdatorTable is the table that holds the admin_role_updator relation/edge.
	AdminRoleUpdatorTable = "admin_roles"
	// AdminRoleUpdatorInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRoleUpdatorInverseTable = "admin_roles"
	// AdminRoleUpdatorColumn is the table column denoting the admin_role_updator relation/edge.
	AdminRoleUpdatorColumn = "updated_by"
	// RiskCreatorTable is the table that holds the risk_creator relation/edge.
	RiskCreatorTable = "risks"
	// RiskCreatorInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskCreatorInverseTable = "risks"
	// RiskCreatorColumn is the table column denoting the risk_creator relation/edge.
	RiskCreatorColumn = "created_by"
	// RiskUpdatorTable is the table that holds the risk_updator relation/edge.
	RiskUpdatorTable = "risks"
	// RiskUpdatorInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskUpdatorInverseTable = "risks"
	// RiskUpdatorColumn is the table column denoting the risk_updator relation/edge.
	RiskUpdatorColumn = "admin_risk_updator"
	// RiskMaintainerTable is the table that holds the risk_maintainer relation/edge.
	RiskMaintainerTable = "risks"
	// RiskMaintainerInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskMaintainerInverseTable = "risks"
	// RiskMaintainerColumn is the table column denoting the risk_maintainer relation/edge.
	RiskMaintainerColumn = "maintainer"
	// RiskLocationCreatorTable is the table that holds the risk_location_creator relation/edge.
	RiskLocationCreatorTable = "risk_locations"
	// RiskLocationCreatorInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationCreatorInverseTable = "risk_locations"
	// RiskLocationCreatorColumn is the table column denoting the risk_location_creator relation/edge.
	RiskLocationCreatorColumn = "created_by"
	// RiskLocationUpdatorTable is the table that holds the risk_location_updator relation/edge.
	RiskLocationUpdatorTable = "risk_locations"
	// RiskLocationUpdatorInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationUpdatorInverseTable = "risk_locations"
	// RiskLocationUpdatorColumn is the table column denoting the risk_location_updator relation/edge.
	RiskLocationUpdatorColumn = "admin_risk_location_updator"
	// RiskCategoryCreatorTable is the table that holds the risk_category_creator relation/edge.
	RiskCategoryCreatorTable = "risk_categories"
	// RiskCategoryCreatorInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryCreatorInverseTable = "risk_categories"
	// RiskCategoryCreatorColumn is the table column denoting the risk_category_creator relation/edge.
	RiskCategoryCreatorColumn = "created_by"
	// RiskCategoryUpdatorTable is the table that holds the risk_category_updator relation/edge.
	RiskCategoryUpdatorTable = "risk_categories"
	// RiskCategoryUpdatorInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryUpdatorInverseTable = "risk_categories"
	// RiskCategoryUpdatorColumn is the table column denoting the risk_category_updator relation/edge.
	RiskCategoryUpdatorColumn = "admin_risk_category_updator"
	// DepartmentCreatorTable is the table that holds the department_creator relation/edge.
	DepartmentCreatorTable = "departments"
	// DepartmentCreatorInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentCreatorInverseTable = "departments"
	// DepartmentCreatorColumn is the table column denoting the department_creator relation/edge.
	DepartmentCreatorColumn = "created_by"
	// DepartmentUpdatorTable is the table that holds the department_updator relation/edge.
	DepartmentUpdatorTable = "departments"
	// DepartmentUpdatorInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentUpdatorInverseTable = "departments"
	// DepartmentUpdatorColumn is the table column denoting the department_updator relation/edge.
	DepartmentUpdatorColumn = "admin_department_updator"
	// EmployeeCreatorTable is the table that holds the employee_creator relation/edge.
	EmployeeCreatorTable = "employees"
	// EmployeeCreatorInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeCreatorInverseTable = "employees"
	// EmployeeCreatorColumn is the table column denoting the employee_creator relation/edge.
	EmployeeCreatorColumn = "created_by"
	// EmployeeUpdatorTable is the table that holds the employee_updator relation/edge.
	EmployeeUpdatorTable = "employees"
	// EmployeeUpdatorInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeUpdatorInverseTable = "employees"
	// EmployeeUpdatorColumn is the table column denoting the employee_updator relation/edge.
	EmployeeUpdatorColumn = "admin_employee_updator"
	// EmployeeAdminTable is the table that holds the employee_admin relation/edge.
	EmployeeAdminTable = "employees"
	// EmployeeAdminInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeAdminInverseTable = "employees"
	// EmployeeAdminColumn is the table column denoting the employee_admin relation/edge.
	EmployeeAdminColumn = "admin_id"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldDeletedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldUsername,
	FieldPassword,
	FieldName,
}

var (
	// AdminRolesPrimaryKey and AdminRolesColumn2 are the table columns denoting the
	// primary key for the admin_roles relation (M2M).
	AdminRolesPrimaryKey = []string{"admin_role_id", "admin_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Admin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatorField orders the results by updator field.
func ByUpdatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByAdminRolesCount orders the results by admin_roles count.
func ByAdminRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRolesStep(), opts...)
	}
}

// ByAdminRoles orders the results by admin_roles terms.
func ByAdminRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminCreatorCount orders the results by admin_creator count.
func ByAdminCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminCreatorStep(), opts...)
	}
}

// ByAdminCreator orders the results by admin_creator terms.
func ByAdminCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminUpdatorCount orders the results by admin_updator count.
func ByAdminUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminUpdatorStep(), opts...)
	}
}

// ByAdminUpdator orders the results by admin_updator terms.
func ByAdminUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminRoleCreatorCount orders the results by admin_role_creator count.
func ByAdminRoleCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRoleCreatorStep(), opts...)
	}
}

// ByAdminRoleCreator orders the results by admin_role_creator terms.
func ByAdminRoleCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRoleCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminRoleUpdatorCount orders the results by admin_role_updator count.
func ByAdminRoleUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRoleUpdatorStep(), opts...)
	}
}

// ByAdminRoleUpdator orders the results by admin_role_updator terms.
func ByAdminRoleUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRoleUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCreatorCount orders the results by risk_creator count.
func ByRiskCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCreatorStep(), opts...)
	}
}

// ByRiskCreator orders the results by risk_creator terms.
func ByRiskCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskUpdatorCount orders the results by risk_updator count.
func ByRiskUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskUpdatorStep(), opts...)
	}
}

// ByRiskUpdator orders the results by risk_updator terms.
func ByRiskUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskMaintainerCount orders the results by risk_maintainer count.
func ByRiskMaintainerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskMaintainerStep(), opts...)
	}
}

// ByRiskMaintainer orders the results by risk_maintainer terms.
func ByRiskMaintainer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskMaintainerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationCreatorCount orders the results by risk_location_creator count.
func ByRiskLocationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationCreatorStep(), opts...)
	}
}

// ByRiskLocationCreator orders the results by risk_location_creator terms.
func ByRiskLocationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationUpdatorCount orders the results by risk_location_updator count.
func ByRiskLocationUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationUpdatorStep(), opts...)
	}
}

// ByRiskLocationUpdator orders the results by risk_location_updator terms.
func ByRiskLocationUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryCreatorCount orders the results by risk_category_creator count.
func ByRiskCategoryCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryCreatorStep(), opts...)
	}
}

// ByRiskCategoryCreator orders the results by risk_category_creator terms.
func ByRiskCategoryCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryUpdatorCount orders the results by risk_category_updator count.
func ByRiskCategoryUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryUpdatorStep(), opts...)
	}
}

// ByRiskCategoryUpdator orders the results by risk_category_updator terms.
func ByRiskCategoryUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentCreatorCount orders the results by department_creator count.
func ByDepartmentCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentCreatorStep(), opts...)
	}
}

// ByDepartmentCreator orders the results by department_creator terms.
func ByDepartmentCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentUpdatorCount orders the results by department_updator count.
func ByDepartmentUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentUpdatorStep(), opts...)
	}
}

// ByDepartmentUpdator orders the results by department_updator terms.
func ByDepartmentUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeCreatorCount orders the results by employee_creator count.
func ByEmployeeCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeCreatorStep(), opts...)
	}
}

// ByEmployeeCreator orders the results by employee_creator terms.
func ByEmployeeCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeUpdatorCount orders the results by employee_updator count.
func ByEmployeeUpdatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeUpdatorStep(), opts...)
	}
}

// ByEmployeeUpdator orders the results by employee_updator terms.
func ByEmployeeUpdator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeUpdatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeAdminCount orders the results by employee_admin count.
func ByEmployeeAdminCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeAdminStep(), opts...)
	}
}

// ByEmployeeAdmin orders the results by employee_admin terms.
func ByEmployeeAdmin(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeAdminStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdatorTable, UpdatorColumn),
	)
}
func newAdminRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AdminRolesTable, AdminRolesPrimaryKey...),
	)
}
func newAdminCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminCreatorTable, AdminCreatorColumn),
	)
}
func newAdminUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminUpdatorTable, AdminUpdatorColumn),
	)
}
func newAdminRoleCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRoleCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminRoleCreatorTable, AdminRoleCreatorColumn),
	)
}
func newAdminRoleUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRoleUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminRoleUpdatorTable, AdminRoleUpdatorColumn),
	)
}
func newRiskCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorTable, RiskCreatorColumn),
	)
}
func newRiskUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskUpdatorTable, RiskUpdatorColumn),
	)
}
func newRiskMaintainerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskMaintainerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskMaintainerTable, RiskMaintainerColumn),
	)
}
func newRiskLocationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationCreatorTable, RiskLocationCreatorColumn),
	)
}
func newRiskLocationUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationUpdatorTable, RiskLocationUpdatorColumn),
	)
}
func newRiskCategoryCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryCreatorTable, RiskCategoryCreatorColumn),
	)
}
func newRiskCategoryUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryUpdatorTable, RiskCategoryUpdatorColumn),
	)
}
func newDepartmentCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentCreatorTable, DepartmentCreatorColumn),
	)
}
func newDepartmentUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentUpdatorTable, DepartmentUpdatorColumn),
	)
}
func newEmployeeCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeCreatorTable, EmployeeCreatorColumn),
	)
}
func newEmployeeUpdatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeUpdatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeUpdatorTable, EmployeeUpdatorColumn),
	)
}
func newEmployeeAdminStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeAdminInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeAdminTable, EmployeeAdminColumn),
	)
}
