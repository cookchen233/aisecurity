// Code generated by ent, DO NOT EDIT.

package admin

import (
	"aisecurity/enums"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldUpdaterID holds the string denoting the updater_id field in the database.
	FieldUpdaterID = "updater_id"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldAdminStatus holds the string denoting the admin_status field in the database.
	FieldAdminStatus = "admin_status"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdater holds the string denoting the updater edge name in mutations.
	EdgeUpdater = "updater"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// EdgeAdminCreator holds the string denoting the admin_creator edge name in mutations.
	EdgeAdminCreator = "admin_creator"
	// EdgeAdminUpdater holds the string denoting the admin_updater edge name in mutations.
	EdgeAdminUpdater = "admin_updater"
	// EdgePermissionCreator holds the string denoting the permission_creator edge name in mutations.
	EdgePermissionCreator = "permission_creator"
	// EdgePermissionUpdater holds the string denoting the permission_updater edge name in mutations.
	EdgePermissionUpdater = "permission_updater"
	// EdgeRiskCreator holds the string denoting the risk_creator edge name in mutations.
	EdgeRiskCreator = "risk_creator"
	// EdgeRiskUpdater holds the string denoting the risk_updater edge name in mutations.
	EdgeRiskUpdater = "risk_updater"
	// EdgeRiskMaintainer holds the string denoting the risk_maintainer edge name in mutations.
	EdgeRiskMaintainer = "risk_maintainer"
	// EdgeRiskLocationCreator holds the string denoting the risk_location_creator edge name in mutations.
	EdgeRiskLocationCreator = "risk_location_creator"
	// EdgeRiskLocationUpdater holds the string denoting the risk_location_updater edge name in mutations.
	EdgeRiskLocationUpdater = "risk_location_updater"
	// EdgeRiskCategoryCreator holds the string denoting the risk_category_creator edge name in mutations.
	EdgeRiskCategoryCreator = "risk_category_creator"
	// EdgeRiskCategoryUpdater holds the string denoting the risk_category_updater edge name in mutations.
	EdgeRiskCategoryUpdater = "risk_category_updater"
	// EdgeDepartmentCreator holds the string denoting the department_creator edge name in mutations.
	EdgeDepartmentCreator = "department_creator"
	// EdgeDepartmentUpdater holds the string denoting the department_updater edge name in mutations.
	EdgeDepartmentUpdater = "department_updater"
	// EdgeEmployeeCreator holds the string denoting the employee_creator edge name in mutations.
	EdgeEmployeeCreator = "employee_creator"
	// EdgeEmployeeUpdater holds the string denoting the employee_updater edge name in mutations.
	EdgeEmployeeUpdater = "employee_updater"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeOccupationCreator holds the string denoting the occupation_creator edge name in mutations.
	EdgeOccupationCreator = "occupation_creator"
	// EdgeOccupationUpdater holds the string denoting the occupation_updater edge name in mutations.
	EdgeOccupationUpdater = "occupation_updater"
	// EdgeEventCreator holds the string denoting the event_creator edge name in mutations.
	EdgeEventCreator = "event_creator"
	// EdgeEventUpdater holds the string denoting the event_updater edge name in mutations.
	EdgeEventUpdater = "event_updater"
	// EdgeVideoCreator holds the string denoting the video_creator edge name in mutations.
	EdgeVideoCreator = "video_creator"
	// EdgeVideoUpdater holds the string denoting the video_updater edge name in mutations.
	EdgeVideoUpdater = "video_updater"
	// EdgeAreaCreator holds the string denoting the area_creator edge name in mutations.
	EdgeAreaCreator = "area_creator"
	// EdgeAreaUpdater holds the string denoting the area_updater edge name in mutations.
	EdgeAreaUpdater = "area_updater"
	// EdgeDeviceCreator holds the string denoting the device_creator edge name in mutations.
	EdgeDeviceCreator = "device_creator"
	// EdgeDeviceUpdater holds the string denoting the device_updater edge name in mutations.
	EdgeDeviceUpdater = "device_updater"
	// EdgeDeviceInstallationCreator holds the string denoting the device_installation_creator edge name in mutations.
	EdgeDeviceInstallationCreator = "device_installation_creator"
	// EdgeDeviceInstallationUpdater holds the string denoting the device_installation_updater edge name in mutations.
	EdgeDeviceInstallationUpdater = "device_installation_updater"
	// EdgeEventLevelCreator holds the string denoting the event_level_creator edge name in mutations.
	EdgeEventLevelCreator = "event_level_creator"
	// EdgeEventLevelUpdater holds the string denoting the event_level_updater edge name in mutations.
	EdgeEventLevelUpdater = "event_level_updater"
	// EdgeFixingCreator holds the string denoting the fixing_creator edge name in mutations.
	EdgeFixingCreator = "fixing_creator"
	// EdgeFixingUpdater holds the string denoting the fixing_updater edge name in mutations.
	EdgeFixingUpdater = "fixing_updater"
	// EdgeFixer holds the string denoting the fixer edge name in mutations.
	EdgeFixer = "fixer"
	// EdgeEventLogCreator holds the string denoting the event_log_creator edge name in mutations.
	EdgeEventLogCreator = "event_log_creator"
	// EdgeEventLogUpdater holds the string denoting the event_log_updater edge name in mutations.
	EdgeEventLogUpdater = "event_log_updater"
	// EdgeEventLogActor holds the string denoting the event_log_actor edge name in mutations.
	EdgeEventLogActor = "event_log_actor"
	// EdgeEventLogActor2 holds the string denoting the event_log_actor2 edge name in mutations.
	EdgeEventLogActor2 = "event_log_actor2"
	// EdgeSweepCreator holds the string denoting the sweep_creator edge name in mutations.
	EdgeSweepCreator = "sweep_creator"
	// EdgeSweepUpdater holds the string denoting the sweep_updater edge name in mutations.
	EdgeSweepUpdater = "sweep_updater"
	// EdgeSweepScheduleCreator holds the string denoting the sweep_schedule_creator edge name in mutations.
	EdgeSweepScheduleCreator = "sweep_schedule_creator"
	// EdgeSweepScheduleUpdater holds the string denoting the sweep_schedule_updater edge name in mutations.
	EdgeSweepScheduleUpdater = "sweep_schedule_updater"
	// EdgeSweepSchedule holds the string denoting the sweep_schedule edge name in mutations.
	EdgeSweepSchedule = "sweep_schedule"
	// EdgeSweepResultCreator holds the string denoting the sweep_result_creator edge name in mutations.
	EdgeSweepResultCreator = "sweep_result_creator"
	// EdgeSweepResultUpdater holds the string denoting the sweep_result_updater edge name in mutations.
	EdgeSweepResultUpdater = "sweep_result_updater"
	// EdgeSweepResultDetailsCreator holds the string denoting the sweep_result_details_creator edge name in mutations.
	EdgeSweepResultDetailsCreator = "sweep_result_details_creator"
	// EdgeSweepResultDetailsUpdater holds the string denoting the sweep_result_details_updater edge name in mutations.
	EdgeSweepResultDetailsUpdater = "sweep_result_details_updater"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// UpdaterTable is the table that holds the updater relation/edge.
	UpdaterTable = "admins"
	// UpdaterColumn is the table column denoting the updater relation/edge.
	UpdaterColumn = "updater_id"
	// PermissionsTable is the table that holds the permissions relation/edge. The primary key declared below.
	PermissionsTable = "permission_admin"
	// PermissionsInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionsInverseTable = "permissions"
	// AdminCreatorTable is the table that holds the admin_creator relation/edge.
	AdminCreatorTable = "admins"
	// AdminCreatorColumn is the table column denoting the admin_creator relation/edge.
	AdminCreatorColumn = "creator_id"
	// AdminUpdaterTable is the table that holds the admin_updater relation/edge.
	AdminUpdaterTable = "admins"
	// AdminUpdaterColumn is the table column denoting the admin_updater relation/edge.
	AdminUpdaterColumn = "updater_id"
	// PermissionCreatorTable is the table that holds the permission_creator relation/edge.
	PermissionCreatorTable = "permissions"
	// PermissionCreatorInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionCreatorInverseTable = "permissions"
	// PermissionCreatorColumn is the table column denoting the permission_creator relation/edge.
	PermissionCreatorColumn = "creator_id"
	// PermissionUpdaterTable is the table that holds the permission_updater relation/edge.
	PermissionUpdaterTable = "permissions"
	// PermissionUpdaterInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionUpdaterInverseTable = "permissions"
	// PermissionUpdaterColumn is the table column denoting the permission_updater relation/edge.
	PermissionUpdaterColumn = "updater_id"
	// RiskCreatorTable is the table that holds the risk_creator relation/edge.
	RiskCreatorTable = "risks"
	// RiskCreatorInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskCreatorInverseTable = "risks"
	// RiskCreatorColumn is the table column denoting the risk_creator relation/edge.
	RiskCreatorColumn = "creator_id"
	// RiskUpdaterTable is the table that holds the risk_updater relation/edge.
	RiskUpdaterTable = "risks"
	// RiskUpdaterInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskUpdaterInverseTable = "risks"
	// RiskUpdaterColumn is the table column denoting the risk_updater relation/edge.
	RiskUpdaterColumn = "updater_id"
	// RiskMaintainerTable is the table that holds the risk_maintainer relation/edge.
	RiskMaintainerTable = "risks"
	// RiskMaintainerInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskMaintainerInverseTable = "risks"
	// RiskMaintainerColumn is the table column denoting the risk_maintainer relation/edge.
	RiskMaintainerColumn = "maintainer_id"
	// RiskLocationCreatorTable is the table that holds the risk_location_creator relation/edge.
	RiskLocationCreatorTable = "risk_locations"
	// RiskLocationCreatorInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationCreatorInverseTable = "risk_locations"
	// RiskLocationCreatorColumn is the table column denoting the risk_location_creator relation/edge.
	RiskLocationCreatorColumn = "creator_id"
	// RiskLocationUpdaterTable is the table that holds the risk_location_updater relation/edge.
	RiskLocationUpdaterTable = "risk_locations"
	// RiskLocationUpdaterInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationUpdaterInverseTable = "risk_locations"
	// RiskLocationUpdaterColumn is the table column denoting the risk_location_updater relation/edge.
	RiskLocationUpdaterColumn = "updater_id"
	// RiskCategoryCreatorTable is the table that holds the risk_category_creator relation/edge.
	RiskCategoryCreatorTable = "risk_categories"
	// RiskCategoryCreatorInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryCreatorInverseTable = "risk_categories"
	// RiskCategoryCreatorColumn is the table column denoting the risk_category_creator relation/edge.
	RiskCategoryCreatorColumn = "creator_id"
	// RiskCategoryUpdaterTable is the table that holds the risk_category_updater relation/edge.
	RiskCategoryUpdaterTable = "risk_categories"
	// RiskCategoryUpdaterInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryUpdaterInverseTable = "risk_categories"
	// RiskCategoryUpdaterColumn is the table column denoting the risk_category_updater relation/edge.
	RiskCategoryUpdaterColumn = "updater_id"
	// DepartmentCreatorTable is the table that holds the department_creator relation/edge.
	DepartmentCreatorTable = "departments"
	// DepartmentCreatorInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentCreatorInverseTable = "departments"
	// DepartmentCreatorColumn is the table column denoting the department_creator relation/edge.
	DepartmentCreatorColumn = "creator_id"
	// DepartmentUpdaterTable is the table that holds the department_updater relation/edge.
	DepartmentUpdaterTable = "departments"
	// DepartmentUpdaterInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentUpdaterInverseTable = "departments"
	// DepartmentUpdaterColumn is the table column denoting the department_updater relation/edge.
	DepartmentUpdaterColumn = "updater_id"
	// EmployeeCreatorTable is the table that holds the employee_creator relation/edge.
	EmployeeCreatorTable = "employees"
	// EmployeeCreatorInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeCreatorInverseTable = "employees"
	// EmployeeCreatorColumn is the table column denoting the employee_creator relation/edge.
	EmployeeCreatorColumn = "creator_id"
	// EmployeeUpdaterTable is the table that holds the employee_updater relation/edge.
	EmployeeUpdaterTable = "employees"
	// EmployeeUpdaterInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeUpdaterInverseTable = "employees"
	// EmployeeUpdaterColumn is the table column denoting the employee_updater relation/edge.
	EmployeeUpdaterColumn = "updater_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "employees"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "admin_id"
	// OccupationCreatorTable is the table that holds the occupation_creator relation/edge.
	OccupationCreatorTable = "occupations"
	// OccupationCreatorInverseTable is the table name for the Occupation entity.
	// It exists in this package in order to avoid circular dependency with the "occupation" package.
	OccupationCreatorInverseTable = "occupations"
	// OccupationCreatorColumn is the table column denoting the occupation_creator relation/edge.
	OccupationCreatorColumn = "creator_id"
	// OccupationUpdaterTable is the table that holds the occupation_updater relation/edge.
	OccupationUpdaterTable = "occupations"
	// OccupationUpdaterInverseTable is the table name for the Occupation entity.
	// It exists in this package in order to avoid circular dependency with the "occupation" package.
	OccupationUpdaterInverseTable = "occupations"
	// OccupationUpdaterColumn is the table column denoting the occupation_updater relation/edge.
	OccupationUpdaterColumn = "updater_id"
	// EventCreatorTable is the table that holds the event_creator relation/edge.
	EventCreatorTable = "events"
	// EventCreatorInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventCreatorInverseTable = "events"
	// EventCreatorColumn is the table column denoting the event_creator relation/edge.
	EventCreatorColumn = "creator_id"
	// EventUpdaterTable is the table that holds the event_updater relation/edge.
	EventUpdaterTable = "events"
	// EventUpdaterInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventUpdaterInverseTable = "events"
	// EventUpdaterColumn is the table column denoting the event_updater relation/edge.
	EventUpdaterColumn = "updater_id"
	// VideoCreatorTable is the table that holds the video_creator relation/edge.
	VideoCreatorTable = "videos"
	// VideoCreatorInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoCreatorInverseTable = "videos"
	// VideoCreatorColumn is the table column denoting the video_creator relation/edge.
	VideoCreatorColumn = "creator_id"
	// VideoUpdaterTable is the table that holds the video_updater relation/edge.
	VideoUpdaterTable = "videos"
	// VideoUpdaterInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoUpdaterInverseTable = "videos"
	// VideoUpdaterColumn is the table column denoting the video_updater relation/edge.
	VideoUpdaterColumn = "updater_id"
	// AreaCreatorTable is the table that holds the area_creator relation/edge.
	AreaCreatorTable = "areas"
	// AreaCreatorInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaCreatorInverseTable = "areas"
	// AreaCreatorColumn is the table column denoting the area_creator relation/edge.
	AreaCreatorColumn = "creator_id"
	// AreaUpdaterTable is the table that holds the area_updater relation/edge.
	AreaUpdaterTable = "areas"
	// AreaUpdaterInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaUpdaterInverseTable = "areas"
	// AreaUpdaterColumn is the table column denoting the area_updater relation/edge.
	AreaUpdaterColumn = "updater_id"
	// DeviceCreatorTable is the table that holds the device_creator relation/edge.
	DeviceCreatorTable = "devices"
	// DeviceCreatorInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceCreatorInverseTable = "devices"
	// DeviceCreatorColumn is the table column denoting the device_creator relation/edge.
	DeviceCreatorColumn = "creator_id"
	// DeviceUpdaterTable is the table that holds the device_updater relation/edge.
	DeviceUpdaterTable = "devices"
	// DeviceUpdaterInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceUpdaterInverseTable = "devices"
	// DeviceUpdaterColumn is the table column denoting the device_updater relation/edge.
	DeviceUpdaterColumn = "updater_id"
	// DeviceInstallationCreatorTable is the table that holds the device_installation_creator relation/edge.
	DeviceInstallationCreatorTable = "device_installations"
	// DeviceInstallationCreatorInverseTable is the table name for the DeviceInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinstallation" package.
	DeviceInstallationCreatorInverseTable = "device_installations"
	// DeviceInstallationCreatorColumn is the table column denoting the device_installation_creator relation/edge.
	DeviceInstallationCreatorColumn = "creator_id"
	// DeviceInstallationUpdaterTable is the table that holds the device_installation_updater relation/edge.
	DeviceInstallationUpdaterTable = "device_installations"
	// DeviceInstallationUpdaterInverseTable is the table name for the DeviceInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinstallation" package.
	DeviceInstallationUpdaterInverseTable = "device_installations"
	// DeviceInstallationUpdaterColumn is the table column denoting the device_installation_updater relation/edge.
	DeviceInstallationUpdaterColumn = "updater_id"
	// EventLevelCreatorTable is the table that holds the event_level_creator relation/edge.
	EventLevelCreatorTable = "event_levels"
	// EventLevelCreatorInverseTable is the table name for the EventLevel entity.
	// It exists in this package in order to avoid circular dependency with the "eventlevel" package.
	EventLevelCreatorInverseTable = "event_levels"
	// EventLevelCreatorColumn is the table column denoting the event_level_creator relation/edge.
	EventLevelCreatorColumn = "creator_id"
	// EventLevelUpdaterTable is the table that holds the event_level_updater relation/edge.
	EventLevelUpdaterTable = "event_levels"
	// EventLevelUpdaterInverseTable is the table name for the EventLevel entity.
	// It exists in this package in order to avoid circular dependency with the "eventlevel" package.
	EventLevelUpdaterInverseTable = "event_levels"
	// EventLevelUpdaterColumn is the table column denoting the event_level_updater relation/edge.
	EventLevelUpdaterColumn = "updater_id"
	// FixingCreatorTable is the table that holds the fixing_creator relation/edge.
	FixingCreatorTable = "fixings"
	// FixingCreatorInverseTable is the table name for the Fixing entity.
	// It exists in this package in order to avoid circular dependency with the "fixing" package.
	FixingCreatorInverseTable = "fixings"
	// FixingCreatorColumn is the table column denoting the fixing_creator relation/edge.
	FixingCreatorColumn = "creator_id"
	// FixingUpdaterTable is the table that holds the fixing_updater relation/edge.
	FixingUpdaterTable = "fixings"
	// FixingUpdaterInverseTable is the table name for the Fixing entity.
	// It exists in this package in order to avoid circular dependency with the "fixing" package.
	FixingUpdaterInverseTable = "fixings"
	// FixingUpdaterColumn is the table column denoting the fixing_updater relation/edge.
	FixingUpdaterColumn = "updater_id"
	// FixerTable is the table that holds the fixer relation/edge.
	FixerTable = "fixings"
	// FixerInverseTable is the table name for the Fixing entity.
	// It exists in this package in order to avoid circular dependency with the "fixing" package.
	FixerInverseTable = "fixings"
	// FixerColumn is the table column denoting the fixer relation/edge.
	FixerColumn = "fixer_id"
	// EventLogCreatorTable is the table that holds the event_log_creator relation/edge.
	EventLogCreatorTable = "event_logs"
	// EventLogCreatorInverseTable is the table name for the EventLog entity.
	// It exists in this package in order to avoid circular dependency with the "eventlog" package.
	EventLogCreatorInverseTable = "event_logs"
	// EventLogCreatorColumn is the table column denoting the event_log_creator relation/edge.
	EventLogCreatorColumn = "creator_id"
	// EventLogUpdaterTable is the table that holds the event_log_updater relation/edge.
	EventLogUpdaterTable = "event_logs"
	// EventLogUpdaterInverseTable is the table name for the EventLog entity.
	// It exists in this package in order to avoid circular dependency with the "eventlog" package.
	EventLogUpdaterInverseTable = "event_logs"
	// EventLogUpdaterColumn is the table column denoting the event_log_updater relation/edge.
	EventLogUpdaterColumn = "updater_id"
	// EventLogActorTable is the table that holds the event_log_actor relation/edge.
	EventLogActorTable = "event_logs"
	// EventLogActorInverseTable is the table name for the EventLog entity.
	// It exists in this package in order to avoid circular dependency with the "eventlog" package.
	EventLogActorInverseTable = "event_logs"
	// EventLogActorColumn is the table column denoting the event_log_actor relation/edge.
	EventLogActorColumn = "actor_id"
	// EventLogActor2Table is the table that holds the event_log_actor2 relation/edge.
	EventLogActor2Table = "event_logs"
	// EventLogActor2InverseTable is the table name for the EventLog entity.
	// It exists in this package in order to avoid circular dependency with the "eventlog" package.
	EventLogActor2InverseTable = "event_logs"
	// EventLogActor2Column is the table column denoting the event_log_actor2 relation/edge.
	EventLogActor2Column = "actor2_id"
	// SweepCreatorTable is the table that holds the sweep_creator relation/edge.
	SweepCreatorTable = "sweeps"
	// SweepCreatorInverseTable is the table name for the Sweep entity.
	// It exists in this package in order to avoid circular dependency with the "sweep" package.
	SweepCreatorInverseTable = "sweeps"
	// SweepCreatorColumn is the table column denoting the sweep_creator relation/edge.
	SweepCreatorColumn = "creator_id"
	// SweepUpdaterTable is the table that holds the sweep_updater relation/edge.
	SweepUpdaterTable = "sweeps"
	// SweepUpdaterInverseTable is the table name for the Sweep entity.
	// It exists in this package in order to avoid circular dependency with the "sweep" package.
	SweepUpdaterInverseTable = "sweeps"
	// SweepUpdaterColumn is the table column denoting the sweep_updater relation/edge.
	SweepUpdaterColumn = "updater_id"
	// SweepScheduleCreatorTable is the table that holds the sweep_schedule_creator relation/edge.
	SweepScheduleCreatorTable = "sweep_schedules"
	// SweepScheduleCreatorInverseTable is the table name for the SweepSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "sweepschedule" package.
	SweepScheduleCreatorInverseTable = "sweep_schedules"
	// SweepScheduleCreatorColumn is the table column denoting the sweep_schedule_creator relation/edge.
	SweepScheduleCreatorColumn = "creator_id"
	// SweepScheduleUpdaterTable is the table that holds the sweep_schedule_updater relation/edge.
	SweepScheduleUpdaterTable = "sweep_schedules"
	// SweepScheduleUpdaterInverseTable is the table name for the SweepSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "sweepschedule" package.
	SweepScheduleUpdaterInverseTable = "sweep_schedules"
	// SweepScheduleUpdaterColumn is the table column denoting the sweep_schedule_updater relation/edge.
	SweepScheduleUpdaterColumn = "updater_id"
	// SweepScheduleTable is the table that holds the sweep_schedule relation/edge. The primary key declared below.
	SweepScheduleTable = "admin_sweep_schedule"
	// SweepScheduleInverseTable is the table name for the SweepSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "sweepschedule" package.
	SweepScheduleInverseTable = "sweep_schedules"
	// SweepResultCreatorTable is the table that holds the sweep_result_creator relation/edge.
	SweepResultCreatorTable = "sweep_results"
	// SweepResultCreatorInverseTable is the table name for the SweepResult entity.
	// It exists in this package in order to avoid circular dependency with the "sweepresult" package.
	SweepResultCreatorInverseTable = "sweep_results"
	// SweepResultCreatorColumn is the table column denoting the sweep_result_creator relation/edge.
	SweepResultCreatorColumn = "creator_id"
	// SweepResultUpdaterTable is the table that holds the sweep_result_updater relation/edge.
	SweepResultUpdaterTable = "sweep_results"
	// SweepResultUpdaterInverseTable is the table name for the SweepResult entity.
	// It exists in this package in order to avoid circular dependency with the "sweepresult" package.
	SweepResultUpdaterInverseTable = "sweep_results"
	// SweepResultUpdaterColumn is the table column denoting the sweep_result_updater relation/edge.
	SweepResultUpdaterColumn = "updater_id"
	// SweepResultDetailsCreatorTable is the table that holds the sweep_result_details_creator relation/edge.
	SweepResultDetailsCreatorTable = "sweep_result_details"
	// SweepResultDetailsCreatorInverseTable is the table name for the SweepResultDetails entity.
	// It exists in this package in order to avoid circular dependency with the "sweepresultdetails" package.
	SweepResultDetailsCreatorInverseTable = "sweep_result_details"
	// SweepResultDetailsCreatorColumn is the table column denoting the sweep_result_details_creator relation/edge.
	SweepResultDetailsCreatorColumn = "creator_id"
	// SweepResultDetailsUpdaterTable is the table that holds the sweep_result_details_updater relation/edge.
	SweepResultDetailsUpdaterTable = "sweep_result_details"
	// SweepResultDetailsUpdaterInverseTable is the table name for the SweepResultDetails entity.
	// It exists in this package in order to avoid circular dependency with the "sweepresultdetails" package.
	SweepResultDetailsUpdaterInverseTable = "sweep_result_details"
	// SweepResultDetailsUpdaterColumn is the table column denoting the sweep_result_details_updater relation/edge.
	SweepResultDetailsUpdaterColumn = "updater_id"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreatorID,
	FieldDeleteTime,
	FieldUpdaterID,
	FieldUpdateTime,
	FieldUsername,
	FieldPassword,
	FieldNickname,
	FieldRealName,
	FieldMobile,
	FieldAvatar,
	FieldAdminStatus,
}

var (
	// PermissionsPrimaryKey and PermissionsColumn2 are the table columns denoting the
	// primary key for the permissions relation (M2M).
	PermissionsPrimaryKey = []string{"permission_id", "admin_id"}
	// SweepSchedulePrimaryKey and SweepScheduleColumn2 are the table columns denoting the
	// primary key for the sweep_schedule relation (M2M).
	SweepSchedulePrimaryKey = []string{"admin_id", "sweep_schedule_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(int) error
	// UpdaterIDValidator is a validator for the "updater_id" field. It is called by the builders before save.
	UpdaterIDValidator func(int) error
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
	// RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	RealNameValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// DefaultAdminStatus holds the default value on creation for the "admin_status" field.
	DefaultAdminStatus enums.AdminStatus
	// AdminStatusValidator is a validator for the "admin_status" field. It is called by the builders before save.
	AdminStatusValidator func(int) error
)

// OrderOption defines the ordering options for the Admin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByUpdaterID orders the results by the updater_id field.
func ByUpdaterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdaterID, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByRealName orders the results by the real_name field.
func ByRealName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealName, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByAdminStatus orders the results by the admin_status field.
func ByAdminStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdminStatus, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdaterField orders the results by updater field.
func ByUpdaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdaterStep(), sql.OrderByField(field, opts...))
	}
}

// ByPermissionsCount orders the results by permissions count.
func ByPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionsStep(), opts...)
	}
}

// ByPermissions orders the results by permissions terms.
func ByPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminCreatorCount orders the results by admin_creator count.
func ByAdminCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminCreatorStep(), opts...)
	}
}

// ByAdminCreator orders the results by admin_creator terms.
func ByAdminCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminUpdaterCount orders the results by admin_updater count.
func ByAdminUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminUpdaterStep(), opts...)
	}
}

// ByAdminUpdater orders the results by admin_updater terms.
func ByAdminUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPermissionCreatorCount orders the results by permission_creator count.
func ByPermissionCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionCreatorStep(), opts...)
	}
}

// ByPermissionCreator orders the results by permission_creator terms.
func ByPermissionCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPermissionUpdaterCount orders the results by permission_updater count.
func ByPermissionUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionUpdaterStep(), opts...)
	}
}

// ByPermissionUpdater orders the results by permission_updater terms.
func ByPermissionUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCreatorCount orders the results by risk_creator count.
func ByRiskCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCreatorStep(), opts...)
	}
}

// ByRiskCreator orders the results by risk_creator terms.
func ByRiskCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskUpdaterCount orders the results by risk_updater count.
func ByRiskUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskUpdaterStep(), opts...)
	}
}

// ByRiskUpdater orders the results by risk_updater terms.
func ByRiskUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskMaintainerCount orders the results by risk_maintainer count.
func ByRiskMaintainerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskMaintainerStep(), opts...)
	}
}

// ByRiskMaintainer orders the results by risk_maintainer terms.
func ByRiskMaintainer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskMaintainerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationCreatorCount orders the results by risk_location_creator count.
func ByRiskLocationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationCreatorStep(), opts...)
	}
}

// ByRiskLocationCreator orders the results by risk_location_creator terms.
func ByRiskLocationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationUpdaterCount orders the results by risk_location_updater count.
func ByRiskLocationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationUpdaterStep(), opts...)
	}
}

// ByRiskLocationUpdater orders the results by risk_location_updater terms.
func ByRiskLocationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryCreatorCount orders the results by risk_category_creator count.
func ByRiskCategoryCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryCreatorStep(), opts...)
	}
}

// ByRiskCategoryCreator orders the results by risk_category_creator terms.
func ByRiskCategoryCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryUpdaterCount orders the results by risk_category_updater count.
func ByRiskCategoryUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryUpdaterStep(), opts...)
	}
}

// ByRiskCategoryUpdater orders the results by risk_category_updater terms.
func ByRiskCategoryUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentCreatorCount orders the results by department_creator count.
func ByDepartmentCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentCreatorStep(), opts...)
	}
}

// ByDepartmentCreator orders the results by department_creator terms.
func ByDepartmentCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentUpdaterCount orders the results by department_updater count.
func ByDepartmentUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentUpdaterStep(), opts...)
	}
}

// ByDepartmentUpdater orders the results by department_updater terms.
func ByDepartmentUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeCreatorCount orders the results by employee_creator count.
func ByEmployeeCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeCreatorStep(), opts...)
	}
}

// ByEmployeeCreator orders the results by employee_creator terms.
func ByEmployeeCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeUpdaterCount orders the results by employee_updater count.
func ByEmployeeUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeUpdaterStep(), opts...)
	}
}

// ByEmployeeUpdater orders the results by employee_updater terms.
func ByEmployeeUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByOccupationCreatorCount orders the results by occupation_creator count.
func ByOccupationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccupationCreatorStep(), opts...)
	}
}

// ByOccupationCreator orders the results by occupation_creator terms.
func ByOccupationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccupationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOccupationUpdaterCount orders the results by occupation_updater count.
func ByOccupationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccupationUpdaterStep(), opts...)
	}
}

// ByOccupationUpdater orders the results by occupation_updater terms.
func ByOccupationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccupationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventCreatorCount orders the results by event_creator count.
func ByEventCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventCreatorStep(), opts...)
	}
}

// ByEventCreator orders the results by event_creator terms.
func ByEventCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventUpdaterCount orders the results by event_updater count.
func ByEventUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventUpdaterStep(), opts...)
	}
}

// ByEventUpdater orders the results by event_updater terms.
func ByEventUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVideoCreatorCount orders the results by video_creator count.
func ByVideoCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoCreatorStep(), opts...)
	}
}

// ByVideoCreator orders the results by video_creator terms.
func ByVideoCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVideoUpdaterCount orders the results by video_updater count.
func ByVideoUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoUpdaterStep(), opts...)
	}
}

// ByVideoUpdater orders the results by video_updater terms.
func ByVideoUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAreaCreatorCount orders the results by area_creator count.
func ByAreaCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAreaCreatorStep(), opts...)
	}
}

// ByAreaCreator orders the results by area_creator terms.
func ByAreaCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAreaUpdaterCount orders the results by area_updater count.
func ByAreaUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAreaUpdaterStep(), opts...)
	}
}

// ByAreaUpdater orders the results by area_updater terms.
func ByAreaUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceCreatorCount orders the results by device_creator count.
func ByDeviceCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceCreatorStep(), opts...)
	}
}

// ByDeviceCreator orders the results by device_creator terms.
func ByDeviceCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceUpdaterCount orders the results by device_updater count.
func ByDeviceUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceUpdaterStep(), opts...)
	}
}

// ByDeviceUpdater orders the results by device_updater terms.
func ByDeviceUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInstallationCreatorCount orders the results by device_installation_creator count.
func ByDeviceInstallationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInstallationCreatorStep(), opts...)
	}
}

// ByDeviceInstallationCreator orders the results by device_installation_creator terms.
func ByDeviceInstallationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInstallationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInstallationUpdaterCount orders the results by device_installation_updater count.
func ByDeviceInstallationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInstallationUpdaterStep(), opts...)
	}
}

// ByDeviceInstallationUpdater orders the results by device_installation_updater terms.
func ByDeviceInstallationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInstallationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLevelCreatorCount orders the results by event_level_creator count.
func ByEventLevelCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLevelCreatorStep(), opts...)
	}
}

// ByEventLevelCreator orders the results by event_level_creator terms.
func ByEventLevelCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLevelCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLevelUpdaterCount orders the results by event_level_updater count.
func ByEventLevelUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLevelUpdaterStep(), opts...)
	}
}

// ByEventLevelUpdater orders the results by event_level_updater terms.
func ByEventLevelUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLevelUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFixingCreatorCount orders the results by fixing_creator count.
func ByFixingCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFixingCreatorStep(), opts...)
	}
}

// ByFixingCreator orders the results by fixing_creator terms.
func ByFixingCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFixingCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFixingUpdaterCount orders the results by fixing_updater count.
func ByFixingUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFixingUpdaterStep(), opts...)
	}
}

// ByFixingUpdater orders the results by fixing_updater terms.
func ByFixingUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFixingUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFixerCount orders the results by fixer count.
func ByFixerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFixerStep(), opts...)
	}
}

// ByFixer orders the results by fixer terms.
func ByFixer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFixerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLogCreatorCount orders the results by event_log_creator count.
func ByEventLogCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLogCreatorStep(), opts...)
	}
}

// ByEventLogCreator orders the results by event_log_creator terms.
func ByEventLogCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLogCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLogUpdaterCount orders the results by event_log_updater count.
func ByEventLogUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLogUpdaterStep(), opts...)
	}
}

// ByEventLogUpdater orders the results by event_log_updater terms.
func ByEventLogUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLogUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLogActorCount orders the results by event_log_actor count.
func ByEventLogActorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLogActorStep(), opts...)
	}
}

// ByEventLogActor orders the results by event_log_actor terms.
func ByEventLogActor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLogActorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLogActor2Count orders the results by event_log_actor2 count.
func ByEventLogActor2Count(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLogActor2Step(), opts...)
	}
}

// ByEventLogActor2 orders the results by event_log_actor2 terms.
func ByEventLogActor2(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLogActor2Step(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepCreatorCount orders the results by sweep_creator count.
func BySweepCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepCreatorStep(), opts...)
	}
}

// BySweepCreator orders the results by sweep_creator terms.
func BySweepCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepUpdaterCount orders the results by sweep_updater count.
func BySweepUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepUpdaterStep(), opts...)
	}
}

// BySweepUpdater orders the results by sweep_updater terms.
func BySweepUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepScheduleCreatorCount orders the results by sweep_schedule_creator count.
func BySweepScheduleCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepScheduleCreatorStep(), opts...)
	}
}

// BySweepScheduleCreator orders the results by sweep_schedule_creator terms.
func BySweepScheduleCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepScheduleCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepScheduleUpdaterCount orders the results by sweep_schedule_updater count.
func BySweepScheduleUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepScheduleUpdaterStep(), opts...)
	}
}

// BySweepScheduleUpdater orders the results by sweep_schedule_updater terms.
func BySweepScheduleUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepScheduleUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepScheduleCount orders the results by sweep_schedule count.
func BySweepScheduleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepScheduleStep(), opts...)
	}
}

// BySweepSchedule orders the results by sweep_schedule terms.
func BySweepSchedule(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepScheduleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepResultCreatorCount orders the results by sweep_result_creator count.
func BySweepResultCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepResultCreatorStep(), opts...)
	}
}

// BySweepResultCreator orders the results by sweep_result_creator terms.
func BySweepResultCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepResultCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepResultUpdaterCount orders the results by sweep_result_updater count.
func BySweepResultUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepResultUpdaterStep(), opts...)
	}
}

// BySweepResultUpdater orders the results by sweep_result_updater terms.
func BySweepResultUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepResultUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepResultDetailsCreatorCount orders the results by sweep_result_details_creator count.
func BySweepResultDetailsCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepResultDetailsCreatorStep(), opts...)
	}
}

// BySweepResultDetailsCreator orders the results by sweep_result_details_creator terms.
func BySweepResultDetailsCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepResultDetailsCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySweepResultDetailsUpdaterCount orders the results by sweep_result_details_updater count.
func BySweepResultDetailsUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSweepResultDetailsUpdaterStep(), opts...)
	}
}

// BySweepResultDetailsUpdater orders the results by sweep_result_details_updater terms.
func BySweepResultDetailsUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSweepResultDetailsUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
	)
}
func newPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PermissionsTable, PermissionsPrimaryKey...),
	)
}
func newAdminCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminCreatorTable, AdminCreatorColumn),
	)
}
func newAdminUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminUpdaterTable, AdminUpdaterColumn),
	)
}
func newPermissionCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PermissionCreatorTable, PermissionCreatorColumn),
	)
}
func newPermissionUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PermissionUpdaterTable, PermissionUpdaterColumn),
	)
}
func newRiskCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorTable, RiskCreatorColumn),
	)
}
func newRiskUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskUpdaterTable, RiskUpdaterColumn),
	)
}
func newRiskMaintainerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskMaintainerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskMaintainerTable, RiskMaintainerColumn),
	)
}
func newRiskLocationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationCreatorTable, RiskLocationCreatorColumn),
	)
}
func newRiskLocationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationUpdaterTable, RiskLocationUpdaterColumn),
	)
}
func newRiskCategoryCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryCreatorTable, RiskCategoryCreatorColumn),
	)
}
func newRiskCategoryUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryUpdaterTable, RiskCategoryUpdaterColumn),
	)
}
func newDepartmentCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentCreatorTable, DepartmentCreatorColumn),
	)
}
func newDepartmentUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentUpdaterTable, DepartmentUpdaterColumn),
	)
}
func newEmployeeCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeCreatorTable, EmployeeCreatorColumn),
	)
}
func newEmployeeUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeUpdaterTable, EmployeeUpdaterColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmployeeTable, EmployeeColumn),
	)
}
func newOccupationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccupationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OccupationCreatorTable, OccupationCreatorColumn),
	)
}
func newOccupationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccupationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OccupationUpdaterTable, OccupationUpdaterColumn),
	)
}
func newEventCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventCreatorTable, EventCreatorColumn),
	)
}
func newEventUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventUpdaterTable, EventUpdaterColumn),
	)
}
func newVideoCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VideoCreatorTable, VideoCreatorColumn),
	)
}
func newVideoUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VideoUpdaterTable, VideoUpdaterColumn),
	)
}
func newAreaCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AreaCreatorTable, AreaCreatorColumn),
	)
}
func newAreaUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AreaUpdaterTable, AreaUpdaterColumn),
	)
}
func newDeviceCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceCreatorTable, DeviceCreatorColumn),
	)
}
func newDeviceUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceUpdaterTable, DeviceUpdaterColumn),
	)
}
func newDeviceInstallationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInstallationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationCreatorTable, DeviceInstallationCreatorColumn),
	)
}
func newDeviceInstallationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInstallationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationUpdaterTable, DeviceInstallationUpdaterColumn),
	)
}
func newEventLevelCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLevelCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLevelCreatorTable, EventLevelCreatorColumn),
	)
}
func newEventLevelUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLevelUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLevelUpdaterTable, EventLevelUpdaterColumn),
	)
}
func newFixingCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FixingCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FixingCreatorTable, FixingCreatorColumn),
	)
}
func newFixingUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FixingUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FixingUpdaterTable, FixingUpdaterColumn),
	)
}
func newFixerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FixerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FixerTable, FixerColumn),
	)
}
func newEventLogCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLogCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLogCreatorTable, EventLogCreatorColumn),
	)
}
func newEventLogUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLogUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLogUpdaterTable, EventLogUpdaterColumn),
	)
}
func newEventLogActorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLogActorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLogActorTable, EventLogActorColumn),
	)
}
func newEventLogActor2Step() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLogActor2InverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLogActor2Table, EventLogActor2Column),
	)
}
func newSweepCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepCreatorTable, SweepCreatorColumn),
	)
}
func newSweepUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepUpdaterTable, SweepUpdaterColumn),
	)
}
func newSweepScheduleCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepScheduleCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepScheduleCreatorTable, SweepScheduleCreatorColumn),
	)
}
func newSweepScheduleUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepScheduleUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepScheduleUpdaterTable, SweepScheduleUpdaterColumn),
	)
}
func newSweepScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SweepScheduleTable, SweepSchedulePrimaryKey...),
	)
}
func newSweepResultCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepResultCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepResultCreatorTable, SweepResultCreatorColumn),
	)
}
func newSweepResultUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepResultUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepResultUpdaterTable, SweepResultUpdaterColumn),
	)
}
func newSweepResultDetailsCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepResultDetailsCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepResultDetailsCreatorTable, SweepResultDetailsCreatorColumn),
	)
}
func newSweepResultDetailsUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SweepResultDetailsUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SweepResultDetailsUpdaterTable, SweepResultDetailsUpdaterColumn),
	)
}
