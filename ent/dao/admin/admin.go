// Code generated by ent, DO NOT EDIT.

package admin

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdater holds the string denoting the updater edge name in mutations.
	EdgeUpdater = "updater"
	// EdgeAdminRoles holds the string denoting the admin_roles edge name in mutations.
	EdgeAdminRoles = "admin_roles"
	// EdgeAdminCreator holds the string denoting the admin_creator edge name in mutations.
	EdgeAdminCreator = "admin_creator"
	// EdgeAdminUpdater holds the string denoting the admin_updater edge name in mutations.
	EdgeAdminUpdater = "admin_updater"
	// EdgeAdminRoleCreator holds the string denoting the admin_role_creator edge name in mutations.
	EdgeAdminRoleCreator = "admin_role_creator"
	// EdgeAdminRoleUpdater holds the string denoting the admin_role_updater edge name in mutations.
	EdgeAdminRoleUpdater = "admin_role_updater"
	// EdgeRiskCreator holds the string denoting the risk_creator edge name in mutations.
	EdgeRiskCreator = "risk_creator"
	// EdgeRiskUpdater holds the string denoting the risk_updater edge name in mutations.
	EdgeRiskUpdater = "risk_updater"
	// EdgeRiskLocationCreator holds the string denoting the risk_location_creator edge name in mutations.
	EdgeRiskLocationCreator = "risk_location_creator"
	// EdgeRiskLocationUpdater holds the string denoting the risk_location_updater edge name in mutations.
	EdgeRiskLocationUpdater = "risk_location_updater"
	// EdgeRiskCategoryCreator holds the string denoting the risk_category_creator edge name in mutations.
	EdgeRiskCategoryCreator = "risk_category_creator"
	// EdgeRiskCategoryUpdater holds the string denoting the risk_category_updater edge name in mutations.
	EdgeRiskCategoryUpdater = "risk_category_updater"
	// EdgeDepartmentCreator holds the string denoting the department_creator edge name in mutations.
	EdgeDepartmentCreator = "department_creator"
	// EdgeDepartmentUpdater holds the string denoting the department_updater edge name in mutations.
	EdgeDepartmentUpdater = "department_updater"
	// EdgeEmployeeCreator holds the string denoting the employee_creator edge name in mutations.
	EdgeEmployeeCreator = "employee_creator"
	// EdgeEmployeeUpdater holds the string denoting the employee_updater edge name in mutations.
	EdgeEmployeeUpdater = "employee_updater"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeOccupationCreator holds the string denoting the occupation_creator edge name in mutations.
	EdgeOccupationCreator = "occupation_creator"
	// EdgeOccupationUpdater holds the string denoting the occupation_updater edge name in mutations.
	EdgeOccupationUpdater = "occupation_updater"
	// EdgeIpcEventCreator holds the string denoting the ipc_event_creator edge name in mutations.
	EdgeIpcEventCreator = "ipc_event_creator"
	// EdgeIpcEventUpdater holds the string denoting the ipc_event_updater edge name in mutations.
	EdgeIpcEventUpdater = "ipc_event_updater"
	// EdgeVideoCreator holds the string denoting the video_creator edge name in mutations.
	EdgeVideoCreator = "video_creator"
	// EdgeVideoUpdater holds the string denoting the video_updater edge name in mutations.
	EdgeVideoUpdater = "video_updater"
	// EdgeAreaCreator holds the string denoting the area_creator edge name in mutations.
	EdgeAreaCreator = "area_creator"
	// EdgeAreaUpdater holds the string denoting the area_updater edge name in mutations.
	EdgeAreaUpdater = "area_updater"
	// EdgeDeviceCreator holds the string denoting the device_creator edge name in mutations.
	EdgeDeviceCreator = "device_creator"
	// EdgeDeviceUpdater holds the string denoting the device_updater edge name in mutations.
	EdgeDeviceUpdater = "device_updater"
	// EdgeDeviceInstallationCreator holds the string denoting the device_installation_creator edge name in mutations.
	EdgeDeviceInstallationCreator = "device_installation_creator"
	// EdgeDeviceInstallationUpdater holds the string denoting the device_installation_updater edge name in mutations.
	EdgeDeviceInstallationUpdater = "device_installation_updater"
	// EdgeEventLevelCreator holds the string denoting the event_level_creator edge name in mutations.
	EdgeEventLevelCreator = "event_level_creator"
	// EdgeEventLevelUpdater holds the string denoting the event_level_updater edge name in mutations.
	EdgeEventLevelUpdater = "event_level_updater"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// UpdaterTable is the table that holds the updater relation/edge.
	UpdaterTable = "admins"
	// UpdaterColumn is the table column denoting the updater relation/edge.
	UpdaterColumn = "updated_by"
	// AdminRolesTable is the table that holds the admin_roles relation/edge. The primary key declared below.
	AdminRolesTable = "admin_role_admins"
	// AdminRolesInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRolesInverseTable = "admin_roles"
	// AdminCreatorTable is the table that holds the admin_creator relation/edge.
	AdminCreatorTable = "admins"
	// AdminCreatorColumn is the table column denoting the admin_creator relation/edge.
	AdminCreatorColumn = "created_by"
	// AdminUpdaterTable is the table that holds the admin_updater relation/edge.
	AdminUpdaterTable = "admins"
	// AdminUpdaterColumn is the table column denoting the admin_updater relation/edge.
	AdminUpdaterColumn = "updated_by"
	// AdminRoleCreatorTable is the table that holds the admin_role_creator relation/edge.
	AdminRoleCreatorTable = "admin_roles"
	// AdminRoleCreatorInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRoleCreatorInverseTable = "admin_roles"
	// AdminRoleCreatorColumn is the table column denoting the admin_role_creator relation/edge.
	AdminRoleCreatorColumn = "created_by"
	// AdminRoleUpdaterTable is the table that holds the admin_role_updater relation/edge.
	AdminRoleUpdaterTable = "admin_roles"
	// AdminRoleUpdaterInverseTable is the table name for the AdminRole entity.
	// It exists in this package in order to avoid circular dependency with the "adminrole" package.
	AdminRoleUpdaterInverseTable = "admin_roles"
	// AdminRoleUpdaterColumn is the table column denoting the admin_role_updater relation/edge.
	AdminRoleUpdaterColumn = "updated_by"
	// RiskCreatorTable is the table that holds the risk_creator relation/edge.
	RiskCreatorTable = "risks"
	// RiskCreatorInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskCreatorInverseTable = "risks"
	// RiskCreatorColumn is the table column denoting the risk_creator relation/edge.
	RiskCreatorColumn = "created_by"
	// RiskUpdaterTable is the table that holds the risk_updater relation/edge.
	RiskUpdaterTable = "risks"
	// RiskUpdaterInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskUpdaterInverseTable = "risks"
	// RiskUpdaterColumn is the table column denoting the risk_updater relation/edge.
	RiskUpdaterColumn = "updated_by"
	// RiskLocationCreatorTable is the table that holds the risk_location_creator relation/edge.
	RiskLocationCreatorTable = "risk_locations"
	// RiskLocationCreatorInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationCreatorInverseTable = "risk_locations"
	// RiskLocationCreatorColumn is the table column denoting the risk_location_creator relation/edge.
	RiskLocationCreatorColumn = "created_by"
	// RiskLocationUpdaterTable is the table that holds the risk_location_updater relation/edge.
	RiskLocationUpdaterTable = "risk_locations"
	// RiskLocationUpdaterInverseTable is the table name for the RiskLocation entity.
	// It exists in this package in order to avoid circular dependency with the "risklocation" package.
	RiskLocationUpdaterInverseTable = "risk_locations"
	// RiskLocationUpdaterColumn is the table column denoting the risk_location_updater relation/edge.
	RiskLocationUpdaterColumn = "updated_by"
	// RiskCategoryCreatorTable is the table that holds the risk_category_creator relation/edge.
	RiskCategoryCreatorTable = "risk_categories"
	// RiskCategoryCreatorInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryCreatorInverseTable = "risk_categories"
	// RiskCategoryCreatorColumn is the table column denoting the risk_category_creator relation/edge.
	RiskCategoryCreatorColumn = "created_by"
	// RiskCategoryUpdaterTable is the table that holds the risk_category_updater relation/edge.
	RiskCategoryUpdaterTable = "risk_categories"
	// RiskCategoryUpdaterInverseTable is the table name for the RiskCategory entity.
	// It exists in this package in order to avoid circular dependency with the "riskcategory" package.
	RiskCategoryUpdaterInverseTable = "risk_categories"
	// RiskCategoryUpdaterColumn is the table column denoting the risk_category_updater relation/edge.
	RiskCategoryUpdaterColumn = "updated_by"
	// DepartmentCreatorTable is the table that holds the department_creator relation/edge.
	DepartmentCreatorTable = "departments"
	// DepartmentCreatorInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentCreatorInverseTable = "departments"
	// DepartmentCreatorColumn is the table column denoting the department_creator relation/edge.
	DepartmentCreatorColumn = "created_by"
	// DepartmentUpdaterTable is the table that holds the department_updater relation/edge.
	DepartmentUpdaterTable = "departments"
	// DepartmentUpdaterInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentUpdaterInverseTable = "departments"
	// DepartmentUpdaterColumn is the table column denoting the department_updater relation/edge.
	DepartmentUpdaterColumn = "updated_by"
	// EmployeeCreatorTable is the table that holds the employee_creator relation/edge.
	EmployeeCreatorTable = "employees"
	// EmployeeCreatorInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeCreatorInverseTable = "employees"
	// EmployeeCreatorColumn is the table column denoting the employee_creator relation/edge.
	EmployeeCreatorColumn = "created_by"
	// EmployeeUpdaterTable is the table that holds the employee_updater relation/edge.
	EmployeeUpdaterTable = "employees"
	// EmployeeUpdaterInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeUpdaterInverseTable = "employees"
	// EmployeeUpdaterColumn is the table column denoting the employee_updater relation/edge.
	EmployeeUpdaterColumn = "updated_by"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "employees"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "admin_id"
	// OccupationCreatorTable is the table that holds the occupation_creator relation/edge.
	OccupationCreatorTable = "occupations"
	// OccupationCreatorInverseTable is the table name for the Occupation entity.
	// It exists in this package in order to avoid circular dependency with the "occupation" package.
	OccupationCreatorInverseTable = "occupations"
	// OccupationCreatorColumn is the table column denoting the occupation_creator relation/edge.
	OccupationCreatorColumn = "created_by"
	// OccupationUpdaterTable is the table that holds the occupation_updater relation/edge.
	OccupationUpdaterTable = "occupations"
	// OccupationUpdaterInverseTable is the table name for the Occupation entity.
	// It exists in this package in order to avoid circular dependency with the "occupation" package.
	OccupationUpdaterInverseTable = "occupations"
	// OccupationUpdaterColumn is the table column denoting the occupation_updater relation/edge.
	OccupationUpdaterColumn = "updated_by"
	// IpcEventCreatorTable is the table that holds the ipc_event_creator relation/edge.
	IpcEventCreatorTable = "ipc_events"
	// IpcEventCreatorInverseTable is the table name for the IPCEvent entity.
	// It exists in this package in order to avoid circular dependency with the "ipcevent" package.
	IpcEventCreatorInverseTable = "ipc_events"
	// IpcEventCreatorColumn is the table column denoting the ipc_event_creator relation/edge.
	IpcEventCreatorColumn = "created_by"
	// IpcEventUpdaterTable is the table that holds the ipc_event_updater relation/edge.
	IpcEventUpdaterTable = "ipc_events"
	// IpcEventUpdaterInverseTable is the table name for the IPCEvent entity.
	// It exists in this package in order to avoid circular dependency with the "ipcevent" package.
	IpcEventUpdaterInverseTable = "ipc_events"
	// IpcEventUpdaterColumn is the table column denoting the ipc_event_updater relation/edge.
	IpcEventUpdaterColumn = "updated_by"
	// VideoCreatorTable is the table that holds the video_creator relation/edge.
	VideoCreatorTable = "videos"
	// VideoCreatorInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoCreatorInverseTable = "videos"
	// VideoCreatorColumn is the table column denoting the video_creator relation/edge.
	VideoCreatorColumn = "created_by"
	// VideoUpdaterTable is the table that holds the video_updater relation/edge.
	VideoUpdaterTable = "videos"
	// VideoUpdaterInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoUpdaterInverseTable = "videos"
	// VideoUpdaterColumn is the table column denoting the video_updater relation/edge.
	VideoUpdaterColumn = "updated_by"
	// AreaCreatorTable is the table that holds the area_creator relation/edge.
	AreaCreatorTable = "areas"
	// AreaCreatorInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaCreatorInverseTable = "areas"
	// AreaCreatorColumn is the table column denoting the area_creator relation/edge.
	AreaCreatorColumn = "created_by"
	// AreaUpdaterTable is the table that holds the area_updater relation/edge.
	AreaUpdaterTable = "areas"
	// AreaUpdaterInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaUpdaterInverseTable = "areas"
	// AreaUpdaterColumn is the table column denoting the area_updater relation/edge.
	AreaUpdaterColumn = "updated_by"
	// DeviceCreatorTable is the table that holds the device_creator relation/edge.
	DeviceCreatorTable = "devices"
	// DeviceCreatorInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceCreatorInverseTable = "devices"
	// DeviceCreatorColumn is the table column denoting the device_creator relation/edge.
	DeviceCreatorColumn = "created_by"
	// DeviceUpdaterTable is the table that holds the device_updater relation/edge.
	DeviceUpdaterTable = "devices"
	// DeviceUpdaterInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceUpdaterInverseTable = "devices"
	// DeviceUpdaterColumn is the table column denoting the device_updater relation/edge.
	DeviceUpdaterColumn = "updated_by"
	// DeviceInstallationCreatorTable is the table that holds the device_installation_creator relation/edge.
	DeviceInstallationCreatorTable = "device_installations"
	// DeviceInstallationCreatorInverseTable is the table name for the DeviceInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinstallation" package.
	DeviceInstallationCreatorInverseTable = "device_installations"
	// DeviceInstallationCreatorColumn is the table column denoting the device_installation_creator relation/edge.
	DeviceInstallationCreatorColumn = "created_by"
	// DeviceInstallationUpdaterTable is the table that holds the device_installation_updater relation/edge.
	DeviceInstallationUpdaterTable = "device_installations"
	// DeviceInstallationUpdaterInverseTable is the table name for the DeviceInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinstallation" package.
	DeviceInstallationUpdaterInverseTable = "device_installations"
	// DeviceInstallationUpdaterColumn is the table column denoting the device_installation_updater relation/edge.
	DeviceInstallationUpdaterColumn = "updated_by"
	// EventLevelCreatorTable is the table that holds the event_level_creator relation/edge.
	EventLevelCreatorTable = "event_levels"
	// EventLevelCreatorInverseTable is the table name for the EventLevel entity.
	// It exists in this package in order to avoid circular dependency with the "eventlevel" package.
	EventLevelCreatorInverseTable = "event_levels"
	// EventLevelCreatorColumn is the table column denoting the event_level_creator relation/edge.
	EventLevelCreatorColumn = "created_by"
	// EventLevelUpdaterTable is the table that holds the event_level_updater relation/edge.
	EventLevelUpdaterTable = "event_levels"
	// EventLevelUpdaterInverseTable is the table name for the EventLevel entity.
	// It exists in this package in order to avoid circular dependency with the "eventlevel" package.
	EventLevelUpdaterInverseTable = "event_levels"
	// EventLevelUpdaterColumn is the table column denoting the event_level_updater relation/edge.
	EventLevelUpdaterColumn = "updated_by"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldDeletedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldUsername,
	FieldPassword,
	FieldNickname,
	FieldRealName,
	FieldAvatar,
}

var (
	// AdminRolesPrimaryKey and AdminRolesColumn2 are the table columns denoting the
	// primary key for the admin_roles relation (M2M).
	AdminRolesPrimaryKey = []string{"admin_role_id", "admin_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
	// RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	RealNameValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
)

// OrderOption defines the ordering options for the Admin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByRealName orders the results by the real_name field.
func ByRealName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealName, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdaterField orders the results by updater field.
func ByUpdaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdaterStep(), sql.OrderByField(field, opts...))
	}
}

// ByAdminRolesCount orders the results by admin_roles count.
func ByAdminRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRolesStep(), opts...)
	}
}

// ByAdminRoles orders the results by admin_roles terms.
func ByAdminRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminCreatorCount orders the results by admin_creator count.
func ByAdminCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminCreatorStep(), opts...)
	}
}

// ByAdminCreator orders the results by admin_creator terms.
func ByAdminCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminUpdaterCount orders the results by admin_updater count.
func ByAdminUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminUpdaterStep(), opts...)
	}
}

// ByAdminUpdater orders the results by admin_updater terms.
func ByAdminUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminRoleCreatorCount orders the results by admin_role_creator count.
func ByAdminRoleCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRoleCreatorStep(), opts...)
	}
}

// ByAdminRoleCreator orders the results by admin_role_creator terms.
func ByAdminRoleCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRoleCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAdminRoleUpdaterCount orders the results by admin_role_updater count.
func ByAdminRoleUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminRoleUpdaterStep(), opts...)
	}
}

// ByAdminRoleUpdater orders the results by admin_role_updater terms.
func ByAdminRoleUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminRoleUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCreatorCount orders the results by risk_creator count.
func ByRiskCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCreatorStep(), opts...)
	}
}

// ByRiskCreator orders the results by risk_creator terms.
func ByRiskCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskUpdaterCount orders the results by risk_updater count.
func ByRiskUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskUpdaterStep(), opts...)
	}
}

// ByRiskUpdater orders the results by risk_updater terms.
func ByRiskUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationCreatorCount orders the results by risk_location_creator count.
func ByRiskLocationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationCreatorStep(), opts...)
	}
}

// ByRiskLocationCreator orders the results by risk_location_creator terms.
func ByRiskLocationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskLocationUpdaterCount orders the results by risk_location_updater count.
func ByRiskLocationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskLocationUpdaterStep(), opts...)
	}
}

// ByRiskLocationUpdater orders the results by risk_location_updater terms.
func ByRiskLocationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskLocationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryCreatorCount orders the results by risk_category_creator count.
func ByRiskCategoryCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryCreatorStep(), opts...)
	}
}

// ByRiskCategoryCreator orders the results by risk_category_creator terms.
func ByRiskCategoryCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCategoryUpdaterCount orders the results by risk_category_updater count.
func ByRiskCategoryUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCategoryUpdaterStep(), opts...)
	}
}

// ByRiskCategoryUpdater orders the results by risk_category_updater terms.
func ByRiskCategoryUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCategoryUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentCreatorCount orders the results by department_creator count.
func ByDepartmentCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentCreatorStep(), opts...)
	}
}

// ByDepartmentCreator orders the results by department_creator terms.
func ByDepartmentCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDepartmentUpdaterCount orders the results by department_updater count.
func ByDepartmentUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepartmentUpdaterStep(), opts...)
	}
}

// ByDepartmentUpdater orders the results by department_updater terms.
func ByDepartmentUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeCreatorCount orders the results by employee_creator count.
func ByEmployeeCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeCreatorStep(), opts...)
	}
}

// ByEmployeeCreator orders the results by employee_creator terms.
func ByEmployeeCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeUpdaterCount orders the results by employee_updater count.
func ByEmployeeUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeUpdaterStep(), opts...)
	}
}

// ByEmployeeUpdater orders the results by employee_updater terms.
func ByEmployeeUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeCount orders the results by employee count.
func ByEmployeeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeStep(), opts...)
	}
}

// ByEmployee orders the results by employee terms.
func ByEmployee(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOccupationCreatorCount orders the results by occupation_creator count.
func ByOccupationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccupationCreatorStep(), opts...)
	}
}

// ByOccupationCreator orders the results by occupation_creator terms.
func ByOccupationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccupationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOccupationUpdaterCount orders the results by occupation_updater count.
func ByOccupationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccupationUpdaterStep(), opts...)
	}
}

// ByOccupationUpdater orders the results by occupation_updater terms.
func ByOccupationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccupationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIpcEventCreatorCount orders the results by ipc_event_creator count.
func ByIpcEventCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIpcEventCreatorStep(), opts...)
	}
}

// ByIpcEventCreator orders the results by ipc_event_creator terms.
func ByIpcEventCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIpcEventCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIpcEventUpdaterCount orders the results by ipc_event_updater count.
func ByIpcEventUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIpcEventUpdaterStep(), opts...)
	}
}

// ByIpcEventUpdater orders the results by ipc_event_updater terms.
func ByIpcEventUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIpcEventUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVideoCreatorCount orders the results by video_creator count.
func ByVideoCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoCreatorStep(), opts...)
	}
}

// ByVideoCreator orders the results by video_creator terms.
func ByVideoCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVideoUpdaterCount orders the results by video_updater count.
func ByVideoUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoUpdaterStep(), opts...)
	}
}

// ByVideoUpdater orders the results by video_updater terms.
func ByVideoUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAreaCreatorCount orders the results by area_creator count.
func ByAreaCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAreaCreatorStep(), opts...)
	}
}

// ByAreaCreator orders the results by area_creator terms.
func ByAreaCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAreaUpdaterCount orders the results by area_updater count.
func ByAreaUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAreaUpdaterStep(), opts...)
	}
}

// ByAreaUpdater orders the results by area_updater terms.
func ByAreaUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceCreatorCount orders the results by device_creator count.
func ByDeviceCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceCreatorStep(), opts...)
	}
}

// ByDeviceCreator orders the results by device_creator terms.
func ByDeviceCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceUpdaterCount orders the results by device_updater count.
func ByDeviceUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceUpdaterStep(), opts...)
	}
}

// ByDeviceUpdater orders the results by device_updater terms.
func ByDeviceUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInstallationCreatorCount orders the results by device_installation_creator count.
func ByDeviceInstallationCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInstallationCreatorStep(), opts...)
	}
}

// ByDeviceInstallationCreator orders the results by device_installation_creator terms.
func ByDeviceInstallationCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInstallationCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInstallationUpdaterCount orders the results by device_installation_updater count.
func ByDeviceInstallationUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInstallationUpdaterStep(), opts...)
	}
}

// ByDeviceInstallationUpdater orders the results by device_installation_updater terms.
func ByDeviceInstallationUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInstallationUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLevelCreatorCount orders the results by event_level_creator count.
func ByEventLevelCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLevelCreatorStep(), opts...)
	}
}

// ByEventLevelCreator orders the results by event_level_creator terms.
func ByEventLevelCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLevelCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventLevelUpdaterCount orders the results by event_level_updater count.
func ByEventLevelUpdaterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventLevelUpdaterStep(), opts...)
	}
}

// ByEventLevelUpdater orders the results by event_level_updater terms.
func ByEventLevelUpdater(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLevelUpdaterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
	)
}
func newAdminRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AdminRolesTable, AdminRolesPrimaryKey...),
	)
}
func newAdminCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminCreatorTable, AdminCreatorColumn),
	)
}
func newAdminUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminUpdaterTable, AdminUpdaterColumn),
	)
}
func newAdminRoleCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRoleCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminRoleCreatorTable, AdminRoleCreatorColumn),
	)
}
func newAdminRoleUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminRoleUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdminRoleUpdaterTable, AdminRoleUpdaterColumn),
	)
}
func newRiskCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorTable, RiskCreatorColumn),
	)
}
func newRiskUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskUpdaterTable, RiskUpdaterColumn),
	)
}
func newRiskLocationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationCreatorTable, RiskLocationCreatorColumn),
	)
}
func newRiskLocationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskLocationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskLocationUpdaterTable, RiskLocationUpdaterColumn),
	)
}
func newRiskCategoryCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryCreatorTable, RiskCategoryCreatorColumn),
	)
}
func newRiskCategoryUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCategoryUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCategoryUpdaterTable, RiskCategoryUpdaterColumn),
	)
}
func newDepartmentCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentCreatorTable, DepartmentCreatorColumn),
	)
}
func newDepartmentUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DepartmentUpdaterTable, DepartmentUpdaterColumn),
	)
}
func newEmployeeCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeCreatorTable, EmployeeCreatorColumn),
	)
}
func newEmployeeUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeUpdaterTable, EmployeeUpdaterColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeTable, EmployeeColumn),
	)
}
func newOccupationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccupationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OccupationCreatorTable, OccupationCreatorColumn),
	)
}
func newOccupationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccupationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OccupationUpdaterTable, OccupationUpdaterColumn),
	)
}
func newIpcEventCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IpcEventCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IpcEventCreatorTable, IpcEventCreatorColumn),
	)
}
func newIpcEventUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IpcEventUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IpcEventUpdaterTable, IpcEventUpdaterColumn),
	)
}
func newVideoCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VideoCreatorTable, VideoCreatorColumn),
	)
}
func newVideoUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VideoUpdaterTable, VideoUpdaterColumn),
	)
}
func newAreaCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AreaCreatorTable, AreaCreatorColumn),
	)
}
func newAreaUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AreaUpdaterTable, AreaUpdaterColumn),
	)
}
func newDeviceCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceCreatorTable, DeviceCreatorColumn),
	)
}
func newDeviceUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceUpdaterTable, DeviceUpdaterColumn),
	)
}
func newDeviceInstallationCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInstallationCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationCreatorTable, DeviceInstallationCreatorColumn),
	)
}
func newDeviceInstallationUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInstallationUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationUpdaterTable, DeviceInstallationUpdaterColumn),
	)
}
func newEventLevelCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLevelCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLevelCreatorTable, EventLevelCreatorColumn),
	)
}
func newEventLevelUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLevelUpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventLevelUpdaterTable, EventLevelUpdaterColumn),
	)
}
