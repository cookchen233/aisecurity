// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/structs/types"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sweep is the model entity for the Sweep schema.
type Sweep struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建者
	CreatorID int `json:"creator_id,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 最后更新者
	UpdaterID int `json:"updater_id,omitempty"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 名称
	Name string `json:"name,omitempty" validate:"required"`
	// 隐患类别
	RiskCategoryID int `json:"risk_category_id,omitempty"`
	// 隐患地点
	RiskLocationID int `json:"risk_location_id,omitempty"`
	// 排查内容
	SweepJobs []*types.SweepJob `json:"sweep_jobs,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SweepQuery when eager-loading is set.
	Edges        SweepEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SweepEdges holds the relations/edges for other nodes in the graph.
type SweepEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// RiskCategory holds the value of the risk_category edge.
	RiskCategory *RiskCategory `json:"risk_category,omitempty"`
	// RiskLocation holds the value of the risk_location edge.
	RiskLocation *RiskLocation `json:"risk_location,omitempty"`
	// SweepSchedule holds the value of the sweep_schedule edge.
	SweepSchedule []*SweepSchedule `json:"sweep_schedule,omitempty"`
	// SweepResult holds the value of the sweep_result edge.
	SweepResult []*SweepResult `json:"sweep_result,omitempty"`
	// SweepResultDetails holds the value of the sweep_result_details edge.
	SweepResultDetails []*SweepResultDetails `json:"sweep_result_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// RiskCategoryOrErr returns the RiskCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepEdges) RiskCategoryOrErr() (*RiskCategory, error) {
	if e.loadedTypes[2] {
		if e.RiskCategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: riskcategory.Label}
		}
		return e.RiskCategory, nil
	}
	return nil, &NotLoadedError{edge: "risk_category"}
}

// RiskLocationOrErr returns the RiskLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SweepEdges) RiskLocationOrErr() (*RiskLocation, error) {
	if e.loadedTypes[3] {
		if e.RiskLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: risklocation.Label}
		}
		return e.RiskLocation, nil
	}
	return nil, &NotLoadedError{edge: "risk_location"}
}

// SweepScheduleOrErr returns the SweepSchedule value or an error if the edge
// was not loaded in eager-loading.
func (e SweepEdges) SweepScheduleOrErr() ([]*SweepSchedule, error) {
	if e.loadedTypes[4] {
		return e.SweepSchedule, nil
	}
	return nil, &NotLoadedError{edge: "sweep_schedule"}
}

// SweepResultOrErr returns the SweepResult value or an error if the edge
// was not loaded in eager-loading.
func (e SweepEdges) SweepResultOrErr() ([]*SweepResult, error) {
	if e.loadedTypes[5] {
		return e.SweepResult, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result"}
}

// SweepResultDetailsOrErr returns the SweepResultDetails value or an error if the edge
// was not loaded in eager-loading.
func (e SweepEdges) SweepResultDetailsOrErr() ([]*SweepResultDetails, error) {
	if e.loadedTypes[6] {
		return e.SweepResultDetails, nil
	}
	return nil, &NotLoadedError{edge: "sweep_result_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sweep) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sweep.FieldSweepJobs:
			values[i] = new([]byte)
		case sweep.FieldID, sweep.FieldCreatorID, sweep.FieldUpdaterID, sweep.FieldRiskCategoryID, sweep.FieldRiskLocationID:
			values[i] = new(sql.NullInt64)
		case sweep.FieldName:
			values[i] = new(sql.NullString)
		case sweep.FieldCreateTime, sweep.FieldDeleteTime, sweep.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sweep fields.
func (s *Sweep) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sweep.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sweep.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case sweep.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				s.CreatorID = int(value.Int64)
			}
		case sweep.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				s.DeleteTime = new(time.Time)
				*s.DeleteTime = value.Time
			}
		case sweep.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				s.UpdaterID = int(value.Int64)
			}
		case sweep.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case sweep.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case sweep.FieldRiskCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_category_id", values[i])
			} else if value.Valid {
				s.RiskCategoryID = int(value.Int64)
			}
		case sweep.FieldRiskLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_location_id", values[i])
			} else if value.Valid {
				s.RiskLocationID = int(value.Int64)
			}
		case sweep.FieldSweepJobs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sweep_jobs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.SweepJobs); err != nil {
					return fmt.Errorf("unmarshal field sweep_jobs: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sweep.
// This includes values selected through modifiers, order, etc.
func (s *Sweep) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Sweep entity.
func (s *Sweep) QueryCreator() *AdminQuery {
	return NewSweepClient(s.config).QueryCreator(s)
}

// QueryUpdater queries the "updater" edge of the Sweep entity.
func (s *Sweep) QueryUpdater() *AdminQuery {
	return NewSweepClient(s.config).QueryUpdater(s)
}

// QueryRiskCategory queries the "risk_category" edge of the Sweep entity.
func (s *Sweep) QueryRiskCategory() *RiskCategoryQuery {
	return NewSweepClient(s.config).QueryRiskCategory(s)
}

// QueryRiskLocation queries the "risk_location" edge of the Sweep entity.
func (s *Sweep) QueryRiskLocation() *RiskLocationQuery {
	return NewSweepClient(s.config).QueryRiskLocation(s)
}

// QuerySweepSchedule queries the "sweep_schedule" edge of the Sweep entity.
func (s *Sweep) QuerySweepSchedule() *SweepScheduleQuery {
	return NewSweepClient(s.config).QuerySweepSchedule(s)
}

// QuerySweepResult queries the "sweep_result" edge of the Sweep entity.
func (s *Sweep) QuerySweepResult() *SweepResultQuery {
	return NewSweepClient(s.config).QuerySweepResult(s)
}

// QuerySweepResultDetails queries the "sweep_result_details" edge of the Sweep entity.
func (s *Sweep) QuerySweepResultDetails() *SweepResultDetailsQuery {
	return NewSweepClient(s.config).QuerySweepResultDetails(s)
}

// Update returns a builder for updating this Sweep.
// Note that you need to call Sweep.Unwrap() before calling this method if this Sweep
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sweep) Update() *SweepUpdateOne {
	return NewSweepClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sweep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sweep) Unwrap() *Sweep {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("dao: Sweep is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sweep) String() string {
	var builder strings.Builder
	builder.WriteString("Sweep(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatorID))
	builder.WriteString(", ")
	if v := s.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("risk_category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RiskCategoryID))
	builder.WriteString(", ")
	builder.WriteString("risk_location_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RiskLocationID))
	builder.WriteString(", ")
	builder.WriteString("sweep_jobs=")
	builder.WriteString(fmt.Sprintf("%v", s.SweepJobs))
	builder.WriteByte(')')
	return builder.String()
}

// Sweeps is a parsable slice of Sweep.
type Sweeps []*Sweep
