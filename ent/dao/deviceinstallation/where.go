// Code generated by ent, DO NOT EDIT.

package deviceinstallation

import (
	"aisecurity/ent/dao/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldCreatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldDeletedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldDeviceID, v))
}

// AreaID applies equality check predicate on the "area_id" field. It's identical to AreaIDEQ.
func AreaID(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldAreaID, v))
}

// AliasName applies equality check predicate on the "alias_name" field. It's identical to AliasNameEQ.
func AliasName(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldAliasName, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLongitude, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLatitude, v))
}

// LocationData applies equality check predicate on the "location_data" field. It's identical to LocationDataEQ.
func LocationData(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLocationData, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLocation, v))
}

// Installer applies equality check predicate on the "installer" field. It's identical to InstallerEQ.
func Installer(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldInstaller, v))
}

// InstallTime applies equality check predicate on the "install_time" field. It's identical to InstallTimeEQ.
func InstallTime(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldInstallTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldDeletedAt))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldDeviceID, vs...))
}

// AreaIDEQ applies the EQ predicate on the "area_id" field.
func AreaIDEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldAreaID, v))
}

// AreaIDNEQ applies the NEQ predicate on the "area_id" field.
func AreaIDNEQ(v int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldAreaID, v))
}

// AreaIDIn applies the In predicate on the "area_id" field.
func AreaIDIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldAreaID, vs...))
}

// AreaIDNotIn applies the NotIn predicate on the "area_id" field.
func AreaIDNotIn(vs ...int) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldAreaID, vs...))
}

// AliasNameEQ applies the EQ predicate on the "alias_name" field.
func AliasNameEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldAliasName, v))
}

// AliasNameNEQ applies the NEQ predicate on the "alias_name" field.
func AliasNameNEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldAliasName, v))
}

// AliasNameIn applies the In predicate on the "alias_name" field.
func AliasNameIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldAliasName, vs...))
}

// AliasNameNotIn applies the NotIn predicate on the "alias_name" field.
func AliasNameNotIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldAliasName, vs...))
}

// AliasNameGT applies the GT predicate on the "alias_name" field.
func AliasNameGT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldAliasName, v))
}

// AliasNameGTE applies the GTE predicate on the "alias_name" field.
func AliasNameGTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldAliasName, v))
}

// AliasNameLT applies the LT predicate on the "alias_name" field.
func AliasNameLT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldAliasName, v))
}

// AliasNameLTE applies the LTE predicate on the "alias_name" field.
func AliasNameLTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldAliasName, v))
}

// AliasNameContains applies the Contains predicate on the "alias_name" field.
func AliasNameContains(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContains(FieldAliasName, v))
}

// AliasNameHasPrefix applies the HasPrefix predicate on the "alias_name" field.
func AliasNameHasPrefix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasPrefix(FieldAliasName, v))
}

// AliasNameHasSuffix applies the HasSuffix predicate on the "alias_name" field.
func AliasNameHasSuffix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasSuffix(FieldAliasName, v))
}

// AliasNameIsNil applies the IsNil predicate on the "alias_name" field.
func AliasNameIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldAliasName))
}

// AliasNameNotNil applies the NotNil predicate on the "alias_name" field.
func AliasNameNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldAliasName))
}

// AliasNameEqualFold applies the EqualFold predicate on the "alias_name" field.
func AliasNameEqualFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEqualFold(FieldAliasName, v))
}

// AliasNameContainsFold applies the ContainsFold predicate on the "alias_name" field.
func AliasNameContainsFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContainsFold(FieldAliasName, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldLongitude, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldLatitude, v))
}

// LocationDataEQ applies the EQ predicate on the "location_data" field.
func LocationDataEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLocationData, v))
}

// LocationDataNEQ applies the NEQ predicate on the "location_data" field.
func LocationDataNEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldLocationData, v))
}

// LocationDataIn applies the In predicate on the "location_data" field.
func LocationDataIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldLocationData, vs...))
}

// LocationDataNotIn applies the NotIn predicate on the "location_data" field.
func LocationDataNotIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldLocationData, vs...))
}

// LocationDataGT applies the GT predicate on the "location_data" field.
func LocationDataGT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldLocationData, v))
}

// LocationDataGTE applies the GTE predicate on the "location_data" field.
func LocationDataGTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldLocationData, v))
}

// LocationDataLT applies the LT predicate on the "location_data" field.
func LocationDataLT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldLocationData, v))
}

// LocationDataLTE applies the LTE predicate on the "location_data" field.
func LocationDataLTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldLocationData, v))
}

// LocationDataContains applies the Contains predicate on the "location_data" field.
func LocationDataContains(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContains(FieldLocationData, v))
}

// LocationDataHasPrefix applies the HasPrefix predicate on the "location_data" field.
func LocationDataHasPrefix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasPrefix(FieldLocationData, v))
}

// LocationDataHasSuffix applies the HasSuffix predicate on the "location_data" field.
func LocationDataHasSuffix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasSuffix(FieldLocationData, v))
}

// LocationDataIsNil applies the IsNil predicate on the "location_data" field.
func LocationDataIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldLocationData))
}

// LocationDataNotNil applies the NotNil predicate on the "location_data" field.
func LocationDataNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldLocationData))
}

// LocationDataEqualFold applies the EqualFold predicate on the "location_data" field.
func LocationDataEqualFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEqualFold(FieldLocationData, v))
}

// LocationDataContainsFold applies the ContainsFold predicate on the "location_data" field.
func LocationDataContainsFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContainsFold(FieldLocationData, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContainsFold(FieldLocation, v))
}

// InstallerEQ applies the EQ predicate on the "installer" field.
func InstallerEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldInstaller, v))
}

// InstallerNEQ applies the NEQ predicate on the "installer" field.
func InstallerNEQ(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldInstaller, v))
}

// InstallerIn applies the In predicate on the "installer" field.
func InstallerIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldInstaller, vs...))
}

// InstallerNotIn applies the NotIn predicate on the "installer" field.
func InstallerNotIn(vs ...string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldInstaller, vs...))
}

// InstallerGT applies the GT predicate on the "installer" field.
func InstallerGT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldInstaller, v))
}

// InstallerGTE applies the GTE predicate on the "installer" field.
func InstallerGTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldInstaller, v))
}

// InstallerLT applies the LT predicate on the "installer" field.
func InstallerLT(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldInstaller, v))
}

// InstallerLTE applies the LTE predicate on the "installer" field.
func InstallerLTE(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldInstaller, v))
}

// InstallerContains applies the Contains predicate on the "installer" field.
func InstallerContains(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContains(FieldInstaller, v))
}

// InstallerHasPrefix applies the HasPrefix predicate on the "installer" field.
func InstallerHasPrefix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasPrefix(FieldInstaller, v))
}

// InstallerHasSuffix applies the HasSuffix predicate on the "installer" field.
func InstallerHasSuffix(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldHasSuffix(FieldInstaller, v))
}

// InstallerIsNil applies the IsNil predicate on the "installer" field.
func InstallerIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldInstaller))
}

// InstallerNotNil applies the NotNil predicate on the "installer" field.
func InstallerNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldInstaller))
}

// InstallerEqualFold applies the EqualFold predicate on the "installer" field.
func InstallerEqualFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEqualFold(FieldInstaller, v))
}

// InstallerContainsFold applies the ContainsFold predicate on the "installer" field.
func InstallerContainsFold(v string) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldContainsFold(FieldInstaller, v))
}

// InstallTimeEQ applies the EQ predicate on the "install_time" field.
func InstallTimeEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldEQ(FieldInstallTime, v))
}

// InstallTimeNEQ applies the NEQ predicate on the "install_time" field.
func InstallTimeNEQ(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNEQ(FieldInstallTime, v))
}

// InstallTimeIn applies the In predicate on the "install_time" field.
func InstallTimeIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIn(FieldInstallTime, vs...))
}

// InstallTimeNotIn applies the NotIn predicate on the "install_time" field.
func InstallTimeNotIn(vs ...time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotIn(FieldInstallTime, vs...))
}

// InstallTimeGT applies the GT predicate on the "install_time" field.
func InstallTimeGT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGT(FieldInstallTime, v))
}

// InstallTimeGTE applies the GTE predicate on the "install_time" field.
func InstallTimeGTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldGTE(FieldInstallTime, v))
}

// InstallTimeLT applies the LT predicate on the "install_time" field.
func InstallTimeLT(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLT(FieldInstallTime, v))
}

// InstallTimeLTE applies the LTE predicate on the "install_time" field.
func InstallTimeLTE(v time.Time) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldLTE(FieldInstallTime, v))
}

// InstallTimeIsNil applies the IsNil predicate on the "install_time" field.
func InstallTimeIsNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldIsNull(FieldInstallTime))
}

// InstallTimeNotNil applies the NotNil predicate on the "install_time" field.
func InstallTimeNotNil() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.FieldNotNull(FieldInstallTime))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Admin) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdater applies the HasEdge predicate on the "updater" edge.
func HasUpdater() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdaterWith applies the HasEdge predicate on the "updater" edge with a given conditions (other predicates).
func HasUpdaterWith(preds ...predicate.Admin) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := newUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArea applies the HasEdge predicate on the "area" edge.
func HasArea() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaWith applies the HasEdge predicate on the "area" edge with a given conditions (other predicates).
func HasAreaWith(preds ...predicate.Area) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := newAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceInstallation) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceInstallation) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceInstallation) predicate.DeviceInstallation {
	return predicate.DeviceInstallation(sql.NotPredicates(p))
}
