// Code generated by ent, DO NOT EDIT.

package deviceinstallation

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deviceinstallation type in the database.
	Label = "device_installation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldUpdaterID holds the string denoting the updater_id field in the database.
	FieldUpdaterID = "updater_id"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldAreaID holds the string denoting the area_id field in the database.
	FieldAreaID = "area_id"
	// FieldAliasName holds the string denoting the alias_name field in the database.
	FieldAliasName = "alias_name"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLocationData holds the string denoting the location_data field in the database.
	FieldLocationData = "location_data"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldInstaller holds the string denoting the installer field in the database.
	FieldInstaller = "installer"
	// FieldInstallTime holds the string denoting the install_time field in the database.
	FieldInstallTime = "install_time"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdater holds the string denoting the updater edge name in mutations.
	EdgeUpdater = "updater"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// Table holds the table name of the deviceinstallation in the database.
	Table = "device_installations"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "device_installations"
	// CreatorInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	CreatorInverseTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// UpdaterTable is the table that holds the updater relation/edge.
	UpdaterTable = "device_installations"
	// UpdaterInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	UpdaterInverseTable = "admins"
	// UpdaterColumn is the table column denoting the updater relation/edge.
	UpdaterColumn = "updater_id"
	// AreaTable is the table that holds the area relation/edge.
	AreaTable = "device_installations"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "area_id"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "device_installations"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_id"
)

// Columns holds all SQL columns for deviceinstallation fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreatorID,
	FieldDeleteTime,
	FieldUpdaterID,
	FieldUpdateTime,
	FieldDeviceID,
	FieldAreaID,
	FieldAliasName,
	FieldLongitude,
	FieldLatitude,
	FieldLocationData,
	FieldLocation,
	FieldInstaller,
	FieldInstallTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(int) error
	// UpdaterIDValidator is a validator for the "updater_id" field. It is called by the builders before save.
	UpdaterIDValidator func(int) error
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DeviceIDValidator is a validator for the "device_id" field. It is called by the builders before save.
	DeviceIDValidator func(int) error
	// AreaIDValidator is a validator for the "area_id" field. It is called by the builders before save.
	AreaIDValidator func(int) error
	// AliasNameValidator is a validator for the "alias_name" field. It is called by the builders before save.
	AliasNameValidator func(string) error
)

// OrderOption defines the ordering options for the DeviceInstallation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByUpdaterID orders the results by the updater_id field.
func ByUpdaterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdaterID, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByAreaID orders the results by the area_id field.
func ByAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaID, opts...).ToFunc()
}

// ByAliasName orders the results by the alias_name field.
func ByAliasName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAliasName, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLocationData orders the results by the location_data field.
func ByLocationData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocationData, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByInstaller orders the results by the installer field.
func ByInstaller(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstaller, opts...).ToFunc()
}

// ByInstallTime orders the results by the install_time field.
func ByInstallTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallTime, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdaterField orders the results by updater field.
func ByUpdaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdaterStep(), sql.OrderByField(field, opts...))
	}
}

// ByAreaField orders the results by area field.
func ByAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
	)
}
func newAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
	)
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
