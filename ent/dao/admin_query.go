// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/ipcreportevent"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminQuery is the builder for querying Admin entities.
type AdminQuery struct {
	config
	ctx                       *QueryContext
	order                     []admin.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Admin
	withCreator               *AdminQuery
	withUpdater               *AdminQuery
	withAdminRoles            *AdminRoleQuery
	withAdminCreator          *AdminQuery
	withAdminUpdater          *AdminQuery
	withAdminRoleCreator      *AdminRoleQuery
	withAdminRoleUpdater      *AdminRoleQuery
	withRiskCreator           *RiskQuery
	withRiskUpdater           *RiskQuery
	withRiskLocationCreator   *RiskLocationQuery
	withRiskLocationUpdater   *RiskLocationQuery
	withRiskCategoryCreator   *RiskCategoryQuery
	withRiskCategoryUpdater   *RiskCategoryQuery
	withDepartmentCreator     *DepartmentQuery
	withDepartmentUpdater     *DepartmentQuery
	withEmployeeCreator       *EmployeeQuery
	withEmployeeUpdater       *EmployeeQuery
	withEmployee              *EmployeeQuery
	withOccupationCreator     *OccupationQuery
	withOccupationUpdater     *OccupationQuery
	withIpcReportEventCreator *IPCReportEventQuery
	withIpcReportEventUpdater *IPCReportEventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminQuery builder.
func (aq *AdminQuery) Where(ps ...predicate.Admin) *AdminQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AdminQuery) Limit(limit int) *AdminQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AdminQuery) Offset(offset int) *AdminQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AdminQuery) Unique(unique bool) *AdminQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AdminQuery) Order(o ...admin.OrderOption) *AdminQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryCreator chains the current query on the "creator" edge.
func (aq *AdminQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, admin.CreatorTable, admin.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (aq *AdminQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, admin.UpdaterTable, admin.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminRoles chains the current query on the "admin_roles" edge.
func (aq *AdminQuery) QueryAdminRoles() *AdminRoleQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, admin.AdminRolesTable, admin.AdminRolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminCreator chains the current query on the "admin_creator" edge.
func (aq *AdminQuery) QueryAdminCreator() *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminCreatorTable, admin.AdminCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminUpdater chains the current query on the "admin_updater" edge.
func (aq *AdminQuery) QueryAdminUpdater() *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminUpdaterTable, admin.AdminUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminRoleCreator chains the current query on the "admin_role_creator" edge.
func (aq *AdminQuery) QueryAdminRoleCreator() *AdminRoleQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminRoleCreatorTable, admin.AdminRoleCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminRoleUpdater chains the current query on the "admin_role_updater" edge.
func (aq *AdminQuery) QueryAdminRoleUpdater() *AdminRoleQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminRoleUpdaterTable, admin.AdminRoleUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskCreator chains the current query on the "risk_creator" edge.
func (aq *AdminQuery) QueryRiskCreator() *RiskQuery {
	query := (&RiskClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCreatorTable, admin.RiskCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskUpdater chains the current query on the "risk_updater" edge.
func (aq *AdminQuery) QueryRiskUpdater() *RiskQuery {
	query := (&RiskClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskUpdaterTable, admin.RiskUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskLocationCreator chains the current query on the "risk_location_creator" edge.
func (aq *AdminQuery) QueryRiskLocationCreator() *RiskLocationQuery {
	query := (&RiskLocationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskLocationCreatorTable, admin.RiskLocationCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskLocationUpdater chains the current query on the "risk_location_updater" edge.
func (aq *AdminQuery) QueryRiskLocationUpdater() *RiskLocationQuery {
	query := (&RiskLocationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskLocationUpdaterTable, admin.RiskLocationUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskCategoryCreator chains the current query on the "risk_category_creator" edge.
func (aq *AdminQuery) QueryRiskCategoryCreator() *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCategoryCreatorTable, admin.RiskCategoryCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskCategoryUpdater chains the current query on the "risk_category_updater" edge.
func (aq *AdminQuery) QueryRiskCategoryUpdater() *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCategoryUpdaterTable, admin.RiskCategoryUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDepartmentCreator chains the current query on the "department_creator" edge.
func (aq *AdminQuery) QueryDepartmentCreator() *DepartmentQuery {
	query := (&DepartmentClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DepartmentCreatorTable, admin.DepartmentCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDepartmentUpdater chains the current query on the "department_updater" edge.
func (aq *AdminQuery) QueryDepartmentUpdater() *DepartmentQuery {
	query := (&DepartmentClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DepartmentUpdaterTable, admin.DepartmentUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployeeCreator chains the current query on the "employee_creator" edge.
func (aq *AdminQuery) QueryEmployeeCreator() *EmployeeQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EmployeeCreatorTable, admin.EmployeeCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployeeUpdater chains the current query on the "employee_updater" edge.
func (aq *AdminQuery) QueryEmployeeUpdater() *EmployeeQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EmployeeUpdaterTable, admin.EmployeeUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (aq *AdminQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EmployeeTable, admin.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOccupationCreator chains the current query on the "occupation_creator" edge.
func (aq *AdminQuery) QueryOccupationCreator() *OccupationQuery {
	query := (&OccupationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(occupation.Table, occupation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.OccupationCreatorTable, admin.OccupationCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOccupationUpdater chains the current query on the "occupation_updater" edge.
func (aq *AdminQuery) QueryOccupationUpdater() *OccupationQuery {
	query := (&OccupationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(occupation.Table, occupation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.OccupationUpdaterTable, admin.OccupationUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIpcReportEventCreator chains the current query on the "ipc_report_event_creator" edge.
func (aq *AdminQuery) QueryIpcReportEventCreator() *IPCReportEventQuery {
	query := (&IPCReportEventClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(ipcreportevent.Table, ipcreportevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.IpcReportEventCreatorTable, admin.IpcReportEventCreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIpcReportEventUpdater chains the current query on the "ipc_report_event_updater" edge.
func (aq *AdminQuery) QueryIpcReportEventUpdater() *IPCReportEventQuery {
	query := (&IPCReportEventClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, selector),
			sqlgraph.To(ipcreportevent.Table, ipcreportevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.IpcReportEventUpdaterTable, admin.IpcReportEventUpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Admin entity from the query.
// Returns a *NotFoundError when no Admin was found.
func (aq *AdminQuery) First(ctx context.Context) (*Admin, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{admin.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AdminQuery) FirstX(ctx context.Context) *Admin {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Admin ID from the query.
// Returns a *NotFoundError when no Admin ID was found.
func (aq *AdminQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{admin.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AdminQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Admin entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Admin entity is found.
// Returns a *NotFoundError when no Admin entities are found.
func (aq *AdminQuery) Only(ctx context.Context) (*Admin, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{admin.Label}
	default:
		return nil, &NotSingularError{admin.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AdminQuery) OnlyX(ctx context.Context) *Admin {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Admin ID in the query.
// Returns a *NotSingularError when more than one Admin ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AdminQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{admin.Label}
	default:
		err = &NotSingularError{admin.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AdminQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Admins.
func (aq *AdminQuery) All(ctx context.Context) ([]*Admin, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Admin, *AdminQuery]()
	return withInterceptors[[]*Admin](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AdminQuery) AllX(ctx context.Context) []*Admin {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Admin IDs.
func (aq *AdminQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(admin.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AdminQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AdminQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AdminQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AdminQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AdminQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AdminQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AdminQuery) Clone() *AdminQuery {
	if aq == nil {
		return nil
	}
	return &AdminQuery{
		config:                    aq.config,
		ctx:                       aq.ctx.Clone(),
		order:                     append([]admin.OrderOption{}, aq.order...),
		inters:                    append([]Interceptor{}, aq.inters...),
		predicates:                append([]predicate.Admin{}, aq.predicates...),
		withCreator:               aq.withCreator.Clone(),
		withUpdater:               aq.withUpdater.Clone(),
		withAdminRoles:            aq.withAdminRoles.Clone(),
		withAdminCreator:          aq.withAdminCreator.Clone(),
		withAdminUpdater:          aq.withAdminUpdater.Clone(),
		withAdminRoleCreator:      aq.withAdminRoleCreator.Clone(),
		withAdminRoleUpdater:      aq.withAdminRoleUpdater.Clone(),
		withRiskCreator:           aq.withRiskCreator.Clone(),
		withRiskUpdater:           aq.withRiskUpdater.Clone(),
		withRiskLocationCreator:   aq.withRiskLocationCreator.Clone(),
		withRiskLocationUpdater:   aq.withRiskLocationUpdater.Clone(),
		withRiskCategoryCreator:   aq.withRiskCategoryCreator.Clone(),
		withRiskCategoryUpdater:   aq.withRiskCategoryUpdater.Clone(),
		withDepartmentCreator:     aq.withDepartmentCreator.Clone(),
		withDepartmentUpdater:     aq.withDepartmentUpdater.Clone(),
		withEmployeeCreator:       aq.withEmployeeCreator.Clone(),
		withEmployeeUpdater:       aq.withEmployeeUpdater.Clone(),
		withEmployee:              aq.withEmployee.Clone(),
		withOccupationCreator:     aq.withOccupationCreator.Clone(),
		withOccupationUpdater:     aq.withOccupationUpdater.Clone(),
		withIpcReportEventCreator: aq.withIpcReportEventCreator.Clone(),
		withIpcReportEventUpdater: aq.withIpcReportEventUpdater.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithCreator(opts ...func(*AdminQuery)) *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCreator = query
	return aq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithUpdater(opts ...func(*AdminQuery)) *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withUpdater = query
	return aq
}

// WithAdminRoles tells the query-builder to eager-load the nodes that are connected to
// the "admin_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithAdminRoles(opts ...func(*AdminRoleQuery)) *AdminQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminRoles = query
	return aq
}

// WithAdminCreator tells the query-builder to eager-load the nodes that are connected to
// the "admin_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithAdminCreator(opts ...func(*AdminQuery)) *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminCreator = query
	return aq
}

// WithAdminUpdater tells the query-builder to eager-load the nodes that are connected to
// the "admin_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithAdminUpdater(opts ...func(*AdminQuery)) *AdminQuery {
	query := (&AdminClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminUpdater = query
	return aq
}

// WithAdminRoleCreator tells the query-builder to eager-load the nodes that are connected to
// the "admin_role_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithAdminRoleCreator(opts ...func(*AdminRoleQuery)) *AdminQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminRoleCreator = query
	return aq
}

// WithAdminRoleUpdater tells the query-builder to eager-load the nodes that are connected to
// the "admin_role_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithAdminRoleUpdater(opts ...func(*AdminRoleQuery)) *AdminQuery {
	query := (&AdminRoleClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminRoleUpdater = query
	return aq
}

// WithRiskCreator tells the query-builder to eager-load the nodes that are connected to
// the "risk_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskCreator(opts ...func(*RiskQuery)) *AdminQuery {
	query := (&RiskClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskCreator = query
	return aq
}

// WithRiskUpdater tells the query-builder to eager-load the nodes that are connected to
// the "risk_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskUpdater(opts ...func(*RiskQuery)) *AdminQuery {
	query := (&RiskClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskUpdater = query
	return aq
}

// WithRiskLocationCreator tells the query-builder to eager-load the nodes that are connected to
// the "risk_location_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskLocationCreator(opts ...func(*RiskLocationQuery)) *AdminQuery {
	query := (&RiskLocationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskLocationCreator = query
	return aq
}

// WithRiskLocationUpdater tells the query-builder to eager-load the nodes that are connected to
// the "risk_location_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskLocationUpdater(opts ...func(*RiskLocationQuery)) *AdminQuery {
	query := (&RiskLocationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskLocationUpdater = query
	return aq
}

// WithRiskCategoryCreator tells the query-builder to eager-load the nodes that are connected to
// the "risk_category_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskCategoryCreator(opts ...func(*RiskCategoryQuery)) *AdminQuery {
	query := (&RiskCategoryClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskCategoryCreator = query
	return aq
}

// WithRiskCategoryUpdater tells the query-builder to eager-load the nodes that are connected to
// the "risk_category_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithRiskCategoryUpdater(opts ...func(*RiskCategoryQuery)) *AdminQuery {
	query := (&RiskCategoryClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRiskCategoryUpdater = query
	return aq
}

// WithDepartmentCreator tells the query-builder to eager-load the nodes that are connected to
// the "department_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithDepartmentCreator(opts ...func(*DepartmentQuery)) *AdminQuery {
	query := (&DepartmentClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withDepartmentCreator = query
	return aq
}

// WithDepartmentUpdater tells the query-builder to eager-load the nodes that are connected to
// the "department_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithDepartmentUpdater(opts ...func(*DepartmentQuery)) *AdminQuery {
	query := (&DepartmentClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withDepartmentUpdater = query
	return aq
}

// WithEmployeeCreator tells the query-builder to eager-load the nodes that are connected to
// the "employee_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithEmployeeCreator(opts ...func(*EmployeeQuery)) *AdminQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withEmployeeCreator = query
	return aq
}

// WithEmployeeUpdater tells the query-builder to eager-load the nodes that are connected to
// the "employee_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithEmployeeUpdater(opts ...func(*EmployeeQuery)) *AdminQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withEmployeeUpdater = query
	return aq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithEmployee(opts ...func(*EmployeeQuery)) *AdminQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withEmployee = query
	return aq
}

// WithOccupationCreator tells the query-builder to eager-load the nodes that are connected to
// the "occupation_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithOccupationCreator(opts ...func(*OccupationQuery)) *AdminQuery {
	query := (&OccupationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOccupationCreator = query
	return aq
}

// WithOccupationUpdater tells the query-builder to eager-load the nodes that are connected to
// the "occupation_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithOccupationUpdater(opts ...func(*OccupationQuery)) *AdminQuery {
	query := (&OccupationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOccupationUpdater = query
	return aq
}

// WithIpcReportEventCreator tells the query-builder to eager-load the nodes that are connected to
// the "ipc_report_event_creator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithIpcReportEventCreator(opts ...func(*IPCReportEventQuery)) *AdminQuery {
	query := (&IPCReportEventClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withIpcReportEventCreator = query
	return aq
}

// WithIpcReportEventUpdater tells the query-builder to eager-load the nodes that are connected to
// the "ipc_report_event_updater" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AdminQuery) WithIpcReportEventUpdater(opts ...func(*IPCReportEventQuery)) *AdminQuery {
	query := (&IPCReportEventClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withIpcReportEventUpdater = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Admin.Query().
//		GroupBy(admin.FieldCreatedAt).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (aq *AdminQuery) GroupBy(field string, fields ...string) *AdminGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AdminGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = admin.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.Admin.Query().
//		Select(admin.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *AdminQuery) Select(fields ...string) *AdminSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AdminSelect{AdminQuery: aq}
	sbuild.label = admin.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AdminSelect configured with the given aggregations.
func (aq *AdminQuery) Aggregate(fns ...AggregateFunc) *AdminSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AdminQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !admin.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AdminQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Admin, error) {
	var (
		nodes       = []*Admin{}
		_spec       = aq.querySpec()
		loadedTypes = [22]bool{
			aq.withCreator != nil,
			aq.withUpdater != nil,
			aq.withAdminRoles != nil,
			aq.withAdminCreator != nil,
			aq.withAdminUpdater != nil,
			aq.withAdminRoleCreator != nil,
			aq.withAdminRoleUpdater != nil,
			aq.withRiskCreator != nil,
			aq.withRiskUpdater != nil,
			aq.withRiskLocationCreator != nil,
			aq.withRiskLocationUpdater != nil,
			aq.withRiskCategoryCreator != nil,
			aq.withRiskCategoryUpdater != nil,
			aq.withDepartmentCreator != nil,
			aq.withDepartmentUpdater != nil,
			aq.withEmployeeCreator != nil,
			aq.withEmployeeUpdater != nil,
			aq.withEmployee != nil,
			aq.withOccupationCreator != nil,
			aq.withOccupationUpdater != nil,
			aq.withIpcReportEventCreator != nil,
			aq.withIpcReportEventUpdater != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Admin).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Admin{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withCreator; query != nil {
		if err := aq.loadCreator(ctx, query, nodes, nil,
			func(n *Admin, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withUpdater; query != nil {
		if err := aq.loadUpdater(ctx, query, nodes, nil,
			func(n *Admin, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAdminRoles; query != nil {
		if err := aq.loadAdminRoles(ctx, query, nodes,
			func(n *Admin) { n.Edges.AdminRoles = []*AdminRole{} },
			func(n *Admin, e *AdminRole) { n.Edges.AdminRoles = append(n.Edges.AdminRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAdminCreator; query != nil {
		if err := aq.loadAdminCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.AdminCreator = []*Admin{} },
			func(n *Admin, e *Admin) { n.Edges.AdminCreator = append(n.Edges.AdminCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAdminUpdater; query != nil {
		if err := aq.loadAdminUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.AdminUpdater = []*Admin{} },
			func(n *Admin, e *Admin) { n.Edges.AdminUpdater = append(n.Edges.AdminUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAdminRoleCreator; query != nil {
		if err := aq.loadAdminRoleCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.AdminRoleCreator = []*AdminRole{} },
			func(n *Admin, e *AdminRole) { n.Edges.AdminRoleCreator = append(n.Edges.AdminRoleCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAdminRoleUpdater; query != nil {
		if err := aq.loadAdminRoleUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.AdminRoleUpdater = []*AdminRole{} },
			func(n *Admin, e *AdminRole) { n.Edges.AdminRoleUpdater = append(n.Edges.AdminRoleUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskCreator; query != nil {
		if err := aq.loadRiskCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskCreator = []*Risk{} },
			func(n *Admin, e *Risk) { n.Edges.RiskCreator = append(n.Edges.RiskCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskUpdater; query != nil {
		if err := aq.loadRiskUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskUpdater = []*Risk{} },
			func(n *Admin, e *Risk) { n.Edges.RiskUpdater = append(n.Edges.RiskUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskLocationCreator; query != nil {
		if err := aq.loadRiskLocationCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskLocationCreator = []*RiskLocation{} },
			func(n *Admin, e *RiskLocation) { n.Edges.RiskLocationCreator = append(n.Edges.RiskLocationCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskLocationUpdater; query != nil {
		if err := aq.loadRiskLocationUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskLocationUpdater = []*RiskLocation{} },
			func(n *Admin, e *RiskLocation) { n.Edges.RiskLocationUpdater = append(n.Edges.RiskLocationUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskCategoryCreator; query != nil {
		if err := aq.loadRiskCategoryCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskCategoryCreator = []*RiskCategory{} },
			func(n *Admin, e *RiskCategory) { n.Edges.RiskCategoryCreator = append(n.Edges.RiskCategoryCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRiskCategoryUpdater; query != nil {
		if err := aq.loadRiskCategoryUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.RiskCategoryUpdater = []*RiskCategory{} },
			func(n *Admin, e *RiskCategory) { n.Edges.RiskCategoryUpdater = append(n.Edges.RiskCategoryUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withDepartmentCreator; query != nil {
		if err := aq.loadDepartmentCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.DepartmentCreator = []*Department{} },
			func(n *Admin, e *Department) { n.Edges.DepartmentCreator = append(n.Edges.DepartmentCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withDepartmentUpdater; query != nil {
		if err := aq.loadDepartmentUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.DepartmentUpdater = []*Department{} },
			func(n *Admin, e *Department) { n.Edges.DepartmentUpdater = append(n.Edges.DepartmentUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEmployeeCreator; query != nil {
		if err := aq.loadEmployeeCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.EmployeeCreator = []*Employee{} },
			func(n *Admin, e *Employee) { n.Edges.EmployeeCreator = append(n.Edges.EmployeeCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEmployeeUpdater; query != nil {
		if err := aq.loadEmployeeUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.EmployeeUpdater = []*Employee{} },
			func(n *Admin, e *Employee) { n.Edges.EmployeeUpdater = append(n.Edges.EmployeeUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEmployee; query != nil {
		if err := aq.loadEmployee(ctx, query, nodes,
			func(n *Admin) { n.Edges.Employee = []*Employee{} },
			func(n *Admin, e *Employee) { n.Edges.Employee = append(n.Edges.Employee, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOccupationCreator; query != nil {
		if err := aq.loadOccupationCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.OccupationCreator = []*Occupation{} },
			func(n *Admin, e *Occupation) { n.Edges.OccupationCreator = append(n.Edges.OccupationCreator, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOccupationUpdater; query != nil {
		if err := aq.loadOccupationUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.OccupationUpdater = []*Occupation{} },
			func(n *Admin, e *Occupation) { n.Edges.OccupationUpdater = append(n.Edges.OccupationUpdater, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withIpcReportEventCreator; query != nil {
		if err := aq.loadIpcReportEventCreator(ctx, query, nodes,
			func(n *Admin) { n.Edges.IpcReportEventCreator = []*IPCReportEvent{} },
			func(n *Admin, e *IPCReportEvent) {
				n.Edges.IpcReportEventCreator = append(n.Edges.IpcReportEventCreator, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := aq.withIpcReportEventUpdater; query != nil {
		if err := aq.loadIpcReportEventUpdater(ctx, query, nodes,
			func(n *Admin) { n.Edges.IpcReportEventUpdater = []*IPCReportEvent{} },
			func(n *Admin, e *IPCReportEvent) {
				n.Edges.IpcReportEventUpdater = append(n.Edges.IpcReportEventUpdater, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AdminQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Admin)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AdminQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Admin)
	for i := range nodes {
		fk := nodes[i].UpdatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AdminQuery) loadAdminRoles(ctx context.Context, query *AdminRoleQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *AdminRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Admin)
	nids := make(map[int]map[*Admin]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(admin.AdminRolesTable)
		s.Join(joinT).On(s.C(adminrole.FieldID), joinT.C(admin.AdminRolesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(admin.AdminRolesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(admin.AdminRolesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Admin]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AdminRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "admin_roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *AdminQuery) loadAdminCreator(ctx context.Context, query *AdminQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Admin)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(admin.FieldCreatedBy)
	}
	query.Where(predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.AdminCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadAdminUpdater(ctx context.Context, query *AdminQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Admin)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(admin.FieldUpdatedBy)
	}
	query.Where(predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.AdminUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadAdminRoleCreator(ctx context.Context, query *AdminRoleQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *AdminRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(adminrole.FieldCreatedBy)
	}
	query.Where(predicate.AdminRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.AdminRoleCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadAdminRoleUpdater(ctx context.Context, query *AdminRoleQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *AdminRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(adminrole.FieldUpdatedBy)
	}
	query.Where(predicate.AdminRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.AdminRoleUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskCreator(ctx context.Context, query *RiskQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Risk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(risk.FieldCreatedBy)
	}
	query.Where(predicate.Risk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskUpdater(ctx context.Context, query *RiskQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Risk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(risk.FieldUpdatedBy)
	}
	query.Where(predicate.Risk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskLocationCreator(ctx context.Context, query *RiskLocationQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *RiskLocation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(risklocation.FieldCreatedBy)
	}
	query.Where(predicate.RiskLocation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskLocationCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskLocationUpdater(ctx context.Context, query *RiskLocationQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *RiskLocation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(risklocation.FieldUpdatedBy)
	}
	query.Where(predicate.RiskLocation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskLocationUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskCategoryCreator(ctx context.Context, query *RiskCategoryQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *RiskCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(riskcategory.FieldCreatedBy)
	}
	query.Where(predicate.RiskCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskCategoryCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadRiskCategoryUpdater(ctx context.Context, query *RiskCategoryQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *RiskCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(riskcategory.FieldUpdatedBy)
	}
	query.Where(predicate.RiskCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.RiskCategoryUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadDepartmentCreator(ctx context.Context, query *DepartmentQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Department)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(department.FieldCreatedBy)
	}
	query.Where(predicate.Department(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.DepartmentCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadDepartmentUpdater(ctx context.Context, query *DepartmentQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Department)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(department.FieldUpdatedBy)
	}
	query.Where(predicate.Department(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.DepartmentUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadEmployeeCreator(ctx context.Context, query *EmployeeQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Employee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(employee.FieldCreatedBy)
	}
	query.Where(predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.EmployeeCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadEmployeeUpdater(ctx context.Context, query *EmployeeQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Employee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(employee.FieldUpdatedBy)
	}
	query.Where(predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.EmployeeUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Employee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(employee.FieldAdminID)
	}
	query.Where(predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.EmployeeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AdminID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "admin_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadOccupationCreator(ctx context.Context, query *OccupationQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Occupation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(occupation.FieldCreatedBy)
	}
	query.Where(predicate.Occupation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.OccupationCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadOccupationUpdater(ctx context.Context, query *OccupationQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *Occupation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(occupation.FieldUpdatedBy)
	}
	query.Where(predicate.Occupation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.OccupationUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadIpcReportEventCreator(ctx context.Context, query *IPCReportEventQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *IPCReportEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(ipcreportevent.FieldCreatedBy)
	}
	query.Where(predicate.IPCReportEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.IpcReportEventCreatorColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AdminQuery) loadIpcReportEventUpdater(ctx context.Context, query *IPCReportEventQuery, nodes []*Admin, init func(*Admin), assign func(*Admin, *IPCReportEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Admin)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(ipcreportevent.FieldUpdatedBy)
	}
	query.Where(predicate.IPCReportEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(admin.IpcReportEventUpdaterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updated_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (aq *AdminQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AdminQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for i := range fields {
			if fields[i] != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aq.withCreator != nil {
			_spec.Node.AddColumnOnce(admin.FieldCreatedBy)
		}
		if aq.withUpdater != nil {
			_spec.Node.AddColumnOnce(admin.FieldUpdatedBy)
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AdminQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(admin.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = admin.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminGroupBy is the group-by builder for Admin entities.
type AdminGroupBy struct {
	selector
	build *AdminQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AdminGroupBy) Aggregate(fns ...AggregateFunc) *AdminGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AdminGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdminQuery, *AdminGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AdminGroupBy) sqlScan(ctx context.Context, root *AdminQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AdminSelect is the builder for selecting fields of Admin entities.
type AdminSelect struct {
	*AdminQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AdminSelect) Aggregate(fns ...AggregateFunc) *AdminSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AdminSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdminQuery, *AdminSelect](ctx, as.AdminQuery, as, as.inters, v)
}

func (as *AdminSelect) sqlScan(ctx context.Context, root *AdminQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
