// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventLogQuery is the builder for querying EventLog entities.
type EventLogQuery struct {
	config
	ctx         *QueryContext
	order       []eventlog.OrderOption
	inters      []Interceptor
	predicates  []predicate.EventLog
	withCreator *AdminQuery
	withUpdater *AdminQuery
	withEvent   *EventQuery
	withDevice  *DeviceQuery
	withActor   *AdminQuery
	withActor2  *AdminQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventLogQuery builder.
func (elq *EventLogQuery) Where(ps ...predicate.EventLog) *EventLogQuery {
	elq.predicates = append(elq.predicates, ps...)
	return elq
}

// Limit the number of records to be returned by this query.
func (elq *EventLogQuery) Limit(limit int) *EventLogQuery {
	elq.ctx.Limit = &limit
	return elq
}

// Offset to start from.
func (elq *EventLogQuery) Offset(offset int) *EventLogQuery {
	elq.ctx.Offset = &offset
	return elq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (elq *EventLogQuery) Unique(unique bool) *EventLogQuery {
	elq.ctx.Unique = &unique
	return elq
}

// Order specifies how the records should be ordered.
func (elq *EventLogQuery) Order(o ...eventlog.OrderOption) *EventLogQuery {
	elq.order = append(elq.order, o...)
	return elq
}

// QueryCreator chains the current query on the "creator" edge.
func (elq *EventLogQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.CreatorTable, eventlog.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (elq *EventLogQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.UpdaterTable, eventlog.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvent chains the current query on the "event" edge.
func (elq *EventLogQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.EventTable, eventlog.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (elq *EventLogQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.DeviceTable, eventlog.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActor chains the current query on the "actor" edge.
func (elq *EventLogQuery) QueryActor() *AdminQuery {
	query := (&AdminClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.ActorTable, eventlog.ActorColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActor2 chains the current query on the "actor2" edge.
func (elq *EventLogQuery) QueryActor2() *AdminQuery {
	query := (&AdminClient{config: elq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.Actor2Table, eventlog.Actor2Column),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventLog entity from the query.
// Returns a *NotFoundError when no EventLog was found.
func (elq *EventLogQuery) First(ctx context.Context) (*EventLog, error) {
	nodes, err := elq.Limit(1).All(setContextOp(ctx, elq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (elq *EventLogQuery) FirstX(ctx context.Context) *EventLog {
	node, err := elq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventLog ID from the query.
// Returns a *NotFoundError when no EventLog ID was found.
func (elq *EventLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elq.Limit(1).IDs(setContextOp(ctx, elq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (elq *EventLogQuery) FirstIDX(ctx context.Context) int {
	id, err := elq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventLog entity is found.
// Returns a *NotFoundError when no EventLog entities are found.
func (elq *EventLogQuery) Only(ctx context.Context) (*EventLog, error) {
	nodes, err := elq.Limit(2).All(setContextOp(ctx, elq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventlog.Label}
	default:
		return nil, &NotSingularError{eventlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (elq *EventLogQuery) OnlyX(ctx context.Context) *EventLog {
	node, err := elq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventLog ID in the query.
// Returns a *NotSingularError when more than one EventLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (elq *EventLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elq.Limit(2).IDs(setContextOp(ctx, elq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventlog.Label}
	default:
		err = &NotSingularError{eventlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (elq *EventLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := elq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventLogs.
func (elq *EventLogQuery) All(ctx context.Context) ([]*EventLog, error) {
	ctx = setContextOp(ctx, elq.ctx, "All")
	if err := elq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventLog, *EventLogQuery]()
	return withInterceptors[[]*EventLog](ctx, elq, qr, elq.inters)
}

// AllX is like All, but panics if an error occurs.
func (elq *EventLogQuery) AllX(ctx context.Context) []*EventLog {
	nodes, err := elq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventLog IDs.
func (elq *EventLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if elq.ctx.Unique == nil && elq.path != nil {
		elq.Unique(true)
	}
	ctx = setContextOp(ctx, elq.ctx, "IDs")
	if err = elq.Select(eventlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (elq *EventLogQuery) IDsX(ctx context.Context) []int {
	ids, err := elq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (elq *EventLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, elq.ctx, "Count")
	if err := elq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, elq, querierCount[*EventLogQuery](), elq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (elq *EventLogQuery) CountX(ctx context.Context) int {
	count, err := elq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (elq *EventLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, elq.ctx, "Exist")
	switch _, err := elq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (elq *EventLogQuery) ExistX(ctx context.Context) bool {
	exist, err := elq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (elq *EventLogQuery) Clone() *EventLogQuery {
	if elq == nil {
		return nil
	}
	return &EventLogQuery{
		config:      elq.config,
		ctx:         elq.ctx.Clone(),
		order:       append([]eventlog.OrderOption{}, elq.order...),
		inters:      append([]Interceptor{}, elq.inters...),
		predicates:  append([]predicate.EventLog{}, elq.predicates...),
		withCreator: elq.withCreator.Clone(),
		withUpdater: elq.withUpdater.Clone(),
		withEvent:   elq.withEvent.Clone(),
		withDevice:  elq.withDevice.Clone(),
		withActor:   elq.withActor.Clone(),
		withActor2:  elq.withActor2.Clone(),
		// clone intermediate query.
		sql:  elq.sql.Clone(),
		path: elq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithCreator(opts ...func(*AdminQuery)) *EventLogQuery {
	query := (&AdminClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withCreator = query
	return elq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithUpdater(opts ...func(*AdminQuery)) *EventLogQuery {
	query := (&AdminClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withUpdater = query
	return elq
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithEvent(opts ...func(*EventQuery)) *EventLogQuery {
	query := (&EventClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withEvent = query
	return elq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithDevice(opts ...func(*DeviceQuery)) *EventLogQuery {
	query := (&DeviceClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withDevice = query
	return elq
}

// WithActor tells the query-builder to eager-load the nodes that are connected to
// the "actor" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithActor(opts ...func(*AdminQuery)) *EventLogQuery {
	query := (&AdminClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withActor = query
	return elq
}

// WithActor2 tells the query-builder to eager-load the nodes that are connected to
// the "actor2" edge. The optional arguments are used to configure the query builder of the edge.
func (elq *EventLogQuery) WithActor2(opts ...func(*AdminQuery)) *EventLogQuery {
	query := (&AdminClient{config: elq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elq.withActor2 = query
	return elq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventLog.Query().
//		GroupBy(eventlog.FieldCreateTime).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (elq *EventLogQuery) GroupBy(field string, fields ...string) *EventLogGroupBy {
	elq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventLogGroupBy{build: elq}
	grbuild.flds = &elq.ctx.Fields
	grbuild.label = eventlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time"`
//	}
//
//	client.EventLog.Query().
//		Select(eventlog.FieldCreateTime).
//		Scan(ctx, &v)
func (elq *EventLogQuery) Select(fields ...string) *EventLogSelect {
	elq.ctx.Fields = append(elq.ctx.Fields, fields...)
	sbuild := &EventLogSelect{EventLogQuery: elq}
	sbuild.label = eventlog.Label
	sbuild.flds, sbuild.scan = &elq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventLogSelect configured with the given aggregations.
func (elq *EventLogQuery) Aggregate(fns ...AggregateFunc) *EventLogSelect {
	return elq.Select().Aggregate(fns...)
}

func (elq *EventLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range elq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, elq); err != nil {
				return err
			}
		}
	}
	for _, f := range elq.ctx.Fields {
		if !eventlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if elq.path != nil {
		prev, err := elq.path(ctx)
		if err != nil {
			return err
		}
		elq.sql = prev
	}
	return nil
}

func (elq *EventLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventLog, error) {
	var (
		nodes       = []*EventLog{}
		_spec       = elq.querySpec()
		loadedTypes = [6]bool{
			elq.withCreator != nil,
			elq.withUpdater != nil,
			elq.withEvent != nil,
			elq.withDevice != nil,
			elq.withActor != nil,
			elq.withActor2 != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventLog{config: elq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, elq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := elq.withCreator; query != nil {
		if err := elq.loadCreator(ctx, query, nodes, nil,
			func(n *EventLog, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := elq.withUpdater; query != nil {
		if err := elq.loadUpdater(ctx, query, nodes, nil,
			func(n *EventLog, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := elq.withEvent; query != nil {
		if err := elq.loadEvent(ctx, query, nodes, nil,
			func(n *EventLog, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := elq.withDevice; query != nil {
		if err := elq.loadDevice(ctx, query, nodes, nil,
			func(n *EventLog, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	if query := elq.withActor; query != nil {
		if err := elq.loadActor(ctx, query, nodes, nil,
			func(n *EventLog, e *Admin) { n.Edges.Actor = e }); err != nil {
			return nil, err
		}
	}
	if query := elq.withActor2; query != nil {
		if err := elq.loadActor2(ctx, query, nodes, nil,
			func(n *EventLog, e *Admin) { n.Edges.Actor2 = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (elq *EventLogQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (elq *EventLogQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].UpdaterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updater_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (elq *EventLogQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Event)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].EventID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (elq *EventLogQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Device)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (elq *EventLogQuery) loadActor(ctx context.Context, query *AdminQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].ActorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (elq *EventLogQuery) loadActor2(ctx context.Context, query *AdminQuery, nodes []*EventLog, init func(*EventLog), assign func(*EventLog, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLog)
	for i := range nodes {
		fk := nodes[i].Actor2ID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor2_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (elq *EventLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := elq.querySpec()
	_spec.Node.Columns = elq.ctx.Fields
	if len(elq.ctx.Fields) > 0 {
		_spec.Unique = elq.ctx.Unique != nil && *elq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, elq.driver, _spec)
}

func (elq *EventLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	_spec.From = elq.sql
	if unique := elq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if elq.path != nil {
		_spec.Unique = true
	}
	if fields := elq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlog.FieldID)
		for i := range fields {
			if fields[i] != eventlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if elq.withCreator != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldCreatorID)
		}
		if elq.withUpdater != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldUpdaterID)
		}
		if elq.withEvent != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldEventID)
		}
		if elq.withDevice != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldDeviceID)
		}
		if elq.withActor != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldActorID)
		}
		if elq.withActor2 != nil {
			_spec.Node.AddColumnOnce(eventlog.FieldActor2ID)
		}
	}
	if ps := elq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := elq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := elq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := elq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (elq *EventLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(elq.driver.Dialect())
	t1 := builder.Table(eventlog.Table)
	columns := elq.ctx.Fields
	if len(columns) == 0 {
		columns = eventlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if elq.sql != nil {
		selector = elq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if elq.ctx.Unique != nil && *elq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range elq.predicates {
		p(selector)
	}
	for _, p := range elq.order {
		p(selector)
	}
	if offset := elq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := elq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventLogGroupBy is the group-by builder for EventLog entities.
type EventLogGroupBy struct {
	selector
	build *EventLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (elgb *EventLogGroupBy) Aggregate(fns ...AggregateFunc) *EventLogGroupBy {
	elgb.fns = append(elgb.fns, fns...)
	return elgb
}

// Scan applies the selector query and scans the result into the given value.
func (elgb *EventLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, elgb.build.ctx, "GroupBy")
	if err := elgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventLogQuery, *EventLogGroupBy](ctx, elgb.build, elgb, elgb.build.inters, v)
}

func (elgb *EventLogGroupBy) sqlScan(ctx context.Context, root *EventLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(elgb.fns))
	for _, fn := range elgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*elgb.flds)+len(elgb.fns))
		for _, f := range *elgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*elgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := elgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventLogSelect is the builder for selecting fields of EventLog entities.
type EventLogSelect struct {
	*EventLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (els *EventLogSelect) Aggregate(fns ...AggregateFunc) *EventLogSelect {
	els.fns = append(els.fns, fns...)
	return els
}

// Scan applies the selector query and scans the result into the given value.
func (els *EventLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, els.ctx, "Select")
	if err := els.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventLogQuery, *EventLogSelect](ctx, els.EventLogQuery, els, els.inters, v)
}

func (els *EventLogSelect) sqlScan(ctx context.Context, root *EventLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(els.fns))
	for _, fn := range els.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*els.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := els.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
