// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/permission"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/ent/dao/user"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminCreate is the builder for creating a Admin entity.
type AdminCreate struct {
	config
	mutation *AdminMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AdminCreate) SetCreateTime(t time.Time) *AdminCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AdminCreate) SetNillableCreateTime(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetCreatorID sets the "creator_id" field.
func (ac *AdminCreate) SetCreatorID(i int) *AdminCreate {
	ac.mutation.SetCreatorID(i)
	return ac
}

// SetDeleteTime sets the "delete_time" field.
func (ac *AdminCreate) SetDeleteTime(t time.Time) *AdminCreate {
	ac.mutation.SetDeleteTime(t)
	return ac
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ac *AdminCreate) SetNillableDeleteTime(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetDeleteTime(*t)
	}
	return ac
}

// SetUpdaterID sets the "updater_id" field.
func (ac *AdminCreate) SetUpdaterID(i int) *AdminCreate {
	ac.mutation.SetUpdaterID(i)
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AdminCreate) SetUpdateTime(t time.Time) *AdminCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AdminCreate) SetNillableUpdateTime(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetUsername sets the "username" field.
func (ac *AdminCreate) SetUsername(s string) *AdminCreate {
	ac.mutation.SetUsername(s)
	return ac
}

// SetPassword sets the "password" field.
func (ac *AdminCreate) SetPassword(s string) *AdminCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AdminCreate) SetNickname(s string) *AdminCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetRealName sets the "real_name" field.
func (ac *AdminCreate) SetRealName(s string) *AdminCreate {
	ac.mutation.SetRealName(s)
	return ac
}

// SetMobile sets the "mobile" field.
func (ac *AdminCreate) SetMobile(s string) *AdminCreate {
	ac.mutation.SetMobile(s)
	return ac
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (ac *AdminCreate) SetNillableMobile(s *string) *AdminCreate {
	if s != nil {
		ac.SetMobile(*s)
	}
	return ac
}

// SetWechatOpenid sets the "wechat_openid" field.
func (ac *AdminCreate) SetWechatOpenid(s string) *AdminCreate {
	ac.mutation.SetWechatOpenid(s)
	return ac
}

// SetNillableWechatOpenid sets the "wechat_openid" field if the given value is not nil.
func (ac *AdminCreate) SetNillableWechatOpenid(s *string) *AdminCreate {
	if s != nil {
		ac.SetWechatOpenid(*s)
	}
	return ac
}

// SetAvatar sets the "avatar" field.
func (ac *AdminCreate) SetAvatar(ti types.UploadedImage) *AdminCreate {
	ac.mutation.SetAvatar(ti)
	return ac
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ac *AdminCreate) SetNillableAvatar(ti *types.UploadedImage) *AdminCreate {
	if ti != nil {
		ac.SetAvatar(*ti)
	}
	return ac
}

// SetAdminStatus sets the "admin_status" field.
func (ac *AdminCreate) SetAdminStatus(es enums.EnabledStatus) *AdminCreate {
	ac.mutation.SetAdminStatus(es)
	return ac
}

// SetNillableAdminStatus sets the "admin_status" field if the given value is not nil.
func (ac *AdminCreate) SetNillableAdminStatus(es *enums.EnabledStatus) *AdminCreate {
	if es != nil {
		ac.SetAdminStatus(*es)
	}
	return ac
}

// SetCreator sets the "creator" edge to the Admin entity.
func (ac *AdminCreate) SetCreator(a *Admin) *AdminCreate {
	return ac.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ac *AdminCreate) SetUpdater(a *Admin) *AdminCreate {
	return ac.SetUpdaterID(a.ID)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ac *AdminCreate) AddPermissionIDs(ids ...int) *AdminCreate {
	ac.mutation.AddPermissionIDs(ids...)
	return ac
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ac *AdminCreate) AddPermissions(p ...*Permission) *AdminCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPermissionIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (ac *AdminCreate) AddAdminCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminCreatorIDs(ids...)
	return ac
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (ac *AdminCreate) AddAdminCreator(a ...*Admin) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (ac *AdminCreate) AddAdminUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminUpdaterIDs(ids...)
	return ac
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (ac *AdminCreate) AddAdminUpdater(a ...*Admin) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminUpdaterIDs(ids...)
}

// AddPermissionCreatorIDs adds the "permission_creator" edge to the Permission entity by IDs.
func (ac *AdminCreate) AddPermissionCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddPermissionCreatorIDs(ids...)
	return ac
}

// AddPermissionCreator adds the "permission_creator" edges to the Permission entity.
func (ac *AdminCreate) AddPermissionCreator(p ...*Permission) *AdminCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPermissionCreatorIDs(ids...)
}

// AddPermissionUpdaterIDs adds the "permission_updater" edge to the Permission entity by IDs.
func (ac *AdminCreate) AddPermissionUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddPermissionUpdaterIDs(ids...)
	return ac
}

// AddPermissionUpdater adds the "permission_updater" edges to the Permission entity.
func (ac *AdminCreate) AddPermissionUpdater(p ...*Permission) *AdminCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPermissionUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (ac *AdminCreate) AddRiskCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCreatorIDs(ids...)
	return ac
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (ac *AdminCreate) AddRiskCreator(r ...*Risk) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (ac *AdminCreate) AddRiskUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskUpdaterIDs(ids...)
	return ac
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (ac *AdminCreate) AddRiskUpdater(r ...*Risk) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskUpdaterIDs(ids...)
}

// AddRiskMaintainerIDs adds the "risk_maintainer" edge to the Risk entity by IDs.
func (ac *AdminCreate) AddRiskMaintainerIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskMaintainerIDs(ids...)
	return ac
}

// AddRiskMaintainer adds the "risk_maintainer" edges to the Risk entity.
func (ac *AdminCreate) AddRiskMaintainer(r ...*Risk) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskMaintainerIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (ac *AdminCreate) AddRiskLocationCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskLocationCreatorIDs(ids...)
	return ac
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (ac *AdminCreate) AddRiskLocationCreator(r ...*RiskLocation) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (ac *AdminCreate) AddRiskLocationUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskLocationUpdaterIDs(ids...)
	return ac
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (ac *AdminCreate) AddRiskLocationUpdater(r ...*RiskLocation) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (ac *AdminCreate) AddRiskCategoryCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCategoryCreatorIDs(ids...)
	return ac
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (ac *AdminCreate) AddRiskCategoryCreator(r ...*RiskCategory) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (ac *AdminCreate) AddRiskCategoryUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return ac
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (ac *AdminCreate) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (ac *AdminCreate) AddDepartmentCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDepartmentCreatorIDs(ids...)
	return ac
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (ac *AdminCreate) AddDepartmentCreator(d ...*Department) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (ac *AdminCreate) AddDepartmentUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDepartmentUpdaterIDs(ids...)
	return ac
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (ac *AdminCreate) AddDepartmentUpdater(d ...*Department) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (ac *AdminCreate) AddEmployeeCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEmployeeCreatorIDs(ids...)
	return ac
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (ac *AdminCreate) AddEmployeeCreator(e ...*Employee) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (ac *AdminCreate) AddEmployeeUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEmployeeUpdaterIDs(ids...)
	return ac
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (ac *AdminCreate) AddEmployeeUpdater(e ...*Employee) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeUpdaterIDs(ids...)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (ac *AdminCreate) SetEmployeeID(id int) *AdminCreate {
	ac.mutation.SetEmployeeID(id)
	return ac
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (ac *AdminCreate) SetNillableEmployeeID(id *int) *AdminCreate {
	if id != nil {
		ac = ac.SetEmployeeID(*id)
	}
	return ac
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ac *AdminCreate) SetEmployee(e *Employee) *AdminCreate {
	return ac.SetEmployeeID(e.ID)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (ac *AdminCreate) AddOccupationCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddOccupationCreatorIDs(ids...)
	return ac
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (ac *AdminCreate) AddOccupationCreator(o ...*Occupation) *AdminCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (ac *AdminCreate) AddOccupationUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddOccupationUpdaterIDs(ids...)
	return ac
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (ac *AdminCreate) AddOccupationUpdater(o ...*Occupation) *AdminCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOccupationUpdaterIDs(ids...)
}

// AddEventCreatorIDs adds the "event_creator" edge to the Event entity by IDs.
func (ac *AdminCreate) AddEventCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventCreatorIDs(ids...)
	return ac
}

// AddEventCreator adds the "event_creator" edges to the Event entity.
func (ac *AdminCreate) AddEventCreator(e ...*Event) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventCreatorIDs(ids...)
}

// AddEventUpdaterIDs adds the "event_updater" edge to the Event entity by IDs.
func (ac *AdminCreate) AddEventUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventUpdaterIDs(ids...)
	return ac
}

// AddEventUpdater adds the "event_updater" edges to the Event entity.
func (ac *AdminCreate) AddEventUpdater(e ...*Event) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventUpdaterIDs(ids...)
}

// AddVideoCreatorIDs adds the "video_creator" edge to the Video entity by IDs.
func (ac *AdminCreate) AddVideoCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddVideoCreatorIDs(ids...)
	return ac
}

// AddVideoCreator adds the "video_creator" edges to the Video entity.
func (ac *AdminCreate) AddVideoCreator(v ...*Video) *AdminCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ac.AddVideoCreatorIDs(ids...)
}

// AddVideoUpdaterIDs adds the "video_updater" edge to the Video entity by IDs.
func (ac *AdminCreate) AddVideoUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddVideoUpdaterIDs(ids...)
	return ac
}

// AddVideoUpdater adds the "video_updater" edges to the Video entity.
func (ac *AdminCreate) AddVideoUpdater(v ...*Video) *AdminCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ac.AddVideoUpdaterIDs(ids...)
}

// AddAreaCreatorIDs adds the "area_creator" edge to the Area entity by IDs.
func (ac *AdminCreate) AddAreaCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAreaCreatorIDs(ids...)
	return ac
}

// AddAreaCreator adds the "area_creator" edges to the Area entity.
func (ac *AdminCreate) AddAreaCreator(a ...*Area) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAreaCreatorIDs(ids...)
}

// AddAreaUpdaterIDs adds the "area_updater" edge to the Area entity by IDs.
func (ac *AdminCreate) AddAreaUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAreaUpdaterIDs(ids...)
	return ac
}

// AddAreaUpdater adds the "area_updater" edges to the Area entity.
func (ac *AdminCreate) AddAreaUpdater(a ...*Area) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAreaUpdaterIDs(ids...)
}

// AddDeviceCreatorIDs adds the "device_creator" edge to the Device entity by IDs.
func (ac *AdminCreate) AddDeviceCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDeviceCreatorIDs(ids...)
	return ac
}

// AddDeviceCreator adds the "device_creator" edges to the Device entity.
func (ac *AdminCreate) AddDeviceCreator(d ...*Device) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeviceCreatorIDs(ids...)
}

// AddDeviceUpdaterIDs adds the "device_updater" edge to the Device entity by IDs.
func (ac *AdminCreate) AddDeviceUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDeviceUpdaterIDs(ids...)
	return ac
}

// AddDeviceUpdater adds the "device_updater" edges to the Device entity.
func (ac *AdminCreate) AddDeviceUpdater(d ...*Device) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeviceUpdaterIDs(ids...)
}

// AddDeviceInstallationCreatorIDs adds the "device_installation_creator" edge to the DeviceInstallation entity by IDs.
func (ac *AdminCreate) AddDeviceInstallationCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDeviceInstallationCreatorIDs(ids...)
	return ac
}

// AddDeviceInstallationCreator adds the "device_installation_creator" edges to the DeviceInstallation entity.
func (ac *AdminCreate) AddDeviceInstallationCreator(d ...*DeviceInstallation) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeviceInstallationCreatorIDs(ids...)
}

// AddDeviceInstallationUpdaterIDs adds the "device_installation_updater" edge to the DeviceInstallation entity by IDs.
func (ac *AdminCreate) AddDeviceInstallationUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDeviceInstallationUpdaterIDs(ids...)
	return ac
}

// AddDeviceInstallationUpdater adds the "device_installation_updater" edges to the DeviceInstallation entity.
func (ac *AdminCreate) AddDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeviceInstallationUpdaterIDs(ids...)
}

// AddEventLevelCreatorIDs adds the "event_level_creator" edge to the EventLevel entity by IDs.
func (ac *AdminCreate) AddEventLevelCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLevelCreatorIDs(ids...)
	return ac
}

// AddEventLevelCreator adds the "event_level_creator" edges to the EventLevel entity.
func (ac *AdminCreate) AddEventLevelCreator(e ...*EventLevel) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLevelCreatorIDs(ids...)
}

// AddEventLevelUpdaterIDs adds the "event_level_updater" edge to the EventLevel entity by IDs.
func (ac *AdminCreate) AddEventLevelUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLevelUpdaterIDs(ids...)
	return ac
}

// AddEventLevelUpdater adds the "event_level_updater" edges to the EventLevel entity.
func (ac *AdminCreate) AddEventLevelUpdater(e ...*EventLevel) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLevelUpdaterIDs(ids...)
}

// AddFixingCreatorIDs adds the "fixing_creator" edge to the Fixing entity by IDs.
func (ac *AdminCreate) AddFixingCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddFixingCreatorIDs(ids...)
	return ac
}

// AddFixingCreator adds the "fixing_creator" edges to the Fixing entity.
func (ac *AdminCreate) AddFixingCreator(f ...*Fixing) *AdminCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFixingCreatorIDs(ids...)
}

// AddFixingUpdaterIDs adds the "fixing_updater" edge to the Fixing entity by IDs.
func (ac *AdminCreate) AddFixingUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddFixingUpdaterIDs(ids...)
	return ac
}

// AddFixingUpdater adds the "fixing_updater" edges to the Fixing entity.
func (ac *AdminCreate) AddFixingUpdater(f ...*Fixing) *AdminCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFixingUpdaterIDs(ids...)
}

// AddFixerIDs adds the "fixer" edge to the Fixing entity by IDs.
func (ac *AdminCreate) AddFixerIDs(ids ...int) *AdminCreate {
	ac.mutation.AddFixerIDs(ids...)
	return ac
}

// AddFixer adds the "fixer" edges to the Fixing entity.
func (ac *AdminCreate) AddFixer(f ...*Fixing) *AdminCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFixerIDs(ids...)
}

// AddEventLogCreatorIDs adds the "event_log_creator" edge to the EventLog entity by IDs.
func (ac *AdminCreate) AddEventLogCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLogCreatorIDs(ids...)
	return ac
}

// AddEventLogCreator adds the "event_log_creator" edges to the EventLog entity.
func (ac *AdminCreate) AddEventLogCreator(e ...*EventLog) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLogCreatorIDs(ids...)
}

// AddEventLogUpdaterIDs adds the "event_log_updater" edge to the EventLog entity by IDs.
func (ac *AdminCreate) AddEventLogUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLogUpdaterIDs(ids...)
	return ac
}

// AddEventLogUpdater adds the "event_log_updater" edges to the EventLog entity.
func (ac *AdminCreate) AddEventLogUpdater(e ...*EventLog) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLogUpdaterIDs(ids...)
}

// AddEventLogActorIDs adds the "event_log_actor" edge to the EventLog entity by IDs.
func (ac *AdminCreate) AddEventLogActorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLogActorIDs(ids...)
	return ac
}

// AddEventLogActor adds the "event_log_actor" edges to the EventLog entity.
func (ac *AdminCreate) AddEventLogActor(e ...*EventLog) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLogActorIDs(ids...)
}

// AddEventLogActor2IDs adds the "event_log_actor2" edge to the EventLog entity by IDs.
func (ac *AdminCreate) AddEventLogActor2IDs(ids ...int) *AdminCreate {
	ac.mutation.AddEventLogActor2IDs(ids...)
	return ac
}

// AddEventLogActor2 adds the "event_log_actor2" edges to the EventLog entity.
func (ac *AdminCreate) AddEventLogActor2(e ...*EventLog) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventLogActor2IDs(ids...)
}

// AddSweepCreatorIDs adds the "sweep_creator" edge to the Sweep entity by IDs.
func (ac *AdminCreate) AddSweepCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepCreatorIDs(ids...)
	return ac
}

// AddSweepCreator adds the "sweep_creator" edges to the Sweep entity.
func (ac *AdminCreate) AddSweepCreator(s ...*Sweep) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepCreatorIDs(ids...)
}

// AddSweepUpdaterIDs adds the "sweep_updater" edge to the Sweep entity by IDs.
func (ac *AdminCreate) AddSweepUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepUpdaterIDs(ids...)
	return ac
}

// AddSweepUpdater adds the "sweep_updater" edges to the Sweep entity.
func (ac *AdminCreate) AddSweepUpdater(s ...*Sweep) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepUpdaterIDs(ids...)
}

// AddSweepScheduleCreatorIDs adds the "sweep_schedule_creator" edge to the SweepSchedule entity by IDs.
func (ac *AdminCreate) AddSweepScheduleCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepScheduleCreatorIDs(ids...)
	return ac
}

// AddSweepScheduleCreator adds the "sweep_schedule_creator" edges to the SweepSchedule entity.
func (ac *AdminCreate) AddSweepScheduleCreator(s ...*SweepSchedule) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepScheduleCreatorIDs(ids...)
}

// AddSweepScheduleUpdaterIDs adds the "sweep_schedule_updater" edge to the SweepSchedule entity by IDs.
func (ac *AdminCreate) AddSweepScheduleUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepScheduleUpdaterIDs(ids...)
	return ac
}

// AddSweepScheduleUpdater adds the "sweep_schedule_updater" edges to the SweepSchedule entity.
func (ac *AdminCreate) AddSweepScheduleUpdater(s ...*SweepSchedule) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepScheduleUpdaterIDs(ids...)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (ac *AdminCreate) AddSweepScheduleIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepScheduleIDs(ids...)
	return ac
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (ac *AdminCreate) AddSweepSchedule(s ...*SweepSchedule) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepScheduleIDs(ids...)
}

// AddSweepResultCreatorIDs adds the "sweep_result_creator" edge to the SweepResult entity by IDs.
func (ac *AdminCreate) AddSweepResultCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepResultCreatorIDs(ids...)
	return ac
}

// AddSweepResultCreator adds the "sweep_result_creator" edges to the SweepResult entity.
func (ac *AdminCreate) AddSweepResultCreator(s ...*SweepResult) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepResultCreatorIDs(ids...)
}

// AddSweepResultUpdaterIDs adds the "sweep_result_updater" edge to the SweepResult entity by IDs.
func (ac *AdminCreate) AddSweepResultUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepResultUpdaterIDs(ids...)
	return ac
}

// AddSweepResultUpdater adds the "sweep_result_updater" edges to the SweepResult entity.
func (ac *AdminCreate) AddSweepResultUpdater(s ...*SweepResult) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepResultUpdaterIDs(ids...)
}

// AddSweepResultDetailsCreatorIDs adds the "sweep_result_details_creator" edge to the SweepResultDetails entity by IDs.
func (ac *AdminCreate) AddSweepResultDetailsCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepResultDetailsCreatorIDs(ids...)
	return ac
}

// AddSweepResultDetailsCreator adds the "sweep_result_details_creator" edges to the SweepResultDetails entity.
func (ac *AdminCreate) AddSweepResultDetailsCreator(s ...*SweepResultDetails) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepResultDetailsCreatorIDs(ids...)
}

// AddSweepResultDetailsUpdaterIDs adds the "sweep_result_details_updater" edge to the SweepResultDetails entity by IDs.
func (ac *AdminCreate) AddSweepResultDetailsUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddSweepResultDetailsUpdaterIDs(ids...)
	return ac
}

// AddSweepResultDetailsUpdater adds the "sweep_result_details_updater" edges to the SweepResultDetails entity.
func (ac *AdminCreate) AddSweepResultDetailsUpdater(s ...*SweepResultDetails) *AdminCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSweepResultDetailsUpdaterIDs(ids...)
}

// AddUserUpdaterIDs adds the "user_updater" edge to the User entity by IDs.
func (ac *AdminCreate) AddUserUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddUserUpdaterIDs(ids...)
	return ac
}

// AddUserUpdater adds the "user_updater" edges to the User entity.
func (ac *AdminCreate) AddUserUpdater(u ...*User) *AdminCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddUserUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (ac *AdminCreate) Mutation() *AdminMutation {
	return ac.mutation
}

// Save creates the Admin in the database.
func (ac *AdminCreate) Save(ctx context.Context) (*Admin, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdminCreate) SaveX(ctx context.Context) *Admin {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdminCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdminCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AdminCreate) defaults() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		if admin.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized admin.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := admin.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		if admin.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized admin.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := admin.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.AdminStatus(); !ok {
		v := admin.DefaultAdminStatus
		ac.mutation.SetAdminStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdminCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "Admin.create_time"`)}
	}
	if _, ok := ac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "Admin.creator_id"`)}
	}
	if v, ok := ac.mutation.CreatorID(); ok {
		if err := admin.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "Admin.creator_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "Admin.updater_id"`)}
	}
	if v, ok := ac.mutation.UpdaterID(); ok {
		if err := admin.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Admin.updater_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "Admin.update_time"`)}
	}
	if _, ok := ac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`dao: missing required field "Admin.username"`)}
	}
	if v, ok := ac.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`dao: missing required field "Admin.password"`)}
	}
	if v, ok := ac.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`dao: missing required field "Admin.nickname"`)}
	}
	if v, ok := ac.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if _, ok := ac.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New(`dao: missing required field "Admin.real_name"`)}
	}
	if v, ok := ac.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Mobile(); ok {
		if err := admin.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`dao: validator failed for field "Admin.mobile": %w`, err)}
		}
	}
	if v, ok := ac.mutation.WechatOpenid(); ok {
		if err := admin.WechatOpenidValidator(v); err != nil {
			return &ValidationError{Name: "wechat_openid", err: fmt.Errorf(`dao: validator failed for field "Admin.wechat_openid": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AdminStatus(); !ok {
		return &ValidationError{Name: "admin_status", err: errors.New(`dao: missing required field "Admin.admin_status"`)}
	}
	if v, ok := ac.mutation.AdminStatus(); ok {
		if err := admin.AdminStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "admin_status", err: fmt.Errorf(`dao: validator failed for field "Admin.admin_status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Admin.creator"`)}
	}
	if _, ok := ac.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Admin.updater"`)}
	}
	return nil
}

func (ac *AdminCreate) sqlSave(ctx context.Context) (*Admin, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AdminCreate) createSpec() (*Admin, *sqlgraph.CreateSpec) {
	var (
		_node = &Admin{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(admin.Table, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(admin.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.DeleteTime(); ok {
		_spec.SetField(admin.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(admin.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ac.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
		_node.RealName = value
	}
	if value, ok := ac.mutation.Mobile(); ok {
		_spec.SetField(admin.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := ac.mutation.WechatOpenid(); ok {
		_spec.SetField(admin.FieldWechatOpenid, field.TypeString, value)
		_node.WechatOpenid = value
	}
	if value, ok := ac.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeJSON, value)
		_node.Avatar = value
	}
	if value, ok := ac.mutation.AdminStatus(); ok {
		_spec.SetField(admin.FieldAdminStatus, field.TypeInt, value)
		_node.AdminStatus = value
	}
	if nodes := ac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.CreatorTable,
			Columns: []string{admin.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PermissionCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PermissionUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.VideoCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.VideoUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AreaCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AreaUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeviceCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeviceUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeviceInstallationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeviceInstallationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLevelCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLevelUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FixingCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FixingUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLogCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLogUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLogActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventLogActor2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepScheduleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepScheduleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepResultCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepResultUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepResultDetailsCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SweepResultDetailsUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UserUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminCreateBulk is the builder for creating many Admin entities in bulk.
type AdminCreateBulk struct {
	config
	err      error
	builders []*AdminCreate
}

// Save creates the Admin entities in the database.
func (acb *AdminCreateBulk) Save(ctx context.Context) ([]*Admin, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Admin, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdminCreateBulk) SaveX(ctx context.Context) []*Admin {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdminCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdminCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
