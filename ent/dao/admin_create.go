// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminCreate is the builder for creating a Admin entity.
type AdminCreate struct {
	config
	mutation *AdminMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AdminCreate) SetCreatedAt(t time.Time) *AdminCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableCreatedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AdminCreate) SetCreatedBy(i int) *AdminCreate {
	ac.mutation.SetCreatedBy(i)
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AdminCreate) SetDeletedAt(t time.Time) *AdminCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableDeletedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AdminCreate) SetUpdatedBy(i int) *AdminCreate {
	ac.mutation.SetUpdatedBy(i)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AdminCreate) SetUpdatedAt(t time.Time) *AdminCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableUpdatedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUsername sets the "username" field.
func (ac *AdminCreate) SetUsername(s string) *AdminCreate {
	ac.mutation.SetUsername(s)
	return ac
}

// SetPassword sets the "password" field.
func (ac *AdminCreate) SetPassword(s string) *AdminCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AdminCreate) SetNickname(s string) *AdminCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetRealName sets the "real_name" field.
func (ac *AdminCreate) SetRealName(s string) *AdminCreate {
	ac.mutation.SetRealName(s)
	return ac
}

// SetAvatar sets the "avatar" field.
func (ac *AdminCreate) SetAvatar(s string) *AdminCreate {
	ac.mutation.SetAvatar(s)
	return ac
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ac *AdminCreate) SetNillableAvatar(s *string) *AdminCreate {
	if s != nil {
		ac.SetAvatar(*s)
	}
	return ac
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (ac *AdminCreate) SetCreatorID(id int) *AdminCreate {
	ac.mutation.SetCreatorID(id)
	return ac
}

// SetCreator sets the "creator" edge to the Admin entity.
func (ac *AdminCreate) SetCreator(a *Admin) *AdminCreate {
	return ac.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ac *AdminCreate) SetUpdaterID(id int) *AdminCreate {
	ac.mutation.SetUpdaterID(id)
	return ac
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ac *AdminCreate) SetUpdater(a *Admin) *AdminCreate {
	return ac.SetUpdaterID(a.ID)
}

// AddAdminRoleIDs adds the "admin_roles" edge to the AdminRole entity by IDs.
func (ac *AdminCreate) AddAdminRoleIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminRoleIDs(ids...)
	return ac
}

// AddAdminRoles adds the "admin_roles" edges to the AdminRole entity.
func (ac *AdminCreate) AddAdminRoles(a ...*AdminRole) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminRoleIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (ac *AdminCreate) AddAdminCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminCreatorIDs(ids...)
	return ac
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (ac *AdminCreate) AddAdminCreator(a ...*Admin) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (ac *AdminCreate) AddAdminUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminUpdaterIDs(ids...)
	return ac
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (ac *AdminCreate) AddAdminUpdater(a ...*Admin) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminUpdaterIDs(ids...)
}

// AddAdminRoleCreatorIDs adds the "admin_role_creator" edge to the AdminRole entity by IDs.
func (ac *AdminCreate) AddAdminRoleCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminRoleCreatorIDs(ids...)
	return ac
}

// AddAdminRoleCreator adds the "admin_role_creator" edges to the AdminRole entity.
func (ac *AdminCreate) AddAdminRoleCreator(a ...*AdminRole) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminRoleCreatorIDs(ids...)
}

// AddAdminRoleUpdaterIDs adds the "admin_role_updater" edge to the AdminRole entity by IDs.
func (ac *AdminCreate) AddAdminRoleUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminRoleUpdaterIDs(ids...)
	return ac
}

// AddAdminRoleUpdater adds the "admin_role_updater" edges to the AdminRole entity.
func (ac *AdminCreate) AddAdminRoleUpdater(a ...*AdminRole) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminRoleUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (ac *AdminCreate) AddRiskCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCreatorIDs(ids...)
	return ac
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (ac *AdminCreate) AddRiskCreator(r ...*Risk) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (ac *AdminCreate) AddRiskUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskUpdaterIDs(ids...)
	return ac
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (ac *AdminCreate) AddRiskUpdater(r ...*Risk) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskUpdaterIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (ac *AdminCreate) AddRiskLocationCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskLocationCreatorIDs(ids...)
	return ac
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (ac *AdminCreate) AddRiskLocationCreator(r ...*RiskLocation) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (ac *AdminCreate) AddRiskLocationUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskLocationUpdaterIDs(ids...)
	return ac
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (ac *AdminCreate) AddRiskLocationUpdater(r ...*RiskLocation) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (ac *AdminCreate) AddRiskCategoryCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCategoryCreatorIDs(ids...)
	return ac
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (ac *AdminCreate) AddRiskCategoryCreator(r ...*RiskCategory) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (ac *AdminCreate) AddRiskCategoryUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return ac
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (ac *AdminCreate) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (ac *AdminCreate) AddDepartmentCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDepartmentCreatorIDs(ids...)
	return ac
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (ac *AdminCreate) AddDepartmentCreator(d ...*Department) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (ac *AdminCreate) AddDepartmentUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddDepartmentUpdaterIDs(ids...)
	return ac
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (ac *AdminCreate) AddDepartmentUpdater(d ...*Department) *AdminCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (ac *AdminCreate) AddEmployeeCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEmployeeCreatorIDs(ids...)
	return ac
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (ac *AdminCreate) AddEmployeeCreator(e ...*Employee) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (ac *AdminCreate) AddEmployeeUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEmployeeUpdaterIDs(ids...)
	return ac
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (ac *AdminCreate) AddEmployeeUpdater(e ...*Employee) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeUpdaterIDs(ids...)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (ac *AdminCreate) AddEmployeeIDs(ids ...int) *AdminCreate {
	ac.mutation.AddEmployeeIDs(ids...)
	return ac
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (ac *AdminCreate) AddEmployee(e ...*Employee) *AdminCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeIDs(ids...)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (ac *AdminCreate) AddOccupationCreatorIDs(ids ...int) *AdminCreate {
	ac.mutation.AddOccupationCreatorIDs(ids...)
	return ac
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (ac *AdminCreate) AddOccupationCreator(o ...*Occupation) *AdminCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (ac *AdminCreate) AddOccupationUpdaterIDs(ids ...int) *AdminCreate {
	ac.mutation.AddOccupationUpdaterIDs(ids...)
	return ac
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (ac *AdminCreate) AddOccupationUpdater(o ...*Occupation) *AdminCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOccupationUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (ac *AdminCreate) Mutation() *AdminMutation {
	return ac.mutation
}

// Save creates the Admin in the database.
func (ac *AdminCreate) Save(ctx context.Context) (*Admin, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdminCreate) SaveX(ctx context.Context) *Admin {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdminCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdminCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AdminCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if admin.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := admin.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if admin.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := admin.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdminCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "Admin.created_at"`)}
	}
	if _, ok := ac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "Admin.created_by"`)}
	}
	if v, ok := ac.mutation.CreatedBy(); ok {
		if err := admin.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "Admin.created_by": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "Admin.updated_by"`)}
	}
	if v, ok := ac.mutation.UpdatedBy(); ok {
		if err := admin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Admin.updated_by": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "Admin.updated_at"`)}
	}
	if _, ok := ac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`dao: missing required field "Admin.username"`)}
	}
	if v, ok := ac.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`dao: missing required field "Admin.password"`)}
	}
	if v, ok := ac.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`dao: missing required field "Admin.nickname"`)}
	}
	if v, ok := ac.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if _, ok := ac.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New(`dao: missing required field "Admin.real_name"`)}
	}
	if v, ok := ac.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Avatar(); ok {
		if err := admin.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`dao: validator failed for field "Admin.avatar": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Admin.creator"`)}
	}
	if _, ok := ac.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Admin.updater"`)}
	}
	return nil
}

func (ac *AdminCreate) sqlSave(ctx context.Context) (*Admin, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AdminCreate) createSpec() (*Admin, *sqlgraph.CreateSpec) {
	var (
		_node = &Admin{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(admin.Table, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(admin.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(admin.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ac.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
		_node.RealName = value
	}
	if value, ok := ac.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if nodes := ac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.CreatorTable,
			Columns: []string{admin.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminRoleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminRoleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminCreateBulk is the builder for creating many Admin entities in bulk.
type AdminCreateBulk struct {
	config
	err      error
	builders []*AdminCreate
}

// Save creates the Admin entities in the database.
func (acb *AdminCreateBulk) Save(ctx context.Context) ([]*Admin, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Admin, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdminCreateBulk) SaveX(ctx context.Context) []*Admin {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdminCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdminCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
