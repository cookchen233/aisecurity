// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceInstallationQuery is the builder for querying DeviceInstallation entities.
type DeviceInstallationQuery struct {
	config
	ctx         *QueryContext
	order       []deviceinstallation.OrderOption
	inters      []Interceptor
	predicates  []predicate.DeviceInstallation
	withCreator *AdminQuery
	withUpdater *AdminQuery
	withArea    *AreaQuery
	withDevice  *DeviceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeviceInstallationQuery builder.
func (diq *DeviceInstallationQuery) Where(ps ...predicate.DeviceInstallation) *DeviceInstallationQuery {
	diq.predicates = append(diq.predicates, ps...)
	return diq
}

// Limit the number of records to be returned by this query.
func (diq *DeviceInstallationQuery) Limit(limit int) *DeviceInstallationQuery {
	diq.ctx.Limit = &limit
	return diq
}

// Offset to start from.
func (diq *DeviceInstallationQuery) Offset(offset int) *DeviceInstallationQuery {
	diq.ctx.Offset = &offset
	return diq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (diq *DeviceInstallationQuery) Unique(unique bool) *DeviceInstallationQuery {
	diq.ctx.Unique = &unique
	return diq
}

// Order specifies how the records should be ordered.
func (diq *DeviceInstallationQuery) Order(o ...deviceinstallation.OrderOption) *DeviceInstallationQuery {
	diq.order = append(diq.order, o...)
	return diq
}

// QueryCreator chains the current query on the "creator" edge.
func (diq *DeviceInstallationQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.CreatorTable, deviceinstallation.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (diq *DeviceInstallationQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.UpdaterTable, deviceinstallation.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArea chains the current query on the "area" edge.
func (diq *DeviceInstallationQuery) QueryArea() *AreaQuery {
	query := (&AreaClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, selector),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.AreaTable, deviceinstallation.AreaColumn),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (diq *DeviceInstallationQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.DeviceTable, deviceinstallation.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeviceInstallation entity from the query.
// Returns a *NotFoundError when no DeviceInstallation was found.
func (diq *DeviceInstallationQuery) First(ctx context.Context) (*DeviceInstallation, error) {
	nodes, err := diq.Limit(1).All(setContextOp(ctx, diq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deviceinstallation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (diq *DeviceInstallationQuery) FirstX(ctx context.Context) *DeviceInstallation {
	node, err := diq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeviceInstallation ID from the query.
// Returns a *NotFoundError when no DeviceInstallation ID was found.
func (diq *DeviceInstallationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = diq.Limit(1).IDs(setContextOp(ctx, diq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deviceinstallation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (diq *DeviceInstallationQuery) FirstIDX(ctx context.Context) int {
	id, err := diq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeviceInstallation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeviceInstallation entity is found.
// Returns a *NotFoundError when no DeviceInstallation entities are found.
func (diq *DeviceInstallationQuery) Only(ctx context.Context) (*DeviceInstallation, error) {
	nodes, err := diq.Limit(2).All(setContextOp(ctx, diq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deviceinstallation.Label}
	default:
		return nil, &NotSingularError{deviceinstallation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (diq *DeviceInstallationQuery) OnlyX(ctx context.Context) *DeviceInstallation {
	node, err := diq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeviceInstallation ID in the query.
// Returns a *NotSingularError when more than one DeviceInstallation ID is found.
// Returns a *NotFoundError when no entities are found.
func (diq *DeviceInstallationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = diq.Limit(2).IDs(setContextOp(ctx, diq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deviceinstallation.Label}
	default:
		err = &NotSingularError{deviceinstallation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (diq *DeviceInstallationQuery) OnlyIDX(ctx context.Context) int {
	id, err := diq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeviceInstallations.
func (diq *DeviceInstallationQuery) All(ctx context.Context) ([]*DeviceInstallation, error) {
	ctx = setContextOp(ctx, diq.ctx, "All")
	if err := diq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeviceInstallation, *DeviceInstallationQuery]()
	return withInterceptors[[]*DeviceInstallation](ctx, diq, qr, diq.inters)
}

// AllX is like All, but panics if an error occurs.
func (diq *DeviceInstallationQuery) AllX(ctx context.Context) []*DeviceInstallation {
	nodes, err := diq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeviceInstallation IDs.
func (diq *DeviceInstallationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if diq.ctx.Unique == nil && diq.path != nil {
		diq.Unique(true)
	}
	ctx = setContextOp(ctx, diq.ctx, "IDs")
	if err = diq.Select(deviceinstallation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (diq *DeviceInstallationQuery) IDsX(ctx context.Context) []int {
	ids, err := diq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (diq *DeviceInstallationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, diq.ctx, "Count")
	if err := diq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, diq, querierCount[*DeviceInstallationQuery](), diq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (diq *DeviceInstallationQuery) CountX(ctx context.Context) int {
	count, err := diq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (diq *DeviceInstallationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, diq.ctx, "Exist")
	switch _, err := diq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (diq *DeviceInstallationQuery) ExistX(ctx context.Context) bool {
	exist, err := diq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeviceInstallationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (diq *DeviceInstallationQuery) Clone() *DeviceInstallationQuery {
	if diq == nil {
		return nil
	}
	return &DeviceInstallationQuery{
		config:      diq.config,
		ctx:         diq.ctx.Clone(),
		order:       append([]deviceinstallation.OrderOption{}, diq.order...),
		inters:      append([]Interceptor{}, diq.inters...),
		predicates:  append([]predicate.DeviceInstallation{}, diq.predicates...),
		withCreator: diq.withCreator.Clone(),
		withUpdater: diq.withUpdater.Clone(),
		withArea:    diq.withArea.Clone(),
		withDevice:  diq.withDevice.Clone(),
		// clone intermediate query.
		sql:  diq.sql.Clone(),
		path: diq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DeviceInstallationQuery) WithCreator(opts ...func(*AdminQuery)) *DeviceInstallationQuery {
	query := (&AdminClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withCreator = query
	return diq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DeviceInstallationQuery) WithUpdater(opts ...func(*AdminQuery)) *DeviceInstallationQuery {
	query := (&AdminClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withUpdater = query
	return diq
}

// WithArea tells the query-builder to eager-load the nodes that are connected to
// the "area" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DeviceInstallationQuery) WithArea(opts ...func(*AreaQuery)) *DeviceInstallationQuery {
	query := (&AreaClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withArea = query
	return diq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DeviceInstallationQuery) WithDevice(opts ...func(*DeviceQuery)) *DeviceInstallationQuery {
	query := (&DeviceClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withDevice = query
	return diq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeviceInstallation.Query().
//		GroupBy(deviceinstallation.FieldCreateTime).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (diq *DeviceInstallationQuery) GroupBy(field string, fields ...string) *DeviceInstallationGroupBy {
	diq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeviceInstallationGroupBy{build: diq}
	grbuild.flds = &diq.ctx.Fields
	grbuild.label = deviceinstallation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time"`
//	}
//
//	client.DeviceInstallation.Query().
//		Select(deviceinstallation.FieldCreateTime).
//		Scan(ctx, &v)
func (diq *DeviceInstallationQuery) Select(fields ...string) *DeviceInstallationSelect {
	diq.ctx.Fields = append(diq.ctx.Fields, fields...)
	sbuild := &DeviceInstallationSelect{DeviceInstallationQuery: diq}
	sbuild.label = deviceinstallation.Label
	sbuild.flds, sbuild.scan = &diq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeviceInstallationSelect configured with the given aggregations.
func (diq *DeviceInstallationQuery) Aggregate(fns ...AggregateFunc) *DeviceInstallationSelect {
	return diq.Select().Aggregate(fns...)
}

func (diq *DeviceInstallationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range diq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, diq); err != nil {
				return err
			}
		}
	}
	for _, f := range diq.ctx.Fields {
		if !deviceinstallation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if diq.path != nil {
		prev, err := diq.path(ctx)
		if err != nil {
			return err
		}
		diq.sql = prev
	}
	return nil
}

func (diq *DeviceInstallationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeviceInstallation, error) {
	var (
		nodes       = []*DeviceInstallation{}
		_spec       = diq.querySpec()
		loadedTypes = [4]bool{
			diq.withCreator != nil,
			diq.withUpdater != nil,
			diq.withArea != nil,
			diq.withDevice != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeviceInstallation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeviceInstallation{config: diq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, diq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := diq.withCreator; query != nil {
		if err := diq.loadCreator(ctx, query, nodes, nil,
			func(n *DeviceInstallation, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := diq.withUpdater; query != nil {
		if err := diq.loadUpdater(ctx, query, nodes, nil,
			func(n *DeviceInstallation, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := diq.withArea; query != nil {
		if err := diq.loadArea(ctx, query, nodes, nil,
			func(n *DeviceInstallation, e *Area) { n.Edges.Area = e }); err != nil {
			return nil, err
		}
	}
	if query := diq.withDevice; query != nil {
		if err := diq.loadDevice(ctx, query, nodes, nil,
			func(n *DeviceInstallation, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (diq *DeviceInstallationQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*DeviceInstallation, init func(*DeviceInstallation), assign func(*DeviceInstallation, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeviceInstallation)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (diq *DeviceInstallationQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*DeviceInstallation, init func(*DeviceInstallation), assign func(*DeviceInstallation, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeviceInstallation)
	for i := range nodes {
		fk := nodes[i].UpdaterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updater_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (diq *DeviceInstallationQuery) loadArea(ctx context.Context, query *AreaQuery, nodes []*DeviceInstallation, init func(*DeviceInstallation), assign func(*DeviceInstallation, *Area)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeviceInstallation)
	for i := range nodes {
		fk := nodes[i].AreaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(area.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "area_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (diq *DeviceInstallationQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*DeviceInstallation, init func(*DeviceInstallation), assign func(*DeviceInstallation, *Device)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeviceInstallation)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (diq *DeviceInstallationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := diq.querySpec()
	_spec.Node.Columns = diq.ctx.Fields
	if len(diq.ctx.Fields) > 0 {
		_spec.Unique = diq.ctx.Unique != nil && *diq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, diq.driver, _spec)
}

func (diq *DeviceInstallationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deviceinstallation.Table, deviceinstallation.Columns, sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt))
	_spec.From = diq.sql
	if unique := diq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if diq.path != nil {
		_spec.Unique = true
	}
	if fields := diq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceinstallation.FieldID)
		for i := range fields {
			if fields[i] != deviceinstallation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if diq.withCreator != nil {
			_spec.Node.AddColumnOnce(deviceinstallation.FieldCreatorID)
		}
		if diq.withUpdater != nil {
			_spec.Node.AddColumnOnce(deviceinstallation.FieldUpdaterID)
		}
		if diq.withArea != nil {
			_spec.Node.AddColumnOnce(deviceinstallation.FieldAreaID)
		}
		if diq.withDevice != nil {
			_spec.Node.AddColumnOnce(deviceinstallation.FieldDeviceID)
		}
	}
	if ps := diq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := diq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := diq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := diq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (diq *DeviceInstallationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(diq.driver.Dialect())
	t1 := builder.Table(deviceinstallation.Table)
	columns := diq.ctx.Fields
	if len(columns) == 0 {
		columns = deviceinstallation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if diq.sql != nil {
		selector = diq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if diq.ctx.Unique != nil && *diq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range diq.predicates {
		p(selector)
	}
	for _, p := range diq.order {
		p(selector)
	}
	if offset := diq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := diq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeviceInstallationGroupBy is the group-by builder for DeviceInstallation entities.
type DeviceInstallationGroupBy struct {
	selector
	build *DeviceInstallationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (digb *DeviceInstallationGroupBy) Aggregate(fns ...AggregateFunc) *DeviceInstallationGroupBy {
	digb.fns = append(digb.fns, fns...)
	return digb
}

// Scan applies the selector query and scans the result into the given value.
func (digb *DeviceInstallationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, digb.build.ctx, "GroupBy")
	if err := digb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceInstallationQuery, *DeviceInstallationGroupBy](ctx, digb.build, digb, digb.build.inters, v)
}

func (digb *DeviceInstallationGroupBy) sqlScan(ctx context.Context, root *DeviceInstallationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(digb.fns))
	for _, fn := range digb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*digb.flds)+len(digb.fns))
		for _, f := range *digb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*digb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := digb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeviceInstallationSelect is the builder for selecting fields of DeviceInstallation entities.
type DeviceInstallationSelect struct {
	*DeviceInstallationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dis *DeviceInstallationSelect) Aggregate(fns ...AggregateFunc) *DeviceInstallationSelect {
	dis.fns = append(dis.fns, fns...)
	return dis
}

// Scan applies the selector query and scans the result into the given value.
func (dis *DeviceInstallationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dis.ctx, "Select")
	if err := dis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceInstallationQuery, *DeviceInstallationSelect](ctx, dis.DeviceInstallationQuery, dis, dis.inters, v)
}

func (dis *DeviceInstallationSelect) sqlScan(ctx context.Context, root *DeviceInstallationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dis.fns))
	for _, fn := range dis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
