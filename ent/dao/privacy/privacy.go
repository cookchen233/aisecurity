// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"aisecurity/ent/dao"
	"context"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, dao.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op dao.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op dao.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m dao.Mutation) error {
		return Denyf("dao/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AdminQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AdminQueryRuleFunc func(context.Context, *dao.AdminQuery) error

// EvalQuery return f(ctx, q).
func (f AdminQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.AdminQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.AdminQuery", q)
}

// The AdminMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AdminMutationRuleFunc func(context.Context, *dao.AdminMutation) error

// EvalMutation calls f(ctx, m).
func (f AdminMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.AdminMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.AdminMutation", m)
}

// The AdminRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AdminRoleQueryRuleFunc func(context.Context, *dao.AdminRoleQuery) error

// EvalQuery return f(ctx, q).
func (f AdminRoleQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.AdminRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.AdminRoleQuery", q)
}

// The AdminRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AdminRoleMutationRuleFunc func(context.Context, *dao.AdminRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f AdminRoleMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.AdminRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.AdminRoleMutation", m)
}

// The AreaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AreaQueryRuleFunc func(context.Context, *dao.AreaQuery) error

// EvalQuery return f(ctx, q).
func (f AreaQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.AreaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.AreaQuery", q)
}

// The AreaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AreaMutationRuleFunc func(context.Context, *dao.AreaMutation) error

// EvalMutation calls f(ctx, m).
func (f AreaMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.AreaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.AreaMutation", m)
}

// The DepartmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DepartmentQueryRuleFunc func(context.Context, *dao.DepartmentQuery) error

// EvalQuery return f(ctx, q).
func (f DepartmentQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.DepartmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.DepartmentQuery", q)
}

// The DepartmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DepartmentMutationRuleFunc func(context.Context, *dao.DepartmentMutation) error

// EvalMutation calls f(ctx, m).
func (f DepartmentMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.DepartmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.DepartmentMutation", m)
}

// The DeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceQueryRuleFunc func(context.Context, *dao.DeviceQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.DeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.DeviceQuery", q)
}

// The DeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceMutationRuleFunc func(context.Context, *dao.DeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.DeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.DeviceMutation", m)
}

// The DeviceInstallationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceInstallationQueryRuleFunc func(context.Context, *dao.DeviceInstallationQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceInstallationQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.DeviceInstallationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.DeviceInstallationQuery", q)
}

// The DeviceInstallationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceInstallationMutationRuleFunc func(context.Context, *dao.DeviceInstallationMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceInstallationMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.DeviceInstallationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.DeviceInstallationMutation", m)
}

// The EmployeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmployeeQueryRuleFunc func(context.Context, *dao.EmployeeQuery) error

// EvalQuery return f(ctx, q).
func (f EmployeeQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.EmployeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.EmployeeQuery", q)
}

// The EmployeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmployeeMutationRuleFunc func(context.Context, *dao.EmployeeMutation) error

// EvalMutation calls f(ctx, m).
func (f EmployeeMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.EmployeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.EmployeeMutation", m)
}

// The EventLevelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventLevelQueryRuleFunc func(context.Context, *dao.EventLevelQuery) error

// EvalQuery return f(ctx, q).
func (f EventLevelQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.EventLevelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.EventLevelQuery", q)
}

// The EventLevelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventLevelMutationRuleFunc func(context.Context, *dao.EventLevelMutation) error

// EvalMutation calls f(ctx, m).
func (f EventLevelMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.EventLevelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.EventLevelMutation", m)
}

// The IPCEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IPCEventQueryRuleFunc func(context.Context, *dao.IPCEventQuery) error

// EvalQuery return f(ctx, q).
func (f IPCEventQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.IPCEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.IPCEventQuery", q)
}

// The IPCEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IPCEventMutationRuleFunc func(context.Context, *dao.IPCEventMutation) error

// EvalMutation calls f(ctx, m).
func (f IPCEventMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.IPCEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.IPCEventMutation", m)
}

// The OccupationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OccupationQueryRuleFunc func(context.Context, *dao.OccupationQuery) error

// EvalQuery return f(ctx, q).
func (f OccupationQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.OccupationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.OccupationQuery", q)
}

// The OccupationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OccupationMutationRuleFunc func(context.Context, *dao.OccupationMutation) error

// EvalMutation calls f(ctx, m).
func (f OccupationMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.OccupationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.OccupationMutation", m)
}

// The RiskQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiskQueryRuleFunc func(context.Context, *dao.RiskQuery) error

// EvalQuery return f(ctx, q).
func (f RiskQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.RiskQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.RiskQuery", q)
}

// The RiskMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiskMutationRuleFunc func(context.Context, *dao.RiskMutation) error

// EvalMutation calls f(ctx, m).
func (f RiskMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.RiskMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.RiskMutation", m)
}

// The RiskCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiskCategoryQueryRuleFunc func(context.Context, *dao.RiskCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f RiskCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.RiskCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.RiskCategoryQuery", q)
}

// The RiskCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiskCategoryMutationRuleFunc func(context.Context, *dao.RiskCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f RiskCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.RiskCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.RiskCategoryMutation", m)
}

// The RiskLocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiskLocationQueryRuleFunc func(context.Context, *dao.RiskLocationQuery) error

// EvalQuery return f(ctx, q).
func (f RiskLocationQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.RiskLocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.RiskLocationQuery", q)
}

// The RiskLocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiskLocationMutationRuleFunc func(context.Context, *dao.RiskLocationMutation) error

// EvalMutation calls f(ctx, m).
func (f RiskLocationMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.RiskLocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.RiskLocationMutation", m)
}

// The VideoQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VideoQueryRuleFunc func(context.Context, *dao.VideoQuery) error

// EvalQuery return f(ctx, q).
func (f VideoQueryRuleFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	if q, ok := q.(*dao.VideoQuery); ok {
		return f(ctx, q)
	}
	return Denyf("dao/privacy: unexpected query type %T, expect *dao.VideoQuery", q)
}

// The VideoMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VideoMutationRuleFunc func(context.Context, *dao.VideoMutation) error

// EvalMutation calls f(ctx, m).
func (f VideoMutationRuleFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	if m, ok := m.(*dao.VideoMutation); ok {
		return f(ctx, m)
	}
	return Denyf("dao/privacy: unexpected mutation type %T, expect *dao.VideoMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q dao.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m dao.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q dao.Query) (Filter, error) {
	switch q := q.(type) {
	case *dao.AdminQuery:
		return q.Filter(), nil
	case *dao.AdminRoleQuery:
		return q.Filter(), nil
	case *dao.AreaQuery:
		return q.Filter(), nil
	case *dao.DepartmentQuery:
		return q.Filter(), nil
	case *dao.DeviceQuery:
		return q.Filter(), nil
	case *dao.DeviceInstallationQuery:
		return q.Filter(), nil
	case *dao.EmployeeQuery:
		return q.Filter(), nil
	case *dao.EventLevelQuery:
		return q.Filter(), nil
	case *dao.IPCEventQuery:
		return q.Filter(), nil
	case *dao.OccupationQuery:
		return q.Filter(), nil
	case *dao.RiskQuery:
		return q.Filter(), nil
	case *dao.RiskCategoryQuery:
		return q.Filter(), nil
	case *dao.RiskLocationQuery:
		return q.Filter(), nil
	case *dao.VideoQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("dao/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m dao.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *dao.AdminMutation:
		return m.Filter(), nil
	case *dao.AdminRoleMutation:
		return m.Filter(), nil
	case *dao.AreaMutation:
		return m.Filter(), nil
	case *dao.DepartmentMutation:
		return m.Filter(), nil
	case *dao.DeviceMutation:
		return m.Filter(), nil
	case *dao.DeviceInstallationMutation:
		return m.Filter(), nil
	case *dao.EmployeeMutation:
		return m.Filter(), nil
	case *dao.EventLevelMutation:
		return m.Filter(), nil
	case *dao.IPCEventMutation:
		return m.Filter(), nil
	case *dao.OccupationMutation:
		return m.Filter(), nil
	case *dao.RiskMutation:
		return m.Filter(), nil
	case *dao.RiskCategoryMutation:
		return m.Filter(), nil
	case *dao.RiskLocationMutation:
		return m.Filter(), nil
	case *dao.VideoMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("dao/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
