// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeviceCreate) SetCreatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DeviceCreate) SetCreatedBy(i int) *DeviceCreate {
	dc.mutation.SetCreatedBy(i)
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DeviceCreate) SetDeletedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeletedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DeviceCreate) SetUpdatedBy(i int) *DeviceCreate {
	dc.mutation.SetUpdatedBy(i)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeviceCreate) SetUpdatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetBrand sets the "brand" field.
func (dc *DeviceCreate) SetBrand(eb enums.DeviceBrand) *DeviceCreate {
	dc.mutation.SetBrand(eb)
	return dc
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableBrand(eb *enums.DeviceBrand) *DeviceCreate {
	if eb != nil {
		dc.SetBrand(*eb)
	}
	return dc
}

// SetModel sets the "model" field.
func (dc *DeviceCreate) SetModel(em enums.DeviceModel) *DeviceCreate {
	dc.mutation.SetModel(em)
	return dc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableModel(em *enums.DeviceModel) *DeviceCreate {
	if em != nil {
		dc.SetModel(*em)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DeviceCreate) SetName(s string) *DeviceCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableName(s *string) *DeviceCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetSn sets the "sn" field.
func (dc *DeviceCreate) SetSn(s string) *DeviceCreate {
	dc.mutation.SetSn(s)
	return dc
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableSn(s *string) *DeviceCreate {
	if s != nil {
		dc.SetSn(*s)
	}
	return dc
}

// SetDeviceType sets the "device_type" field.
func (dc *DeviceCreate) SetDeviceType(et enums.DeviceType) *DeviceCreate {
	dc.mutation.SetDeviceType(et)
	return dc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeviceType(et *enums.DeviceType) *DeviceCreate {
	if et != nil {
		dc.SetDeviceType(*et)
	}
	return dc
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (dc *DeviceCreate) SetCreatorID(id int) *DeviceCreate {
	dc.mutation.SetCreatorID(id)
	return dc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (dc *DeviceCreate) SetCreator(a *Admin) *DeviceCreate {
	return dc.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (dc *DeviceCreate) SetUpdaterID(id int) *DeviceCreate {
	dc.mutation.SetUpdaterID(id)
	return dc
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (dc *DeviceCreate) SetUpdater(a *Admin) *DeviceCreate {
	return dc.SetUpdaterID(a.ID)
}

// AddIpcEventDeviceIDs adds the "ipc_event_device" edge to the IPCEvent entity by IDs.
func (dc *DeviceCreate) AddIpcEventDeviceIDs(ids ...int) *DeviceCreate {
	dc.mutation.AddIpcEventDeviceIDs(ids...)
	return dc
}

// AddIpcEventDevice adds the "ipc_event_device" edges to the IPCEvent entity.
func (dc *DeviceCreate) AddIpcEventDevice(i ...*IPCEvent) *DeviceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dc.AddIpcEventDeviceIDs(ids...)
}

// AddDeviceInstallationDeviceIDs adds the "device_installation_device" edge to the DeviceInstallation entity by IDs.
func (dc *DeviceCreate) AddDeviceInstallationDeviceIDs(ids ...int) *DeviceCreate {
	dc.mutation.AddDeviceInstallationDeviceIDs(ids...)
	return dc
}

// AddDeviceInstallationDevice adds the "device_installation_device" edges to the DeviceInstallation entity.
func (dc *DeviceCreate) AddDeviceInstallationDevice(d ...*DeviceInstallation) *DeviceCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDeviceInstallationDeviceIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if device.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized device.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := device.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if device.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized device.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := device.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Brand(); !ok {
		v := device.DefaultBrand
		dc.mutation.SetBrand(v)
	}
	if _, ok := dc.mutation.Model(); !ok {
		v := device.DefaultModel
		dc.mutation.SetModel(v)
	}
	if _, ok := dc.mutation.Name(); !ok {
		v := device.DefaultName
		dc.mutation.SetName(v)
	}
	if _, ok := dc.mutation.DeviceType(); !ok {
		v := device.DefaultDeviceType
		dc.mutation.SetDeviceType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "Device.created_at"`)}
	}
	if _, ok := dc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "Device.created_by"`)}
	}
	if v, ok := dc.mutation.CreatedBy(); ok {
		if err := device.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "Device.created_by": %w`, err)}
		}
	}
	if _, ok := dc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "Device.updated_by"`)}
	}
	if v, ok := dc.mutation.UpdatedBy(); ok {
		if err := device.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Device.updated_by": %w`, err)}
		}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "Device.updated_at"`)}
	}
	if v, ok := dc.mutation.Brand(); ok {
		if err := device.BrandValidator(int(v)); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`dao: validator failed for field "Device.brand": %w`, err)}
		}
	}
	if v, ok := dc.mutation.Model(); ok {
		if err := device.ModelValidator(int(v)); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`dao: validator failed for field "Device.model": %w`, err)}
		}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := device.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Device.name": %w`, err)}
		}
	}
	if v, ok := dc.mutation.Sn(); ok {
		if err := device.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`dao: validator failed for field "Device.sn": %w`, err)}
		}
	}
	if _, ok := dc.mutation.DeviceType(); !ok {
		return &ValidationError{Name: "device_type", err: errors.New(`dao: missing required field "Device.device_type"`)}
	}
	if v, ok := dc.mutation.DeviceType(); ok {
		if err := device.DeviceTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`dao: validator failed for field "Device.device_type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Device.creator"`)}
	}
	if _, ok := dc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Device.updater"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Brand(); ok {
		_spec.SetField(device.FieldBrand, field.TypeInt, value)
		_node.Brand = value
	}
	if value, ok := dc.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeInt, value)
		_node.Model = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := dc.mutation.DeviceType(); ok {
		_spec.SetField(device.FieldDeviceType, field.TypeInt, value)
		_node.DeviceType = value
	}
	if nodes := dc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.IpcEventDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.IpcEventDeviceTable,
			Columns: []string{device.IpcEventDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DeviceInstallationDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationDeviceTable,
			Columns: []string{device.DeviceInstallationDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
