// Code generated by ent, DO NOT EDIT.

package sweepresult

import (
	"aisecurity/ent/dao/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCreateTime, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCreatorID, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldDeleteTime, v))
}

// UpdaterID applies equality check predicate on the "updater_id" field. It's identical to UpdaterIDEQ.
func UpdaterID(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldUpdaterID, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldUpdateTime, v))
}

// SweepID applies equality check predicate on the "sweep_id" field. It's identical to SweepIDEQ.
func SweepID(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldSweepID, v))
}

// SweepScheduleID applies equality check predicate on the "sweep_schedule_id" field. It's identical to SweepScheduleIDEQ.
func SweepScheduleID(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldSweepScheduleID, v))
}

// CheckInTime applies equality check predicate on the "check_in_time" field. It's identical to CheckInTimeEQ.
func CheckInTime(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCheckInTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLTE(FieldCreateTime, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldCreatorID, vs...))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotNull(FieldDeleteTime))
}

// UpdaterIDEQ applies the EQ predicate on the "updater_id" field.
func UpdaterIDEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldUpdaterID, v))
}

// UpdaterIDNEQ applies the NEQ predicate on the "updater_id" field.
func UpdaterIDNEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldUpdaterID, v))
}

// UpdaterIDIn applies the In predicate on the "updater_id" field.
func UpdaterIDIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldUpdaterID, vs...))
}

// UpdaterIDNotIn applies the NotIn predicate on the "updater_id" field.
func UpdaterIDNotIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldUpdaterID, vs...))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLTE(FieldUpdateTime, v))
}

// SweepIDEQ applies the EQ predicate on the "sweep_id" field.
func SweepIDEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldSweepID, v))
}

// SweepIDNEQ applies the NEQ predicate on the "sweep_id" field.
func SweepIDNEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldSweepID, v))
}

// SweepIDIn applies the In predicate on the "sweep_id" field.
func SweepIDIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldSweepID, vs...))
}

// SweepIDNotIn applies the NotIn predicate on the "sweep_id" field.
func SweepIDNotIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldSweepID, vs...))
}

// SweepScheduleIDEQ applies the EQ predicate on the "sweep_schedule_id" field.
func SweepScheduleIDEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldSweepScheduleID, v))
}

// SweepScheduleIDNEQ applies the NEQ predicate on the "sweep_schedule_id" field.
func SweepScheduleIDNEQ(v int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldSweepScheduleID, v))
}

// SweepScheduleIDIn applies the In predicate on the "sweep_schedule_id" field.
func SweepScheduleIDIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldSweepScheduleID, vs...))
}

// SweepScheduleIDNotIn applies the NotIn predicate on the "sweep_schedule_id" field.
func SweepScheduleIDNotIn(vs ...int) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldSweepScheduleID, vs...))
}

// CheckInTimeEQ applies the EQ predicate on the "check_in_time" field.
func CheckInTimeEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldEQ(FieldCheckInTime, v))
}

// CheckInTimeNEQ applies the NEQ predicate on the "check_in_time" field.
func CheckInTimeNEQ(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNEQ(FieldCheckInTime, v))
}

// CheckInTimeIn applies the In predicate on the "check_in_time" field.
func CheckInTimeIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIn(FieldCheckInTime, vs...))
}

// CheckInTimeNotIn applies the NotIn predicate on the "check_in_time" field.
func CheckInTimeNotIn(vs ...time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotIn(FieldCheckInTime, vs...))
}

// CheckInTimeGT applies the GT predicate on the "check_in_time" field.
func CheckInTimeGT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGT(FieldCheckInTime, v))
}

// CheckInTimeGTE applies the GTE predicate on the "check_in_time" field.
func CheckInTimeGTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldGTE(FieldCheckInTime, v))
}

// CheckInTimeLT applies the LT predicate on the "check_in_time" field.
func CheckInTimeLT(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLT(FieldCheckInTime, v))
}

// CheckInTimeLTE applies the LTE predicate on the "check_in_time" field.
func CheckInTimeLTE(v time.Time) predicate.SweepResult {
	return predicate.SweepResult(sql.FieldLTE(FieldCheckInTime, v))
}

// CheckInTimeIsNil applies the IsNil predicate on the "check_in_time" field.
func CheckInTimeIsNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIsNull(FieldCheckInTime))
}

// CheckInTimeNotNil applies the NotNil predicate on the "check_in_time" field.
func CheckInTimeNotNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotNull(FieldCheckInTime))
}

// CheckInImageIsNil applies the IsNil predicate on the "check_in_image" field.
func CheckInImageIsNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIsNull(FieldCheckInImage))
}

// CheckInImageNotNil applies the NotNil predicate on the "check_in_image" field.
func CheckInImageNotNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotNull(FieldCheckInImage))
}

// SweepJobsIsNil applies the IsNil predicate on the "sweep_jobs" field.
func SweepJobsIsNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldIsNull(FieldSweepJobs))
}

// SweepJobsNotNil applies the NotNil predicate on the "sweep_jobs" field.
func SweepJobsNotNil() predicate.SweepResult {
	return predicate.SweepResult(sql.FieldNotNull(FieldSweepJobs))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Admin) predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdater applies the HasEdge predicate on the "updater" edge.
func HasUpdater() predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdaterWith applies the HasEdge predicate on the "updater" edge with a given conditions (other predicates).
func HasUpdaterWith(preds ...predicate.Admin) predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := newUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweep applies the HasEdge predicate on the "sweep" edge.
func HasSweep() predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SweepTable, SweepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepWith applies the HasEdge predicate on the "sweep" edge with a given conditions (other predicates).
func HasSweepWith(preds ...predicate.Sweep) predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := newSweepStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepSchedule applies the HasEdge predicate on the "sweep_schedule" edge.
func HasSweepSchedule() predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SweepScheduleTable, SweepScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepScheduleWith applies the HasEdge predicate on the "sweep_schedule" edge with a given conditions (other predicates).
func HasSweepScheduleWith(preds ...predicate.SweepSchedule) predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := newSweepScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSweepResultDetails applies the HasEdge predicate on the "sweep_result_details" edge.
func HasSweepResultDetails() predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SweepResultDetailsTable, SweepResultDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSweepResultDetailsWith applies the HasEdge predicate on the "sweep_result_details" edge with a given conditions (other predicates).
func HasSweepResultDetailsWith(preds ...predicate.SweepResultDetails) predicate.SweepResult {
	return predicate.SweepResult(func(s *sql.Selector) {
		step := newSweepResultDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SweepResult) predicate.SweepResult {
	return predicate.SweepResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SweepResult) predicate.SweepResult {
	return predicate.SweepResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SweepResult) predicate.SweepResult {
	return predicate.SweepResult(sql.NotPredicates(p))
}
