// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPCEventCreate is the builder for creating a IPCEvent entity.
type IPCEventCreate struct {
	config
	mutation *IPCEventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (iec *IPCEventCreate) SetCreatedAt(t time.Time) *IPCEventCreate {
	iec.mutation.SetCreatedAt(t)
	return iec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableCreatedAt(t *time.Time) *IPCEventCreate {
	if t != nil {
		iec.SetCreatedAt(*t)
	}
	return iec
}

// SetCreatedBy sets the "created_by" field.
func (iec *IPCEventCreate) SetCreatedBy(i int) *IPCEventCreate {
	iec.mutation.SetCreatedBy(i)
	return iec
}

// SetDeletedAt sets the "deleted_at" field.
func (iec *IPCEventCreate) SetDeletedAt(t time.Time) *IPCEventCreate {
	iec.mutation.SetDeletedAt(t)
	return iec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableDeletedAt(t *time.Time) *IPCEventCreate {
	if t != nil {
		iec.SetDeletedAt(*t)
	}
	return iec
}

// SetUpdatedBy sets the "updated_by" field.
func (iec *IPCEventCreate) SetUpdatedBy(i int) *IPCEventCreate {
	iec.mutation.SetUpdatedBy(i)
	return iec
}

// SetUpdatedAt sets the "updated_at" field.
func (iec *IPCEventCreate) SetUpdatedAt(t time.Time) *IPCEventCreate {
	iec.mutation.SetUpdatedAt(t)
	return iec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableUpdatedAt(t *time.Time) *IPCEventCreate {
	if t != nil {
		iec.SetUpdatedAt(*t)
	}
	return iec
}

// SetDeviceID sets the "device_id" field.
func (iec *IPCEventCreate) SetDeviceID(i int) *IPCEventCreate {
	iec.mutation.SetDeviceID(i)
	return iec
}

// SetVideoID sets the "video_id" field.
func (iec *IPCEventCreate) SetVideoID(i int) *IPCEventCreate {
	iec.mutation.SetVideoID(i)
	return iec
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableVideoID(i *int) *IPCEventCreate {
	if i != nil {
		iec.SetVideoID(*i)
	}
	return iec
}

// SetEventTime sets the "event_time" field.
func (iec *IPCEventCreate) SetEventTime(t time.Time) *IPCEventCreate {
	iec.mutation.SetEventTime(t)
	return iec
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableEventTime(t *time.Time) *IPCEventCreate {
	if t != nil {
		iec.SetEventTime(*t)
	}
	return iec
}

// SetEventType sets the "event_type" field.
func (iec *IPCEventCreate) SetEventType(et enums.EventType) *IPCEventCreate {
	iec.mutation.SetEventType(et)
	return iec
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableEventType(et *enums.EventType) *IPCEventCreate {
	if et != nil {
		iec.SetEventType(*et)
	}
	return iec
}

// SetEventStatus sets the "event_status" field.
func (iec *IPCEventCreate) SetEventStatus(es enums.EventStatus) *IPCEventCreate {
	iec.mutation.SetEventStatus(es)
	return iec
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableEventStatus(es *enums.EventStatus) *IPCEventCreate {
	if es != nil {
		iec.SetEventStatus(*es)
	}
	return iec
}

// SetImages sets the "images" field.
func (iec *IPCEventCreate) SetImages(ti []*types.UploadedImage) *IPCEventCreate {
	iec.mutation.SetImages(ti)
	return iec
}

// SetLabeledImages sets the "labeled_images" field.
func (iec *IPCEventCreate) SetLabeledImages(ti []*types.UploadedImage) *IPCEventCreate {
	iec.mutation.SetLabeledImages(ti)
	return iec
}

// SetEventID sets the "event_id" field.
func (iec *IPCEventCreate) SetEventID(s string) *IPCEventCreate {
	iec.mutation.SetEventID(s)
	return iec
}

// SetDescription sets the "description" field.
func (iec *IPCEventCreate) SetDescription(s string) *IPCEventCreate {
	iec.mutation.SetDescription(s)
	return iec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableDescription(s *string) *IPCEventCreate {
	if s != nil {
		iec.SetDescription(*s)
	}
	return iec
}

// SetRawData sets the "raw_data" field.
func (iec *IPCEventCreate) SetRawData(s string) *IPCEventCreate {
	iec.mutation.SetRawData(s)
	return iec
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (iec *IPCEventCreate) SetNillableRawData(s *string) *IPCEventCreate {
	if s != nil {
		iec.SetRawData(*s)
	}
	return iec
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (iec *IPCEventCreate) SetCreatorID(id int) *IPCEventCreate {
	iec.mutation.SetCreatorID(id)
	return iec
}

// SetCreator sets the "creator" edge to the Admin entity.
func (iec *IPCEventCreate) SetCreator(a *Admin) *IPCEventCreate {
	return iec.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (iec *IPCEventCreate) SetUpdaterID(id int) *IPCEventCreate {
	iec.mutation.SetUpdaterID(id)
	return iec
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (iec *IPCEventCreate) SetUpdater(a *Admin) *IPCEventCreate {
	return iec.SetUpdaterID(a.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (iec *IPCEventCreate) SetVideo(v *Video) *IPCEventCreate {
	return iec.SetVideoID(v.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (iec *IPCEventCreate) SetDevice(d *Device) *IPCEventCreate {
	return iec.SetDeviceID(d.ID)
}

// AddFixerIDs adds the "fixers" edge to the Employee entity by IDs.
func (iec *IPCEventCreate) AddFixerIDs(ids ...int) *IPCEventCreate {
	iec.mutation.AddFixerIDs(ids...)
	return iec
}

// AddFixers adds the "fixers" edges to the Employee entity.
func (iec *IPCEventCreate) AddFixers(e ...*Employee) *IPCEventCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iec.AddFixerIDs(ids...)
}

// Mutation returns the IPCEventMutation object of the builder.
func (iec *IPCEventCreate) Mutation() *IPCEventMutation {
	return iec.mutation
}

// Save creates the IPCEvent in the database.
func (iec *IPCEventCreate) Save(ctx context.Context) (*IPCEvent, error) {
	if err := iec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iec.sqlSave, iec.mutation, iec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iec *IPCEventCreate) SaveX(ctx context.Context) *IPCEvent {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *IPCEventCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *IPCEventCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *IPCEventCreate) defaults() error {
	if _, ok := iec.mutation.CreatedAt(); !ok {
		if ipcevent.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcevent.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := ipcevent.DefaultCreatedAt()
		iec.mutation.SetCreatedAt(v)
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		if ipcevent.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcevent.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcevent.DefaultUpdatedAt()
		iec.mutation.SetUpdatedAt(v)
	}
	if _, ok := iec.mutation.EventTime(); !ok {
		if ipcevent.DefaultEventTime == nil {
			return fmt.Errorf("dao: uninitialized ipcevent.DefaultEventTime (forgotten import dao/runtime?)")
		}
		v := ipcevent.DefaultEventTime()
		iec.mutation.SetEventTime(v)
	}
	if _, ok := iec.mutation.EventType(); !ok {
		v := ipcevent.DefaultEventType
		iec.mutation.SetEventType(v)
	}
	if _, ok := iec.mutation.EventStatus(); !ok {
		v := ipcevent.DefaultEventStatus
		iec.mutation.SetEventStatus(v)
	}
	if _, ok := iec.mutation.Images(); !ok {
		v := ipcevent.DefaultImages
		iec.mutation.SetImages(v)
	}
	if _, ok := iec.mutation.LabeledImages(); !ok {
		v := ipcevent.DefaultLabeledImages
		iec.mutation.SetLabeledImages(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iec *IPCEventCreate) check() error {
	if _, ok := iec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "IPCEvent.created_at"`)}
	}
	if _, ok := iec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "IPCEvent.created_by"`)}
	}
	if v, ok := iec.mutation.CreatedBy(); ok {
		if err := ipcevent.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.created_by": %w`, err)}
		}
	}
	if _, ok := iec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "IPCEvent.updated_by"`)}
	}
	if v, ok := iec.mutation.UpdatedBy(); ok {
		if err := ipcevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.updated_by": %w`, err)}
		}
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "IPCEvent.updated_at"`)}
	}
	if _, ok := iec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "IPCEvent.device_id"`)}
	}
	if v, ok := iec.mutation.DeviceID(); ok {
		if err := ipcevent.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.device_id": %w`, err)}
		}
	}
	if v, ok := iec.mutation.VideoID(); ok {
		if err := ipcevent.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.video_id": %w`, err)}
		}
	}
	if _, ok := iec.mutation.EventTime(); !ok {
		return &ValidationError{Name: "event_time", err: errors.New(`dao: missing required field "IPCEvent.event_time"`)}
	}
	if _, ok := iec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`dao: missing required field "IPCEvent.event_type"`)}
	}
	if v, ok := iec.mutation.EventType(); ok {
		if err := ipcevent.EventTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.event_type": %w`, err)}
		}
	}
	if _, ok := iec.mutation.EventStatus(); !ok {
		return &ValidationError{Name: "event_status", err: errors.New(`dao: missing required field "IPCEvent.event_status"`)}
	}
	if v, ok := iec.mutation.EventStatus(); ok {
		if err := ipcevent.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.event_status": %w`, err)}
		}
	}
	if _, ok := iec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`dao: missing required field "IPCEvent.event_id"`)}
	}
	if v, ok := iec.mutation.EventID(); ok {
		if err := ipcevent.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.event_id": %w`, err)}
		}
	}
	if _, ok := iec.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "IPCEvent.creator"`)}
	}
	if _, ok := iec.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "IPCEvent.updater"`)}
	}
	if _, ok := iec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`dao: missing required edge "IPCEvent.device"`)}
	}
	return nil
}

func (iec *IPCEventCreate) sqlSave(ctx context.Context) (*IPCEvent, error) {
	if err := iec.check(); err != nil {
		return nil, err
	}
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iec.mutation.id = &_node.ID
	iec.mutation.done = true
	return _node, nil
}

func (iec *IPCEventCreate) createSpec() (*IPCEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &IPCEvent{config: iec.config}
		_spec = sqlgraph.NewCreateSpec(ipcevent.Table, sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt))
	)
	if value, ok := iec.mutation.CreatedAt(); ok {
		_spec.SetField(ipcevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iec.mutation.DeletedAt(); ok {
		_spec.SetField(ipcevent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := iec.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iec.mutation.EventTime(); ok {
		_spec.SetField(ipcevent.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := iec.mutation.EventType(); ok {
		_spec.SetField(ipcevent.FieldEventType, field.TypeInt, value)
		_node.EventType = value
	}
	if value, ok := iec.mutation.EventStatus(); ok {
		_spec.SetField(ipcevent.FieldEventStatus, field.TypeInt, value)
		_node.EventStatus = value
	}
	if value, ok := iec.mutation.Images(); ok {
		_spec.SetField(ipcevent.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := iec.mutation.LabeledImages(); ok {
		_spec.SetField(ipcevent.FieldLabeledImages, field.TypeJSON, value)
		_node.LabeledImages = value
	}
	if value, ok := iec.mutation.EventID(); ok {
		_spec.SetField(ipcevent.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := iec.mutation.Description(); ok {
		_spec.SetField(ipcevent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := iec.mutation.RawData(); ok {
		_spec.SetField(ipcevent.FieldRawData, field.TypeString, value)
		_node.RawData = value
	}
	if nodes := iec.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.CreatorTable,
			Columns: []string{ipcevent.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.VideoTable,
			Columns: []string{ipcevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.DeviceTable,
			Columns: []string{ipcevent.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.FixersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPCEventCreateBulk is the builder for creating many IPCEvent entities in bulk.
type IPCEventCreateBulk struct {
	config
	err      error
	builders []*IPCEventCreate
}

// Save creates the IPCEvent entities in the database.
func (iecb *IPCEventCreateBulk) Save(ctx context.Context) ([]*IPCEvent, error) {
	if iecb.err != nil {
		return nil, iecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*IPCEvent, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPCEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *IPCEventCreateBulk) SaveX(ctx context.Context) []*IPCEvent {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *IPCEventCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *IPCEventCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}
