// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventLogUpdate is the builder for updating EventLog entities.
type EventLogUpdate struct {
	config
	hooks    []Hook
	mutation *EventLogMutation
}

// Where appends a list predicates to the EventLogUpdate builder.
func (elu *EventLogUpdate) Where(ps ...predicate.EventLog) *EventLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetDeleteTime sets the "delete_time" field.
func (elu *EventLogUpdate) SetDeleteTime(t time.Time) *EventLogUpdate {
	elu.mutation.SetDeleteTime(t)
	return elu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableDeleteTime(t *time.Time) *EventLogUpdate {
	if t != nil {
		elu.SetDeleteTime(*t)
	}
	return elu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (elu *EventLogUpdate) ClearDeleteTime() *EventLogUpdate {
	elu.mutation.ClearDeleteTime()
	return elu
}

// SetUpdaterID sets the "updater_id" field.
func (elu *EventLogUpdate) SetUpdaterID(i int) *EventLogUpdate {
	elu.mutation.SetUpdaterID(i)
	return elu
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableUpdaterID(i *int) *EventLogUpdate {
	if i != nil {
		elu.SetUpdaterID(*i)
	}
	return elu
}

// SetUpdateTime sets the "update_time" field.
func (elu *EventLogUpdate) SetUpdateTime(t time.Time) *EventLogUpdate {
	elu.mutation.SetUpdateTime(t)
	return elu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (elu *EventLogUpdate) SetUpdater(a *Admin) *EventLogUpdate {
	return elu.SetUpdaterID(a.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (elu *EventLogUpdate) Mutation() *EventLogMutation {
	return elu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (elu *EventLogUpdate) ClearUpdater() *EventLogUpdate {
	elu.mutation.ClearUpdater()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EventLogUpdate) Save(ctx context.Context) (int, error) {
	if err := elu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EventLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EventLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EventLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elu *EventLogUpdate) defaults() error {
	if _, ok := elu.mutation.UpdateTime(); !ok {
		if eventlog.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlog.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlog.UpdateDefaultUpdateTime()
		elu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (elu *EventLogUpdate) check() error {
	if v, ok := elu.mutation.UpdaterID(); ok {
		if err := eventlog.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.updater_id": %w`, err)}
		}
	}
	if _, ok := elu.mutation.CreatorID(); elu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.creator"`)
	}
	if _, ok := elu.mutation.UpdaterID(); elu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.updater"`)
	}
	if _, ok := elu.mutation.EventID(); elu.mutation.EventCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.event"`)
	}
	if _, ok := elu.mutation.DeviceID(); elu.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.device"`)
	}
	return nil
}

func (elu *EventLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := elu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.DeleteTime(); ok {
		_spec.SetField(eventlog.FieldDeleteTime, field.TypeTime, value)
	}
	if elu.mutation.DeleteTimeCleared() {
		_spec.ClearField(eventlog.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := elu.mutation.UpdateTime(); ok {
		_spec.SetField(eventlog.FieldUpdateTime, field.TypeTime, value)
	}
	if elu.mutation.NotesCleared() {
		_spec.ClearField(eventlog.FieldNotes, field.TypeString)
	}
	if elu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EventLogUpdateOne is the builder for updating a single EventLog entity.
type EventLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventLogMutation
}

// SetDeleteTime sets the "delete_time" field.
func (eluo *EventLogUpdateOne) SetDeleteTime(t time.Time) *EventLogUpdateOne {
	eluo.mutation.SetDeleteTime(t)
	return eluo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableDeleteTime(t *time.Time) *EventLogUpdateOne {
	if t != nil {
		eluo.SetDeleteTime(*t)
	}
	return eluo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (eluo *EventLogUpdateOne) ClearDeleteTime() *EventLogUpdateOne {
	eluo.mutation.ClearDeleteTime()
	return eluo
}

// SetUpdaterID sets the "updater_id" field.
func (eluo *EventLogUpdateOne) SetUpdaterID(i int) *EventLogUpdateOne {
	eluo.mutation.SetUpdaterID(i)
	return eluo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableUpdaterID(i *int) *EventLogUpdateOne {
	if i != nil {
		eluo.SetUpdaterID(*i)
	}
	return eluo
}

// SetUpdateTime sets the "update_time" field.
func (eluo *EventLogUpdateOne) SetUpdateTime(t time.Time) *EventLogUpdateOne {
	eluo.mutation.SetUpdateTime(t)
	return eluo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (eluo *EventLogUpdateOne) SetUpdater(a *Admin) *EventLogUpdateOne {
	return eluo.SetUpdaterID(a.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (eluo *EventLogUpdateOne) Mutation() *EventLogMutation {
	return eluo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (eluo *EventLogUpdateOne) ClearUpdater() *EventLogUpdateOne {
	eluo.mutation.ClearUpdater()
	return eluo
}

// Where appends a list predicates to the EventLogUpdate builder.
func (eluo *EventLogUpdateOne) Where(ps ...predicate.EventLog) *EventLogUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EventLogUpdateOne) Select(field string, fields ...string) *EventLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EventLog entity.
func (eluo *EventLogUpdateOne) Save(ctx context.Context) (*EventLog, error) {
	if err := eluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EventLogUpdateOne) SaveX(ctx context.Context) *EventLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EventLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EventLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eluo *EventLogUpdateOne) defaults() error {
	if _, ok := eluo.mutation.UpdateTime(); !ok {
		if eventlog.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlog.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlog.UpdateDefaultUpdateTime()
		eluo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eluo *EventLogUpdateOne) check() error {
	if v, ok := eluo.mutation.UpdaterID(); ok {
		if err := eventlog.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.updater_id": %w`, err)}
		}
	}
	if _, ok := eluo.mutation.CreatorID(); eluo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.creator"`)
	}
	if _, ok := eluo.mutation.UpdaterID(); eluo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.updater"`)
	}
	if _, ok := eluo.mutation.EventID(); eluo.mutation.EventCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.event"`)
	}
	if _, ok := eluo.mutation.DeviceID(); eluo.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLog.device"`)
	}
	return nil
}

func (eluo *EventLogUpdateOne) sqlSave(ctx context.Context) (_node *EventLog, err error) {
	if err := eluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "EventLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlog.FieldID)
		for _, f := range fields {
			if !eventlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != eventlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.DeleteTime(); ok {
		_spec.SetField(eventlog.FieldDeleteTime, field.TypeTime, value)
	}
	if eluo.mutation.DeleteTimeCleared() {
		_spec.ClearField(eventlog.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := eluo.mutation.UpdateTime(); ok {
		_spec.SetField(eventlog.FieldUpdateTime, field.TypeTime, value)
	}
	if eluo.mutation.NotesCleared() {
		_spec.ClearField(eventlog.FieldNotes, field.TypeString)
	}
	if eluo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
