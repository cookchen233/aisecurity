// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/video"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoCreate is the builder for creating a Video entity.
type VideoCreate struct {
	config
	mutation *VideoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vc *VideoCreate) SetCreatedAt(t time.Time) *VideoCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VideoCreate) SetNillableCreatedAt(t *time.Time) *VideoCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetCreatedBy sets the "created_by" field.
func (vc *VideoCreate) SetCreatedBy(i int) *VideoCreate {
	vc.mutation.SetCreatedBy(i)
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VideoCreate) SetDeletedAt(t time.Time) *VideoCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VideoCreate) SetNillableDeletedAt(t *time.Time) *VideoCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetUpdatedBy sets the "updated_by" field.
func (vc *VideoCreate) SetUpdatedBy(i int) *VideoCreate {
	vc.mutation.SetUpdatedBy(i)
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VideoCreate) SetUpdatedAt(t time.Time) *VideoCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VideoCreate) SetNillableUpdatedAt(t *time.Time) *VideoCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetName sets the "name" field.
func (vc *VideoCreate) SetName(s string) *VideoCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vc *VideoCreate) SetNillableName(s *string) *VideoCreate {
	if s != nil {
		vc.SetName(*s)
	}
	return vc
}

// SetURL sets the "url" field.
func (vc *VideoCreate) SetURL(s string) *VideoCreate {
	vc.mutation.SetURL(s)
	return vc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (vc *VideoCreate) SetNillableURL(s *string) *VideoCreate {
	if s != nil {
		vc.SetURL(*s)
	}
	return vc
}

// SetSize sets the "size" field.
func (vc *VideoCreate) SetSize(i int64) *VideoCreate {
	vc.mutation.SetSize(i)
	return vc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vc *VideoCreate) SetNillableSize(i *int64) *VideoCreate {
	if i != nil {
		vc.SetSize(*i)
	}
	return vc
}

// SetDuration sets the "duration" field.
func (vc *VideoCreate) SetDuration(s string) *VideoCreate {
	vc.mutation.SetDuration(s)
	return vc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vc *VideoCreate) SetNillableDuration(s *string) *VideoCreate {
	if s != nil {
		vc.SetDuration(*s)
	}
	return vc
}

// SetUploadedAt sets the "uploaded_at" field.
func (vc *VideoCreate) SetUploadedAt(t time.Time) *VideoCreate {
	vc.mutation.SetUploadedAt(t)
	return vc
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (vc *VideoCreate) SetNillableUploadedAt(t *time.Time) *VideoCreate {
	if t != nil {
		vc.SetUploadedAt(*t)
	}
	return vc
}

// SetUploadedAt2 sets the "uploaded_at2" field.
func (vc *VideoCreate) SetUploadedAt2(t time.Time) *VideoCreate {
	vc.mutation.SetUploadedAt2(t)
	return vc
}

// SetNillableUploadedAt2 sets the "uploaded_at2" field if the given value is not nil.
func (vc *VideoCreate) SetNillableUploadedAt2(t *time.Time) *VideoCreate {
	if t != nil {
		vc.SetUploadedAt2(*t)
	}
	return vc
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (vc *VideoCreate) SetCreatorID(id int) *VideoCreate {
	vc.mutation.SetCreatorID(id)
	return vc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (vc *VideoCreate) SetCreator(a *Admin) *VideoCreate {
	return vc.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (vc *VideoCreate) SetUpdaterID(id int) *VideoCreate {
	vc.mutation.SetUpdaterID(id)
	return vc
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (vc *VideoCreate) SetUpdater(a *Admin) *VideoCreate {
	return vc.SetUpdaterID(a.ID)
}

// AddIpcEventVideoIDs adds the "ipc_event_video" edge to the IPCEvent entity by IDs.
func (vc *VideoCreate) AddIpcEventVideoIDs(ids ...int) *VideoCreate {
	vc.mutation.AddIpcEventVideoIDs(ids...)
	return vc
}

// AddIpcEventVideo adds the "ipc_event_video" edges to the IPCEvent entity.
func (vc *VideoCreate) AddIpcEventVideo(i ...*IPCEvent) *VideoCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return vc.AddIpcEventVideoIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vc *VideoCreate) Mutation() *VideoMutation {
	return vc.mutation
}

// Save creates the Video in the database.
func (vc *VideoCreate) Save(ctx context.Context) (*Video, error) {
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VideoCreate) SaveX(ctx context.Context) *Video {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VideoCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VideoCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VideoCreate) defaults() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		if video.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized video.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := video.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		if video.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized video.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := video.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.Size(); !ok {
		v := video.DefaultSize
		vc.mutation.SetSize(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VideoCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "Video.created_at"`)}
	}
	if _, ok := vc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "Video.created_by"`)}
	}
	if v, ok := vc.mutation.CreatedBy(); ok {
		if err := video.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "Video.created_by": %w`, err)}
		}
	}
	if _, ok := vc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "Video.updated_by"`)}
	}
	if v, ok := vc.mutation.UpdatedBy(); ok {
		if err := video.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Video.updated_by": %w`, err)}
		}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "Video.updated_at"`)}
	}
	if _, ok := vc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`dao: missing required field "Video.size"`)}
	}
	if _, ok := vc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Video.creator"`)}
	}
	if _, ok := vc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Video.updater"`)}
	}
	return nil
}

func (vc *VideoCreate) sqlSave(ctx context.Context) (*Video, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VideoCreate) createSpec() (*Video, *sqlgraph.CreateSpec) {
	var (
		_node = &Video{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(video.Table, sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt))
	)
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(video.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(video.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.URL(); ok {
		_spec.SetField(video.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := vc.mutation.Size(); ok {
		_spec.SetField(video.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := vc.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := vc.mutation.UploadedAt(); ok {
		_spec.SetField(video.FieldUploadedAt, field.TypeTime, value)
		_node.UploadedAt = &value
	}
	if value, ok := vc.mutation.UploadedAt2(); ok {
		_spec.SetField(video.FieldUploadedAt2, field.TypeTime, value)
		_node.UploadedAt2 = &value
	}
	if nodes := vc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CreatorTable,
			Columns: []string{video.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UpdaterTable,
			Columns: []string{video.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.IpcEventVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.IpcEventVideoTable,
			Columns: []string{video.IpcEventVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoCreateBulk is the builder for creating many Video entities in bulk.
type VideoCreateBulk struct {
	config
	err      error
	builders []*VideoCreate
}

// Save creates the Video entities in the database.
func (vcb *VideoCreateBulk) Save(ctx context.Context) ([]*Video, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Video, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VideoCreateBulk) SaveX(ctx context.Context) []*Video {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VideoCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VideoCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
