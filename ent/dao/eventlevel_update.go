// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/predicate"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EventLevelUpdate is the builder for updating EventLevel entities.
type EventLevelUpdate struct {
	config
	hooks    []Hook
	mutation *EventLevelMutation
}

// Where appends a list predicates to the EventLevelUpdate builder.
func (elu *EventLevelUpdate) Where(ps ...predicate.EventLevel) *EventLevelUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetDeleteTime sets the "delete_time" field.
func (elu *EventLevelUpdate) SetDeleteTime(t time.Time) *EventLevelUpdate {
	elu.mutation.SetDeleteTime(t)
	return elu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (elu *EventLevelUpdate) SetNillableDeleteTime(t *time.Time) *EventLevelUpdate {
	if t != nil {
		elu.SetDeleteTime(*t)
	}
	return elu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (elu *EventLevelUpdate) ClearDeleteTime() *EventLevelUpdate {
	elu.mutation.ClearDeleteTime()
	return elu
}

// SetUpdaterID sets the "updater_id" field.
func (elu *EventLevelUpdate) SetUpdaterID(i int) *EventLevelUpdate {
	elu.mutation.SetUpdaterID(i)
	return elu
}

// SetUpdateTime sets the "update_time" field.
func (elu *EventLevelUpdate) SetUpdateTime(t time.Time) *EventLevelUpdate {
	elu.mutation.SetUpdateTime(t)
	return elu
}

// SetName sets the "name" field.
func (elu *EventLevelUpdate) SetName(s string) *EventLevelUpdate {
	elu.mutation.SetName(s)
	return elu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (elu *EventLevelUpdate) SetNillableName(s *string) *EventLevelUpdate {
	if s != nil {
		elu.SetName(*s)
	}
	return elu
}

// ClearName clears the value of the "name" field.
func (elu *EventLevelUpdate) ClearName() *EventLevelUpdate {
	elu.mutation.ClearName()
	return elu
}

// SetEventTypes sets the "event_types" field.
func (elu *EventLevelUpdate) SetEventTypes(et []enums.EventType) *EventLevelUpdate {
	elu.mutation.SetEventTypes(et)
	return elu
}

// AppendEventTypes appends et to the "event_types" field.
func (elu *EventLevelUpdate) AppendEventTypes(et []enums.EventType) *EventLevelUpdate {
	elu.mutation.AppendEventTypes(et)
	return elu
}

// SetDescription sets the "description" field.
func (elu *EventLevelUpdate) SetDescription(s string) *EventLevelUpdate {
	elu.mutation.SetDescription(s)
	return elu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (elu *EventLevelUpdate) SetNillableDescription(s *string) *EventLevelUpdate {
	if s != nil {
		elu.SetDescription(*s)
	}
	return elu
}

// ClearDescription clears the value of the "description" field.
func (elu *EventLevelUpdate) ClearDescription() *EventLevelUpdate {
	elu.mutation.ClearDescription()
	return elu
}

// SetIcon sets the "icon" field.
func (elu *EventLevelUpdate) SetIcon(s string) *EventLevelUpdate {
	elu.mutation.SetIcon(s)
	return elu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (elu *EventLevelUpdate) SetNillableIcon(s *string) *EventLevelUpdate {
	if s != nil {
		elu.SetIcon(*s)
	}
	return elu
}

// ClearIcon clears the value of the "icon" field.
func (elu *EventLevelUpdate) ClearIcon() *EventLevelUpdate {
	elu.mutation.ClearIcon()
	return elu
}

// SetNotifyTypes sets the "notify_types" field.
func (elu *EventLevelUpdate) SetNotifyTypes(et []enums.NotifyType) *EventLevelUpdate {
	elu.mutation.SetNotifyTypes(et)
	return elu
}

// AppendNotifyTypes appends et to the "notify_types" field.
func (elu *EventLevelUpdate) AppendNotifyTypes(et []enums.NotifyType) *EventLevelUpdate {
	elu.mutation.AppendNotifyTypes(et)
	return elu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (elu *EventLevelUpdate) SetUpdater(a *Admin) *EventLevelUpdate {
	return elu.SetUpdaterID(a.ID)
}

// Mutation returns the EventLevelMutation object of the builder.
func (elu *EventLevelUpdate) Mutation() *EventLevelMutation {
	return elu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (elu *EventLevelUpdate) ClearUpdater() *EventLevelUpdate {
	elu.mutation.ClearUpdater()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EventLevelUpdate) Save(ctx context.Context) (int, error) {
	if err := elu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EventLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EventLevelUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EventLevelUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elu *EventLevelUpdate) defaults() error {
	if _, ok := elu.mutation.UpdateTime(); !ok {
		if eventlevel.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlevel.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlevel.UpdateDefaultUpdateTime()
		elu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (elu *EventLevelUpdate) check() error {
	if v, ok := elu.mutation.UpdaterID(); ok {
		if err := eventlevel.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLevel.updater_id": %w`, err)}
		}
	}
	if v, ok := elu.mutation.Name(); ok {
		if err := eventlevel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "EventLevel.name": %w`, err)}
		}
	}
	if v, ok := elu.mutation.Icon(); ok {
		if err := eventlevel.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`dao: validator failed for field "EventLevel.icon": %w`, err)}
		}
	}
	if _, ok := elu.mutation.CreatorID(); elu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLevel.creator"`)
	}
	if _, ok := elu.mutation.UpdaterID(); elu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLevel.updater"`)
	}
	return nil
}

func (elu *EventLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := elu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlevel.Table, eventlevel.Columns, sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.DeleteTime(); ok {
		_spec.SetField(eventlevel.FieldDeleteTime, field.TypeTime, value)
	}
	if elu.mutation.DeleteTimeCleared() {
		_spec.ClearField(eventlevel.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := elu.mutation.UpdateTime(); ok {
		_spec.SetField(eventlevel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := elu.mutation.Name(); ok {
		_spec.SetField(eventlevel.FieldName, field.TypeString, value)
	}
	if elu.mutation.NameCleared() {
		_spec.ClearField(eventlevel.FieldName, field.TypeString)
	}
	if value, ok := elu.mutation.EventTypes(); ok {
		_spec.SetField(eventlevel.FieldEventTypes, field.TypeJSON, value)
	}
	if value, ok := elu.mutation.AppendedEventTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlevel.FieldEventTypes, value)
		})
	}
	if value, ok := elu.mutation.Description(); ok {
		_spec.SetField(eventlevel.FieldDescription, field.TypeString, value)
	}
	if elu.mutation.DescriptionCleared() {
		_spec.ClearField(eventlevel.FieldDescription, field.TypeString)
	}
	if value, ok := elu.mutation.Icon(); ok {
		_spec.SetField(eventlevel.FieldIcon, field.TypeString, value)
	}
	if elu.mutation.IconCleared() {
		_spec.ClearField(eventlevel.FieldIcon, field.TypeString)
	}
	if value, ok := elu.mutation.NotifyTypes(); ok {
		_spec.SetField(eventlevel.FieldNotifyTypes, field.TypeJSON, value)
	}
	if value, ok := elu.mutation.AppendedNotifyTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlevel.FieldNotifyTypes, value)
		})
	}
	if elu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EventLevelUpdateOne is the builder for updating a single EventLevel entity.
type EventLevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventLevelMutation
}

// SetDeleteTime sets the "delete_time" field.
func (eluo *EventLevelUpdateOne) SetDeleteTime(t time.Time) *EventLevelUpdateOne {
	eluo.mutation.SetDeleteTime(t)
	return eluo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (eluo *EventLevelUpdateOne) SetNillableDeleteTime(t *time.Time) *EventLevelUpdateOne {
	if t != nil {
		eluo.SetDeleteTime(*t)
	}
	return eluo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (eluo *EventLevelUpdateOne) ClearDeleteTime() *EventLevelUpdateOne {
	eluo.mutation.ClearDeleteTime()
	return eluo
}

// SetUpdaterID sets the "updater_id" field.
func (eluo *EventLevelUpdateOne) SetUpdaterID(i int) *EventLevelUpdateOne {
	eluo.mutation.SetUpdaterID(i)
	return eluo
}

// SetUpdateTime sets the "update_time" field.
func (eluo *EventLevelUpdateOne) SetUpdateTime(t time.Time) *EventLevelUpdateOne {
	eluo.mutation.SetUpdateTime(t)
	return eluo
}

// SetName sets the "name" field.
func (eluo *EventLevelUpdateOne) SetName(s string) *EventLevelUpdateOne {
	eluo.mutation.SetName(s)
	return eluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eluo *EventLevelUpdateOne) SetNillableName(s *string) *EventLevelUpdateOne {
	if s != nil {
		eluo.SetName(*s)
	}
	return eluo
}

// ClearName clears the value of the "name" field.
func (eluo *EventLevelUpdateOne) ClearName() *EventLevelUpdateOne {
	eluo.mutation.ClearName()
	return eluo
}

// SetEventTypes sets the "event_types" field.
func (eluo *EventLevelUpdateOne) SetEventTypes(et []enums.EventType) *EventLevelUpdateOne {
	eluo.mutation.SetEventTypes(et)
	return eluo
}

// AppendEventTypes appends et to the "event_types" field.
func (eluo *EventLevelUpdateOne) AppendEventTypes(et []enums.EventType) *EventLevelUpdateOne {
	eluo.mutation.AppendEventTypes(et)
	return eluo
}

// SetDescription sets the "description" field.
func (eluo *EventLevelUpdateOne) SetDescription(s string) *EventLevelUpdateOne {
	eluo.mutation.SetDescription(s)
	return eluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eluo *EventLevelUpdateOne) SetNillableDescription(s *string) *EventLevelUpdateOne {
	if s != nil {
		eluo.SetDescription(*s)
	}
	return eluo
}

// ClearDescription clears the value of the "description" field.
func (eluo *EventLevelUpdateOne) ClearDescription() *EventLevelUpdateOne {
	eluo.mutation.ClearDescription()
	return eluo
}

// SetIcon sets the "icon" field.
func (eluo *EventLevelUpdateOne) SetIcon(s string) *EventLevelUpdateOne {
	eluo.mutation.SetIcon(s)
	return eluo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (eluo *EventLevelUpdateOne) SetNillableIcon(s *string) *EventLevelUpdateOne {
	if s != nil {
		eluo.SetIcon(*s)
	}
	return eluo
}

// ClearIcon clears the value of the "icon" field.
func (eluo *EventLevelUpdateOne) ClearIcon() *EventLevelUpdateOne {
	eluo.mutation.ClearIcon()
	return eluo
}

// SetNotifyTypes sets the "notify_types" field.
func (eluo *EventLevelUpdateOne) SetNotifyTypes(et []enums.NotifyType) *EventLevelUpdateOne {
	eluo.mutation.SetNotifyTypes(et)
	return eluo
}

// AppendNotifyTypes appends et to the "notify_types" field.
func (eluo *EventLevelUpdateOne) AppendNotifyTypes(et []enums.NotifyType) *EventLevelUpdateOne {
	eluo.mutation.AppendNotifyTypes(et)
	return eluo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (eluo *EventLevelUpdateOne) SetUpdater(a *Admin) *EventLevelUpdateOne {
	return eluo.SetUpdaterID(a.ID)
}

// Mutation returns the EventLevelMutation object of the builder.
func (eluo *EventLevelUpdateOne) Mutation() *EventLevelMutation {
	return eluo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (eluo *EventLevelUpdateOne) ClearUpdater() *EventLevelUpdateOne {
	eluo.mutation.ClearUpdater()
	return eluo
}

// Where appends a list predicates to the EventLevelUpdate builder.
func (eluo *EventLevelUpdateOne) Where(ps ...predicate.EventLevel) *EventLevelUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EventLevelUpdateOne) Select(field string, fields ...string) *EventLevelUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EventLevel entity.
func (eluo *EventLevelUpdateOne) Save(ctx context.Context) (*EventLevel, error) {
	if err := eluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EventLevelUpdateOne) SaveX(ctx context.Context) *EventLevel {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EventLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EventLevelUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eluo *EventLevelUpdateOne) defaults() error {
	if _, ok := eluo.mutation.UpdateTime(); !ok {
		if eventlevel.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlevel.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlevel.UpdateDefaultUpdateTime()
		eluo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eluo *EventLevelUpdateOne) check() error {
	if v, ok := eluo.mutation.UpdaterID(); ok {
		if err := eventlevel.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLevel.updater_id": %w`, err)}
		}
	}
	if v, ok := eluo.mutation.Name(); ok {
		if err := eventlevel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "EventLevel.name": %w`, err)}
		}
	}
	if v, ok := eluo.mutation.Icon(); ok {
		if err := eventlevel.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`dao: validator failed for field "EventLevel.icon": %w`, err)}
		}
	}
	if _, ok := eluo.mutation.CreatorID(); eluo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLevel.creator"`)
	}
	if _, ok := eluo.mutation.UpdaterID(); eluo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "EventLevel.updater"`)
	}
	return nil
}

func (eluo *EventLevelUpdateOne) sqlSave(ctx context.Context) (_node *EventLevel, err error) {
	if err := eluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlevel.Table, eventlevel.Columns, sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "EventLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlevel.FieldID)
		for _, f := range fields {
			if !eventlevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != eventlevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.DeleteTime(); ok {
		_spec.SetField(eventlevel.FieldDeleteTime, field.TypeTime, value)
	}
	if eluo.mutation.DeleteTimeCleared() {
		_spec.ClearField(eventlevel.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := eluo.mutation.UpdateTime(); ok {
		_spec.SetField(eventlevel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eluo.mutation.Name(); ok {
		_spec.SetField(eventlevel.FieldName, field.TypeString, value)
	}
	if eluo.mutation.NameCleared() {
		_spec.ClearField(eventlevel.FieldName, field.TypeString)
	}
	if value, ok := eluo.mutation.EventTypes(); ok {
		_spec.SetField(eventlevel.FieldEventTypes, field.TypeJSON, value)
	}
	if value, ok := eluo.mutation.AppendedEventTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlevel.FieldEventTypes, value)
		})
	}
	if value, ok := eluo.mutation.Description(); ok {
		_spec.SetField(eventlevel.FieldDescription, field.TypeString, value)
	}
	if eluo.mutation.DescriptionCleared() {
		_spec.ClearField(eventlevel.FieldDescription, field.TypeString)
	}
	if value, ok := eluo.mutation.Icon(); ok {
		_spec.SetField(eventlevel.FieldIcon, field.TypeString, value)
	}
	if eluo.mutation.IconCleared() {
		_spec.ClearField(eventlevel.FieldIcon, field.TypeString)
	}
	if value, ok := eluo.mutation.NotifyTypes(); ok {
		_spec.SetField(eventlevel.FieldNotifyTypes, field.TypeJSON, value)
	}
	if value, ok := eluo.mutation.AppendedNotifyTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlevel.FieldNotifyTypes, value)
		})
	}
	if eluo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventLevel{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
