// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/fixing"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixingCreate is the builder for creating a Fixing entity.
type FixingCreate struct {
	config
	mutation *FixingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (fc *FixingCreate) SetCreateTime(t time.Time) *FixingCreate {
	fc.mutation.SetCreateTime(t)
	return fc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fc *FixingCreate) SetNillableCreateTime(t *time.Time) *FixingCreate {
	if t != nil {
		fc.SetCreateTime(*t)
	}
	return fc
}

// SetCreatorID sets the "creator_id" field.
func (fc *FixingCreate) SetCreatorID(i int) *FixingCreate {
	fc.mutation.SetCreatorID(i)
	return fc
}

// SetDeleteTime sets the "delete_time" field.
func (fc *FixingCreate) SetDeleteTime(t time.Time) *FixingCreate {
	fc.mutation.SetDeleteTime(t)
	return fc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (fc *FixingCreate) SetNillableDeleteTime(t *time.Time) *FixingCreate {
	if t != nil {
		fc.SetDeleteTime(*t)
	}
	return fc
}

// SetUpdaterID sets the "updater_id" field.
func (fc *FixingCreate) SetUpdaterID(i int) *FixingCreate {
	fc.mutation.SetUpdaterID(i)
	return fc
}

// SetUpdateTime sets the "update_time" field.
func (fc *FixingCreate) SetUpdateTime(t time.Time) *FixingCreate {
	fc.mutation.SetUpdateTime(t)
	return fc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fc *FixingCreate) SetNillableUpdateTime(t *time.Time) *FixingCreate {
	if t != nil {
		fc.SetUpdateTime(*t)
	}
	return fc
}

// SetFixerID sets the "fixer_id" field.
func (fc *FixingCreate) SetFixerID(i int) *FixingCreate {
	fc.mutation.SetFixerID(i)
	return fc
}

// SetEventID sets the "event_id" field.
func (fc *FixingCreate) SetEventID(i int) *FixingCreate {
	fc.mutation.SetEventID(i)
	return fc
}

// SetDeviceID sets the "device_id" field.
func (fc *FixingCreate) SetDeviceID(i int) *FixingCreate {
	fc.mutation.SetDeviceID(i)
	return fc
}

// SetAssignNotes sets the "assign_notes" field.
func (fc *FixingCreate) SetAssignNotes(s string) *FixingCreate {
	fc.mutation.SetAssignNotes(s)
	return fc
}

// SetNillableAssignNotes sets the "assign_notes" field if the given value is not nil.
func (fc *FixingCreate) SetNillableAssignNotes(s *string) *FixingCreate {
	if s != nil {
		fc.SetAssignNotes(*s)
	}
	return fc
}

// SetFixTime sets the "fix_time" field.
func (fc *FixingCreate) SetFixTime(t time.Time) *FixingCreate {
	fc.mutation.SetFixTime(t)
	return fc
}

// SetNillableFixTime sets the "fix_time" field if the given value is not nil.
func (fc *FixingCreate) SetNillableFixTime(t *time.Time) *FixingCreate {
	if t != nil {
		fc.SetFixTime(*t)
	}
	return fc
}

// SetCompleteTime sets the "complete_time" field.
func (fc *FixingCreate) SetCompleteTime(t time.Time) *FixingCreate {
	fc.mutation.SetCompleteTime(t)
	return fc
}

// SetNillableCompleteTime sets the "complete_time" field if the given value is not nil.
func (fc *FixingCreate) SetNillableCompleteTime(t *time.Time) *FixingCreate {
	if t != nil {
		fc.SetCompleteTime(*t)
	}
	return fc
}

// SetCompleteNotes sets the "complete_notes" field.
func (fc *FixingCreate) SetCompleteNotes(s string) *FixingCreate {
	fc.mutation.SetCompleteNotes(s)
	return fc
}

// SetNillableCompleteNotes sets the "complete_notes" field if the given value is not nil.
func (fc *FixingCreate) SetNillableCompleteNotes(s *string) *FixingCreate {
	if s != nil {
		fc.SetCompleteNotes(*s)
	}
	return fc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (fc *FixingCreate) SetCreator(a *Admin) *FixingCreate {
	return fc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (fc *FixingCreate) SetUpdater(a *Admin) *FixingCreate {
	return fc.SetUpdaterID(a.ID)
}

// SetFixer sets the "fixer" edge to the Admin entity.
func (fc *FixingCreate) SetFixer(a *Admin) *FixingCreate {
	return fc.SetFixerID(a.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (fc *FixingCreate) SetEvent(e *Event) *FixingCreate {
	return fc.SetEventID(e.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (fc *FixingCreate) SetDevice(d *Device) *FixingCreate {
	return fc.SetDeviceID(d.ID)
}

// Mutation returns the FixingMutation object of the builder.
func (fc *FixingCreate) Mutation() *FixingMutation {
	return fc.mutation
}

// Save creates the Fixing in the database.
func (fc *FixingCreate) Save(ctx context.Context) (*Fixing, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FixingCreate) SaveX(ctx context.Context) *Fixing {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FixingCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FixingCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FixingCreate) defaults() error {
	if _, ok := fc.mutation.CreateTime(); !ok {
		if fixing.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized fixing.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := fixing.DefaultCreateTime()
		fc.mutation.SetCreateTime(v)
	}
	if _, ok := fc.mutation.UpdateTime(); !ok {
		if fixing.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized fixing.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := fixing.DefaultUpdateTime()
		fc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FixingCreate) check() error {
	if _, ok := fc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "Fixing.create_time"`)}
	}
	if _, ok := fc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "Fixing.creator_id"`)}
	}
	if v, ok := fc.mutation.CreatorID(); ok {
		if err := fixing.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.creator_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "Fixing.updater_id"`)}
	}
	if v, ok := fc.mutation.UpdaterID(); ok {
		if err := fixing.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.updater_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "Fixing.update_time"`)}
	}
	if _, ok := fc.mutation.FixerID(); !ok {
		return &ValidationError{Name: "fixer_id", err: errors.New(`dao: missing required field "Fixing.fixer_id"`)}
	}
	if v, ok := fc.mutation.FixerID(); ok {
		if err := fixing.FixerIDValidator(v); err != nil {
			return &ValidationError{Name: "fixer_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.fixer_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`dao: missing required field "Fixing.event_id"`)}
	}
	if v, ok := fc.mutation.EventID(); ok {
		if err := fixing.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.event_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "Fixing.device_id"`)}
	}
	if v, ok := fc.mutation.DeviceID(); ok {
		if err := fixing.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.device_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Fixing.creator"`)}
	}
	if _, ok := fc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Fixing.updater"`)}
	}
	if _, ok := fc.mutation.FixerID(); !ok {
		return &ValidationError{Name: "fixer", err: errors.New(`dao: missing required edge "Fixing.fixer"`)}
	}
	if _, ok := fc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`dao: missing required edge "Fixing.event"`)}
	}
	if _, ok := fc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`dao: missing required edge "Fixing.device"`)}
	}
	return nil
}

func (fc *FixingCreate) sqlSave(ctx context.Context) (*Fixing, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FixingCreate) createSpec() (*Fixing, *sqlgraph.CreateSpec) {
	var (
		_node = &Fixing{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fixing.Table, sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.CreateTime(); ok {
		_spec.SetField(fixing.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := fc.mutation.DeleteTime(); ok {
		_spec.SetField(fixing.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := fc.mutation.UpdateTime(); ok {
		_spec.SetField(fixing.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := fc.mutation.AssignNotes(); ok {
		_spec.SetField(fixing.FieldAssignNotes, field.TypeString, value)
		_node.AssignNotes = value
	}
	if value, ok := fc.mutation.FixTime(); ok {
		_spec.SetField(fixing.FieldFixTime, field.TypeTime, value)
		_node.FixTime = value
	}
	if value, ok := fc.mutation.CompleteTime(); ok {
		_spec.SetField(fixing.FieldCompleteTime, field.TypeTime, value)
		_node.CompleteTime = value
	}
	if value, ok := fc.mutation.CompleteNotes(); ok {
		_spec.SetField(fixing.FieldCompleteNotes, field.TypeString, value)
		_node.CompleteNotes = value
	}
	if nodes := fc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.CreatorTable,
			Columns: []string{fixing.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FixerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fixing.EventTable,
			Columns: []string{fixing.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.DeviceTable,
			Columns: []string{fixing.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FixingCreateBulk is the builder for creating many Fixing entities in bulk.
type FixingCreateBulk struct {
	config
	err      error
	builders []*FixingCreate
}

// Save creates the Fixing entities in the database.
func (fcb *FixingCreateBulk) Save(ctx context.Context) ([]*Fixing, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fixing, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FixingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FixingCreateBulk) SaveX(ctx context.Context) []*Fixing {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FixingCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FixingCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
