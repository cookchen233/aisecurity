// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventLevelCreate is the builder for creating a EventLevel entity.
type EventLevelCreate struct {
	config
	mutation *EventLevelMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (elc *EventLevelCreate) SetCreateTime(t time.Time) *EventLevelCreate {
	elc.mutation.SetCreateTime(t)
	return elc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableCreateTime(t *time.Time) *EventLevelCreate {
	if t != nil {
		elc.SetCreateTime(*t)
	}
	return elc
}

// SetCreatorID sets the "creator_id" field.
func (elc *EventLevelCreate) SetCreatorID(i int) *EventLevelCreate {
	elc.mutation.SetCreatorID(i)
	return elc
}

// SetDeleteTime sets the "delete_time" field.
func (elc *EventLevelCreate) SetDeleteTime(t time.Time) *EventLevelCreate {
	elc.mutation.SetDeleteTime(t)
	return elc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableDeleteTime(t *time.Time) *EventLevelCreate {
	if t != nil {
		elc.SetDeleteTime(*t)
	}
	return elc
}

// SetUpdaterID sets the "updater_id" field.
func (elc *EventLevelCreate) SetUpdaterID(i int) *EventLevelCreate {
	elc.mutation.SetUpdaterID(i)
	return elc
}

// SetUpdateTime sets the "update_time" field.
func (elc *EventLevelCreate) SetUpdateTime(t time.Time) *EventLevelCreate {
	elc.mutation.SetUpdateTime(t)
	return elc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableUpdateTime(t *time.Time) *EventLevelCreate {
	if t != nil {
		elc.SetUpdateTime(*t)
	}
	return elc
}

// SetName sets the "name" field.
func (elc *EventLevelCreate) SetName(s string) *EventLevelCreate {
	elc.mutation.SetName(s)
	return elc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableName(s *string) *EventLevelCreate {
	if s != nil {
		elc.SetName(*s)
	}
	return elc
}

// SetEventTypes sets the "event_types" field.
func (elc *EventLevelCreate) SetEventTypes(et []enums.EventType) *EventLevelCreate {
	elc.mutation.SetEventTypes(et)
	return elc
}

// SetDescription sets the "description" field.
func (elc *EventLevelCreate) SetDescription(s string) *EventLevelCreate {
	elc.mutation.SetDescription(s)
	return elc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableDescription(s *string) *EventLevelCreate {
	if s != nil {
		elc.SetDescription(*s)
	}
	return elc
}

// SetIcon sets the "icon" field.
func (elc *EventLevelCreate) SetIcon(s string) *EventLevelCreate {
	elc.mutation.SetIcon(s)
	return elc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (elc *EventLevelCreate) SetNillableIcon(s *string) *EventLevelCreate {
	if s != nil {
		elc.SetIcon(*s)
	}
	return elc
}

// SetNotifyTypes sets the "notify_types" field.
func (elc *EventLevelCreate) SetNotifyTypes(et []enums.NotifyType) *EventLevelCreate {
	elc.mutation.SetNotifyTypes(et)
	return elc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (elc *EventLevelCreate) SetCreator(a *Admin) *EventLevelCreate {
	return elc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (elc *EventLevelCreate) SetUpdater(a *Admin) *EventLevelCreate {
	return elc.SetUpdaterID(a.ID)
}

// Mutation returns the EventLevelMutation object of the builder.
func (elc *EventLevelCreate) Mutation() *EventLevelMutation {
	return elc.mutation
}

// Save creates the EventLevel in the database.
func (elc *EventLevelCreate) Save(ctx context.Context) (*EventLevel, error) {
	if err := elc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EventLevelCreate) SaveX(ctx context.Context) *EventLevel {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EventLevelCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EventLevelCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EventLevelCreate) defaults() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		if eventlevel.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlevel.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := eventlevel.DefaultCreateTime()
		elc.mutation.SetCreateTime(v)
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		if eventlevel.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlevel.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlevel.DefaultUpdateTime()
		elc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (elc *EventLevelCreate) check() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "EventLevel.create_time"`)}
	}
	if _, ok := elc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "EventLevel.creator_id"`)}
	}
	if v, ok := elc.mutation.CreatorID(); ok {
		if err := eventlevel.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "EventLevel.creator_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "EventLevel.updater_id"`)}
	}
	if v, ok := elc.mutation.UpdaterID(); ok {
		if err := eventlevel.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLevel.updater_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "EventLevel.update_time"`)}
	}
	if v, ok := elc.mutation.Name(); ok {
		if err := eventlevel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "EventLevel.name": %w`, err)}
		}
	}
	if _, ok := elc.mutation.EventTypes(); !ok {
		return &ValidationError{Name: "event_types", err: errors.New(`dao: missing required field "EventLevel.event_types"`)}
	}
	if v, ok := elc.mutation.Icon(); ok {
		if err := eventlevel.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`dao: validator failed for field "EventLevel.icon": %w`, err)}
		}
	}
	if _, ok := elc.mutation.NotifyTypes(); !ok {
		return &ValidationError{Name: "notify_types", err: errors.New(`dao: missing required field "EventLevel.notify_types"`)}
	}
	if _, ok := elc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "EventLevel.creator"`)}
	}
	if _, ok := elc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "EventLevel.updater"`)}
	}
	return nil
}

func (elc *EventLevelCreate) sqlSave(ctx context.Context) (*EventLevel, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EventLevelCreate) createSpec() (*EventLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &EventLevel{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(eventlevel.Table, sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt))
	)
	if value, ok := elc.mutation.CreateTime(); ok {
		_spec.SetField(eventlevel.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := elc.mutation.DeleteTime(); ok {
		_spec.SetField(eventlevel.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := elc.mutation.UpdateTime(); ok {
		_spec.SetField(eventlevel.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := elc.mutation.Name(); ok {
		_spec.SetField(eventlevel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := elc.mutation.EventTypes(); ok {
		_spec.SetField(eventlevel.FieldEventTypes, field.TypeJSON, value)
		_node.EventTypes = value
	}
	if value, ok := elc.mutation.Description(); ok {
		_spec.SetField(eventlevel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := elc.mutation.Icon(); ok {
		_spec.SetField(eventlevel.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := elc.mutation.NotifyTypes(); ok {
		_spec.SetField(eventlevel.FieldNotifyTypes, field.TypeJSON, value)
		_node.NotifyTypes = value
	}
	if nodes := elc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.CreatorTable,
			Columns: []string{eventlevel.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlevel.UpdaterTable,
			Columns: []string{eventlevel.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventLevelCreateBulk is the builder for creating many EventLevel entities in bulk.
type EventLevelCreateBulk struct {
	config
	err      error
	builders []*EventLevelCreate
}

// Save creates the EventLevel entities in the database.
func (elcb *EventLevelCreateBulk) Save(ctx context.Context) ([]*EventLevel, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EventLevel, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EventLevelCreateBulk) SaveX(ctx context.Context) []*EventLevel {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EventLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EventLevelCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
