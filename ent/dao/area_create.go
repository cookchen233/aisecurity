// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/deviceinstallation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaCreate is the builder for creating a Area entity.
type AreaCreate struct {
	config
	mutation *AreaMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AreaCreate) SetCreatedAt(t time.Time) *AreaCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AreaCreate) SetNillableCreatedAt(t *time.Time) *AreaCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AreaCreate) SetCreatedBy(i int) *AreaCreate {
	ac.mutation.SetCreatedBy(i)
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AreaCreate) SetDeletedAt(t time.Time) *AreaCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AreaCreate) SetNillableDeletedAt(t *time.Time) *AreaCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AreaCreate) SetUpdatedBy(i int) *AreaCreate {
	ac.mutation.SetUpdatedBy(i)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AreaCreate) SetUpdatedAt(t time.Time) *AreaCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AreaCreate) SetNillableUpdatedAt(t *time.Time) *AreaCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AreaCreate) SetName(s string) *AreaCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AreaCreate) SetNillableName(s *string) *AreaCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AreaCreate) SetDescription(s string) *AreaCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AreaCreate) SetNillableDescription(s *string) *AreaCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (ac *AreaCreate) SetCreatorID(id int) *AreaCreate {
	ac.mutation.SetCreatorID(id)
	return ac
}

// SetCreator sets the "creator" edge to the Admin entity.
func (ac *AreaCreate) SetCreator(a *Admin) *AreaCreate {
	return ac.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ac *AreaCreate) SetUpdaterID(id int) *AreaCreate {
	ac.mutation.SetUpdaterID(id)
	return ac
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ac *AreaCreate) SetUpdater(a *Admin) *AreaCreate {
	return ac.SetUpdaterID(a.ID)
}

// AddDeviceInstallationAreaIDs adds the "device_installation_area" edge to the DeviceInstallation entity by IDs.
func (ac *AreaCreate) AddDeviceInstallationAreaIDs(ids ...int) *AreaCreate {
	ac.mutation.AddDeviceInstallationAreaIDs(ids...)
	return ac
}

// AddDeviceInstallationArea adds the "device_installation_area" edges to the DeviceInstallation entity.
func (ac *AreaCreate) AddDeviceInstallationArea(d ...*DeviceInstallation) *AreaCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeviceInstallationAreaIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (ac *AreaCreate) Mutation() *AreaMutation {
	return ac.mutation
}

// Save creates the Area in the database.
func (ac *AreaCreate) Save(ctx context.Context) (*Area, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AreaCreate) SaveX(ctx context.Context) *Area {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AreaCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AreaCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AreaCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if area.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized area.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := area.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if area.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized area.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := area.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Name(); !ok {
		v := area.DefaultName
		ac.mutation.SetName(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AreaCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "Area.created_at"`)}
	}
	if _, ok := ac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "Area.created_by"`)}
	}
	if v, ok := ac.mutation.CreatedBy(); ok {
		if err := area.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "Area.created_by": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "Area.updated_by"`)}
	}
	if v, ok := ac.mutation.UpdatedBy(); ok {
		if err := area.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Area.updated_by": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "Area.updated_at"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Area.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Area.creator"`)}
	}
	if _, ok := ac.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Area.updater"`)}
	}
	return nil
}

func (ac *AreaCreate) sqlSave(ctx context.Context) (*Area, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AreaCreate) createSpec() (*Area, *sqlgraph.CreateSpec) {
	var (
		_node = &Area{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(area.Table, sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(area.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(area.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(area.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(area.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.CreatorTable,
			Columns: []string{area.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeviceInstallationAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationAreaTable,
			Columns: []string{area.DeviceInstallationAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AreaCreateBulk is the builder for creating many Area entities in bulk.
type AreaCreateBulk struct {
	config
	err      error
	builders []*AreaCreate
}

// Save creates the Area entities in the database.
func (acb *AreaCreateBulk) Save(ctx context.Context) ([]*Area, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Area, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AreaCreateBulk) SaveX(ctx context.Context) []*Area {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AreaCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AreaCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
