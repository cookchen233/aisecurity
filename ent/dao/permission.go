// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/permission"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建者
	CreatorID int `json:"creator_id,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 最后更新者
	UpdaterID int `json:"updater_id,omitempty"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 名称
	Name string `json:"name,omitempty" validate:"required"`
	// 权限点
	AccessIds []string `json:"access_ids,omitempty" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges        PermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Admin holds the value of the admin edge.
	Admin []*Admin `json:"admin,omitempty"`
	// Department holds the value of the department edge.
	Department []*Department `json:"department,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) AdminOrErr() ([]*Admin, error) {
	if e.loadedTypes[2] {
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) DepartmentOrErr() ([]*Department, error) {
	if e.loadedTypes[3] {
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permission.FieldAccessIds:
			values[i] = new([]byte)
		case permission.FieldID, permission.FieldCreatorID, permission.FieldUpdaterID:
			values[i] = new(sql.NullInt64)
		case permission.FieldName:
			values[i] = new(sql.NullString)
		case permission.FieldCreateTime, permission.FieldDeleteTime, permission.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case permission.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pe.CreateTime = value.Time
			}
		case permission.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				pe.CreatorID = int(value.Int64)
			}
		case permission.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				pe.DeleteTime = new(time.Time)
				*pe.DeleteTime = value.Time
			}
		case permission.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				pe.UpdaterID = int(value.Int64)
			}
		case permission.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pe.UpdateTime = value.Time
			}
		case permission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case permission.FieldAccessIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field access_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.AccessIds); err != nil {
					return fmt.Errorf("unmarshal field access_ids: %w", err)
				}
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Permission.
// This includes values selected through modifiers, order, etc.
func (pe *Permission) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Permission entity.
func (pe *Permission) QueryCreator() *AdminQuery {
	return NewPermissionClient(pe.config).QueryCreator(pe)
}

// QueryUpdater queries the "updater" edge of the Permission entity.
func (pe *Permission) QueryUpdater() *AdminQuery {
	return NewPermissionClient(pe.config).QueryUpdater(pe)
}

// QueryAdmin queries the "admin" edge of the Permission entity.
func (pe *Permission) QueryAdmin() *AdminQuery {
	return NewPermissionClient(pe.config).QueryAdmin(pe)
}

// QueryDepartment queries the "department" edge of the Permission entity.
func (pe *Permission) QueryDepartment() *DepartmentQuery {
	return NewPermissionClient(pe.config).QueryDepartment(pe)
}

// Update returns a builder for updating this Permission.
// Note that you need to call Permission.Unwrap() before calling this method if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return NewPermissionClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Permission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("dao: Permission is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pe.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.CreatorID))
	builder.WriteString(", ")
	if v := pe.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pe.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("access_ids=")
	builder.WriteString(fmt.Sprintf("%v", pe.AccessIds))
	builder.WriteByte(')')
	return builder.String()
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission
