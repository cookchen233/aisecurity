// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/enums"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventLevel is the model entity for the EventLevel schema.
type EventLevel struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 名称
	Name string `json:"name" validate:"required"`
	// 包含事件类型
	EventTypes []enums.EventType `json:"event_types" validate:"required"`
	// 描述
	Description string `json:"description"`
	// 是否上报
	IsReport bool `json:"is_report"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventLevelQuery when eager-loading is set.
	Edges        EventLevelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventLevelEdges holds the relations/edges for other nodes in the graph.
type EventLevelEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLevelEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLevelEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventlevel.FieldEventTypes:
			values[i] = new([]byte)
		case eventlevel.FieldIsReport:
			values[i] = new(sql.NullBool)
		case eventlevel.FieldID, eventlevel.FieldCreatedBy, eventlevel.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case eventlevel.FieldName, eventlevel.FieldDescription:
			values[i] = new(sql.NullString)
		case eventlevel.FieldCreatedAt, eventlevel.FieldDeletedAt, eventlevel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventLevel fields.
func (el *EventLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventlevel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int(value.Int64)
		case eventlevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				el.CreatedAt = value.Time
			}
		case eventlevel.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				el.CreatedBy = int(value.Int64)
			}
		case eventlevel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				el.DeletedAt = new(time.Time)
				*el.DeletedAt = value.Time
			}
		case eventlevel.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				el.UpdatedBy = int(value.Int64)
			}
		case eventlevel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				el.UpdatedAt = value.Time
			}
		case eventlevel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				el.Name = value.String
			}
		case eventlevel.FieldEventTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field event_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &el.EventTypes); err != nil {
					return fmt.Errorf("unmarshal field event_types: %w", err)
				}
			}
		case eventlevel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				el.Description = value.String
			}
		case eventlevel.FieldIsReport:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_report", values[i])
			} else if value.Valid {
				el.IsReport = value.Bool
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventLevel.
// This includes values selected through modifiers, order, etc.
func (el *EventLevel) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the EventLevel entity.
func (el *EventLevel) QueryCreator() *AdminQuery {
	return NewEventLevelClient(el.config).QueryCreator(el)
}

// QueryUpdater queries the "updater" edge of the EventLevel entity.
func (el *EventLevel) QueryUpdater() *AdminQuery {
	return NewEventLevelClient(el.config).QueryUpdater(el)
}

// Update returns a builder for updating this EventLevel.
// Note that you need to call EventLevel.Unwrap() before calling this method if this EventLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EventLevel) Update() *EventLevelUpdateOne {
	return NewEventLevelClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EventLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EventLevel) Unwrap() *EventLevel {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("dao: EventLevel is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EventLevel) String() string {
	var builder strings.Builder
	builder.WriteString("EventLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("created_at=")
	builder.WriteString(el.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", el.CreatedBy))
	builder.WriteString(", ")
	if v := el.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(el.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(el.Name)
	builder.WriteString(", ")
	builder.WriteString("event_types=")
	builder.WriteString(fmt.Sprintf("%v", el.EventTypes))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(el.Description)
	builder.WriteString(", ")
	builder.WriteString("is_report=")
	builder.WriteString(fmt.Sprintf("%v", el.IsReport))
	builder.WriteByte(')')
	return builder.String()
}

// EventLevels is a parsable slice of EventLevel.
type EventLevels []*EventLevel
