// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 管理员id
	AdminID int `json:"admin_id"`
	// 部门id
	DepartmentID int `json:"department_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges        EmployeeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Occupations holds the value of the occupations edge.
	Occupations []*Occupation `json:"occupations,omitempty"`
	// IpcEvents holds the value of the ipc_events edge.
	IpcEvents []*IPCEvent `json:"ipc_events,omitempty"`
	// RiskReporter holds the value of the risk_reporter edge.
	RiskReporter []*Risk `json:"risk_reporter,omitempty"`
	// RiskMaintainer holds the value of the risk_maintainer edge.
	RiskMaintainer []*Risk `json:"risk_maintainer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[2] {
		if e.Admin == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[3] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// OccupationsOrErr returns the Occupations value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) OccupationsOrErr() ([]*Occupation, error) {
	if e.loadedTypes[4] {
		return e.Occupations, nil
	}
	return nil, &NotLoadedError{edge: "occupations"}
}

// IpcEventsOrErr returns the IpcEvents value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) IpcEventsOrErr() ([]*IPCEvent, error) {
	if e.loadedTypes[5] {
		return e.IpcEvents, nil
	}
	return nil, &NotLoadedError{edge: "ipc_events"}
}

// RiskReporterOrErr returns the RiskReporter value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) RiskReporterOrErr() ([]*Risk, error) {
	if e.loadedTypes[6] {
		return e.RiskReporter, nil
	}
	return nil, &NotLoadedError{edge: "risk_reporter"}
}

// RiskMaintainerOrErr returns the RiskMaintainer value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) RiskMaintainerOrErr() ([]*Risk, error) {
	if e.loadedTypes[7] {
		return e.RiskMaintainer, nil
	}
	return nil, &NotLoadedError{edge: "risk_maintainer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldID, employee.FieldCreatedBy, employee.FieldUpdatedBy, employee.FieldAdminID, employee.FieldDepartmentID:
			values[i] = new(sql.NullInt64)
		case employee.FieldCreatedAt, employee.FieldDeletedAt, employee.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case employee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case employee.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = int(value.Int64)
			}
		case employee.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case employee.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = int(value.Int64)
			}
		case employee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case employee.FieldAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_id", values[i])
			} else if value.Valid {
				e.AdminID = int(value.Int64)
			}
		case employee.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				e.DepartmentID = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Employee.
// This includes values selected through modifiers, order, etc.
func (e *Employee) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Employee entity.
func (e *Employee) QueryCreator() *AdminQuery {
	return NewEmployeeClient(e.config).QueryCreator(e)
}

// QueryUpdater queries the "updater" edge of the Employee entity.
func (e *Employee) QueryUpdater() *AdminQuery {
	return NewEmployeeClient(e.config).QueryUpdater(e)
}

// QueryAdmin queries the "admin" edge of the Employee entity.
func (e *Employee) QueryAdmin() *AdminQuery {
	return NewEmployeeClient(e.config).QueryAdmin(e)
}

// QueryDepartment queries the "department" edge of the Employee entity.
func (e *Employee) QueryDepartment() *DepartmentQuery {
	return NewEmployeeClient(e.config).QueryDepartment(e)
}

// QueryOccupations queries the "occupations" edge of the Employee entity.
func (e *Employee) QueryOccupations() *OccupationQuery {
	return NewEmployeeClient(e.config).QueryOccupations(e)
}

// QueryIpcEvents queries the "ipc_events" edge of the Employee entity.
func (e *Employee) QueryIpcEvents() *IPCEventQuery {
	return NewEmployeeClient(e.config).QueryIpcEvents(e)
}

// QueryRiskReporter queries the "risk_reporter" edge of the Employee entity.
func (e *Employee) QueryRiskReporter() *RiskQuery {
	return NewEmployeeClient(e.config).QueryRiskReporter(e)
}

// QueryRiskMaintainer queries the "risk_maintainer" edge of the Employee entity.
func (e *Employee) QueryRiskMaintainer() *RiskQuery {
	return NewEmployeeClient(e.config).QueryRiskMaintainer(e)
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return NewEmployeeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("dao: Employee is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedBy))
	builder.WriteString(", ")
	if v := e.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("admin_id=")
	builder.WriteString(fmt.Sprintf("%v", e.AdminID))
	builder.WriteString(", ")
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", e.DepartmentID))
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee
