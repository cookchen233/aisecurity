// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where appends a list predicates to the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdminUpdate) SetDeletedAt(t time.Time) *AdminUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdminUpdate) SetNillableDeletedAt(t *time.Time) *AdminUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdminUpdate) ClearDeletedAt() *AdminUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AdminUpdate) SetUpdatedBy(i int) *AdminUpdate {
	au.mutation.SetUpdatedBy(i)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AdminUpdate) SetNillableUpdatedBy(i *int) *AdminUpdate {
	if i != nil {
		au.SetUpdatedBy(*i)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminUpdate) SetUpdatedAt(t time.Time) *AdminUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AdminUpdate) SetUsername(s string) *AdminUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (au *AdminUpdate) SetNillableUsername(s *string) *AdminUpdate {
	if s != nil {
		au.SetUsername(*s)
	}
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(s string) *AdminUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePassword(s *string) *AdminUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// SetName sets the "name" field.
func (au *AdminUpdate) SetName(s string) *AdminUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableName(s *string) *AdminUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AdminUpdate) ClearName() *AdminUpdate {
	au.mutation.ClearName()
	return au
}

// SetUpdatorID sets the "updator" edge to the Admin entity by ID.
func (au *AdminUpdate) SetUpdatorID(id int) *AdminUpdate {
	au.mutation.SetUpdatorID(id)
	return au
}

// SetUpdator sets the "updator" edge to the Admin entity.
func (au *AdminUpdate) SetUpdator(a *Admin) *AdminUpdate {
	return au.SetUpdatorID(a.ID)
}

// AddAdminRoleIDs adds the "admin_roles" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleIDs(ids...)
	return au
}

// AddAdminRoles adds the "admin_roles" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoles(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminCreatorIDs(ids...)
	return au
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) AddAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdatorIDs adds the "admin_updator" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminUpdatorIDs(ids...)
	return au
}

// AddAdminUpdator adds the "admin_updator" edges to the Admin entity.
func (au *AdminUpdate) AddAdminUpdator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminUpdatorIDs(ids...)
}

// AddAdminRoleCreatorIDs adds the "admin_role_creator" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleCreatorIDs(ids...)
	return au
}

// AddAdminRoleCreator adds the "admin_role_creator" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoleCreator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleCreatorIDs(ids...)
}

// AddAdminRoleUpdatorIDs adds the "admin_role_updator" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleUpdatorIDs(ids...)
	return au
}

// AddAdminRoleUpdator adds the "admin_role_updator" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoleUpdator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleUpdatorIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCreatorIDs(ids...)
	return au
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) AddRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdatorIDs adds the "risk_updator" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskUpdatorIDs(ids...)
	return au
}

// AddRiskUpdator adds the "risk_updator" edges to the Risk entity.
func (au *AdminUpdate) AddRiskUpdator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskUpdatorIDs(ids...)
}

// AddRiskMaintainerIDs adds the "risk_maintainer" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskMaintainerIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskMaintainerIDs(ids...)
	return au
}

// AddRiskMaintainer adds the "risk_maintainer" edges to the Risk entity.
func (au *AdminUpdate) AddRiskMaintainer(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskMaintainerIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationCreatorIDs(ids...)
	return au
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdatorIDs adds the "risk_location_updator" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationUpdatorIDs(ids...)
	return au
}

// AddRiskLocationUpdator adds the "risk_location_updator" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationUpdator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationUpdatorIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryCreatorIDs(ids...)
	return au
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdatorIDs adds the "risk_category_updator" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryUpdatorIDs(ids...)
	return au
}

// AddRiskCategoryUpdator adds the "risk_category_updator" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryUpdator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryUpdatorIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentCreatorIDs(ids...)
	return au
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdatorIDs adds the "department_updator" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentUpdatorIDs(ids...)
	return au
}

// AddDepartmentUpdator adds the "department_updator" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentUpdator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentUpdatorIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeCreatorIDs(ids...)
	return au
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdatorIDs adds the "employee_updator" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeUpdatorIDs(ids...)
	return au
}

// AddEmployeeUpdator adds the "employee_updator" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeUpdator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeUpdatorIDs(ids...)
}

// AddEmployeeAdminIDs adds the "employee_admin" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeAdminIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeAdminIDs(ids...)
	return au
}

// AddEmployeeAdmin adds the "employee_admin" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeAdmin(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeAdminIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// ClearUpdator clears the "updator" edge to the Admin entity.
func (au *AdminUpdate) ClearUpdator() *AdminUpdate {
	au.mutation.ClearUpdator()
	return au
}

// ClearAdminRoles clears all "admin_roles" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoles() *AdminUpdate {
	au.mutation.ClearAdminRoles()
	return au
}

// RemoveAdminRoleIDs removes the "admin_roles" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleIDs(ids...)
	return au
}

// RemoveAdminRoles removes "admin_roles" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoles(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminCreator() *AdminUpdate {
	au.mutation.ClearAdminCreator()
	return au
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminCreatorIDs(ids...)
	return au
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdator clears all "admin_updator" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminUpdator() *AdminUpdate {
	au.mutation.ClearAdminUpdator()
	return au
}

// RemoveAdminUpdatorIDs removes the "admin_updator" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminUpdatorIDs(ids...)
	return au
}

// RemoveAdminUpdator removes "admin_updator" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminUpdator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminUpdatorIDs(ids...)
}

// ClearAdminRoleCreator clears all "admin_role_creator" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoleCreator() *AdminUpdate {
	au.mutation.ClearAdminRoleCreator()
	return au
}

// RemoveAdminRoleCreatorIDs removes the "admin_role_creator" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleCreatorIDs(ids...)
	return au
}

// RemoveAdminRoleCreator removes "admin_role_creator" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoleCreator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleCreatorIDs(ids...)
}

// ClearAdminRoleUpdator clears all "admin_role_updator" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoleUpdator() *AdminUpdate {
	au.mutation.ClearAdminRoleUpdator()
	return au
}

// RemoveAdminRoleUpdatorIDs removes the "admin_role_updator" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleUpdatorIDs(ids...)
	return au
}

// RemoveAdminRoleUpdator removes "admin_role_updator" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoleUpdator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleUpdatorIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskCreator() *AdminUpdate {
	au.mutation.ClearRiskCreator()
	return au
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCreatorIDs(ids...)
	return au
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdator clears all "risk_updator" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskUpdator() *AdminUpdate {
	au.mutation.ClearRiskUpdator()
	return au
}

// RemoveRiskUpdatorIDs removes the "risk_updator" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskUpdatorIDs(ids...)
	return au
}

// RemoveRiskUpdator removes "risk_updator" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskUpdator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskUpdatorIDs(ids...)
}

// ClearRiskMaintainer clears all "risk_maintainer" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskMaintainer() *AdminUpdate {
	au.mutation.ClearRiskMaintainer()
	return au
}

// RemoveRiskMaintainerIDs removes the "risk_maintainer" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskMaintainerIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskMaintainerIDs(ids...)
	return au
}

// RemoveRiskMaintainer removes "risk_maintainer" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskMaintainer(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskMaintainerIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationCreator() *AdminUpdate {
	au.mutation.ClearRiskLocationCreator()
	return au
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return au
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdator clears all "risk_location_updator" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationUpdator() *AdminUpdate {
	au.mutation.ClearRiskLocationUpdator()
	return au
}

// RemoveRiskLocationUpdatorIDs removes the "risk_location_updator" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationUpdatorIDs(ids...)
	return au
}

// RemoveRiskLocationUpdator removes "risk_location_updator" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationUpdator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationUpdatorIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryCreator() *AdminUpdate {
	au.mutation.ClearRiskCategoryCreator()
	return au
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return au
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdator clears all "risk_category_updator" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryUpdator() *AdminUpdate {
	au.mutation.ClearRiskCategoryUpdator()
	return au
}

// RemoveRiskCategoryUpdatorIDs removes the "risk_category_updator" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryUpdatorIDs(ids...)
	return au
}

// RemoveRiskCategoryUpdator removes "risk_category_updator" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryUpdator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryUpdatorIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentCreator() *AdminUpdate {
	au.mutation.ClearDepartmentCreator()
	return au
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentCreatorIDs(ids...)
	return au
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdator clears all "department_updator" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentUpdator() *AdminUpdate {
	au.mutation.ClearDepartmentUpdator()
	return au
}

// RemoveDepartmentUpdatorIDs removes the "department_updator" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentUpdatorIDs(ids...)
	return au
}

// RemoveDepartmentUpdator removes "department_updator" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentUpdator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentUpdatorIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeCreator() *AdminUpdate {
	au.mutation.ClearEmployeeCreator()
	return au
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeCreatorIDs(ids...)
	return au
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdator clears all "employee_updator" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeUpdator() *AdminUpdate {
	au.mutation.ClearEmployeeUpdator()
	return au
}

// RemoveEmployeeUpdatorIDs removes the "employee_updator" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeUpdatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeUpdatorIDs(ids...)
	return au
}

// RemoveEmployeeUpdator removes "employee_updator" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeUpdator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeUpdatorIDs(ids...)
}

// ClearEmployeeAdmin clears all "employee_admin" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeAdmin() *AdminUpdate {
	au.mutation.ClearEmployeeAdmin()
	return au
}

// RemoveEmployeeAdminIDs removes the "employee_admin" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeAdminIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeAdminIDs(ids...)
	return au
}

// RemoveEmployeeAdmin removes "employee_admin" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeAdmin(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if admin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AdminUpdate) check() error {
	if v, ok := au.mutation.UpdatedBy(); ok {
		if err := admin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Admin.updated_by": %w`, err)}
		}
	}
	if v, ok := au.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := admin.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Admin.name": %w`, err)}
		}
	}
	if _, ok := au.mutation.CreatorID(); au.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := au.mutation.UpdatorID(); au.mutation.UpdatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updator"`)
	}
	return nil
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(admin.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(admin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(admin.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(admin.FieldName, field.TypeString)
	}
	if au.mutation.UpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdatorTable,
			Columns: []string{admin.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdatorTable,
			Columns: []string{admin.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRolesIDs(); len(nodes) > 0 && !au.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminUpdatorIDs(); len(nodes) > 0 && !au.mutation.AdminUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRoleCreatorIDs(); len(nodes) > 0 && !au.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRoleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRoleUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRoleUpdatorIDs(); len(nodes) > 0 && !au.mutation.AdminRoleUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRoleUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskUpdatorIDs(); len(nodes) > 0 && !au.mutation.RiskUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskMaintainerIDs(); len(nodes) > 0 && !au.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationUpdatorIDs(); len(nodes) > 0 && !au.mutation.RiskLocationUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryUpdatorIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentUpdatorIDs(); len(nodes) > 0 && !au.mutation.DepartmentUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeUpdatorIDs(); len(nodes) > 0 && !au.mutation.EmployeeUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeAdminIDs(); len(nodes) > 0 && !au.mutation.EmployeeAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeAdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdminUpdateOne) SetDeletedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdminUpdateOne) ClearDeletedAt() *AdminUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AdminUpdateOne) SetUpdatedBy(i int) *AdminUpdateOne {
	auo.mutation.SetUpdatedBy(i)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableUpdatedBy(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetUpdatedBy(*i)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminUpdateOne) SetUpdatedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AdminUpdateOne) SetUsername(s string) *AdminUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableUsername(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetUsername(*s)
	}
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(s string) *AdminUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePassword(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AdminUpdateOne) SetName(s string) *AdminUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AdminUpdateOne) ClearName() *AdminUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetUpdatorID sets the "updator" edge to the Admin entity by ID.
func (auo *AdminUpdateOne) SetUpdatorID(id int) *AdminUpdateOne {
	auo.mutation.SetUpdatorID(id)
	return auo
}

// SetUpdator sets the "updator" edge to the Admin entity.
func (auo *AdminUpdateOne) SetUpdator(a *Admin) *AdminUpdateOne {
	return auo.SetUpdatorID(a.ID)
}

// AddAdminRoleIDs adds the "admin_roles" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleIDs(ids...)
	return auo
}

// AddAdminRoles adds the "admin_roles" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoles(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminCreatorIDs(ids...)
	return auo
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdatorIDs adds the "admin_updator" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminUpdatorIDs(ids...)
	return auo
}

// AddAdminUpdator adds the "admin_updator" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminUpdator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminUpdatorIDs(ids...)
}

// AddAdminRoleCreatorIDs adds the "admin_role_creator" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleCreatorIDs(ids...)
	return auo
}

// AddAdminRoleCreator adds the "admin_role_creator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoleCreator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleCreatorIDs(ids...)
}

// AddAdminRoleUpdatorIDs adds the "admin_role_updator" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleUpdatorIDs(ids...)
	return auo
}

// AddAdminRoleUpdator adds the "admin_role_updator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoleUpdator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleUpdatorIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCreatorIDs(ids...)
	return auo
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdatorIDs adds the "risk_updator" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskUpdatorIDs(ids...)
	return auo
}

// AddRiskUpdator adds the "risk_updator" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskUpdator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskUpdatorIDs(ids...)
}

// AddRiskMaintainerIDs adds the "risk_maintainer" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskMaintainerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskMaintainerIDs(ids...)
	return auo
}

// AddRiskMaintainer adds the "risk_maintainer" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskMaintainer(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskMaintainerIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationCreatorIDs(ids...)
	return auo
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdatorIDs adds the "risk_location_updator" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationUpdatorIDs(ids...)
	return auo
}

// AddRiskLocationUpdator adds the "risk_location_updator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationUpdator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationUpdatorIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryCreatorIDs(ids...)
	return auo
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdatorIDs adds the "risk_category_updator" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryUpdatorIDs(ids...)
	return auo
}

// AddRiskCategoryUpdator adds the "risk_category_updator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryUpdator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryUpdatorIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentCreatorIDs(ids...)
	return auo
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdatorIDs adds the "department_updator" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentUpdatorIDs(ids...)
	return auo
}

// AddDepartmentUpdator adds the "department_updator" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentUpdator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentUpdatorIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeCreatorIDs(ids...)
	return auo
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdatorIDs adds the "employee_updator" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeUpdatorIDs(ids...)
	return auo
}

// AddEmployeeUpdator adds the "employee_updator" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeUpdator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeUpdatorIDs(ids...)
}

// AddEmployeeAdminIDs adds the "employee_admin" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeAdminIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeAdminIDs(ids...)
	return auo
}

// AddEmployeeAdmin adds the "employee_admin" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeAdmin(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeAdminIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// ClearUpdator clears the "updator" edge to the Admin entity.
func (auo *AdminUpdateOne) ClearUpdator() *AdminUpdateOne {
	auo.mutation.ClearUpdator()
	return auo
}

// ClearAdminRoles clears all "admin_roles" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoles() *AdminUpdateOne {
	auo.mutation.ClearAdminRoles()
	return auo
}

// RemoveAdminRoleIDs removes the "admin_roles" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleIDs(ids...)
	return auo
}

// RemoveAdminRoles removes "admin_roles" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoles(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminCreator() *AdminUpdateOne {
	auo.mutation.ClearAdminCreator()
	return auo
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminCreatorIDs(ids...)
	return auo
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdator clears all "admin_updator" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminUpdator() *AdminUpdateOne {
	auo.mutation.ClearAdminUpdator()
	return auo
}

// RemoveAdminUpdatorIDs removes the "admin_updator" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminUpdatorIDs(ids...)
	return auo
}

// RemoveAdminUpdator removes "admin_updator" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminUpdator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminUpdatorIDs(ids...)
}

// ClearAdminRoleCreator clears all "admin_role_creator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoleCreator() *AdminUpdateOne {
	auo.mutation.ClearAdminRoleCreator()
	return auo
}

// RemoveAdminRoleCreatorIDs removes the "admin_role_creator" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleCreatorIDs(ids...)
	return auo
}

// RemoveAdminRoleCreator removes "admin_role_creator" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoleCreator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleCreatorIDs(ids...)
}

// ClearAdminRoleUpdator clears all "admin_role_updator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoleUpdator() *AdminUpdateOne {
	auo.mutation.ClearAdminRoleUpdator()
	return auo
}

// RemoveAdminRoleUpdatorIDs removes the "admin_role_updator" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleUpdatorIDs(ids...)
	return auo
}

// RemoveAdminRoleUpdator removes "admin_role_updator" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoleUpdator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleUpdatorIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCreator()
	return auo
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCreatorIDs(ids...)
	return auo
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdator clears all "risk_updator" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskUpdator() *AdminUpdateOne {
	auo.mutation.ClearRiskUpdator()
	return auo
}

// RemoveRiskUpdatorIDs removes the "risk_updator" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskUpdatorIDs(ids...)
	return auo
}

// RemoveRiskUpdator removes "risk_updator" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskUpdator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskUpdatorIDs(ids...)
}

// ClearRiskMaintainer clears all "risk_maintainer" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskMaintainer() *AdminUpdateOne {
	auo.mutation.ClearRiskMaintainer()
	return auo
}

// RemoveRiskMaintainerIDs removes the "risk_maintainer" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskMaintainerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskMaintainerIDs(ids...)
	return auo
}

// RemoveRiskMaintainer removes "risk_maintainer" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskMaintainer(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskMaintainerIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationCreator()
	return auo
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return auo
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdator clears all "risk_location_updator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationUpdator() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationUpdator()
	return auo
}

// RemoveRiskLocationUpdatorIDs removes the "risk_location_updator" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationUpdatorIDs(ids...)
	return auo
}

// RemoveRiskLocationUpdator removes "risk_location_updator" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationUpdatorIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryCreator()
	return auo
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return auo
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdator clears all "risk_category_updator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryUpdator() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryUpdator()
	return auo
}

// RemoveRiskCategoryUpdatorIDs removes the "risk_category_updator" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryUpdatorIDs(ids...)
	return auo
}

// RemoveRiskCategoryUpdator removes "risk_category_updator" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryUpdatorIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentCreator() *AdminUpdateOne {
	auo.mutation.ClearDepartmentCreator()
	return auo
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentCreatorIDs(ids...)
	return auo
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdator clears all "department_updator" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentUpdator() *AdminUpdateOne {
	auo.mutation.ClearDepartmentUpdator()
	return auo
}

// RemoveDepartmentUpdatorIDs removes the "department_updator" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentUpdatorIDs(ids...)
	return auo
}

// RemoveDepartmentUpdator removes "department_updator" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentUpdator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentUpdatorIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeCreator() *AdminUpdateOne {
	auo.mutation.ClearEmployeeCreator()
	return auo
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeCreatorIDs(ids...)
	return auo
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdator clears all "employee_updator" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeUpdator() *AdminUpdateOne {
	auo.mutation.ClearEmployeeUpdator()
	return auo
}

// RemoveEmployeeUpdatorIDs removes the "employee_updator" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeUpdatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeUpdatorIDs(ids...)
	return auo
}

// RemoveEmployeeUpdator removes "employee_updator" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeUpdator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeUpdatorIDs(ids...)
}

// ClearEmployeeAdmin clears all "employee_admin" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeAdmin() *AdminUpdateOne {
	auo.mutation.ClearEmployeeAdmin()
	return auo
}

// RemoveEmployeeAdminIDs removes the "employee_admin" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeAdminIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeAdminIDs(ids...)
	return auo
}

// RemoveEmployeeAdmin removes "employee_admin" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeAdmin(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeAdminIDs(ids...)
}

// Where appends a list predicates to the AdminUpdate builder.
func (auo *AdminUpdateOne) Where(ps ...predicate.Admin) *AdminUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if admin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AdminUpdateOne) check() error {
	if v, ok := auo.mutation.UpdatedBy(); ok {
		if err := admin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Admin.updated_by": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := admin.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Admin.name": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CreatorID(); auo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := auo.mutation.UpdatorID(); auo.mutation.UpdatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updator"`)
	}
	return nil
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Admin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(admin.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(admin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(admin.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(admin.FieldName, field.TypeString)
	}
	if auo.mutation.UpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdatorTable,
			Columns: []string{admin.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdatorTable,
			Columns: []string{admin.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRolesIDs(); len(nodes) > 0 && !auo.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminUpdatorIDs(); len(nodes) > 0 && !auo.mutation.AdminUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdatorTable,
			Columns: []string{admin.AdminUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRoleCreatorIDs(); len(nodes) > 0 && !auo.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRoleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRoleUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRoleUpdatorIDs(); len(nodes) > 0 && !auo.mutation.AdminRoleUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRoleUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdatorTable,
			Columns: []string{admin.AdminRoleUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskUpdatorIDs(); len(nodes) > 0 && !auo.mutation.RiskUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdatorTable,
			Columns: []string{admin.RiskUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskMaintainerIDs(); len(nodes) > 0 && !auo.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationUpdatorIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdatorTable,
			Columns: []string{admin.RiskLocationUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryUpdatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdatorTable,
			Columns: []string{admin.RiskCategoryUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentUpdatorIDs(); len(nodes) > 0 && !auo.mutation.DepartmentUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdatorTable,
			Columns: []string{admin.DepartmentUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeUpdatorIDs(); len(nodes) > 0 && !auo.mutation.EmployeeUpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeUpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdatorTable,
			Columns: []string{admin.EmployeeUpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeAdminIDs(); len(nodes) > 0 && !auo.mutation.EmployeeAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeAdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeAdminTable,
			Columns: []string{admin.EmployeeAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
