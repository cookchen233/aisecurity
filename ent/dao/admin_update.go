// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/video"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where appends a list predicates to the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdminUpdate) SetDeletedAt(t time.Time) *AdminUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdminUpdate) SetNillableDeletedAt(t *time.Time) *AdminUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdminUpdate) ClearDeletedAt() *AdminUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AdminUpdate) SetUpdatedBy(i int) *AdminUpdate {
	au.mutation.SetUpdatedBy(i)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AdminUpdate) SetNillableUpdatedBy(i *int) *AdminUpdate {
	if i != nil {
		au.SetUpdatedBy(*i)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminUpdate) SetUpdatedAt(t time.Time) *AdminUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AdminUpdate) SetUsername(s string) *AdminUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (au *AdminUpdate) SetNillableUsername(s *string) *AdminUpdate {
	if s != nil {
		au.SetUsername(*s)
	}
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(s string) *AdminUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePassword(s *string) *AdminUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// SetNickname sets the "nickname" field.
func (au *AdminUpdate) SetNickname(s string) *AdminUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (au *AdminUpdate) SetNillableNickname(s *string) *AdminUpdate {
	if s != nil {
		au.SetNickname(*s)
	}
	return au
}

// SetRealName sets the "real_name" field.
func (au *AdminUpdate) SetRealName(s string) *AdminUpdate {
	au.mutation.SetRealName(s)
	return au
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableRealName(s *string) *AdminUpdate {
	if s != nil {
		au.SetRealName(*s)
	}
	return au
}

// SetAvatar sets the "avatar" field.
func (au *AdminUpdate) SetAvatar(s string) *AdminUpdate {
	au.mutation.SetAvatar(s)
	return au
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (au *AdminUpdate) SetNillableAvatar(s *string) *AdminUpdate {
	if s != nil {
		au.SetAvatar(*s)
	}
	return au
}

// ClearAvatar clears the value of the "avatar" field.
func (au *AdminUpdate) ClearAvatar() *AdminUpdate {
	au.mutation.ClearAvatar()
	return au
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (au *AdminUpdate) SetUpdaterID(id int) *AdminUpdate {
	au.mutation.SetUpdaterID(id)
	return au
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (au *AdminUpdate) SetUpdater(a *Admin) *AdminUpdate {
	return au.SetUpdaterID(a.ID)
}

// AddAdminRoleIDs adds the "admin_roles" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleIDs(ids...)
	return au
}

// AddAdminRoles adds the "admin_roles" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoles(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminCreatorIDs(ids...)
	return au
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) AddAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminUpdaterIDs(ids...)
	return au
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (au *AdminUpdate) AddAdminUpdater(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminUpdaterIDs(ids...)
}

// AddAdminRoleCreatorIDs adds the "admin_role_creator" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleCreatorIDs(ids...)
	return au
}

// AddAdminRoleCreator adds the "admin_role_creator" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoleCreator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleCreatorIDs(ids...)
}

// AddAdminRoleUpdaterIDs adds the "admin_role_updater" edge to the AdminRole entity by IDs.
func (au *AdminUpdate) AddAdminRoleUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminRoleUpdaterIDs(ids...)
	return au
}

// AddAdminRoleUpdater adds the "admin_role_updater" edges to the AdminRole entity.
func (au *AdminUpdate) AddAdminRoleUpdater(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminRoleUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCreatorIDs(ids...)
	return au
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) AddRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskUpdaterIDs(ids...)
	return au
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (au *AdminUpdate) AddRiskUpdater(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskUpdaterIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationCreatorIDs(ids...)
	return au
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationUpdaterIDs(ids...)
	return au
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationUpdater(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryCreatorIDs(ids...)
	return au
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return au
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentCreatorIDs(ids...)
	return au
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentUpdaterIDs(ids...)
	return au
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentUpdater(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeCreatorIDs(ids...)
	return au
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeUpdaterIDs(ids...)
	return au
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeUpdater(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeUpdaterIDs(ids...)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeIDs(ids...)
	return au
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (au *AdminUpdate) AddEmployee(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeIDs(ids...)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (au *AdminUpdate) AddOccupationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddOccupationCreatorIDs(ids...)
	return au
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (au *AdminUpdate) AddOccupationCreator(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (au *AdminUpdate) AddOccupationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddOccupationUpdaterIDs(ids...)
	return au
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (au *AdminUpdate) AddOccupationUpdater(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccupationUpdaterIDs(ids...)
}

// AddIpcEventCreatorIDs adds the "ipc_event_creator" edge to the IPCEvent entity by IDs.
func (au *AdminUpdate) AddIpcEventCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddIpcEventCreatorIDs(ids...)
	return au
}

// AddIpcEventCreator adds the "ipc_event_creator" edges to the IPCEvent entity.
func (au *AdminUpdate) AddIpcEventCreator(i ...*IPCEvent) *AdminUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.AddIpcEventCreatorIDs(ids...)
}

// AddIpcEventUpdaterIDs adds the "ipc_event_updater" edge to the IPCEvent entity by IDs.
func (au *AdminUpdate) AddIpcEventUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddIpcEventUpdaterIDs(ids...)
	return au
}

// AddIpcEventUpdater adds the "ipc_event_updater" edges to the IPCEvent entity.
func (au *AdminUpdate) AddIpcEventUpdater(i ...*IPCEvent) *AdminUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.AddIpcEventUpdaterIDs(ids...)
}

// AddVideoCreatorIDs adds the "video_creator" edge to the Video entity by IDs.
func (au *AdminUpdate) AddVideoCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddVideoCreatorIDs(ids...)
	return au
}

// AddVideoCreator adds the "video_creator" edges to the Video entity.
func (au *AdminUpdate) AddVideoCreator(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVideoCreatorIDs(ids...)
}

// AddVideoUpdaterIDs adds the "video_updater" edge to the Video entity by IDs.
func (au *AdminUpdate) AddVideoUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddVideoUpdaterIDs(ids...)
	return au
}

// AddVideoUpdater adds the "video_updater" edges to the Video entity.
func (au *AdminUpdate) AddVideoUpdater(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVideoUpdaterIDs(ids...)
}

// AddAreaCreatorIDs adds the "area_creator" edge to the Area entity by IDs.
func (au *AdminUpdate) AddAreaCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAreaCreatorIDs(ids...)
	return au
}

// AddAreaCreator adds the "area_creator" edges to the Area entity.
func (au *AdminUpdate) AddAreaCreator(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAreaCreatorIDs(ids...)
}

// AddAreaUpdaterIDs adds the "area_updater" edge to the Area entity by IDs.
func (au *AdminUpdate) AddAreaUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAreaUpdaterIDs(ids...)
	return au
}

// AddAreaUpdater adds the "area_updater" edges to the Area entity.
func (au *AdminUpdate) AddAreaUpdater(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAreaUpdaterIDs(ids...)
}

// AddDeviceCreatorIDs adds the "device_creator" edge to the Device entity by IDs.
func (au *AdminUpdate) AddDeviceCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceCreatorIDs(ids...)
	return au
}

// AddDeviceCreator adds the "device_creator" edges to the Device entity.
func (au *AdminUpdate) AddDeviceCreator(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceCreatorIDs(ids...)
}

// AddDeviceUpdaterIDs adds the "device_updater" edge to the Device entity by IDs.
func (au *AdminUpdate) AddDeviceUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceUpdaterIDs(ids...)
	return au
}

// AddDeviceUpdater adds the "device_updater" edges to the Device entity.
func (au *AdminUpdate) AddDeviceUpdater(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceUpdaterIDs(ids...)
}

// AddDeviceInstallationCreatorIDs adds the "device_installation_creator" edge to the DeviceInstallation entity by IDs.
func (au *AdminUpdate) AddDeviceInstallationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceInstallationCreatorIDs(ids...)
	return au
}

// AddDeviceInstallationCreator adds the "device_installation_creator" edges to the DeviceInstallation entity.
func (au *AdminUpdate) AddDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceInstallationCreatorIDs(ids...)
}

// AddDeviceInstallationUpdaterIDs adds the "device_installation_updater" edge to the DeviceInstallation entity by IDs.
func (au *AdminUpdate) AddDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceInstallationUpdaterIDs(ids...)
	return au
}

// AddDeviceInstallationUpdater adds the "device_installation_updater" edges to the DeviceInstallation entity.
func (au *AdminUpdate) AddDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceInstallationUpdaterIDs(ids...)
}

// AddEventLevelCreatorIDs adds the "event_level_creator" edge to the EventLevel entity by IDs.
func (au *AdminUpdate) AddEventLevelCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLevelCreatorIDs(ids...)
	return au
}

// AddEventLevelCreator adds the "event_level_creator" edges to the EventLevel entity.
func (au *AdminUpdate) AddEventLevelCreator(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLevelCreatorIDs(ids...)
}

// AddEventLevelUpdaterIDs adds the "event_level_updater" edge to the EventLevel entity by IDs.
func (au *AdminUpdate) AddEventLevelUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLevelUpdaterIDs(ids...)
	return au
}

// AddEventLevelUpdater adds the "event_level_updater" edges to the EventLevel entity.
func (au *AdminUpdate) AddEventLevelUpdater(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLevelUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (au *AdminUpdate) ClearUpdater() *AdminUpdate {
	au.mutation.ClearUpdater()
	return au
}

// ClearAdminRoles clears all "admin_roles" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoles() *AdminUpdate {
	au.mutation.ClearAdminRoles()
	return au
}

// RemoveAdminRoleIDs removes the "admin_roles" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleIDs(ids...)
	return au
}

// RemoveAdminRoles removes "admin_roles" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoles(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminCreator() *AdminUpdate {
	au.mutation.ClearAdminCreator()
	return au
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminCreatorIDs(ids...)
	return au
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdater clears all "admin_updater" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminUpdater() *AdminUpdate {
	au.mutation.ClearAdminUpdater()
	return au
}

// RemoveAdminUpdaterIDs removes the "admin_updater" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminUpdaterIDs(ids...)
	return au
}

// RemoveAdminUpdater removes "admin_updater" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminUpdater(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminUpdaterIDs(ids...)
}

// ClearAdminRoleCreator clears all "admin_role_creator" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoleCreator() *AdminUpdate {
	au.mutation.ClearAdminRoleCreator()
	return au
}

// RemoveAdminRoleCreatorIDs removes the "admin_role_creator" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleCreatorIDs(ids...)
	return au
}

// RemoveAdminRoleCreator removes "admin_role_creator" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoleCreator(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleCreatorIDs(ids...)
}

// ClearAdminRoleUpdater clears all "admin_role_updater" edges to the AdminRole entity.
func (au *AdminUpdate) ClearAdminRoleUpdater() *AdminUpdate {
	au.mutation.ClearAdminRoleUpdater()
	return au
}

// RemoveAdminRoleUpdaterIDs removes the "admin_role_updater" edge to AdminRole entities by IDs.
func (au *AdminUpdate) RemoveAdminRoleUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminRoleUpdaterIDs(ids...)
	return au
}

// RemoveAdminRoleUpdater removes "admin_role_updater" edges to AdminRole entities.
func (au *AdminUpdate) RemoveAdminRoleUpdater(a ...*AdminRole) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminRoleUpdaterIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskCreator() *AdminUpdate {
	au.mutation.ClearRiskCreator()
	return au
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCreatorIDs(ids...)
	return au
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdater clears all "risk_updater" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskUpdater() *AdminUpdate {
	au.mutation.ClearRiskUpdater()
	return au
}

// RemoveRiskUpdaterIDs removes the "risk_updater" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskUpdaterIDs(ids...)
	return au
}

// RemoveRiskUpdater removes "risk_updater" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskUpdater(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskUpdaterIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationCreator() *AdminUpdate {
	au.mutation.ClearRiskLocationCreator()
	return au
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return au
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdater clears all "risk_location_updater" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationUpdater() *AdminUpdate {
	au.mutation.ClearRiskLocationUpdater()
	return au
}

// RemoveRiskLocationUpdaterIDs removes the "risk_location_updater" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationUpdaterIDs(ids...)
	return au
}

// RemoveRiskLocationUpdater removes "risk_location_updater" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationUpdater(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationUpdaterIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryCreator() *AdminUpdate {
	au.mutation.ClearRiskCategoryCreator()
	return au
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return au
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdater clears all "risk_category_updater" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryUpdater() *AdminUpdate {
	au.mutation.ClearRiskCategoryUpdater()
	return au
}

// RemoveRiskCategoryUpdaterIDs removes the "risk_category_updater" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryUpdaterIDs(ids...)
	return au
}

// RemoveRiskCategoryUpdater removes "risk_category_updater" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryUpdaterIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentCreator() *AdminUpdate {
	au.mutation.ClearDepartmentCreator()
	return au
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentCreatorIDs(ids...)
	return au
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdater clears all "department_updater" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentUpdater() *AdminUpdate {
	au.mutation.ClearDepartmentUpdater()
	return au
}

// RemoveDepartmentUpdaterIDs removes the "department_updater" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentUpdaterIDs(ids...)
	return au
}

// RemoveDepartmentUpdater removes "department_updater" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentUpdater(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentUpdaterIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeCreator() *AdminUpdate {
	au.mutation.ClearEmployeeCreator()
	return au
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeCreatorIDs(ids...)
	return au
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdater clears all "employee_updater" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeUpdater() *AdminUpdate {
	au.mutation.ClearEmployeeUpdater()
	return au
}

// RemoveEmployeeUpdaterIDs removes the "employee_updater" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeUpdaterIDs(ids...)
	return au
}

// RemoveEmployeeUpdater removes "employee_updater" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeUpdater(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeUpdaterIDs(ids...)
}

// ClearEmployee clears all "employee" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployee() *AdminUpdate {
	au.mutation.ClearEmployee()
	return au
}

// RemoveEmployeeIDs removes the "employee" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeIDs(ids...)
	return au
}

// RemoveEmployee removes "employee" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployee(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeIDs(ids...)
}

// ClearOccupationCreator clears all "occupation_creator" edges to the Occupation entity.
func (au *AdminUpdate) ClearOccupationCreator() *AdminUpdate {
	au.mutation.ClearOccupationCreator()
	return au
}

// RemoveOccupationCreatorIDs removes the "occupation_creator" edge to Occupation entities by IDs.
func (au *AdminUpdate) RemoveOccupationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveOccupationCreatorIDs(ids...)
	return au
}

// RemoveOccupationCreator removes "occupation_creator" edges to Occupation entities.
func (au *AdminUpdate) RemoveOccupationCreator(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccupationCreatorIDs(ids...)
}

// ClearOccupationUpdater clears all "occupation_updater" edges to the Occupation entity.
func (au *AdminUpdate) ClearOccupationUpdater() *AdminUpdate {
	au.mutation.ClearOccupationUpdater()
	return au
}

// RemoveOccupationUpdaterIDs removes the "occupation_updater" edge to Occupation entities by IDs.
func (au *AdminUpdate) RemoveOccupationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveOccupationUpdaterIDs(ids...)
	return au
}

// RemoveOccupationUpdater removes "occupation_updater" edges to Occupation entities.
func (au *AdminUpdate) RemoveOccupationUpdater(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccupationUpdaterIDs(ids...)
}

// ClearIpcEventCreator clears all "ipc_event_creator" edges to the IPCEvent entity.
func (au *AdminUpdate) ClearIpcEventCreator() *AdminUpdate {
	au.mutation.ClearIpcEventCreator()
	return au
}

// RemoveIpcEventCreatorIDs removes the "ipc_event_creator" edge to IPCEvent entities by IDs.
func (au *AdminUpdate) RemoveIpcEventCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveIpcEventCreatorIDs(ids...)
	return au
}

// RemoveIpcEventCreator removes "ipc_event_creator" edges to IPCEvent entities.
func (au *AdminUpdate) RemoveIpcEventCreator(i ...*IPCEvent) *AdminUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.RemoveIpcEventCreatorIDs(ids...)
}

// ClearIpcEventUpdater clears all "ipc_event_updater" edges to the IPCEvent entity.
func (au *AdminUpdate) ClearIpcEventUpdater() *AdminUpdate {
	au.mutation.ClearIpcEventUpdater()
	return au
}

// RemoveIpcEventUpdaterIDs removes the "ipc_event_updater" edge to IPCEvent entities by IDs.
func (au *AdminUpdate) RemoveIpcEventUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveIpcEventUpdaterIDs(ids...)
	return au
}

// RemoveIpcEventUpdater removes "ipc_event_updater" edges to IPCEvent entities.
func (au *AdminUpdate) RemoveIpcEventUpdater(i ...*IPCEvent) *AdminUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.RemoveIpcEventUpdaterIDs(ids...)
}

// ClearVideoCreator clears all "video_creator" edges to the Video entity.
func (au *AdminUpdate) ClearVideoCreator() *AdminUpdate {
	au.mutation.ClearVideoCreator()
	return au
}

// RemoveVideoCreatorIDs removes the "video_creator" edge to Video entities by IDs.
func (au *AdminUpdate) RemoveVideoCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveVideoCreatorIDs(ids...)
	return au
}

// RemoveVideoCreator removes "video_creator" edges to Video entities.
func (au *AdminUpdate) RemoveVideoCreator(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVideoCreatorIDs(ids...)
}

// ClearVideoUpdater clears all "video_updater" edges to the Video entity.
func (au *AdminUpdate) ClearVideoUpdater() *AdminUpdate {
	au.mutation.ClearVideoUpdater()
	return au
}

// RemoveVideoUpdaterIDs removes the "video_updater" edge to Video entities by IDs.
func (au *AdminUpdate) RemoveVideoUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveVideoUpdaterIDs(ids...)
	return au
}

// RemoveVideoUpdater removes "video_updater" edges to Video entities.
func (au *AdminUpdate) RemoveVideoUpdater(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVideoUpdaterIDs(ids...)
}

// ClearAreaCreator clears all "area_creator" edges to the Area entity.
func (au *AdminUpdate) ClearAreaCreator() *AdminUpdate {
	au.mutation.ClearAreaCreator()
	return au
}

// RemoveAreaCreatorIDs removes the "area_creator" edge to Area entities by IDs.
func (au *AdminUpdate) RemoveAreaCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAreaCreatorIDs(ids...)
	return au
}

// RemoveAreaCreator removes "area_creator" edges to Area entities.
func (au *AdminUpdate) RemoveAreaCreator(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAreaCreatorIDs(ids...)
}

// ClearAreaUpdater clears all "area_updater" edges to the Area entity.
func (au *AdminUpdate) ClearAreaUpdater() *AdminUpdate {
	au.mutation.ClearAreaUpdater()
	return au
}

// RemoveAreaUpdaterIDs removes the "area_updater" edge to Area entities by IDs.
func (au *AdminUpdate) RemoveAreaUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAreaUpdaterIDs(ids...)
	return au
}

// RemoveAreaUpdater removes "area_updater" edges to Area entities.
func (au *AdminUpdate) RemoveAreaUpdater(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAreaUpdaterIDs(ids...)
}

// ClearDeviceCreator clears all "device_creator" edges to the Device entity.
func (au *AdminUpdate) ClearDeviceCreator() *AdminUpdate {
	au.mutation.ClearDeviceCreator()
	return au
}

// RemoveDeviceCreatorIDs removes the "device_creator" edge to Device entities by IDs.
func (au *AdminUpdate) RemoveDeviceCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceCreatorIDs(ids...)
	return au
}

// RemoveDeviceCreator removes "device_creator" edges to Device entities.
func (au *AdminUpdate) RemoveDeviceCreator(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceCreatorIDs(ids...)
}

// ClearDeviceUpdater clears all "device_updater" edges to the Device entity.
func (au *AdminUpdate) ClearDeviceUpdater() *AdminUpdate {
	au.mutation.ClearDeviceUpdater()
	return au
}

// RemoveDeviceUpdaterIDs removes the "device_updater" edge to Device entities by IDs.
func (au *AdminUpdate) RemoveDeviceUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceUpdaterIDs(ids...)
	return au
}

// RemoveDeviceUpdater removes "device_updater" edges to Device entities.
func (au *AdminUpdate) RemoveDeviceUpdater(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceUpdaterIDs(ids...)
}

// ClearDeviceInstallationCreator clears all "device_installation_creator" edges to the DeviceInstallation entity.
func (au *AdminUpdate) ClearDeviceInstallationCreator() *AdminUpdate {
	au.mutation.ClearDeviceInstallationCreator()
	return au
}

// RemoveDeviceInstallationCreatorIDs removes the "device_installation_creator" edge to DeviceInstallation entities by IDs.
func (au *AdminUpdate) RemoveDeviceInstallationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceInstallationCreatorIDs(ids...)
	return au
}

// RemoveDeviceInstallationCreator removes "device_installation_creator" edges to DeviceInstallation entities.
func (au *AdminUpdate) RemoveDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceInstallationCreatorIDs(ids...)
}

// ClearDeviceInstallationUpdater clears all "device_installation_updater" edges to the DeviceInstallation entity.
func (au *AdminUpdate) ClearDeviceInstallationUpdater() *AdminUpdate {
	au.mutation.ClearDeviceInstallationUpdater()
	return au
}

// RemoveDeviceInstallationUpdaterIDs removes the "device_installation_updater" edge to DeviceInstallation entities by IDs.
func (au *AdminUpdate) RemoveDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceInstallationUpdaterIDs(ids...)
	return au
}

// RemoveDeviceInstallationUpdater removes "device_installation_updater" edges to DeviceInstallation entities.
func (au *AdminUpdate) RemoveDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceInstallationUpdaterIDs(ids...)
}

// ClearEventLevelCreator clears all "event_level_creator" edges to the EventLevel entity.
func (au *AdminUpdate) ClearEventLevelCreator() *AdminUpdate {
	au.mutation.ClearEventLevelCreator()
	return au
}

// RemoveEventLevelCreatorIDs removes the "event_level_creator" edge to EventLevel entities by IDs.
func (au *AdminUpdate) RemoveEventLevelCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLevelCreatorIDs(ids...)
	return au
}

// RemoveEventLevelCreator removes "event_level_creator" edges to EventLevel entities.
func (au *AdminUpdate) RemoveEventLevelCreator(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLevelCreatorIDs(ids...)
}

// ClearEventLevelUpdater clears all "event_level_updater" edges to the EventLevel entity.
func (au *AdminUpdate) ClearEventLevelUpdater() *AdminUpdate {
	au.mutation.ClearEventLevelUpdater()
	return au
}

// RemoveEventLevelUpdaterIDs removes the "event_level_updater" edge to EventLevel entities by IDs.
func (au *AdminUpdate) RemoveEventLevelUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLevelUpdaterIDs(ids...)
	return au
}

// RemoveEventLevelUpdater removes "event_level_updater" edges to EventLevel entities.
func (au *AdminUpdate) RemoveEventLevelUpdater(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLevelUpdaterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if admin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AdminUpdate) check() error {
	if v, ok := au.mutation.UpdatedBy(); ok {
		if err := admin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Admin.updated_by": %w`, err)}
		}
	}
	if v, ok := au.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := au.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if v, ok := au.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Avatar(); ok {
		if err := admin.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`dao: validator failed for field "Admin.avatar": %w`, err)}
		}
	}
	if _, ok := au.mutation.CreatorID(); au.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := au.mutation.UpdaterID(); au.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updater"`)
	}
	return nil
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(admin.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(admin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
	}
	if value, ok := au.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
	}
	if value, ok := au.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeString, value)
	}
	if au.mutation.AvatarCleared() {
		_spec.ClearField(admin.FieldAvatar, field.TypeString)
	}
	if au.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRolesIDs(); len(nodes) > 0 && !au.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminUpdaterIDs(); len(nodes) > 0 && !au.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRoleCreatorIDs(); len(nodes) > 0 && !au.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRoleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminRoleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminRoleUpdaterIDs(); len(nodes) > 0 && !au.mutation.AdminRoleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminRoleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentUpdaterIDs(); len(nodes) > 0 && !au.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeUpdaterIDs(); len(nodes) > 0 && !au.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeIDs(); len(nodes) > 0 && !au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOccupationCreatorIDs(); len(nodes) > 0 && !au.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOccupationUpdaterIDs(); len(nodes) > 0 && !au.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.IpcEventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedIpcEventCreatorIDs(); len(nodes) > 0 && !au.mutation.IpcEventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.IpcEventCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.IpcEventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedIpcEventUpdaterIDs(); len(nodes) > 0 && !au.mutation.IpcEventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.IpcEventUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVideoCreatorIDs(); len(nodes) > 0 && !au.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VideoCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVideoUpdaterIDs(); len(nodes) > 0 && !au.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VideoUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAreaCreatorIDs(); len(nodes) > 0 && !au.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AreaCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAreaUpdaterIDs(); len(nodes) > 0 && !au.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AreaUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceCreatorIDs(); len(nodes) > 0 && !au.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceUpdaterIDs(); len(nodes) > 0 && !au.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceInstallationCreatorIDs(); len(nodes) > 0 && !au.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceInstallationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceInstallationUpdaterIDs(); len(nodes) > 0 && !au.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceInstallationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLevelCreatorIDs(); len(nodes) > 0 && !au.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLevelCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLevelUpdaterIDs(); len(nodes) > 0 && !au.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLevelUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdminUpdateOne) SetDeletedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdminUpdateOne) ClearDeletedAt() *AdminUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AdminUpdateOne) SetUpdatedBy(i int) *AdminUpdateOne {
	auo.mutation.SetUpdatedBy(i)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableUpdatedBy(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetUpdatedBy(*i)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminUpdateOne) SetUpdatedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AdminUpdateOne) SetUsername(s string) *AdminUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableUsername(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetUsername(*s)
	}
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(s string) *AdminUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePassword(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AdminUpdateOne) SetNickname(s string) *AdminUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableNickname(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetNickname(*s)
	}
	return auo
}

// SetRealName sets the "real_name" field.
func (auo *AdminUpdateOne) SetRealName(s string) *AdminUpdateOne {
	auo.mutation.SetRealName(s)
	return auo
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableRealName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetRealName(*s)
	}
	return auo
}

// SetAvatar sets the "avatar" field.
func (auo *AdminUpdateOne) SetAvatar(s string) *AdminUpdateOne {
	auo.mutation.SetAvatar(s)
	return auo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAvatar(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetAvatar(*s)
	}
	return auo
}

// ClearAvatar clears the value of the "avatar" field.
func (auo *AdminUpdateOne) ClearAvatar() *AdminUpdateOne {
	auo.mutation.ClearAvatar()
	return auo
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (auo *AdminUpdateOne) SetUpdaterID(id int) *AdminUpdateOne {
	auo.mutation.SetUpdaterID(id)
	return auo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (auo *AdminUpdateOne) SetUpdater(a *Admin) *AdminUpdateOne {
	return auo.SetUpdaterID(a.ID)
}

// AddAdminRoleIDs adds the "admin_roles" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleIDs(ids...)
	return auo
}

// AddAdminRoles adds the "admin_roles" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoles(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminCreatorIDs(ids...)
	return auo
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminUpdaterIDs(ids...)
	return auo
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminUpdater(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminUpdaterIDs(ids...)
}

// AddAdminRoleCreatorIDs adds the "admin_role_creator" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleCreatorIDs(ids...)
	return auo
}

// AddAdminRoleCreator adds the "admin_role_creator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoleCreator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleCreatorIDs(ids...)
}

// AddAdminRoleUpdaterIDs adds the "admin_role_updater" edge to the AdminRole entity by IDs.
func (auo *AdminUpdateOne) AddAdminRoleUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminRoleUpdaterIDs(ids...)
	return auo
}

// AddAdminRoleUpdater adds the "admin_role_updater" edges to the AdminRole entity.
func (auo *AdminUpdateOne) AddAdminRoleUpdater(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminRoleUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCreatorIDs(ids...)
	return auo
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskUpdaterIDs(ids...)
	return auo
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskUpdater(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskUpdaterIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationCreatorIDs(ids...)
	return auo
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationUpdaterIDs(ids...)
	return auo
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationUpdater(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryCreatorIDs(ids...)
	return auo
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return auo
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentCreatorIDs(ids...)
	return auo
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentUpdaterIDs(ids...)
	return auo
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentUpdater(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeCreatorIDs(ids...)
	return auo
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeUpdaterIDs(ids...)
	return auo
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeUpdater(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeUpdaterIDs(ids...)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeIDs(ids...)
	return auo
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployee(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeIDs(ids...)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (auo *AdminUpdateOne) AddOccupationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddOccupationCreatorIDs(ids...)
	return auo
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (auo *AdminUpdateOne) AddOccupationCreator(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (auo *AdminUpdateOne) AddOccupationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddOccupationUpdaterIDs(ids...)
	return auo
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (auo *AdminUpdateOne) AddOccupationUpdater(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccupationUpdaterIDs(ids...)
}

// AddIpcEventCreatorIDs adds the "ipc_event_creator" edge to the IPCEvent entity by IDs.
func (auo *AdminUpdateOne) AddIpcEventCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddIpcEventCreatorIDs(ids...)
	return auo
}

// AddIpcEventCreator adds the "ipc_event_creator" edges to the IPCEvent entity.
func (auo *AdminUpdateOne) AddIpcEventCreator(i ...*IPCEvent) *AdminUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.AddIpcEventCreatorIDs(ids...)
}

// AddIpcEventUpdaterIDs adds the "ipc_event_updater" edge to the IPCEvent entity by IDs.
func (auo *AdminUpdateOne) AddIpcEventUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddIpcEventUpdaterIDs(ids...)
	return auo
}

// AddIpcEventUpdater adds the "ipc_event_updater" edges to the IPCEvent entity.
func (auo *AdminUpdateOne) AddIpcEventUpdater(i ...*IPCEvent) *AdminUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.AddIpcEventUpdaterIDs(ids...)
}

// AddVideoCreatorIDs adds the "video_creator" edge to the Video entity by IDs.
func (auo *AdminUpdateOne) AddVideoCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddVideoCreatorIDs(ids...)
	return auo
}

// AddVideoCreator adds the "video_creator" edges to the Video entity.
func (auo *AdminUpdateOne) AddVideoCreator(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVideoCreatorIDs(ids...)
}

// AddVideoUpdaterIDs adds the "video_updater" edge to the Video entity by IDs.
func (auo *AdminUpdateOne) AddVideoUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddVideoUpdaterIDs(ids...)
	return auo
}

// AddVideoUpdater adds the "video_updater" edges to the Video entity.
func (auo *AdminUpdateOne) AddVideoUpdater(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVideoUpdaterIDs(ids...)
}

// AddAreaCreatorIDs adds the "area_creator" edge to the Area entity by IDs.
func (auo *AdminUpdateOne) AddAreaCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAreaCreatorIDs(ids...)
	return auo
}

// AddAreaCreator adds the "area_creator" edges to the Area entity.
func (auo *AdminUpdateOne) AddAreaCreator(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAreaCreatorIDs(ids...)
}

// AddAreaUpdaterIDs adds the "area_updater" edge to the Area entity by IDs.
func (auo *AdminUpdateOne) AddAreaUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAreaUpdaterIDs(ids...)
	return auo
}

// AddAreaUpdater adds the "area_updater" edges to the Area entity.
func (auo *AdminUpdateOne) AddAreaUpdater(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAreaUpdaterIDs(ids...)
}

// AddDeviceCreatorIDs adds the "device_creator" edge to the Device entity by IDs.
func (auo *AdminUpdateOne) AddDeviceCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceCreatorIDs(ids...)
	return auo
}

// AddDeviceCreator adds the "device_creator" edges to the Device entity.
func (auo *AdminUpdateOne) AddDeviceCreator(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceCreatorIDs(ids...)
}

// AddDeviceUpdaterIDs adds the "device_updater" edge to the Device entity by IDs.
func (auo *AdminUpdateOne) AddDeviceUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceUpdaterIDs(ids...)
	return auo
}

// AddDeviceUpdater adds the "device_updater" edges to the Device entity.
func (auo *AdminUpdateOne) AddDeviceUpdater(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceUpdaterIDs(ids...)
}

// AddDeviceInstallationCreatorIDs adds the "device_installation_creator" edge to the DeviceInstallation entity by IDs.
func (auo *AdminUpdateOne) AddDeviceInstallationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceInstallationCreatorIDs(ids...)
	return auo
}

// AddDeviceInstallationCreator adds the "device_installation_creator" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) AddDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceInstallationCreatorIDs(ids...)
}

// AddDeviceInstallationUpdaterIDs adds the "device_installation_updater" edge to the DeviceInstallation entity by IDs.
func (auo *AdminUpdateOne) AddDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceInstallationUpdaterIDs(ids...)
	return auo
}

// AddDeviceInstallationUpdater adds the "device_installation_updater" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) AddDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceInstallationUpdaterIDs(ids...)
}

// AddEventLevelCreatorIDs adds the "event_level_creator" edge to the EventLevel entity by IDs.
func (auo *AdminUpdateOne) AddEventLevelCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLevelCreatorIDs(ids...)
	return auo
}

// AddEventLevelCreator adds the "event_level_creator" edges to the EventLevel entity.
func (auo *AdminUpdateOne) AddEventLevelCreator(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLevelCreatorIDs(ids...)
}

// AddEventLevelUpdaterIDs adds the "event_level_updater" edge to the EventLevel entity by IDs.
func (auo *AdminUpdateOne) AddEventLevelUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLevelUpdaterIDs(ids...)
	return auo
}

// AddEventLevelUpdater adds the "event_level_updater" edges to the EventLevel entity.
func (auo *AdminUpdateOne) AddEventLevelUpdater(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLevelUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (auo *AdminUpdateOne) ClearUpdater() *AdminUpdateOne {
	auo.mutation.ClearUpdater()
	return auo
}

// ClearAdminRoles clears all "admin_roles" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoles() *AdminUpdateOne {
	auo.mutation.ClearAdminRoles()
	return auo
}

// RemoveAdminRoleIDs removes the "admin_roles" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleIDs(ids...)
	return auo
}

// RemoveAdminRoles removes "admin_roles" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoles(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminCreator() *AdminUpdateOne {
	auo.mutation.ClearAdminCreator()
	return auo
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminCreatorIDs(ids...)
	return auo
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdater clears all "admin_updater" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminUpdater() *AdminUpdateOne {
	auo.mutation.ClearAdminUpdater()
	return auo
}

// RemoveAdminUpdaterIDs removes the "admin_updater" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminUpdaterIDs(ids...)
	return auo
}

// RemoveAdminUpdater removes "admin_updater" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminUpdater(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminUpdaterIDs(ids...)
}

// ClearAdminRoleCreator clears all "admin_role_creator" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoleCreator() *AdminUpdateOne {
	auo.mutation.ClearAdminRoleCreator()
	return auo
}

// RemoveAdminRoleCreatorIDs removes the "admin_role_creator" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleCreatorIDs(ids...)
	return auo
}

// RemoveAdminRoleCreator removes "admin_role_creator" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoleCreator(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleCreatorIDs(ids...)
}

// ClearAdminRoleUpdater clears all "admin_role_updater" edges to the AdminRole entity.
func (auo *AdminUpdateOne) ClearAdminRoleUpdater() *AdminUpdateOne {
	auo.mutation.ClearAdminRoleUpdater()
	return auo
}

// RemoveAdminRoleUpdaterIDs removes the "admin_role_updater" edge to AdminRole entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminRoleUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminRoleUpdaterIDs(ids...)
	return auo
}

// RemoveAdminRoleUpdater removes "admin_role_updater" edges to AdminRole entities.
func (auo *AdminUpdateOne) RemoveAdminRoleUpdater(a ...*AdminRole) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminRoleUpdaterIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCreator()
	return auo
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCreatorIDs(ids...)
	return auo
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdater clears all "risk_updater" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskUpdater()
	return auo
}

// RemoveRiskUpdaterIDs removes the "risk_updater" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskUpdaterIDs(ids...)
	return auo
}

// RemoveRiskUpdater removes "risk_updater" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskUpdater(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskUpdaterIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationCreator()
	return auo
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return auo
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdater clears all "risk_location_updater" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationUpdater()
	return auo
}

// RemoveRiskLocationUpdaterIDs removes the "risk_location_updater" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationUpdaterIDs(ids...)
	return auo
}

// RemoveRiskLocationUpdater removes "risk_location_updater" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdater(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationUpdaterIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryCreator()
	return auo
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return auo
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdater clears all "risk_category_updater" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryUpdater()
	return auo
}

// RemoveRiskCategoryUpdaterIDs removes the "risk_category_updater" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryUpdaterIDs(ids...)
	return auo
}

// RemoveRiskCategoryUpdater removes "risk_category_updater" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryUpdaterIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentCreator() *AdminUpdateOne {
	auo.mutation.ClearDepartmentCreator()
	return auo
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentCreatorIDs(ids...)
	return auo
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdater clears all "department_updater" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentUpdater() *AdminUpdateOne {
	auo.mutation.ClearDepartmentUpdater()
	return auo
}

// RemoveDepartmentUpdaterIDs removes the "department_updater" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentUpdaterIDs(ids...)
	return auo
}

// RemoveDepartmentUpdater removes "department_updater" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentUpdater(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentUpdaterIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeCreator() *AdminUpdateOne {
	auo.mutation.ClearEmployeeCreator()
	return auo
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeCreatorIDs(ids...)
	return auo
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdater clears all "employee_updater" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeUpdater() *AdminUpdateOne {
	auo.mutation.ClearEmployeeUpdater()
	return auo
}

// RemoveEmployeeUpdaterIDs removes the "employee_updater" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeUpdaterIDs(ids...)
	return auo
}

// RemoveEmployeeUpdater removes "employee_updater" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeUpdater(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeUpdaterIDs(ids...)
}

// ClearEmployee clears all "employee" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployee() *AdminUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// RemoveEmployeeIDs removes the "employee" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeIDs(ids...)
	return auo
}

// RemoveEmployee removes "employee" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployee(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeIDs(ids...)
}

// ClearOccupationCreator clears all "occupation_creator" edges to the Occupation entity.
func (auo *AdminUpdateOne) ClearOccupationCreator() *AdminUpdateOne {
	auo.mutation.ClearOccupationCreator()
	return auo
}

// RemoveOccupationCreatorIDs removes the "occupation_creator" edge to Occupation entities by IDs.
func (auo *AdminUpdateOne) RemoveOccupationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveOccupationCreatorIDs(ids...)
	return auo
}

// RemoveOccupationCreator removes "occupation_creator" edges to Occupation entities.
func (auo *AdminUpdateOne) RemoveOccupationCreator(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccupationCreatorIDs(ids...)
}

// ClearOccupationUpdater clears all "occupation_updater" edges to the Occupation entity.
func (auo *AdminUpdateOne) ClearOccupationUpdater() *AdminUpdateOne {
	auo.mutation.ClearOccupationUpdater()
	return auo
}

// RemoveOccupationUpdaterIDs removes the "occupation_updater" edge to Occupation entities by IDs.
func (auo *AdminUpdateOne) RemoveOccupationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveOccupationUpdaterIDs(ids...)
	return auo
}

// RemoveOccupationUpdater removes "occupation_updater" edges to Occupation entities.
func (auo *AdminUpdateOne) RemoveOccupationUpdater(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccupationUpdaterIDs(ids...)
}

// ClearIpcEventCreator clears all "ipc_event_creator" edges to the IPCEvent entity.
func (auo *AdminUpdateOne) ClearIpcEventCreator() *AdminUpdateOne {
	auo.mutation.ClearIpcEventCreator()
	return auo
}

// RemoveIpcEventCreatorIDs removes the "ipc_event_creator" edge to IPCEvent entities by IDs.
func (auo *AdminUpdateOne) RemoveIpcEventCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveIpcEventCreatorIDs(ids...)
	return auo
}

// RemoveIpcEventCreator removes "ipc_event_creator" edges to IPCEvent entities.
func (auo *AdminUpdateOne) RemoveIpcEventCreator(i ...*IPCEvent) *AdminUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.RemoveIpcEventCreatorIDs(ids...)
}

// ClearIpcEventUpdater clears all "ipc_event_updater" edges to the IPCEvent entity.
func (auo *AdminUpdateOne) ClearIpcEventUpdater() *AdminUpdateOne {
	auo.mutation.ClearIpcEventUpdater()
	return auo
}

// RemoveIpcEventUpdaterIDs removes the "ipc_event_updater" edge to IPCEvent entities by IDs.
func (auo *AdminUpdateOne) RemoveIpcEventUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveIpcEventUpdaterIDs(ids...)
	return auo
}

// RemoveIpcEventUpdater removes "ipc_event_updater" edges to IPCEvent entities.
func (auo *AdminUpdateOne) RemoveIpcEventUpdater(i ...*IPCEvent) *AdminUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.RemoveIpcEventUpdaterIDs(ids...)
}

// ClearVideoCreator clears all "video_creator" edges to the Video entity.
func (auo *AdminUpdateOne) ClearVideoCreator() *AdminUpdateOne {
	auo.mutation.ClearVideoCreator()
	return auo
}

// RemoveVideoCreatorIDs removes the "video_creator" edge to Video entities by IDs.
func (auo *AdminUpdateOne) RemoveVideoCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveVideoCreatorIDs(ids...)
	return auo
}

// RemoveVideoCreator removes "video_creator" edges to Video entities.
func (auo *AdminUpdateOne) RemoveVideoCreator(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVideoCreatorIDs(ids...)
}

// ClearVideoUpdater clears all "video_updater" edges to the Video entity.
func (auo *AdminUpdateOne) ClearVideoUpdater() *AdminUpdateOne {
	auo.mutation.ClearVideoUpdater()
	return auo
}

// RemoveVideoUpdaterIDs removes the "video_updater" edge to Video entities by IDs.
func (auo *AdminUpdateOne) RemoveVideoUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveVideoUpdaterIDs(ids...)
	return auo
}

// RemoveVideoUpdater removes "video_updater" edges to Video entities.
func (auo *AdminUpdateOne) RemoveVideoUpdater(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVideoUpdaterIDs(ids...)
}

// ClearAreaCreator clears all "area_creator" edges to the Area entity.
func (auo *AdminUpdateOne) ClearAreaCreator() *AdminUpdateOne {
	auo.mutation.ClearAreaCreator()
	return auo
}

// RemoveAreaCreatorIDs removes the "area_creator" edge to Area entities by IDs.
func (auo *AdminUpdateOne) RemoveAreaCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAreaCreatorIDs(ids...)
	return auo
}

// RemoveAreaCreator removes "area_creator" edges to Area entities.
func (auo *AdminUpdateOne) RemoveAreaCreator(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAreaCreatorIDs(ids...)
}

// ClearAreaUpdater clears all "area_updater" edges to the Area entity.
func (auo *AdminUpdateOne) ClearAreaUpdater() *AdminUpdateOne {
	auo.mutation.ClearAreaUpdater()
	return auo
}

// RemoveAreaUpdaterIDs removes the "area_updater" edge to Area entities by IDs.
func (auo *AdminUpdateOne) RemoveAreaUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAreaUpdaterIDs(ids...)
	return auo
}

// RemoveAreaUpdater removes "area_updater" edges to Area entities.
func (auo *AdminUpdateOne) RemoveAreaUpdater(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAreaUpdaterIDs(ids...)
}

// ClearDeviceCreator clears all "device_creator" edges to the Device entity.
func (auo *AdminUpdateOne) ClearDeviceCreator() *AdminUpdateOne {
	auo.mutation.ClearDeviceCreator()
	return auo
}

// RemoveDeviceCreatorIDs removes the "device_creator" edge to Device entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceCreatorIDs(ids...)
	return auo
}

// RemoveDeviceCreator removes "device_creator" edges to Device entities.
func (auo *AdminUpdateOne) RemoveDeviceCreator(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceCreatorIDs(ids...)
}

// ClearDeviceUpdater clears all "device_updater" edges to the Device entity.
func (auo *AdminUpdateOne) ClearDeviceUpdater() *AdminUpdateOne {
	auo.mutation.ClearDeviceUpdater()
	return auo
}

// RemoveDeviceUpdaterIDs removes the "device_updater" edge to Device entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceUpdaterIDs(ids...)
	return auo
}

// RemoveDeviceUpdater removes "device_updater" edges to Device entities.
func (auo *AdminUpdateOne) RemoveDeviceUpdater(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceUpdaterIDs(ids...)
}

// ClearDeviceInstallationCreator clears all "device_installation_creator" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) ClearDeviceInstallationCreator() *AdminUpdateOne {
	auo.mutation.ClearDeviceInstallationCreator()
	return auo
}

// RemoveDeviceInstallationCreatorIDs removes the "device_installation_creator" edge to DeviceInstallation entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceInstallationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceInstallationCreatorIDs(ids...)
	return auo
}

// RemoveDeviceInstallationCreator removes "device_installation_creator" edges to DeviceInstallation entities.
func (auo *AdminUpdateOne) RemoveDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceInstallationCreatorIDs(ids...)
}

// ClearDeviceInstallationUpdater clears all "device_installation_updater" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) ClearDeviceInstallationUpdater() *AdminUpdateOne {
	auo.mutation.ClearDeviceInstallationUpdater()
	return auo
}

// RemoveDeviceInstallationUpdaterIDs removes the "device_installation_updater" edge to DeviceInstallation entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceInstallationUpdaterIDs(ids...)
	return auo
}

// RemoveDeviceInstallationUpdater removes "device_installation_updater" edges to DeviceInstallation entities.
func (auo *AdminUpdateOne) RemoveDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceInstallationUpdaterIDs(ids...)
}

// ClearEventLevelCreator clears all "event_level_creator" edges to the EventLevel entity.
func (auo *AdminUpdateOne) ClearEventLevelCreator() *AdminUpdateOne {
	auo.mutation.ClearEventLevelCreator()
	return auo
}

// RemoveEventLevelCreatorIDs removes the "event_level_creator" edge to EventLevel entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLevelCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLevelCreatorIDs(ids...)
	return auo
}

// RemoveEventLevelCreator removes "event_level_creator" edges to EventLevel entities.
func (auo *AdminUpdateOne) RemoveEventLevelCreator(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLevelCreatorIDs(ids...)
}

// ClearEventLevelUpdater clears all "event_level_updater" edges to the EventLevel entity.
func (auo *AdminUpdateOne) ClearEventLevelUpdater() *AdminUpdateOne {
	auo.mutation.ClearEventLevelUpdater()
	return auo
}

// RemoveEventLevelUpdaterIDs removes the "event_level_updater" edge to EventLevel entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLevelUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLevelUpdaterIDs(ids...)
	return auo
}

// RemoveEventLevelUpdater removes "event_level_updater" edges to EventLevel entities.
func (auo *AdminUpdateOne) RemoveEventLevelUpdater(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLevelUpdaterIDs(ids...)
}

// Where appends a list predicates to the AdminUpdate builder.
func (auo *AdminUpdateOne) Where(ps ...predicate.Admin) *AdminUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if admin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AdminUpdateOne) check() error {
	if v, ok := auo.mutation.UpdatedBy(); ok {
		if err := admin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Admin.updated_by": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Avatar(); ok {
		if err := admin.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`dao: validator failed for field "Admin.avatar": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CreatorID(); auo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := auo.mutation.UpdaterID(); auo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updater"`)
	}
	return nil
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Admin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(admin.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(admin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
	}
	if value, ok := auo.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeString, value)
	}
	if auo.mutation.AvatarCleared() {
		_spec.ClearField(admin.FieldAvatar, field.TypeString)
	}
	if auo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRolesIDs(); len(nodes) > 0 && !auo.mutation.AdminRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.AdminRolesTable,
			Columns: admin.AdminRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminUpdaterIDs(); len(nodes) > 0 && !auo.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRoleCreatorIDs(); len(nodes) > 0 && !auo.mutation.AdminRoleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRoleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleCreatorTable,
			Columns: []string{admin.AdminRoleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminRoleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminRoleUpdaterIDs(); len(nodes) > 0 && !auo.mutation.AdminRoleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminRoleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminRoleUpdaterTable,
			Columns: []string{admin.AdminRoleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeIDs(); len(nodes) > 0 && !auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOccupationCreatorIDs(); len(nodes) > 0 && !auo.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOccupationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.IpcEventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedIpcEventCreatorIDs(); len(nodes) > 0 && !auo.mutation.IpcEventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.IpcEventCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventCreatorTable,
			Columns: []string{admin.IpcEventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.IpcEventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedIpcEventUpdaterIDs(); len(nodes) > 0 && !auo.mutation.IpcEventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.IpcEventUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.IpcEventUpdaterTable,
			Columns: []string{admin.IpcEventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVideoCreatorIDs(); len(nodes) > 0 && !auo.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VideoCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVideoUpdaterIDs(); len(nodes) > 0 && !auo.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VideoUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAreaCreatorIDs(); len(nodes) > 0 && !auo.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AreaCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAreaUpdaterIDs(); len(nodes) > 0 && !auo.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AreaUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceCreatorIDs(); len(nodes) > 0 && !auo.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceInstallationCreatorIDs(); len(nodes) > 0 && !auo.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceInstallationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceInstallationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceInstallationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLevelCreatorIDs(); len(nodes) > 0 && !auo.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLevelCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLevelUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLevelUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
