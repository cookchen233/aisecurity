// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/permission"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/ent/dao/user"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where appends a list predicates to the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeleteTime sets the "delete_time" field.
func (au *AdminUpdate) SetDeleteTime(t time.Time) *AdminUpdate {
	au.mutation.SetDeleteTime(t)
	return au
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (au *AdminUpdate) SetNillableDeleteTime(t *time.Time) *AdminUpdate {
	if t != nil {
		au.SetDeleteTime(*t)
	}
	return au
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (au *AdminUpdate) ClearDeleteTime() *AdminUpdate {
	au.mutation.ClearDeleteTime()
	return au
}

// SetUpdaterID sets the "updater_id" field.
func (au *AdminUpdate) SetUpdaterID(i int) *AdminUpdate {
	au.mutation.SetUpdaterID(i)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AdminUpdate) SetUpdateTime(t time.Time) *AdminUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AdminUpdate) SetUsername(s string) *AdminUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(s string) *AdminUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNickname sets the "nickname" field.
func (au *AdminUpdate) SetNickname(s string) *AdminUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetRealName sets the "real_name" field.
func (au *AdminUpdate) SetRealName(s string) *AdminUpdate {
	au.mutation.SetRealName(s)
	return au
}

// SetMobile sets the "mobile" field.
func (au *AdminUpdate) SetMobile(s string) *AdminUpdate {
	au.mutation.SetMobile(s)
	return au
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (au *AdminUpdate) SetNillableMobile(s *string) *AdminUpdate {
	if s != nil {
		au.SetMobile(*s)
	}
	return au
}

// ClearMobile clears the value of the "mobile" field.
func (au *AdminUpdate) ClearMobile() *AdminUpdate {
	au.mutation.ClearMobile()
	return au
}

// SetWechatOpenid sets the "wechat_openid" field.
func (au *AdminUpdate) SetWechatOpenid(s string) *AdminUpdate {
	au.mutation.SetWechatOpenid(s)
	return au
}

// SetNillableWechatOpenid sets the "wechat_openid" field if the given value is not nil.
func (au *AdminUpdate) SetNillableWechatOpenid(s *string) *AdminUpdate {
	if s != nil {
		au.SetWechatOpenid(*s)
	}
	return au
}

// ClearWechatOpenid clears the value of the "wechat_openid" field.
func (au *AdminUpdate) ClearWechatOpenid() *AdminUpdate {
	au.mutation.ClearWechatOpenid()
	return au
}

// SetAvatar sets the "avatar" field.
func (au *AdminUpdate) SetAvatar(ti types.UploadedImage) *AdminUpdate {
	au.mutation.SetAvatar(ti)
	return au
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (au *AdminUpdate) SetNillableAvatar(ti *types.UploadedImage) *AdminUpdate {
	if ti != nil {
		au.SetAvatar(*ti)
	}
	return au
}

// ClearAvatar clears the value of the "avatar" field.
func (au *AdminUpdate) ClearAvatar() *AdminUpdate {
	au.mutation.ClearAvatar()
	return au
}

// SetAdminStatus sets the "admin_status" field.
func (au *AdminUpdate) SetAdminStatus(es enums.EnabledStatus) *AdminUpdate {
	au.mutation.ResetAdminStatus()
	au.mutation.SetAdminStatus(es)
	return au
}

// SetNillableAdminStatus sets the "admin_status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableAdminStatus(es *enums.EnabledStatus) *AdminUpdate {
	if es != nil {
		au.SetAdminStatus(*es)
	}
	return au
}

// AddAdminStatus adds es to the "admin_status" field.
func (au *AdminUpdate) AddAdminStatus(es enums.EnabledStatus) *AdminUpdate {
	au.mutation.AddAdminStatus(es)
	return au
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (au *AdminUpdate) SetUpdater(a *Admin) *AdminUpdate {
	return au.SetUpdaterID(a.ID)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (au *AdminUpdate) AddPermissionIDs(ids ...int) *AdminUpdate {
	au.mutation.AddPermissionIDs(ids...)
	return au
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (au *AdminUpdate) AddPermissions(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPermissionIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminCreatorIDs(ids...)
	return au
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) AddAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (au *AdminUpdate) AddAdminUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminUpdaterIDs(ids...)
	return au
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (au *AdminUpdate) AddAdminUpdater(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminUpdaterIDs(ids...)
}

// AddPermissionCreatorIDs adds the "permission_creator" edge to the Permission entity by IDs.
func (au *AdminUpdate) AddPermissionCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddPermissionCreatorIDs(ids...)
	return au
}

// AddPermissionCreator adds the "permission_creator" edges to the Permission entity.
func (au *AdminUpdate) AddPermissionCreator(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPermissionCreatorIDs(ids...)
}

// AddPermissionUpdaterIDs adds the "permission_updater" edge to the Permission entity by IDs.
func (au *AdminUpdate) AddPermissionUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddPermissionUpdaterIDs(ids...)
	return au
}

// AddPermissionUpdater adds the "permission_updater" edges to the Permission entity.
func (au *AdminUpdate) AddPermissionUpdater(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPermissionUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCreatorIDs(ids...)
	return au
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) AddRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskUpdaterIDs(ids...)
	return au
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (au *AdminUpdate) AddRiskUpdater(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskUpdaterIDs(ids...)
}

// AddRiskMaintainerIDs adds the "risk_maintainer" edge to the Risk entity by IDs.
func (au *AdminUpdate) AddRiskMaintainerIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskMaintainerIDs(ids...)
	return au
}

// AddRiskMaintainer adds the "risk_maintainer" edges to the Risk entity.
func (au *AdminUpdate) AddRiskMaintainer(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskMaintainerIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationCreatorIDs(ids...)
	return au
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (au *AdminUpdate) AddRiskLocationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskLocationUpdaterIDs(ids...)
	return au
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (au *AdminUpdate) AddRiskLocationUpdater(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryCreatorIDs(ids...)
	return au
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (au *AdminUpdate) AddRiskCategoryUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return au
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (au *AdminUpdate) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentCreatorIDs(ids...)
	return au
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (au *AdminUpdate) AddDepartmentUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDepartmentUpdaterIDs(ids...)
	return au
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (au *AdminUpdate) AddDepartmentUpdater(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeCreatorIDs(ids...)
	return au
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (au *AdminUpdate) AddEmployeeUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEmployeeUpdaterIDs(ids...)
	return au
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (au *AdminUpdate) AddEmployeeUpdater(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeUpdaterIDs(ids...)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (au *AdminUpdate) SetEmployeeID(id int) *AdminUpdate {
	au.mutation.SetEmployeeID(id)
	return au
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (au *AdminUpdate) SetNillableEmployeeID(id *int) *AdminUpdate {
	if id != nil {
		au = au.SetEmployeeID(*id)
	}
	return au
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (au *AdminUpdate) SetEmployee(e *Employee) *AdminUpdate {
	return au.SetEmployeeID(e.ID)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (au *AdminUpdate) AddOccupationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddOccupationCreatorIDs(ids...)
	return au
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (au *AdminUpdate) AddOccupationCreator(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (au *AdminUpdate) AddOccupationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddOccupationUpdaterIDs(ids...)
	return au
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (au *AdminUpdate) AddOccupationUpdater(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccupationUpdaterIDs(ids...)
}

// AddEventCreatorIDs adds the "event_creator" edge to the Event entity by IDs.
func (au *AdminUpdate) AddEventCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventCreatorIDs(ids...)
	return au
}

// AddEventCreator adds the "event_creator" edges to the Event entity.
func (au *AdminUpdate) AddEventCreator(e ...*Event) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventCreatorIDs(ids...)
}

// AddEventUpdaterIDs adds the "event_updater" edge to the Event entity by IDs.
func (au *AdminUpdate) AddEventUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventUpdaterIDs(ids...)
	return au
}

// AddEventUpdater adds the "event_updater" edges to the Event entity.
func (au *AdminUpdate) AddEventUpdater(e ...*Event) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventUpdaterIDs(ids...)
}

// AddVideoCreatorIDs adds the "video_creator" edge to the Video entity by IDs.
func (au *AdminUpdate) AddVideoCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddVideoCreatorIDs(ids...)
	return au
}

// AddVideoCreator adds the "video_creator" edges to the Video entity.
func (au *AdminUpdate) AddVideoCreator(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVideoCreatorIDs(ids...)
}

// AddVideoUpdaterIDs adds the "video_updater" edge to the Video entity by IDs.
func (au *AdminUpdate) AddVideoUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddVideoUpdaterIDs(ids...)
	return au
}

// AddVideoUpdater adds the "video_updater" edges to the Video entity.
func (au *AdminUpdate) AddVideoUpdater(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVideoUpdaterIDs(ids...)
}

// AddAreaCreatorIDs adds the "area_creator" edge to the Area entity by IDs.
func (au *AdminUpdate) AddAreaCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAreaCreatorIDs(ids...)
	return au
}

// AddAreaCreator adds the "area_creator" edges to the Area entity.
func (au *AdminUpdate) AddAreaCreator(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAreaCreatorIDs(ids...)
}

// AddAreaUpdaterIDs adds the "area_updater" edge to the Area entity by IDs.
func (au *AdminUpdate) AddAreaUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAreaUpdaterIDs(ids...)
	return au
}

// AddAreaUpdater adds the "area_updater" edges to the Area entity.
func (au *AdminUpdate) AddAreaUpdater(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAreaUpdaterIDs(ids...)
}

// AddDeviceCreatorIDs adds the "device_creator" edge to the Device entity by IDs.
func (au *AdminUpdate) AddDeviceCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceCreatorIDs(ids...)
	return au
}

// AddDeviceCreator adds the "device_creator" edges to the Device entity.
func (au *AdminUpdate) AddDeviceCreator(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceCreatorIDs(ids...)
}

// AddDeviceUpdaterIDs adds the "device_updater" edge to the Device entity by IDs.
func (au *AdminUpdate) AddDeviceUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceUpdaterIDs(ids...)
	return au
}

// AddDeviceUpdater adds the "device_updater" edges to the Device entity.
func (au *AdminUpdate) AddDeviceUpdater(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceUpdaterIDs(ids...)
}

// AddDeviceInstallationCreatorIDs adds the "device_installation_creator" edge to the DeviceInstallation entity by IDs.
func (au *AdminUpdate) AddDeviceInstallationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceInstallationCreatorIDs(ids...)
	return au
}

// AddDeviceInstallationCreator adds the "device_installation_creator" edges to the DeviceInstallation entity.
func (au *AdminUpdate) AddDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceInstallationCreatorIDs(ids...)
}

// AddDeviceInstallationUpdaterIDs adds the "device_installation_updater" edge to the DeviceInstallation entity by IDs.
func (au *AdminUpdate) AddDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddDeviceInstallationUpdaterIDs(ids...)
	return au
}

// AddDeviceInstallationUpdater adds the "device_installation_updater" edges to the DeviceInstallation entity.
func (au *AdminUpdate) AddDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceInstallationUpdaterIDs(ids...)
}

// AddEventLevelCreatorIDs adds the "event_level_creator" edge to the EventLevel entity by IDs.
func (au *AdminUpdate) AddEventLevelCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLevelCreatorIDs(ids...)
	return au
}

// AddEventLevelCreator adds the "event_level_creator" edges to the EventLevel entity.
func (au *AdminUpdate) AddEventLevelCreator(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLevelCreatorIDs(ids...)
}

// AddEventLevelUpdaterIDs adds the "event_level_updater" edge to the EventLevel entity by IDs.
func (au *AdminUpdate) AddEventLevelUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLevelUpdaterIDs(ids...)
	return au
}

// AddEventLevelUpdater adds the "event_level_updater" edges to the EventLevel entity.
func (au *AdminUpdate) AddEventLevelUpdater(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLevelUpdaterIDs(ids...)
}

// AddFixingCreatorIDs adds the "fixing_creator" edge to the Fixing entity by IDs.
func (au *AdminUpdate) AddFixingCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddFixingCreatorIDs(ids...)
	return au
}

// AddFixingCreator adds the "fixing_creator" edges to the Fixing entity.
func (au *AdminUpdate) AddFixingCreator(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.AddFixingCreatorIDs(ids...)
}

// AddFixingUpdaterIDs adds the "fixing_updater" edge to the Fixing entity by IDs.
func (au *AdminUpdate) AddFixingUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddFixingUpdaterIDs(ids...)
	return au
}

// AddFixingUpdater adds the "fixing_updater" edges to the Fixing entity.
func (au *AdminUpdate) AddFixingUpdater(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.AddFixingUpdaterIDs(ids...)
}

// AddFixerIDs adds the "fixer" edge to the Fixing entity by IDs.
func (au *AdminUpdate) AddFixerIDs(ids ...int) *AdminUpdate {
	au.mutation.AddFixerIDs(ids...)
	return au
}

// AddFixer adds the "fixer" edges to the Fixing entity.
func (au *AdminUpdate) AddFixer(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.AddFixerIDs(ids...)
}

// AddEventLogCreatorIDs adds the "event_log_creator" edge to the EventLog entity by IDs.
func (au *AdminUpdate) AddEventLogCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLogCreatorIDs(ids...)
	return au
}

// AddEventLogCreator adds the "event_log_creator" edges to the EventLog entity.
func (au *AdminUpdate) AddEventLogCreator(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLogCreatorIDs(ids...)
}

// AddEventLogUpdaterIDs adds the "event_log_updater" edge to the EventLog entity by IDs.
func (au *AdminUpdate) AddEventLogUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLogUpdaterIDs(ids...)
	return au
}

// AddEventLogUpdater adds the "event_log_updater" edges to the EventLog entity.
func (au *AdminUpdate) AddEventLogUpdater(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLogUpdaterIDs(ids...)
}

// AddEventLogActorIDs adds the "event_log_actor" edge to the EventLog entity by IDs.
func (au *AdminUpdate) AddEventLogActorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLogActorIDs(ids...)
	return au
}

// AddEventLogActor adds the "event_log_actor" edges to the EventLog entity.
func (au *AdminUpdate) AddEventLogActor(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLogActorIDs(ids...)
}

// AddEventLogActor2IDs adds the "event_log_actor2" edge to the EventLog entity by IDs.
func (au *AdminUpdate) AddEventLogActor2IDs(ids ...int) *AdminUpdate {
	au.mutation.AddEventLogActor2IDs(ids...)
	return au
}

// AddEventLogActor2 adds the "event_log_actor2" edges to the EventLog entity.
func (au *AdminUpdate) AddEventLogActor2(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventLogActor2IDs(ids...)
}

// AddSweepCreatorIDs adds the "sweep_creator" edge to the Sweep entity by IDs.
func (au *AdminUpdate) AddSweepCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepCreatorIDs(ids...)
	return au
}

// AddSweepCreator adds the "sweep_creator" edges to the Sweep entity.
func (au *AdminUpdate) AddSweepCreator(s ...*Sweep) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepCreatorIDs(ids...)
}

// AddSweepUpdaterIDs adds the "sweep_updater" edge to the Sweep entity by IDs.
func (au *AdminUpdate) AddSweepUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepUpdaterIDs(ids...)
	return au
}

// AddSweepUpdater adds the "sweep_updater" edges to the Sweep entity.
func (au *AdminUpdate) AddSweepUpdater(s ...*Sweep) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepUpdaterIDs(ids...)
}

// AddSweepScheduleCreatorIDs adds the "sweep_schedule_creator" edge to the SweepSchedule entity by IDs.
func (au *AdminUpdate) AddSweepScheduleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepScheduleCreatorIDs(ids...)
	return au
}

// AddSweepScheduleCreator adds the "sweep_schedule_creator" edges to the SweepSchedule entity.
func (au *AdminUpdate) AddSweepScheduleCreator(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepScheduleCreatorIDs(ids...)
}

// AddSweepScheduleUpdaterIDs adds the "sweep_schedule_updater" edge to the SweepSchedule entity by IDs.
func (au *AdminUpdate) AddSweepScheduleUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepScheduleUpdaterIDs(ids...)
	return au
}

// AddSweepScheduleUpdater adds the "sweep_schedule_updater" edges to the SweepSchedule entity.
func (au *AdminUpdate) AddSweepScheduleUpdater(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepScheduleUpdaterIDs(ids...)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (au *AdminUpdate) AddSweepScheduleIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepScheduleIDs(ids...)
	return au
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (au *AdminUpdate) AddSweepSchedule(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepScheduleIDs(ids...)
}

// AddSweepResultCreatorIDs adds the "sweep_result_creator" edge to the SweepResult entity by IDs.
func (au *AdminUpdate) AddSweepResultCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepResultCreatorIDs(ids...)
	return au
}

// AddSweepResultCreator adds the "sweep_result_creator" edges to the SweepResult entity.
func (au *AdminUpdate) AddSweepResultCreator(s ...*SweepResult) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepResultCreatorIDs(ids...)
}

// AddSweepResultUpdaterIDs adds the "sweep_result_updater" edge to the SweepResult entity by IDs.
func (au *AdminUpdate) AddSweepResultUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepResultUpdaterIDs(ids...)
	return au
}

// AddSweepResultUpdater adds the "sweep_result_updater" edges to the SweepResult entity.
func (au *AdminUpdate) AddSweepResultUpdater(s ...*SweepResult) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepResultUpdaterIDs(ids...)
}

// AddSweepResultDetailsCreatorIDs adds the "sweep_result_details_creator" edge to the SweepResultDetails entity by IDs.
func (au *AdminUpdate) AddSweepResultDetailsCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepResultDetailsCreatorIDs(ids...)
	return au
}

// AddSweepResultDetailsCreator adds the "sweep_result_details_creator" edges to the SweepResultDetails entity.
func (au *AdminUpdate) AddSweepResultDetailsCreator(s ...*SweepResultDetails) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepResultDetailsCreatorIDs(ids...)
}

// AddSweepResultDetailsUpdaterIDs adds the "sweep_result_details_updater" edge to the SweepResultDetails entity by IDs.
func (au *AdminUpdate) AddSweepResultDetailsUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddSweepResultDetailsUpdaterIDs(ids...)
	return au
}

// AddSweepResultDetailsUpdater adds the "sweep_result_details_updater" edges to the SweepResultDetails entity.
func (au *AdminUpdate) AddSweepResultDetailsUpdater(s ...*SweepResultDetails) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSweepResultDetailsUpdaterIDs(ids...)
}

// AddUserUpdaterIDs adds the "user_updater" edge to the User entity by IDs.
func (au *AdminUpdate) AddUserUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.AddUserUpdaterIDs(ids...)
	return au
}

// AddUserUpdater adds the "user_updater" edges to the User entity.
func (au *AdminUpdate) AddUserUpdater(u ...*User) *AdminUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUserUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (au *AdminUpdate) ClearUpdater() *AdminUpdate {
	au.mutation.ClearUpdater()
	return au
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (au *AdminUpdate) ClearPermissions() *AdminUpdate {
	au.mutation.ClearPermissions()
	return au
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (au *AdminUpdate) RemovePermissionIDs(ids ...int) *AdminUpdate {
	au.mutation.RemovePermissionIDs(ids...)
	return au
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (au *AdminUpdate) RemovePermissions(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePermissionIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminCreator() *AdminUpdate {
	au.mutation.ClearAdminCreator()
	return au
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminCreatorIDs(ids...)
	return au
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminCreator(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdater clears all "admin_updater" edges to the Admin entity.
func (au *AdminUpdate) ClearAdminUpdater() *AdminUpdate {
	au.mutation.ClearAdminUpdater()
	return au
}

// RemoveAdminUpdaterIDs removes the "admin_updater" edge to Admin entities by IDs.
func (au *AdminUpdate) RemoveAdminUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminUpdaterIDs(ids...)
	return au
}

// RemoveAdminUpdater removes "admin_updater" edges to Admin entities.
func (au *AdminUpdate) RemoveAdminUpdater(a ...*Admin) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminUpdaterIDs(ids...)
}

// ClearPermissionCreator clears all "permission_creator" edges to the Permission entity.
func (au *AdminUpdate) ClearPermissionCreator() *AdminUpdate {
	au.mutation.ClearPermissionCreator()
	return au
}

// RemovePermissionCreatorIDs removes the "permission_creator" edge to Permission entities by IDs.
func (au *AdminUpdate) RemovePermissionCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemovePermissionCreatorIDs(ids...)
	return au
}

// RemovePermissionCreator removes "permission_creator" edges to Permission entities.
func (au *AdminUpdate) RemovePermissionCreator(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePermissionCreatorIDs(ids...)
}

// ClearPermissionUpdater clears all "permission_updater" edges to the Permission entity.
func (au *AdminUpdate) ClearPermissionUpdater() *AdminUpdate {
	au.mutation.ClearPermissionUpdater()
	return au
}

// RemovePermissionUpdaterIDs removes the "permission_updater" edge to Permission entities by IDs.
func (au *AdminUpdate) RemovePermissionUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemovePermissionUpdaterIDs(ids...)
	return au
}

// RemovePermissionUpdater removes "permission_updater" edges to Permission entities.
func (au *AdminUpdate) RemovePermissionUpdater(p ...*Permission) *AdminUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePermissionUpdaterIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskCreator() *AdminUpdate {
	au.mutation.ClearRiskCreator()
	return au
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCreatorIDs(ids...)
	return au
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskCreator(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdater clears all "risk_updater" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskUpdater() *AdminUpdate {
	au.mutation.ClearRiskUpdater()
	return au
}

// RemoveRiskUpdaterIDs removes the "risk_updater" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskUpdaterIDs(ids...)
	return au
}

// RemoveRiskUpdater removes "risk_updater" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskUpdater(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskUpdaterIDs(ids...)
}

// ClearRiskMaintainer clears all "risk_maintainer" edges to the Risk entity.
func (au *AdminUpdate) ClearRiskMaintainer() *AdminUpdate {
	au.mutation.ClearRiskMaintainer()
	return au
}

// RemoveRiskMaintainerIDs removes the "risk_maintainer" edge to Risk entities by IDs.
func (au *AdminUpdate) RemoveRiskMaintainerIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskMaintainerIDs(ids...)
	return au
}

// RemoveRiskMaintainer removes "risk_maintainer" edges to Risk entities.
func (au *AdminUpdate) RemoveRiskMaintainer(r ...*Risk) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskMaintainerIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationCreator() *AdminUpdate {
	au.mutation.ClearRiskLocationCreator()
	return au
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return au
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdater clears all "risk_location_updater" edges to the RiskLocation entity.
func (au *AdminUpdate) ClearRiskLocationUpdater() *AdminUpdate {
	au.mutation.ClearRiskLocationUpdater()
	return au
}

// RemoveRiskLocationUpdaterIDs removes the "risk_location_updater" edge to RiskLocation entities by IDs.
func (au *AdminUpdate) RemoveRiskLocationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskLocationUpdaterIDs(ids...)
	return au
}

// RemoveRiskLocationUpdater removes "risk_location_updater" edges to RiskLocation entities.
func (au *AdminUpdate) RemoveRiskLocationUpdater(r ...*RiskLocation) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskLocationUpdaterIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryCreator() *AdminUpdate {
	au.mutation.ClearRiskCategoryCreator()
	return au
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return au
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdater clears all "risk_category_updater" edges to the RiskCategory entity.
func (au *AdminUpdate) ClearRiskCategoryUpdater() *AdminUpdate {
	au.mutation.ClearRiskCategoryUpdater()
	return au
}

// RemoveRiskCategoryUpdaterIDs removes the "risk_category_updater" edge to RiskCategory entities by IDs.
func (au *AdminUpdate) RemoveRiskCategoryUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRiskCategoryUpdaterIDs(ids...)
	return au
}

// RemoveRiskCategoryUpdater removes "risk_category_updater" edges to RiskCategory entities.
func (au *AdminUpdate) RemoveRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRiskCategoryUpdaterIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentCreator() *AdminUpdate {
	au.mutation.ClearDepartmentCreator()
	return au
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentCreatorIDs(ids...)
	return au
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentCreator(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdater clears all "department_updater" edges to the Department entity.
func (au *AdminUpdate) ClearDepartmentUpdater() *AdminUpdate {
	au.mutation.ClearDepartmentUpdater()
	return au
}

// RemoveDepartmentUpdaterIDs removes the "department_updater" edge to Department entities by IDs.
func (au *AdminUpdate) RemoveDepartmentUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDepartmentUpdaterIDs(ids...)
	return au
}

// RemoveDepartmentUpdater removes "department_updater" edges to Department entities.
func (au *AdminUpdate) RemoveDepartmentUpdater(d ...*Department) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDepartmentUpdaterIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeCreator() *AdminUpdate {
	au.mutation.ClearEmployeeCreator()
	return au
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeCreatorIDs(ids...)
	return au
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeCreator(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdater clears all "employee_updater" edges to the Employee entity.
func (au *AdminUpdate) ClearEmployeeUpdater() *AdminUpdate {
	au.mutation.ClearEmployeeUpdater()
	return au
}

// RemoveEmployeeUpdaterIDs removes the "employee_updater" edge to Employee entities by IDs.
func (au *AdminUpdate) RemoveEmployeeUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEmployeeUpdaterIDs(ids...)
	return au
}

// RemoveEmployeeUpdater removes "employee_updater" edges to Employee entities.
func (au *AdminUpdate) RemoveEmployeeUpdater(e ...*Employee) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeUpdaterIDs(ids...)
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (au *AdminUpdate) ClearEmployee() *AdminUpdate {
	au.mutation.ClearEmployee()
	return au
}

// ClearOccupationCreator clears all "occupation_creator" edges to the Occupation entity.
func (au *AdminUpdate) ClearOccupationCreator() *AdminUpdate {
	au.mutation.ClearOccupationCreator()
	return au
}

// RemoveOccupationCreatorIDs removes the "occupation_creator" edge to Occupation entities by IDs.
func (au *AdminUpdate) RemoveOccupationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveOccupationCreatorIDs(ids...)
	return au
}

// RemoveOccupationCreator removes "occupation_creator" edges to Occupation entities.
func (au *AdminUpdate) RemoveOccupationCreator(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccupationCreatorIDs(ids...)
}

// ClearOccupationUpdater clears all "occupation_updater" edges to the Occupation entity.
func (au *AdminUpdate) ClearOccupationUpdater() *AdminUpdate {
	au.mutation.ClearOccupationUpdater()
	return au
}

// RemoveOccupationUpdaterIDs removes the "occupation_updater" edge to Occupation entities by IDs.
func (au *AdminUpdate) RemoveOccupationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveOccupationUpdaterIDs(ids...)
	return au
}

// RemoveOccupationUpdater removes "occupation_updater" edges to Occupation entities.
func (au *AdminUpdate) RemoveOccupationUpdater(o ...*Occupation) *AdminUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccupationUpdaterIDs(ids...)
}

// ClearEventCreator clears all "event_creator" edges to the Event entity.
func (au *AdminUpdate) ClearEventCreator() *AdminUpdate {
	au.mutation.ClearEventCreator()
	return au
}

// RemoveEventCreatorIDs removes the "event_creator" edge to Event entities by IDs.
func (au *AdminUpdate) RemoveEventCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventCreatorIDs(ids...)
	return au
}

// RemoveEventCreator removes "event_creator" edges to Event entities.
func (au *AdminUpdate) RemoveEventCreator(e ...*Event) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventCreatorIDs(ids...)
}

// ClearEventUpdater clears all "event_updater" edges to the Event entity.
func (au *AdminUpdate) ClearEventUpdater() *AdminUpdate {
	au.mutation.ClearEventUpdater()
	return au
}

// RemoveEventUpdaterIDs removes the "event_updater" edge to Event entities by IDs.
func (au *AdminUpdate) RemoveEventUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventUpdaterIDs(ids...)
	return au
}

// RemoveEventUpdater removes "event_updater" edges to Event entities.
func (au *AdminUpdate) RemoveEventUpdater(e ...*Event) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventUpdaterIDs(ids...)
}

// ClearVideoCreator clears all "video_creator" edges to the Video entity.
func (au *AdminUpdate) ClearVideoCreator() *AdminUpdate {
	au.mutation.ClearVideoCreator()
	return au
}

// RemoveVideoCreatorIDs removes the "video_creator" edge to Video entities by IDs.
func (au *AdminUpdate) RemoveVideoCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveVideoCreatorIDs(ids...)
	return au
}

// RemoveVideoCreator removes "video_creator" edges to Video entities.
func (au *AdminUpdate) RemoveVideoCreator(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVideoCreatorIDs(ids...)
}

// ClearVideoUpdater clears all "video_updater" edges to the Video entity.
func (au *AdminUpdate) ClearVideoUpdater() *AdminUpdate {
	au.mutation.ClearVideoUpdater()
	return au
}

// RemoveVideoUpdaterIDs removes the "video_updater" edge to Video entities by IDs.
func (au *AdminUpdate) RemoveVideoUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveVideoUpdaterIDs(ids...)
	return au
}

// RemoveVideoUpdater removes "video_updater" edges to Video entities.
func (au *AdminUpdate) RemoveVideoUpdater(v ...*Video) *AdminUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVideoUpdaterIDs(ids...)
}

// ClearAreaCreator clears all "area_creator" edges to the Area entity.
func (au *AdminUpdate) ClearAreaCreator() *AdminUpdate {
	au.mutation.ClearAreaCreator()
	return au
}

// RemoveAreaCreatorIDs removes the "area_creator" edge to Area entities by IDs.
func (au *AdminUpdate) RemoveAreaCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAreaCreatorIDs(ids...)
	return au
}

// RemoveAreaCreator removes "area_creator" edges to Area entities.
func (au *AdminUpdate) RemoveAreaCreator(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAreaCreatorIDs(ids...)
}

// ClearAreaUpdater clears all "area_updater" edges to the Area entity.
func (au *AdminUpdate) ClearAreaUpdater() *AdminUpdate {
	au.mutation.ClearAreaUpdater()
	return au
}

// RemoveAreaUpdaterIDs removes the "area_updater" edge to Area entities by IDs.
func (au *AdminUpdate) RemoveAreaUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAreaUpdaterIDs(ids...)
	return au
}

// RemoveAreaUpdater removes "area_updater" edges to Area entities.
func (au *AdminUpdate) RemoveAreaUpdater(a ...*Area) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAreaUpdaterIDs(ids...)
}

// ClearDeviceCreator clears all "device_creator" edges to the Device entity.
func (au *AdminUpdate) ClearDeviceCreator() *AdminUpdate {
	au.mutation.ClearDeviceCreator()
	return au
}

// RemoveDeviceCreatorIDs removes the "device_creator" edge to Device entities by IDs.
func (au *AdminUpdate) RemoveDeviceCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceCreatorIDs(ids...)
	return au
}

// RemoveDeviceCreator removes "device_creator" edges to Device entities.
func (au *AdminUpdate) RemoveDeviceCreator(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceCreatorIDs(ids...)
}

// ClearDeviceUpdater clears all "device_updater" edges to the Device entity.
func (au *AdminUpdate) ClearDeviceUpdater() *AdminUpdate {
	au.mutation.ClearDeviceUpdater()
	return au
}

// RemoveDeviceUpdaterIDs removes the "device_updater" edge to Device entities by IDs.
func (au *AdminUpdate) RemoveDeviceUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceUpdaterIDs(ids...)
	return au
}

// RemoveDeviceUpdater removes "device_updater" edges to Device entities.
func (au *AdminUpdate) RemoveDeviceUpdater(d ...*Device) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceUpdaterIDs(ids...)
}

// ClearDeviceInstallationCreator clears all "device_installation_creator" edges to the DeviceInstallation entity.
func (au *AdminUpdate) ClearDeviceInstallationCreator() *AdminUpdate {
	au.mutation.ClearDeviceInstallationCreator()
	return au
}

// RemoveDeviceInstallationCreatorIDs removes the "device_installation_creator" edge to DeviceInstallation entities by IDs.
func (au *AdminUpdate) RemoveDeviceInstallationCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceInstallationCreatorIDs(ids...)
	return au
}

// RemoveDeviceInstallationCreator removes "device_installation_creator" edges to DeviceInstallation entities.
func (au *AdminUpdate) RemoveDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceInstallationCreatorIDs(ids...)
}

// ClearDeviceInstallationUpdater clears all "device_installation_updater" edges to the DeviceInstallation entity.
func (au *AdminUpdate) ClearDeviceInstallationUpdater() *AdminUpdate {
	au.mutation.ClearDeviceInstallationUpdater()
	return au
}

// RemoveDeviceInstallationUpdaterIDs removes the "device_installation_updater" edge to DeviceInstallation entities by IDs.
func (au *AdminUpdate) RemoveDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveDeviceInstallationUpdaterIDs(ids...)
	return au
}

// RemoveDeviceInstallationUpdater removes "device_installation_updater" edges to DeviceInstallation entities.
func (au *AdminUpdate) RemoveDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceInstallationUpdaterIDs(ids...)
}

// ClearEventLevelCreator clears all "event_level_creator" edges to the EventLevel entity.
func (au *AdminUpdate) ClearEventLevelCreator() *AdminUpdate {
	au.mutation.ClearEventLevelCreator()
	return au
}

// RemoveEventLevelCreatorIDs removes the "event_level_creator" edge to EventLevel entities by IDs.
func (au *AdminUpdate) RemoveEventLevelCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLevelCreatorIDs(ids...)
	return au
}

// RemoveEventLevelCreator removes "event_level_creator" edges to EventLevel entities.
func (au *AdminUpdate) RemoveEventLevelCreator(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLevelCreatorIDs(ids...)
}

// ClearEventLevelUpdater clears all "event_level_updater" edges to the EventLevel entity.
func (au *AdminUpdate) ClearEventLevelUpdater() *AdminUpdate {
	au.mutation.ClearEventLevelUpdater()
	return au
}

// RemoveEventLevelUpdaterIDs removes the "event_level_updater" edge to EventLevel entities by IDs.
func (au *AdminUpdate) RemoveEventLevelUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLevelUpdaterIDs(ids...)
	return au
}

// RemoveEventLevelUpdater removes "event_level_updater" edges to EventLevel entities.
func (au *AdminUpdate) RemoveEventLevelUpdater(e ...*EventLevel) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLevelUpdaterIDs(ids...)
}

// ClearFixingCreator clears all "fixing_creator" edges to the Fixing entity.
func (au *AdminUpdate) ClearFixingCreator() *AdminUpdate {
	au.mutation.ClearFixingCreator()
	return au
}

// RemoveFixingCreatorIDs removes the "fixing_creator" edge to Fixing entities by IDs.
func (au *AdminUpdate) RemoveFixingCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveFixingCreatorIDs(ids...)
	return au
}

// RemoveFixingCreator removes "fixing_creator" edges to Fixing entities.
func (au *AdminUpdate) RemoveFixingCreator(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.RemoveFixingCreatorIDs(ids...)
}

// ClearFixingUpdater clears all "fixing_updater" edges to the Fixing entity.
func (au *AdminUpdate) ClearFixingUpdater() *AdminUpdate {
	au.mutation.ClearFixingUpdater()
	return au
}

// RemoveFixingUpdaterIDs removes the "fixing_updater" edge to Fixing entities by IDs.
func (au *AdminUpdate) RemoveFixingUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveFixingUpdaterIDs(ids...)
	return au
}

// RemoveFixingUpdater removes "fixing_updater" edges to Fixing entities.
func (au *AdminUpdate) RemoveFixingUpdater(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.RemoveFixingUpdaterIDs(ids...)
}

// ClearFixer clears all "fixer" edges to the Fixing entity.
func (au *AdminUpdate) ClearFixer() *AdminUpdate {
	au.mutation.ClearFixer()
	return au
}

// RemoveFixerIDs removes the "fixer" edge to Fixing entities by IDs.
func (au *AdminUpdate) RemoveFixerIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveFixerIDs(ids...)
	return au
}

// RemoveFixer removes "fixer" edges to Fixing entities.
func (au *AdminUpdate) RemoveFixer(f ...*Fixing) *AdminUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.RemoveFixerIDs(ids...)
}

// ClearEventLogCreator clears all "event_log_creator" edges to the EventLog entity.
func (au *AdminUpdate) ClearEventLogCreator() *AdminUpdate {
	au.mutation.ClearEventLogCreator()
	return au
}

// RemoveEventLogCreatorIDs removes the "event_log_creator" edge to EventLog entities by IDs.
func (au *AdminUpdate) RemoveEventLogCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLogCreatorIDs(ids...)
	return au
}

// RemoveEventLogCreator removes "event_log_creator" edges to EventLog entities.
func (au *AdminUpdate) RemoveEventLogCreator(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLogCreatorIDs(ids...)
}

// ClearEventLogUpdater clears all "event_log_updater" edges to the EventLog entity.
func (au *AdminUpdate) ClearEventLogUpdater() *AdminUpdate {
	au.mutation.ClearEventLogUpdater()
	return au
}

// RemoveEventLogUpdaterIDs removes the "event_log_updater" edge to EventLog entities by IDs.
func (au *AdminUpdate) RemoveEventLogUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLogUpdaterIDs(ids...)
	return au
}

// RemoveEventLogUpdater removes "event_log_updater" edges to EventLog entities.
func (au *AdminUpdate) RemoveEventLogUpdater(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLogUpdaterIDs(ids...)
}

// ClearEventLogActor clears all "event_log_actor" edges to the EventLog entity.
func (au *AdminUpdate) ClearEventLogActor() *AdminUpdate {
	au.mutation.ClearEventLogActor()
	return au
}

// RemoveEventLogActorIDs removes the "event_log_actor" edge to EventLog entities by IDs.
func (au *AdminUpdate) RemoveEventLogActorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLogActorIDs(ids...)
	return au
}

// RemoveEventLogActor removes "event_log_actor" edges to EventLog entities.
func (au *AdminUpdate) RemoveEventLogActor(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLogActorIDs(ids...)
}

// ClearEventLogActor2 clears all "event_log_actor2" edges to the EventLog entity.
func (au *AdminUpdate) ClearEventLogActor2() *AdminUpdate {
	au.mutation.ClearEventLogActor2()
	return au
}

// RemoveEventLogActor2IDs removes the "event_log_actor2" edge to EventLog entities by IDs.
func (au *AdminUpdate) RemoveEventLogActor2IDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveEventLogActor2IDs(ids...)
	return au
}

// RemoveEventLogActor2 removes "event_log_actor2" edges to EventLog entities.
func (au *AdminUpdate) RemoveEventLogActor2(e ...*EventLog) *AdminUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventLogActor2IDs(ids...)
}

// ClearSweepCreator clears all "sweep_creator" edges to the Sweep entity.
func (au *AdminUpdate) ClearSweepCreator() *AdminUpdate {
	au.mutation.ClearSweepCreator()
	return au
}

// RemoveSweepCreatorIDs removes the "sweep_creator" edge to Sweep entities by IDs.
func (au *AdminUpdate) RemoveSweepCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepCreatorIDs(ids...)
	return au
}

// RemoveSweepCreator removes "sweep_creator" edges to Sweep entities.
func (au *AdminUpdate) RemoveSweepCreator(s ...*Sweep) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepCreatorIDs(ids...)
}

// ClearSweepUpdater clears all "sweep_updater" edges to the Sweep entity.
func (au *AdminUpdate) ClearSweepUpdater() *AdminUpdate {
	au.mutation.ClearSweepUpdater()
	return au
}

// RemoveSweepUpdaterIDs removes the "sweep_updater" edge to Sweep entities by IDs.
func (au *AdminUpdate) RemoveSweepUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepUpdaterIDs(ids...)
	return au
}

// RemoveSweepUpdater removes "sweep_updater" edges to Sweep entities.
func (au *AdminUpdate) RemoveSweepUpdater(s ...*Sweep) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepUpdaterIDs(ids...)
}

// ClearSweepScheduleCreator clears all "sweep_schedule_creator" edges to the SweepSchedule entity.
func (au *AdminUpdate) ClearSweepScheduleCreator() *AdminUpdate {
	au.mutation.ClearSweepScheduleCreator()
	return au
}

// RemoveSweepScheduleCreatorIDs removes the "sweep_schedule_creator" edge to SweepSchedule entities by IDs.
func (au *AdminUpdate) RemoveSweepScheduleCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepScheduleCreatorIDs(ids...)
	return au
}

// RemoveSweepScheduleCreator removes "sweep_schedule_creator" edges to SweepSchedule entities.
func (au *AdminUpdate) RemoveSweepScheduleCreator(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepScheduleCreatorIDs(ids...)
}

// ClearSweepScheduleUpdater clears all "sweep_schedule_updater" edges to the SweepSchedule entity.
func (au *AdminUpdate) ClearSweepScheduleUpdater() *AdminUpdate {
	au.mutation.ClearSweepScheduleUpdater()
	return au
}

// RemoveSweepScheduleUpdaterIDs removes the "sweep_schedule_updater" edge to SweepSchedule entities by IDs.
func (au *AdminUpdate) RemoveSweepScheduleUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepScheduleUpdaterIDs(ids...)
	return au
}

// RemoveSweepScheduleUpdater removes "sweep_schedule_updater" edges to SweepSchedule entities.
func (au *AdminUpdate) RemoveSweepScheduleUpdater(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepScheduleUpdaterIDs(ids...)
}

// ClearSweepSchedule clears all "sweep_schedule" edges to the SweepSchedule entity.
func (au *AdminUpdate) ClearSweepSchedule() *AdminUpdate {
	au.mutation.ClearSweepSchedule()
	return au
}

// RemoveSweepScheduleIDs removes the "sweep_schedule" edge to SweepSchedule entities by IDs.
func (au *AdminUpdate) RemoveSweepScheduleIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepScheduleIDs(ids...)
	return au
}

// RemoveSweepSchedule removes "sweep_schedule" edges to SweepSchedule entities.
func (au *AdminUpdate) RemoveSweepSchedule(s ...*SweepSchedule) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepScheduleIDs(ids...)
}

// ClearSweepResultCreator clears all "sweep_result_creator" edges to the SweepResult entity.
func (au *AdminUpdate) ClearSweepResultCreator() *AdminUpdate {
	au.mutation.ClearSweepResultCreator()
	return au
}

// RemoveSweepResultCreatorIDs removes the "sweep_result_creator" edge to SweepResult entities by IDs.
func (au *AdminUpdate) RemoveSweepResultCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepResultCreatorIDs(ids...)
	return au
}

// RemoveSweepResultCreator removes "sweep_result_creator" edges to SweepResult entities.
func (au *AdminUpdate) RemoveSweepResultCreator(s ...*SweepResult) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepResultCreatorIDs(ids...)
}

// ClearSweepResultUpdater clears all "sweep_result_updater" edges to the SweepResult entity.
func (au *AdminUpdate) ClearSweepResultUpdater() *AdminUpdate {
	au.mutation.ClearSweepResultUpdater()
	return au
}

// RemoveSweepResultUpdaterIDs removes the "sweep_result_updater" edge to SweepResult entities by IDs.
func (au *AdminUpdate) RemoveSweepResultUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepResultUpdaterIDs(ids...)
	return au
}

// RemoveSweepResultUpdater removes "sweep_result_updater" edges to SweepResult entities.
func (au *AdminUpdate) RemoveSweepResultUpdater(s ...*SweepResult) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepResultUpdaterIDs(ids...)
}

// ClearSweepResultDetailsCreator clears all "sweep_result_details_creator" edges to the SweepResultDetails entity.
func (au *AdminUpdate) ClearSweepResultDetailsCreator() *AdminUpdate {
	au.mutation.ClearSweepResultDetailsCreator()
	return au
}

// RemoveSweepResultDetailsCreatorIDs removes the "sweep_result_details_creator" edge to SweepResultDetails entities by IDs.
func (au *AdminUpdate) RemoveSweepResultDetailsCreatorIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepResultDetailsCreatorIDs(ids...)
	return au
}

// RemoveSweepResultDetailsCreator removes "sweep_result_details_creator" edges to SweepResultDetails entities.
func (au *AdminUpdate) RemoveSweepResultDetailsCreator(s ...*SweepResultDetails) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepResultDetailsCreatorIDs(ids...)
}

// ClearSweepResultDetailsUpdater clears all "sweep_result_details_updater" edges to the SweepResultDetails entity.
func (au *AdminUpdate) ClearSweepResultDetailsUpdater() *AdminUpdate {
	au.mutation.ClearSweepResultDetailsUpdater()
	return au
}

// RemoveSweepResultDetailsUpdaterIDs removes the "sweep_result_details_updater" edge to SweepResultDetails entities by IDs.
func (au *AdminUpdate) RemoveSweepResultDetailsUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveSweepResultDetailsUpdaterIDs(ids...)
	return au
}

// RemoveSweepResultDetailsUpdater removes "sweep_result_details_updater" edges to SweepResultDetails entities.
func (au *AdminUpdate) RemoveSweepResultDetailsUpdater(s ...*SweepResultDetails) *AdminUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSweepResultDetailsUpdaterIDs(ids...)
}

// ClearUserUpdater clears all "user_updater" edges to the User entity.
func (au *AdminUpdate) ClearUserUpdater() *AdminUpdate {
	au.mutation.ClearUserUpdater()
	return au
}

// RemoveUserUpdaterIDs removes the "user_updater" edge to User entities by IDs.
func (au *AdminUpdate) RemoveUserUpdaterIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveUserUpdaterIDs(ids...)
	return au
}

// RemoveUserUpdater removes "user_updater" edges to User entities.
func (au *AdminUpdate) RemoveUserUpdater(u ...*User) *AdminUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUserUpdaterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() error {
	if _, ok := au.mutation.UpdateTime(); !ok {
		if admin.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AdminUpdate) check() error {
	if v, ok := au.mutation.UpdaterID(); ok {
		if err := admin.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Admin.updater_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := au.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if v, ok := au.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Mobile(); ok {
		if err := admin.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`dao: validator failed for field "Admin.mobile": %w`, err)}
		}
	}
	if v, ok := au.mutation.WechatOpenid(); ok {
		if err := admin.WechatOpenidValidator(v); err != nil {
			return &ValidationError{Name: "wechat_openid", err: fmt.Errorf(`dao: validator failed for field "Admin.wechat_openid": %w`, err)}
		}
	}
	if v, ok := au.mutation.AdminStatus(); ok {
		if err := admin.AdminStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "admin_status", err: fmt.Errorf(`dao: validator failed for field "Admin.admin_status": %w`, err)}
		}
	}
	if _, ok := au.mutation.CreatorID(); au.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := au.mutation.UpdaterID(); au.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updater"`)
	}
	return nil
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeleteTime(); ok {
		_spec.SetField(admin.FieldDeleteTime, field.TypeTime, value)
	}
	if au.mutation.DeleteTimeCleared() {
		_spec.ClearField(admin.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(admin.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
	}
	if value, ok := au.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
	}
	if value, ok := au.mutation.Mobile(); ok {
		_spec.SetField(admin.FieldMobile, field.TypeString, value)
	}
	if au.mutation.MobileCleared() {
		_spec.ClearField(admin.FieldMobile, field.TypeString)
	}
	if value, ok := au.mutation.WechatOpenid(); ok {
		_spec.SetField(admin.FieldWechatOpenid, field.TypeString, value)
	}
	if au.mutation.WechatOpenidCleared() {
		_spec.ClearField(admin.FieldWechatOpenid, field.TypeString)
	}
	if value, ok := au.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeJSON, value)
	}
	if au.mutation.AvatarCleared() {
		_spec.ClearField(admin.FieldAvatar, field.TypeJSON)
	}
	if value, ok := au.mutation.AdminStatus(); ok {
		_spec.SetField(admin.FieldAdminStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedAdminStatus(); ok {
		_spec.AddField(admin.FieldAdminStatus, field.TypeInt, value)
	}
	if au.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !au.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !au.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminUpdaterIDs(); len(nodes) > 0 && !au.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PermissionCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPermissionCreatorIDs(); len(nodes) > 0 && !au.mutation.PermissionCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PermissionCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PermissionUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPermissionUpdaterIDs(); len(nodes) > 0 && !au.mutation.PermissionUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PermissionUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskMaintainerIDs(); len(nodes) > 0 && !au.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskLocationUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRiskCategoryUpdaterIDs(); len(nodes) > 0 && !au.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !au.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDepartmentUpdaterIDs(); len(nodes) > 0 && !au.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !au.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeUpdaterIDs(); len(nodes) > 0 && !au.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOccupationCreatorIDs(); len(nodes) > 0 && !au.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOccupationUpdaterIDs(); len(nodes) > 0 && !au.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventCreatorIDs(); len(nodes) > 0 && !au.mutation.EventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventUpdaterIDs(); len(nodes) > 0 && !au.mutation.EventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVideoCreatorIDs(); len(nodes) > 0 && !au.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VideoCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVideoUpdaterIDs(); len(nodes) > 0 && !au.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VideoUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAreaCreatorIDs(); len(nodes) > 0 && !au.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AreaCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAreaUpdaterIDs(); len(nodes) > 0 && !au.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AreaUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceCreatorIDs(); len(nodes) > 0 && !au.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceUpdaterIDs(); len(nodes) > 0 && !au.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceInstallationCreatorIDs(); len(nodes) > 0 && !au.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceInstallationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceInstallationUpdaterIDs(); len(nodes) > 0 && !au.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceInstallationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLevelCreatorIDs(); len(nodes) > 0 && !au.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLevelCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLevelUpdaterIDs(); len(nodes) > 0 && !au.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLevelUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FixingCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFixingCreatorIDs(); len(nodes) > 0 && !au.mutation.FixingCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FixingCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FixingUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFixingUpdaterIDs(); len(nodes) > 0 && !au.mutation.FixingUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FixingUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFixerIDs(); len(nodes) > 0 && !au.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLogCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLogCreatorIDs(); len(nodes) > 0 && !au.mutation.EventLogCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLogCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLogUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLogUpdaterIDs(); len(nodes) > 0 && !au.mutation.EventLogUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLogUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLogActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLogActorIDs(); len(nodes) > 0 && !au.mutation.EventLogActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLogActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventLogActor2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventLogActor2IDs(); len(nodes) > 0 && !au.mutation.EventLogActor2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventLogActor2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepCreatorIDs(); len(nodes) > 0 && !au.mutation.SweepCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepUpdaterIDs(); len(nodes) > 0 && !au.mutation.SweepUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepScheduleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepScheduleCreatorIDs(); len(nodes) > 0 && !au.mutation.SweepScheduleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepScheduleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepScheduleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepScheduleUpdaterIDs(); len(nodes) > 0 && !au.mutation.SweepScheduleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepScheduleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepScheduleIDs(); len(nodes) > 0 && !au.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepResultCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepResultCreatorIDs(); len(nodes) > 0 && !au.mutation.SweepResultCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepResultCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepResultUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepResultUpdaterIDs(); len(nodes) > 0 && !au.mutation.SweepResultUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepResultUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepResultDetailsCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepResultDetailsCreatorIDs(); len(nodes) > 0 && !au.mutation.SweepResultDetailsCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepResultDetailsCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SweepResultDetailsUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSweepResultDetailsUpdaterIDs(); len(nodes) > 0 && !au.mutation.SweepResultDetailsUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SweepResultDetailsUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UserUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUserUpdaterIDs(); len(nodes) > 0 && !au.mutation.UserUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMutation
}

// SetDeleteTime sets the "delete_time" field.
func (auo *AdminUpdateOne) SetDeleteTime(t time.Time) *AdminUpdateOne {
	auo.mutation.SetDeleteTime(t)
	return auo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableDeleteTime(t *time.Time) *AdminUpdateOne {
	if t != nil {
		auo.SetDeleteTime(*t)
	}
	return auo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (auo *AdminUpdateOne) ClearDeleteTime() *AdminUpdateOne {
	auo.mutation.ClearDeleteTime()
	return auo
}

// SetUpdaterID sets the "updater_id" field.
func (auo *AdminUpdateOne) SetUpdaterID(i int) *AdminUpdateOne {
	auo.mutation.SetUpdaterID(i)
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *AdminUpdateOne) SetUpdateTime(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AdminUpdateOne) SetUsername(s string) *AdminUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(s string) *AdminUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AdminUpdateOne) SetNickname(s string) *AdminUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetRealName sets the "real_name" field.
func (auo *AdminUpdateOne) SetRealName(s string) *AdminUpdateOne {
	auo.mutation.SetRealName(s)
	return auo
}

// SetMobile sets the "mobile" field.
func (auo *AdminUpdateOne) SetMobile(s string) *AdminUpdateOne {
	auo.mutation.SetMobile(s)
	return auo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableMobile(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetMobile(*s)
	}
	return auo
}

// ClearMobile clears the value of the "mobile" field.
func (auo *AdminUpdateOne) ClearMobile() *AdminUpdateOne {
	auo.mutation.ClearMobile()
	return auo
}

// SetWechatOpenid sets the "wechat_openid" field.
func (auo *AdminUpdateOne) SetWechatOpenid(s string) *AdminUpdateOne {
	auo.mutation.SetWechatOpenid(s)
	return auo
}

// SetNillableWechatOpenid sets the "wechat_openid" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableWechatOpenid(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetWechatOpenid(*s)
	}
	return auo
}

// ClearWechatOpenid clears the value of the "wechat_openid" field.
func (auo *AdminUpdateOne) ClearWechatOpenid() *AdminUpdateOne {
	auo.mutation.ClearWechatOpenid()
	return auo
}

// SetAvatar sets the "avatar" field.
func (auo *AdminUpdateOne) SetAvatar(ti types.UploadedImage) *AdminUpdateOne {
	auo.mutation.SetAvatar(ti)
	return auo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAvatar(ti *types.UploadedImage) *AdminUpdateOne {
	if ti != nil {
		auo.SetAvatar(*ti)
	}
	return auo
}

// ClearAvatar clears the value of the "avatar" field.
func (auo *AdminUpdateOne) ClearAvatar() *AdminUpdateOne {
	auo.mutation.ClearAvatar()
	return auo
}

// SetAdminStatus sets the "admin_status" field.
func (auo *AdminUpdateOne) SetAdminStatus(es enums.EnabledStatus) *AdminUpdateOne {
	auo.mutation.ResetAdminStatus()
	auo.mutation.SetAdminStatus(es)
	return auo
}

// SetNillableAdminStatus sets the "admin_status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAdminStatus(es *enums.EnabledStatus) *AdminUpdateOne {
	if es != nil {
		auo.SetAdminStatus(*es)
	}
	return auo
}

// AddAdminStatus adds es to the "admin_status" field.
func (auo *AdminUpdateOne) AddAdminStatus(es enums.EnabledStatus) *AdminUpdateOne {
	auo.mutation.AddAdminStatus(es)
	return auo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (auo *AdminUpdateOne) SetUpdater(a *Admin) *AdminUpdateOne {
	return auo.SetUpdaterID(a.ID)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (auo *AdminUpdateOne) AddPermissionIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddPermissionIDs(ids...)
	return auo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (auo *AdminUpdateOne) AddPermissions(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPermissionIDs(ids...)
}

// AddAdminCreatorIDs adds the "admin_creator" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminCreatorIDs(ids...)
	return auo
}

// AddAdminCreator adds the "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminCreatorIDs(ids...)
}

// AddAdminUpdaterIDs adds the "admin_updater" edge to the Admin entity by IDs.
func (auo *AdminUpdateOne) AddAdminUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminUpdaterIDs(ids...)
	return auo
}

// AddAdminUpdater adds the "admin_updater" edges to the Admin entity.
func (auo *AdminUpdateOne) AddAdminUpdater(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminUpdaterIDs(ids...)
}

// AddPermissionCreatorIDs adds the "permission_creator" edge to the Permission entity by IDs.
func (auo *AdminUpdateOne) AddPermissionCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddPermissionCreatorIDs(ids...)
	return auo
}

// AddPermissionCreator adds the "permission_creator" edges to the Permission entity.
func (auo *AdminUpdateOne) AddPermissionCreator(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPermissionCreatorIDs(ids...)
}

// AddPermissionUpdaterIDs adds the "permission_updater" edge to the Permission entity by IDs.
func (auo *AdminUpdateOne) AddPermissionUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddPermissionUpdaterIDs(ids...)
	return auo
}

// AddPermissionUpdater adds the "permission_updater" edges to the Permission entity.
func (auo *AdminUpdateOne) AddPermissionUpdater(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPermissionUpdaterIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creator" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCreatorIDs(ids...)
	return auo
}

// AddRiskCreator adds the "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCreatorIDs(ids...)
}

// AddRiskUpdaterIDs adds the "risk_updater" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskUpdaterIDs(ids...)
	return auo
}

// AddRiskUpdater adds the "risk_updater" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskUpdater(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskUpdaterIDs(ids...)
}

// AddRiskMaintainerIDs adds the "risk_maintainer" edge to the Risk entity by IDs.
func (auo *AdminUpdateOne) AddRiskMaintainerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskMaintainerIDs(ids...)
	return auo
}

// AddRiskMaintainer adds the "risk_maintainer" edges to the Risk entity.
func (auo *AdminUpdateOne) AddRiskMaintainer(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskMaintainerIDs(ids...)
}

// AddRiskLocationCreatorIDs adds the "risk_location_creator" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationCreatorIDs(ids...)
	return auo
}

// AddRiskLocationCreator adds the "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationCreatorIDs(ids...)
}

// AddRiskLocationUpdaterIDs adds the "risk_location_updater" edge to the RiskLocation entity by IDs.
func (auo *AdminUpdateOne) AddRiskLocationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskLocationUpdaterIDs(ids...)
	return auo
}

// AddRiskLocationUpdater adds the "risk_location_updater" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) AddRiskLocationUpdater(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskLocationUpdaterIDs(ids...)
}

// AddRiskCategoryCreatorIDs adds the "risk_category_creator" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryCreatorIDs(ids...)
	return auo
}

// AddRiskCategoryCreator adds the "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryCreatorIDs(ids...)
}

// AddRiskCategoryUpdaterIDs adds the "risk_category_updater" edge to the RiskCategory entity by IDs.
func (auo *AdminUpdateOne) AddRiskCategoryUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRiskCategoryUpdaterIDs(ids...)
	return auo
}

// AddRiskCategoryUpdater adds the "risk_category_updater" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) AddRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRiskCategoryUpdaterIDs(ids...)
}

// AddDepartmentCreatorIDs adds the "department_creator" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentCreatorIDs(ids...)
	return auo
}

// AddDepartmentCreator adds the "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentCreatorIDs(ids...)
}

// AddDepartmentUpdaterIDs adds the "department_updater" edge to the Department entity by IDs.
func (auo *AdminUpdateOne) AddDepartmentUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDepartmentUpdaterIDs(ids...)
	return auo
}

// AddDepartmentUpdater adds the "department_updater" edges to the Department entity.
func (auo *AdminUpdateOne) AddDepartmentUpdater(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDepartmentUpdaterIDs(ids...)
}

// AddEmployeeCreatorIDs adds the "employee_creator" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeCreatorIDs(ids...)
	return auo
}

// AddEmployeeCreator adds the "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeCreatorIDs(ids...)
}

// AddEmployeeUpdaterIDs adds the "employee_updater" edge to the Employee entity by IDs.
func (auo *AdminUpdateOne) AddEmployeeUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEmployeeUpdaterIDs(ids...)
	return auo
}

// AddEmployeeUpdater adds the "employee_updater" edges to the Employee entity.
func (auo *AdminUpdateOne) AddEmployeeUpdater(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeUpdaterIDs(ids...)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (auo *AdminUpdateOne) SetEmployeeID(id int) *AdminUpdateOne {
	auo.mutation.SetEmployeeID(id)
	return auo
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableEmployeeID(id *int) *AdminUpdateOne {
	if id != nil {
		auo = auo.SetEmployeeID(*id)
	}
	return auo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (auo *AdminUpdateOne) SetEmployee(e *Employee) *AdminUpdateOne {
	return auo.SetEmployeeID(e.ID)
}

// AddOccupationCreatorIDs adds the "occupation_creator" edge to the Occupation entity by IDs.
func (auo *AdminUpdateOne) AddOccupationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddOccupationCreatorIDs(ids...)
	return auo
}

// AddOccupationCreator adds the "occupation_creator" edges to the Occupation entity.
func (auo *AdminUpdateOne) AddOccupationCreator(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccupationCreatorIDs(ids...)
}

// AddOccupationUpdaterIDs adds the "occupation_updater" edge to the Occupation entity by IDs.
func (auo *AdminUpdateOne) AddOccupationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddOccupationUpdaterIDs(ids...)
	return auo
}

// AddOccupationUpdater adds the "occupation_updater" edges to the Occupation entity.
func (auo *AdminUpdateOne) AddOccupationUpdater(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccupationUpdaterIDs(ids...)
}

// AddEventCreatorIDs adds the "event_creator" edge to the Event entity by IDs.
func (auo *AdminUpdateOne) AddEventCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventCreatorIDs(ids...)
	return auo
}

// AddEventCreator adds the "event_creator" edges to the Event entity.
func (auo *AdminUpdateOne) AddEventCreator(e ...*Event) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventCreatorIDs(ids...)
}

// AddEventUpdaterIDs adds the "event_updater" edge to the Event entity by IDs.
func (auo *AdminUpdateOne) AddEventUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventUpdaterIDs(ids...)
	return auo
}

// AddEventUpdater adds the "event_updater" edges to the Event entity.
func (auo *AdminUpdateOne) AddEventUpdater(e ...*Event) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventUpdaterIDs(ids...)
}

// AddVideoCreatorIDs adds the "video_creator" edge to the Video entity by IDs.
func (auo *AdminUpdateOne) AddVideoCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddVideoCreatorIDs(ids...)
	return auo
}

// AddVideoCreator adds the "video_creator" edges to the Video entity.
func (auo *AdminUpdateOne) AddVideoCreator(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVideoCreatorIDs(ids...)
}

// AddVideoUpdaterIDs adds the "video_updater" edge to the Video entity by IDs.
func (auo *AdminUpdateOne) AddVideoUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddVideoUpdaterIDs(ids...)
	return auo
}

// AddVideoUpdater adds the "video_updater" edges to the Video entity.
func (auo *AdminUpdateOne) AddVideoUpdater(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVideoUpdaterIDs(ids...)
}

// AddAreaCreatorIDs adds the "area_creator" edge to the Area entity by IDs.
func (auo *AdminUpdateOne) AddAreaCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAreaCreatorIDs(ids...)
	return auo
}

// AddAreaCreator adds the "area_creator" edges to the Area entity.
func (auo *AdminUpdateOne) AddAreaCreator(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAreaCreatorIDs(ids...)
}

// AddAreaUpdaterIDs adds the "area_updater" edge to the Area entity by IDs.
func (auo *AdminUpdateOne) AddAreaUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAreaUpdaterIDs(ids...)
	return auo
}

// AddAreaUpdater adds the "area_updater" edges to the Area entity.
func (auo *AdminUpdateOne) AddAreaUpdater(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAreaUpdaterIDs(ids...)
}

// AddDeviceCreatorIDs adds the "device_creator" edge to the Device entity by IDs.
func (auo *AdminUpdateOne) AddDeviceCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceCreatorIDs(ids...)
	return auo
}

// AddDeviceCreator adds the "device_creator" edges to the Device entity.
func (auo *AdminUpdateOne) AddDeviceCreator(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceCreatorIDs(ids...)
}

// AddDeviceUpdaterIDs adds the "device_updater" edge to the Device entity by IDs.
func (auo *AdminUpdateOne) AddDeviceUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceUpdaterIDs(ids...)
	return auo
}

// AddDeviceUpdater adds the "device_updater" edges to the Device entity.
func (auo *AdminUpdateOne) AddDeviceUpdater(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceUpdaterIDs(ids...)
}

// AddDeviceInstallationCreatorIDs adds the "device_installation_creator" edge to the DeviceInstallation entity by IDs.
func (auo *AdminUpdateOne) AddDeviceInstallationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceInstallationCreatorIDs(ids...)
	return auo
}

// AddDeviceInstallationCreator adds the "device_installation_creator" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) AddDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceInstallationCreatorIDs(ids...)
}

// AddDeviceInstallationUpdaterIDs adds the "device_installation_updater" edge to the DeviceInstallation entity by IDs.
func (auo *AdminUpdateOne) AddDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddDeviceInstallationUpdaterIDs(ids...)
	return auo
}

// AddDeviceInstallationUpdater adds the "device_installation_updater" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) AddDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceInstallationUpdaterIDs(ids...)
}

// AddEventLevelCreatorIDs adds the "event_level_creator" edge to the EventLevel entity by IDs.
func (auo *AdminUpdateOne) AddEventLevelCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLevelCreatorIDs(ids...)
	return auo
}

// AddEventLevelCreator adds the "event_level_creator" edges to the EventLevel entity.
func (auo *AdminUpdateOne) AddEventLevelCreator(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLevelCreatorIDs(ids...)
}

// AddEventLevelUpdaterIDs adds the "event_level_updater" edge to the EventLevel entity by IDs.
func (auo *AdminUpdateOne) AddEventLevelUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLevelUpdaterIDs(ids...)
	return auo
}

// AddEventLevelUpdater adds the "event_level_updater" edges to the EventLevel entity.
func (auo *AdminUpdateOne) AddEventLevelUpdater(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLevelUpdaterIDs(ids...)
}

// AddFixingCreatorIDs adds the "fixing_creator" edge to the Fixing entity by IDs.
func (auo *AdminUpdateOne) AddFixingCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddFixingCreatorIDs(ids...)
	return auo
}

// AddFixingCreator adds the "fixing_creator" edges to the Fixing entity.
func (auo *AdminUpdateOne) AddFixingCreator(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.AddFixingCreatorIDs(ids...)
}

// AddFixingUpdaterIDs adds the "fixing_updater" edge to the Fixing entity by IDs.
func (auo *AdminUpdateOne) AddFixingUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddFixingUpdaterIDs(ids...)
	return auo
}

// AddFixingUpdater adds the "fixing_updater" edges to the Fixing entity.
func (auo *AdminUpdateOne) AddFixingUpdater(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.AddFixingUpdaterIDs(ids...)
}

// AddFixerIDs adds the "fixer" edge to the Fixing entity by IDs.
func (auo *AdminUpdateOne) AddFixerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddFixerIDs(ids...)
	return auo
}

// AddFixer adds the "fixer" edges to the Fixing entity.
func (auo *AdminUpdateOne) AddFixer(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.AddFixerIDs(ids...)
}

// AddEventLogCreatorIDs adds the "event_log_creator" edge to the EventLog entity by IDs.
func (auo *AdminUpdateOne) AddEventLogCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLogCreatorIDs(ids...)
	return auo
}

// AddEventLogCreator adds the "event_log_creator" edges to the EventLog entity.
func (auo *AdminUpdateOne) AddEventLogCreator(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLogCreatorIDs(ids...)
}

// AddEventLogUpdaterIDs adds the "event_log_updater" edge to the EventLog entity by IDs.
func (auo *AdminUpdateOne) AddEventLogUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLogUpdaterIDs(ids...)
	return auo
}

// AddEventLogUpdater adds the "event_log_updater" edges to the EventLog entity.
func (auo *AdminUpdateOne) AddEventLogUpdater(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLogUpdaterIDs(ids...)
}

// AddEventLogActorIDs adds the "event_log_actor" edge to the EventLog entity by IDs.
func (auo *AdminUpdateOne) AddEventLogActorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLogActorIDs(ids...)
	return auo
}

// AddEventLogActor adds the "event_log_actor" edges to the EventLog entity.
func (auo *AdminUpdateOne) AddEventLogActor(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLogActorIDs(ids...)
}

// AddEventLogActor2IDs adds the "event_log_actor2" edge to the EventLog entity by IDs.
func (auo *AdminUpdateOne) AddEventLogActor2IDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddEventLogActor2IDs(ids...)
	return auo
}

// AddEventLogActor2 adds the "event_log_actor2" edges to the EventLog entity.
func (auo *AdminUpdateOne) AddEventLogActor2(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventLogActor2IDs(ids...)
}

// AddSweepCreatorIDs adds the "sweep_creator" edge to the Sweep entity by IDs.
func (auo *AdminUpdateOne) AddSweepCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepCreatorIDs(ids...)
	return auo
}

// AddSweepCreator adds the "sweep_creator" edges to the Sweep entity.
func (auo *AdminUpdateOne) AddSweepCreator(s ...*Sweep) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepCreatorIDs(ids...)
}

// AddSweepUpdaterIDs adds the "sweep_updater" edge to the Sweep entity by IDs.
func (auo *AdminUpdateOne) AddSweepUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepUpdaterIDs(ids...)
	return auo
}

// AddSweepUpdater adds the "sweep_updater" edges to the Sweep entity.
func (auo *AdminUpdateOne) AddSweepUpdater(s ...*Sweep) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepUpdaterIDs(ids...)
}

// AddSweepScheduleCreatorIDs adds the "sweep_schedule_creator" edge to the SweepSchedule entity by IDs.
func (auo *AdminUpdateOne) AddSweepScheduleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepScheduleCreatorIDs(ids...)
	return auo
}

// AddSweepScheduleCreator adds the "sweep_schedule_creator" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) AddSweepScheduleCreator(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepScheduleCreatorIDs(ids...)
}

// AddSweepScheduleUpdaterIDs adds the "sweep_schedule_updater" edge to the SweepSchedule entity by IDs.
func (auo *AdminUpdateOne) AddSweepScheduleUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepScheduleUpdaterIDs(ids...)
	return auo
}

// AddSweepScheduleUpdater adds the "sweep_schedule_updater" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) AddSweepScheduleUpdater(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepScheduleUpdaterIDs(ids...)
}

// AddSweepScheduleIDs adds the "sweep_schedule" edge to the SweepSchedule entity by IDs.
func (auo *AdminUpdateOne) AddSweepScheduleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepScheduleIDs(ids...)
	return auo
}

// AddSweepSchedule adds the "sweep_schedule" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) AddSweepSchedule(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepScheduleIDs(ids...)
}

// AddSweepResultCreatorIDs adds the "sweep_result_creator" edge to the SweepResult entity by IDs.
func (auo *AdminUpdateOne) AddSweepResultCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepResultCreatorIDs(ids...)
	return auo
}

// AddSweepResultCreator adds the "sweep_result_creator" edges to the SweepResult entity.
func (auo *AdminUpdateOne) AddSweepResultCreator(s ...*SweepResult) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepResultCreatorIDs(ids...)
}

// AddSweepResultUpdaterIDs adds the "sweep_result_updater" edge to the SweepResult entity by IDs.
func (auo *AdminUpdateOne) AddSweepResultUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepResultUpdaterIDs(ids...)
	return auo
}

// AddSweepResultUpdater adds the "sweep_result_updater" edges to the SweepResult entity.
func (auo *AdminUpdateOne) AddSweepResultUpdater(s ...*SweepResult) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepResultUpdaterIDs(ids...)
}

// AddSweepResultDetailsCreatorIDs adds the "sweep_result_details_creator" edge to the SweepResultDetails entity by IDs.
func (auo *AdminUpdateOne) AddSweepResultDetailsCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepResultDetailsCreatorIDs(ids...)
	return auo
}

// AddSweepResultDetailsCreator adds the "sweep_result_details_creator" edges to the SweepResultDetails entity.
func (auo *AdminUpdateOne) AddSweepResultDetailsCreator(s ...*SweepResultDetails) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepResultDetailsCreatorIDs(ids...)
}

// AddSweepResultDetailsUpdaterIDs adds the "sweep_result_details_updater" edge to the SweepResultDetails entity by IDs.
func (auo *AdminUpdateOne) AddSweepResultDetailsUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddSweepResultDetailsUpdaterIDs(ids...)
	return auo
}

// AddSweepResultDetailsUpdater adds the "sweep_result_details_updater" edges to the SweepResultDetails entity.
func (auo *AdminUpdateOne) AddSweepResultDetailsUpdater(s ...*SweepResultDetails) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSweepResultDetailsUpdaterIDs(ids...)
}

// AddUserUpdaterIDs adds the "user_updater" edge to the User entity by IDs.
func (auo *AdminUpdateOne) AddUserUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddUserUpdaterIDs(ids...)
	return auo
}

// AddUserUpdater adds the "user_updater" edges to the User entity.
func (auo *AdminUpdateOne) AddUserUpdater(u ...*User) *AdminUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUserUpdaterIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (auo *AdminUpdateOne) ClearUpdater() *AdminUpdateOne {
	auo.mutation.ClearUpdater()
	return auo
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (auo *AdminUpdateOne) ClearPermissions() *AdminUpdateOne {
	auo.mutation.ClearPermissions()
	return auo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (auo *AdminUpdateOne) RemovePermissionIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemovePermissionIDs(ids...)
	return auo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (auo *AdminUpdateOne) RemovePermissions(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePermissionIDs(ids...)
}

// ClearAdminCreator clears all "admin_creator" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminCreator() *AdminUpdateOne {
	auo.mutation.ClearAdminCreator()
	return auo
}

// RemoveAdminCreatorIDs removes the "admin_creator" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminCreatorIDs(ids...)
	return auo
}

// RemoveAdminCreator removes "admin_creator" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminCreator(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminCreatorIDs(ids...)
}

// ClearAdminUpdater clears all "admin_updater" edges to the Admin entity.
func (auo *AdminUpdateOne) ClearAdminUpdater() *AdminUpdateOne {
	auo.mutation.ClearAdminUpdater()
	return auo
}

// RemoveAdminUpdaterIDs removes the "admin_updater" edge to Admin entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminUpdaterIDs(ids...)
	return auo
}

// RemoveAdminUpdater removes "admin_updater" edges to Admin entities.
func (auo *AdminUpdateOne) RemoveAdminUpdater(a ...*Admin) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminUpdaterIDs(ids...)
}

// ClearPermissionCreator clears all "permission_creator" edges to the Permission entity.
func (auo *AdminUpdateOne) ClearPermissionCreator() *AdminUpdateOne {
	auo.mutation.ClearPermissionCreator()
	return auo
}

// RemovePermissionCreatorIDs removes the "permission_creator" edge to Permission entities by IDs.
func (auo *AdminUpdateOne) RemovePermissionCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemovePermissionCreatorIDs(ids...)
	return auo
}

// RemovePermissionCreator removes "permission_creator" edges to Permission entities.
func (auo *AdminUpdateOne) RemovePermissionCreator(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePermissionCreatorIDs(ids...)
}

// ClearPermissionUpdater clears all "permission_updater" edges to the Permission entity.
func (auo *AdminUpdateOne) ClearPermissionUpdater() *AdminUpdateOne {
	auo.mutation.ClearPermissionUpdater()
	return auo
}

// RemovePermissionUpdaterIDs removes the "permission_updater" edge to Permission entities by IDs.
func (auo *AdminUpdateOne) RemovePermissionUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemovePermissionUpdaterIDs(ids...)
	return auo
}

// RemovePermissionUpdater removes "permission_updater" edges to Permission entities.
func (auo *AdminUpdateOne) RemovePermissionUpdater(p ...*Permission) *AdminUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePermissionUpdaterIDs(ids...)
}

// ClearRiskCreator clears all "risk_creator" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCreator()
	return auo
}

// RemoveRiskCreatorIDs removes the "risk_creator" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCreatorIDs(ids...)
	return auo
}

// RemoveRiskCreator removes "risk_creator" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskCreator(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCreatorIDs(ids...)
}

// ClearRiskUpdater clears all "risk_updater" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskUpdater()
	return auo
}

// RemoveRiskUpdaterIDs removes the "risk_updater" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskUpdaterIDs(ids...)
	return auo
}

// RemoveRiskUpdater removes "risk_updater" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskUpdater(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskUpdaterIDs(ids...)
}

// ClearRiskMaintainer clears all "risk_maintainer" edges to the Risk entity.
func (auo *AdminUpdateOne) ClearRiskMaintainer() *AdminUpdateOne {
	auo.mutation.ClearRiskMaintainer()
	return auo
}

// RemoveRiskMaintainerIDs removes the "risk_maintainer" edge to Risk entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskMaintainerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskMaintainerIDs(ids...)
	return auo
}

// RemoveRiskMaintainer removes "risk_maintainer" edges to Risk entities.
func (auo *AdminUpdateOne) RemoveRiskMaintainer(r ...*Risk) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskMaintainerIDs(ids...)
}

// ClearRiskLocationCreator clears all "risk_location_creator" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationCreator()
	return auo
}

// RemoveRiskLocationCreatorIDs removes the "risk_location_creator" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationCreatorIDs(ids...)
	return auo
}

// RemoveRiskLocationCreator removes "risk_location_creator" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationCreator(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationCreatorIDs(ids...)
}

// ClearRiskLocationUpdater clears all "risk_location_updater" edges to the RiskLocation entity.
func (auo *AdminUpdateOne) ClearRiskLocationUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskLocationUpdater()
	return auo
}

// RemoveRiskLocationUpdaterIDs removes the "risk_location_updater" edge to RiskLocation entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskLocationUpdaterIDs(ids...)
	return auo
}

// RemoveRiskLocationUpdater removes "risk_location_updater" edges to RiskLocation entities.
func (auo *AdminUpdateOne) RemoveRiskLocationUpdater(r ...*RiskLocation) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskLocationUpdaterIDs(ids...)
}

// ClearRiskCategoryCreator clears all "risk_category_creator" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryCreator() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryCreator()
	return auo
}

// RemoveRiskCategoryCreatorIDs removes the "risk_category_creator" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryCreatorIDs(ids...)
	return auo
}

// RemoveRiskCategoryCreator removes "risk_category_creator" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryCreator(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryCreatorIDs(ids...)
}

// ClearRiskCategoryUpdater clears all "risk_category_updater" edges to the RiskCategory entity.
func (auo *AdminUpdateOne) ClearRiskCategoryUpdater() *AdminUpdateOne {
	auo.mutation.ClearRiskCategoryUpdater()
	return auo
}

// RemoveRiskCategoryUpdaterIDs removes the "risk_category_updater" edge to RiskCategory entities by IDs.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRiskCategoryUpdaterIDs(ids...)
	return auo
}

// RemoveRiskCategoryUpdater removes "risk_category_updater" edges to RiskCategory entities.
func (auo *AdminUpdateOne) RemoveRiskCategoryUpdater(r ...*RiskCategory) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRiskCategoryUpdaterIDs(ids...)
}

// ClearDepartmentCreator clears all "department_creator" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentCreator() *AdminUpdateOne {
	auo.mutation.ClearDepartmentCreator()
	return auo
}

// RemoveDepartmentCreatorIDs removes the "department_creator" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentCreatorIDs(ids...)
	return auo
}

// RemoveDepartmentCreator removes "department_creator" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentCreator(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentCreatorIDs(ids...)
}

// ClearDepartmentUpdater clears all "department_updater" edges to the Department entity.
func (auo *AdminUpdateOne) ClearDepartmentUpdater() *AdminUpdateOne {
	auo.mutation.ClearDepartmentUpdater()
	return auo
}

// RemoveDepartmentUpdaterIDs removes the "department_updater" edge to Department entities by IDs.
func (auo *AdminUpdateOne) RemoveDepartmentUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDepartmentUpdaterIDs(ids...)
	return auo
}

// RemoveDepartmentUpdater removes "department_updater" edges to Department entities.
func (auo *AdminUpdateOne) RemoveDepartmentUpdater(d ...*Department) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDepartmentUpdaterIDs(ids...)
}

// ClearEmployeeCreator clears all "employee_creator" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeCreator() *AdminUpdateOne {
	auo.mutation.ClearEmployeeCreator()
	return auo
}

// RemoveEmployeeCreatorIDs removes the "employee_creator" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeCreatorIDs(ids...)
	return auo
}

// RemoveEmployeeCreator removes "employee_creator" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeCreator(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeCreatorIDs(ids...)
}

// ClearEmployeeUpdater clears all "employee_updater" edges to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployeeUpdater() *AdminUpdateOne {
	auo.mutation.ClearEmployeeUpdater()
	return auo
}

// RemoveEmployeeUpdaterIDs removes the "employee_updater" edge to Employee entities by IDs.
func (auo *AdminUpdateOne) RemoveEmployeeUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEmployeeUpdaterIDs(ids...)
	return auo
}

// RemoveEmployeeUpdater removes "employee_updater" edges to Employee entities.
func (auo *AdminUpdateOne) RemoveEmployeeUpdater(e ...*Employee) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeUpdaterIDs(ids...)
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (auo *AdminUpdateOne) ClearEmployee() *AdminUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// ClearOccupationCreator clears all "occupation_creator" edges to the Occupation entity.
func (auo *AdminUpdateOne) ClearOccupationCreator() *AdminUpdateOne {
	auo.mutation.ClearOccupationCreator()
	return auo
}

// RemoveOccupationCreatorIDs removes the "occupation_creator" edge to Occupation entities by IDs.
func (auo *AdminUpdateOne) RemoveOccupationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveOccupationCreatorIDs(ids...)
	return auo
}

// RemoveOccupationCreator removes "occupation_creator" edges to Occupation entities.
func (auo *AdminUpdateOne) RemoveOccupationCreator(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccupationCreatorIDs(ids...)
}

// ClearOccupationUpdater clears all "occupation_updater" edges to the Occupation entity.
func (auo *AdminUpdateOne) ClearOccupationUpdater() *AdminUpdateOne {
	auo.mutation.ClearOccupationUpdater()
	return auo
}

// RemoveOccupationUpdaterIDs removes the "occupation_updater" edge to Occupation entities by IDs.
func (auo *AdminUpdateOne) RemoveOccupationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveOccupationUpdaterIDs(ids...)
	return auo
}

// RemoveOccupationUpdater removes "occupation_updater" edges to Occupation entities.
func (auo *AdminUpdateOne) RemoveOccupationUpdater(o ...*Occupation) *AdminUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccupationUpdaterIDs(ids...)
}

// ClearEventCreator clears all "event_creator" edges to the Event entity.
func (auo *AdminUpdateOne) ClearEventCreator() *AdminUpdateOne {
	auo.mutation.ClearEventCreator()
	return auo
}

// RemoveEventCreatorIDs removes the "event_creator" edge to Event entities by IDs.
func (auo *AdminUpdateOne) RemoveEventCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventCreatorIDs(ids...)
	return auo
}

// RemoveEventCreator removes "event_creator" edges to Event entities.
func (auo *AdminUpdateOne) RemoveEventCreator(e ...*Event) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventCreatorIDs(ids...)
}

// ClearEventUpdater clears all "event_updater" edges to the Event entity.
func (auo *AdminUpdateOne) ClearEventUpdater() *AdminUpdateOne {
	auo.mutation.ClearEventUpdater()
	return auo
}

// RemoveEventUpdaterIDs removes the "event_updater" edge to Event entities by IDs.
func (auo *AdminUpdateOne) RemoveEventUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventUpdaterIDs(ids...)
	return auo
}

// RemoveEventUpdater removes "event_updater" edges to Event entities.
func (auo *AdminUpdateOne) RemoveEventUpdater(e ...*Event) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventUpdaterIDs(ids...)
}

// ClearVideoCreator clears all "video_creator" edges to the Video entity.
func (auo *AdminUpdateOne) ClearVideoCreator() *AdminUpdateOne {
	auo.mutation.ClearVideoCreator()
	return auo
}

// RemoveVideoCreatorIDs removes the "video_creator" edge to Video entities by IDs.
func (auo *AdminUpdateOne) RemoveVideoCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveVideoCreatorIDs(ids...)
	return auo
}

// RemoveVideoCreator removes "video_creator" edges to Video entities.
func (auo *AdminUpdateOne) RemoveVideoCreator(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVideoCreatorIDs(ids...)
}

// ClearVideoUpdater clears all "video_updater" edges to the Video entity.
func (auo *AdminUpdateOne) ClearVideoUpdater() *AdminUpdateOne {
	auo.mutation.ClearVideoUpdater()
	return auo
}

// RemoveVideoUpdaterIDs removes the "video_updater" edge to Video entities by IDs.
func (auo *AdminUpdateOne) RemoveVideoUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveVideoUpdaterIDs(ids...)
	return auo
}

// RemoveVideoUpdater removes "video_updater" edges to Video entities.
func (auo *AdminUpdateOne) RemoveVideoUpdater(v ...*Video) *AdminUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVideoUpdaterIDs(ids...)
}

// ClearAreaCreator clears all "area_creator" edges to the Area entity.
func (auo *AdminUpdateOne) ClearAreaCreator() *AdminUpdateOne {
	auo.mutation.ClearAreaCreator()
	return auo
}

// RemoveAreaCreatorIDs removes the "area_creator" edge to Area entities by IDs.
func (auo *AdminUpdateOne) RemoveAreaCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAreaCreatorIDs(ids...)
	return auo
}

// RemoveAreaCreator removes "area_creator" edges to Area entities.
func (auo *AdminUpdateOne) RemoveAreaCreator(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAreaCreatorIDs(ids...)
}

// ClearAreaUpdater clears all "area_updater" edges to the Area entity.
func (auo *AdminUpdateOne) ClearAreaUpdater() *AdminUpdateOne {
	auo.mutation.ClearAreaUpdater()
	return auo
}

// RemoveAreaUpdaterIDs removes the "area_updater" edge to Area entities by IDs.
func (auo *AdminUpdateOne) RemoveAreaUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAreaUpdaterIDs(ids...)
	return auo
}

// RemoveAreaUpdater removes "area_updater" edges to Area entities.
func (auo *AdminUpdateOne) RemoveAreaUpdater(a ...*Area) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAreaUpdaterIDs(ids...)
}

// ClearDeviceCreator clears all "device_creator" edges to the Device entity.
func (auo *AdminUpdateOne) ClearDeviceCreator() *AdminUpdateOne {
	auo.mutation.ClearDeviceCreator()
	return auo
}

// RemoveDeviceCreatorIDs removes the "device_creator" edge to Device entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceCreatorIDs(ids...)
	return auo
}

// RemoveDeviceCreator removes "device_creator" edges to Device entities.
func (auo *AdminUpdateOne) RemoveDeviceCreator(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceCreatorIDs(ids...)
}

// ClearDeviceUpdater clears all "device_updater" edges to the Device entity.
func (auo *AdminUpdateOne) ClearDeviceUpdater() *AdminUpdateOne {
	auo.mutation.ClearDeviceUpdater()
	return auo
}

// RemoveDeviceUpdaterIDs removes the "device_updater" edge to Device entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceUpdaterIDs(ids...)
	return auo
}

// RemoveDeviceUpdater removes "device_updater" edges to Device entities.
func (auo *AdminUpdateOne) RemoveDeviceUpdater(d ...*Device) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceUpdaterIDs(ids...)
}

// ClearDeviceInstallationCreator clears all "device_installation_creator" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) ClearDeviceInstallationCreator() *AdminUpdateOne {
	auo.mutation.ClearDeviceInstallationCreator()
	return auo
}

// RemoveDeviceInstallationCreatorIDs removes the "device_installation_creator" edge to DeviceInstallation entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceInstallationCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceInstallationCreatorIDs(ids...)
	return auo
}

// RemoveDeviceInstallationCreator removes "device_installation_creator" edges to DeviceInstallation entities.
func (auo *AdminUpdateOne) RemoveDeviceInstallationCreator(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceInstallationCreatorIDs(ids...)
}

// ClearDeviceInstallationUpdater clears all "device_installation_updater" edges to the DeviceInstallation entity.
func (auo *AdminUpdateOne) ClearDeviceInstallationUpdater() *AdminUpdateOne {
	auo.mutation.ClearDeviceInstallationUpdater()
	return auo
}

// RemoveDeviceInstallationUpdaterIDs removes the "device_installation_updater" edge to DeviceInstallation entities by IDs.
func (auo *AdminUpdateOne) RemoveDeviceInstallationUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveDeviceInstallationUpdaterIDs(ids...)
	return auo
}

// RemoveDeviceInstallationUpdater removes "device_installation_updater" edges to DeviceInstallation entities.
func (auo *AdminUpdateOne) RemoveDeviceInstallationUpdater(d ...*DeviceInstallation) *AdminUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceInstallationUpdaterIDs(ids...)
}

// ClearEventLevelCreator clears all "event_level_creator" edges to the EventLevel entity.
func (auo *AdminUpdateOne) ClearEventLevelCreator() *AdminUpdateOne {
	auo.mutation.ClearEventLevelCreator()
	return auo
}

// RemoveEventLevelCreatorIDs removes the "event_level_creator" edge to EventLevel entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLevelCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLevelCreatorIDs(ids...)
	return auo
}

// RemoveEventLevelCreator removes "event_level_creator" edges to EventLevel entities.
func (auo *AdminUpdateOne) RemoveEventLevelCreator(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLevelCreatorIDs(ids...)
}

// ClearEventLevelUpdater clears all "event_level_updater" edges to the EventLevel entity.
func (auo *AdminUpdateOne) ClearEventLevelUpdater() *AdminUpdateOne {
	auo.mutation.ClearEventLevelUpdater()
	return auo
}

// RemoveEventLevelUpdaterIDs removes the "event_level_updater" edge to EventLevel entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLevelUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLevelUpdaterIDs(ids...)
	return auo
}

// RemoveEventLevelUpdater removes "event_level_updater" edges to EventLevel entities.
func (auo *AdminUpdateOne) RemoveEventLevelUpdater(e ...*EventLevel) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLevelUpdaterIDs(ids...)
}

// ClearFixingCreator clears all "fixing_creator" edges to the Fixing entity.
func (auo *AdminUpdateOne) ClearFixingCreator() *AdminUpdateOne {
	auo.mutation.ClearFixingCreator()
	return auo
}

// RemoveFixingCreatorIDs removes the "fixing_creator" edge to Fixing entities by IDs.
func (auo *AdminUpdateOne) RemoveFixingCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveFixingCreatorIDs(ids...)
	return auo
}

// RemoveFixingCreator removes "fixing_creator" edges to Fixing entities.
func (auo *AdminUpdateOne) RemoveFixingCreator(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.RemoveFixingCreatorIDs(ids...)
}

// ClearFixingUpdater clears all "fixing_updater" edges to the Fixing entity.
func (auo *AdminUpdateOne) ClearFixingUpdater() *AdminUpdateOne {
	auo.mutation.ClearFixingUpdater()
	return auo
}

// RemoveFixingUpdaterIDs removes the "fixing_updater" edge to Fixing entities by IDs.
func (auo *AdminUpdateOne) RemoveFixingUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveFixingUpdaterIDs(ids...)
	return auo
}

// RemoveFixingUpdater removes "fixing_updater" edges to Fixing entities.
func (auo *AdminUpdateOne) RemoveFixingUpdater(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.RemoveFixingUpdaterIDs(ids...)
}

// ClearFixer clears all "fixer" edges to the Fixing entity.
func (auo *AdminUpdateOne) ClearFixer() *AdminUpdateOne {
	auo.mutation.ClearFixer()
	return auo
}

// RemoveFixerIDs removes the "fixer" edge to Fixing entities by IDs.
func (auo *AdminUpdateOne) RemoveFixerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveFixerIDs(ids...)
	return auo
}

// RemoveFixer removes "fixer" edges to Fixing entities.
func (auo *AdminUpdateOne) RemoveFixer(f ...*Fixing) *AdminUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.RemoveFixerIDs(ids...)
}

// ClearEventLogCreator clears all "event_log_creator" edges to the EventLog entity.
func (auo *AdminUpdateOne) ClearEventLogCreator() *AdminUpdateOne {
	auo.mutation.ClearEventLogCreator()
	return auo
}

// RemoveEventLogCreatorIDs removes the "event_log_creator" edge to EventLog entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLogCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLogCreatorIDs(ids...)
	return auo
}

// RemoveEventLogCreator removes "event_log_creator" edges to EventLog entities.
func (auo *AdminUpdateOne) RemoveEventLogCreator(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLogCreatorIDs(ids...)
}

// ClearEventLogUpdater clears all "event_log_updater" edges to the EventLog entity.
func (auo *AdminUpdateOne) ClearEventLogUpdater() *AdminUpdateOne {
	auo.mutation.ClearEventLogUpdater()
	return auo
}

// RemoveEventLogUpdaterIDs removes the "event_log_updater" edge to EventLog entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLogUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLogUpdaterIDs(ids...)
	return auo
}

// RemoveEventLogUpdater removes "event_log_updater" edges to EventLog entities.
func (auo *AdminUpdateOne) RemoveEventLogUpdater(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLogUpdaterIDs(ids...)
}

// ClearEventLogActor clears all "event_log_actor" edges to the EventLog entity.
func (auo *AdminUpdateOne) ClearEventLogActor() *AdminUpdateOne {
	auo.mutation.ClearEventLogActor()
	return auo
}

// RemoveEventLogActorIDs removes the "event_log_actor" edge to EventLog entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLogActorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLogActorIDs(ids...)
	return auo
}

// RemoveEventLogActor removes "event_log_actor" edges to EventLog entities.
func (auo *AdminUpdateOne) RemoveEventLogActor(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLogActorIDs(ids...)
}

// ClearEventLogActor2 clears all "event_log_actor2" edges to the EventLog entity.
func (auo *AdminUpdateOne) ClearEventLogActor2() *AdminUpdateOne {
	auo.mutation.ClearEventLogActor2()
	return auo
}

// RemoveEventLogActor2IDs removes the "event_log_actor2" edge to EventLog entities by IDs.
func (auo *AdminUpdateOne) RemoveEventLogActor2IDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveEventLogActor2IDs(ids...)
	return auo
}

// RemoveEventLogActor2 removes "event_log_actor2" edges to EventLog entities.
func (auo *AdminUpdateOne) RemoveEventLogActor2(e ...*EventLog) *AdminUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventLogActor2IDs(ids...)
}

// ClearSweepCreator clears all "sweep_creator" edges to the Sweep entity.
func (auo *AdminUpdateOne) ClearSweepCreator() *AdminUpdateOne {
	auo.mutation.ClearSweepCreator()
	return auo
}

// RemoveSweepCreatorIDs removes the "sweep_creator" edge to Sweep entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepCreatorIDs(ids...)
	return auo
}

// RemoveSweepCreator removes "sweep_creator" edges to Sweep entities.
func (auo *AdminUpdateOne) RemoveSweepCreator(s ...*Sweep) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepCreatorIDs(ids...)
}

// ClearSweepUpdater clears all "sweep_updater" edges to the Sweep entity.
func (auo *AdminUpdateOne) ClearSweepUpdater() *AdminUpdateOne {
	auo.mutation.ClearSweepUpdater()
	return auo
}

// RemoveSweepUpdaterIDs removes the "sweep_updater" edge to Sweep entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepUpdaterIDs(ids...)
	return auo
}

// RemoveSweepUpdater removes "sweep_updater" edges to Sweep entities.
func (auo *AdminUpdateOne) RemoveSweepUpdater(s ...*Sweep) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepUpdaterIDs(ids...)
}

// ClearSweepScheduleCreator clears all "sweep_schedule_creator" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) ClearSweepScheduleCreator() *AdminUpdateOne {
	auo.mutation.ClearSweepScheduleCreator()
	return auo
}

// RemoveSweepScheduleCreatorIDs removes the "sweep_schedule_creator" edge to SweepSchedule entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepScheduleCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepScheduleCreatorIDs(ids...)
	return auo
}

// RemoveSweepScheduleCreator removes "sweep_schedule_creator" edges to SweepSchedule entities.
func (auo *AdminUpdateOne) RemoveSweepScheduleCreator(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepScheduleCreatorIDs(ids...)
}

// ClearSweepScheduleUpdater clears all "sweep_schedule_updater" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) ClearSweepScheduleUpdater() *AdminUpdateOne {
	auo.mutation.ClearSweepScheduleUpdater()
	return auo
}

// RemoveSweepScheduleUpdaterIDs removes the "sweep_schedule_updater" edge to SweepSchedule entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepScheduleUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepScheduleUpdaterIDs(ids...)
	return auo
}

// RemoveSweepScheduleUpdater removes "sweep_schedule_updater" edges to SweepSchedule entities.
func (auo *AdminUpdateOne) RemoveSweepScheduleUpdater(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepScheduleUpdaterIDs(ids...)
}

// ClearSweepSchedule clears all "sweep_schedule" edges to the SweepSchedule entity.
func (auo *AdminUpdateOne) ClearSweepSchedule() *AdminUpdateOne {
	auo.mutation.ClearSweepSchedule()
	return auo
}

// RemoveSweepScheduleIDs removes the "sweep_schedule" edge to SweepSchedule entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepScheduleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepScheduleIDs(ids...)
	return auo
}

// RemoveSweepSchedule removes "sweep_schedule" edges to SweepSchedule entities.
func (auo *AdminUpdateOne) RemoveSweepSchedule(s ...*SweepSchedule) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepScheduleIDs(ids...)
}

// ClearSweepResultCreator clears all "sweep_result_creator" edges to the SweepResult entity.
func (auo *AdminUpdateOne) ClearSweepResultCreator() *AdminUpdateOne {
	auo.mutation.ClearSweepResultCreator()
	return auo
}

// RemoveSweepResultCreatorIDs removes the "sweep_result_creator" edge to SweepResult entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepResultCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepResultCreatorIDs(ids...)
	return auo
}

// RemoveSweepResultCreator removes "sweep_result_creator" edges to SweepResult entities.
func (auo *AdminUpdateOne) RemoveSweepResultCreator(s ...*SweepResult) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepResultCreatorIDs(ids...)
}

// ClearSweepResultUpdater clears all "sweep_result_updater" edges to the SweepResult entity.
func (auo *AdminUpdateOne) ClearSweepResultUpdater() *AdminUpdateOne {
	auo.mutation.ClearSweepResultUpdater()
	return auo
}

// RemoveSweepResultUpdaterIDs removes the "sweep_result_updater" edge to SweepResult entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepResultUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepResultUpdaterIDs(ids...)
	return auo
}

// RemoveSweepResultUpdater removes "sweep_result_updater" edges to SweepResult entities.
func (auo *AdminUpdateOne) RemoveSweepResultUpdater(s ...*SweepResult) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepResultUpdaterIDs(ids...)
}

// ClearSweepResultDetailsCreator clears all "sweep_result_details_creator" edges to the SweepResultDetails entity.
func (auo *AdminUpdateOne) ClearSweepResultDetailsCreator() *AdminUpdateOne {
	auo.mutation.ClearSweepResultDetailsCreator()
	return auo
}

// RemoveSweepResultDetailsCreatorIDs removes the "sweep_result_details_creator" edge to SweepResultDetails entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepResultDetailsCreatorIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepResultDetailsCreatorIDs(ids...)
	return auo
}

// RemoveSweepResultDetailsCreator removes "sweep_result_details_creator" edges to SweepResultDetails entities.
func (auo *AdminUpdateOne) RemoveSweepResultDetailsCreator(s ...*SweepResultDetails) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepResultDetailsCreatorIDs(ids...)
}

// ClearSweepResultDetailsUpdater clears all "sweep_result_details_updater" edges to the SweepResultDetails entity.
func (auo *AdminUpdateOne) ClearSweepResultDetailsUpdater() *AdminUpdateOne {
	auo.mutation.ClearSweepResultDetailsUpdater()
	return auo
}

// RemoveSweepResultDetailsUpdaterIDs removes the "sweep_result_details_updater" edge to SweepResultDetails entities by IDs.
func (auo *AdminUpdateOne) RemoveSweepResultDetailsUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveSweepResultDetailsUpdaterIDs(ids...)
	return auo
}

// RemoveSweepResultDetailsUpdater removes "sweep_result_details_updater" edges to SweepResultDetails entities.
func (auo *AdminUpdateOne) RemoveSweepResultDetailsUpdater(s ...*SweepResultDetails) *AdminUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSweepResultDetailsUpdaterIDs(ids...)
}

// ClearUserUpdater clears all "user_updater" edges to the User entity.
func (auo *AdminUpdateOne) ClearUserUpdater() *AdminUpdateOne {
	auo.mutation.ClearUserUpdater()
	return auo
}

// RemoveUserUpdaterIDs removes the "user_updater" edge to User entities by IDs.
func (auo *AdminUpdateOne) RemoveUserUpdaterIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveUserUpdaterIDs(ids...)
	return auo
}

// RemoveUserUpdater removes "user_updater" edges to User entities.
func (auo *AdminUpdateOne) RemoveUserUpdater(u ...*User) *AdminUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUserUpdaterIDs(ids...)
}

// Where appends a list predicates to the AdminUpdate builder.
func (auo *AdminUpdateOne) Where(ps ...predicate.Admin) *AdminUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		if admin.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized admin.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := admin.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AdminUpdateOne) check() error {
	if v, ok := auo.mutation.UpdaterID(); ok {
		if err := admin.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Admin.updater_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`dao: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`dao: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Nickname(); ok {
		if err := admin.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`dao: validator failed for field "Admin.nickname": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RealName(); ok {
		if err := admin.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`dao: validator failed for field "Admin.real_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Mobile(); ok {
		if err := admin.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`dao: validator failed for field "Admin.mobile": %w`, err)}
		}
	}
	if v, ok := auo.mutation.WechatOpenid(); ok {
		if err := admin.WechatOpenidValidator(v); err != nil {
			return &ValidationError{Name: "wechat_openid", err: fmt.Errorf(`dao: validator failed for field "Admin.wechat_openid": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AdminStatus(); ok {
		if err := admin.AdminStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "admin_status", err: fmt.Errorf(`dao: validator failed for field "Admin.admin_status": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CreatorID(); auo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.creator"`)
	}
	if _, ok := auo.mutation.UpdaterID(); auo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Admin.updater"`)
	}
	return nil
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Admin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeleteTime(); ok {
		_spec.SetField(admin.FieldDeleteTime, field.TypeTime, value)
	}
	if auo.mutation.DeleteTimeCleared() {
		_spec.ClearField(admin.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(admin.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(admin.FieldNickname, field.TypeString, value)
	}
	if value, ok := auo.mutation.RealName(); ok {
		_spec.SetField(admin.FieldRealName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Mobile(); ok {
		_spec.SetField(admin.FieldMobile, field.TypeString, value)
	}
	if auo.mutation.MobileCleared() {
		_spec.ClearField(admin.FieldMobile, field.TypeString)
	}
	if value, ok := auo.mutation.WechatOpenid(); ok {
		_spec.SetField(admin.FieldWechatOpenid, field.TypeString, value)
	}
	if auo.mutation.WechatOpenidCleared() {
		_spec.ClearField(admin.FieldWechatOpenid, field.TypeString)
	}
	if value, ok := auo.mutation.Avatar(); ok {
		_spec.SetField(admin.FieldAvatar, field.TypeJSON, value)
	}
	if auo.mutation.AvatarCleared() {
		_spec.ClearField(admin.FieldAvatar, field.TypeJSON)
	}
	if value, ok := auo.mutation.AdminStatus(); ok {
		_spec.SetField(admin.FieldAdminStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedAdminStatus(); ok {
		_spec.AddField(admin.FieldAdminStatus, field.TypeInt, value)
	}
	if auo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admin.UpdaterTable,
			Columns: []string{admin.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !auo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   admin.PermissionsTable,
			Columns: admin.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminCreatorIDs(); len(nodes) > 0 && !auo.mutation.AdminCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminCreatorTable,
			Columns: []string{admin.AdminCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminUpdaterIDs(); len(nodes) > 0 && !auo.mutation.AdminUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminUpdaterTable,
			Columns: []string{admin.AdminUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PermissionCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPermissionCreatorIDs(); len(nodes) > 0 && !auo.mutation.PermissionCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PermissionCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionCreatorTable,
			Columns: []string{admin.PermissionCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PermissionUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPermissionUpdaterIDs(); len(nodes) > 0 && !auo.mutation.PermissionUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PermissionUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.PermissionUpdaterTable,
			Columns: []string{admin.PermissionUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCreatorTable,
			Columns: []string{admin.RiskCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskUpdaterTable,
			Columns: []string{admin.RiskUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskMaintainerIDs(); len(nodes) > 0 && !auo.mutation.RiskMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskMaintainerTable,
			Columns: []string{admin.RiskMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationCreatorTable,
			Columns: []string{admin.RiskLocationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskLocationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskLocationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskLocationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskLocationUpdaterTable,
			Columns: []string{admin.RiskLocationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryCreatorIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryCreatorTable,
			Columns: []string{admin.RiskCategoryCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRiskCategoryUpdaterIDs(); len(nodes) > 0 && !auo.mutation.RiskCategoryUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiskCategoryUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.RiskCategoryUpdaterTable,
			Columns: []string{admin.RiskCategoryUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentCreatorIDs(); len(nodes) > 0 && !auo.mutation.DepartmentCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentCreatorTable,
			Columns: []string{admin.DepartmentCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDepartmentUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DepartmentUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DepartmentUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DepartmentUpdaterTable,
			Columns: []string{admin.DepartmentUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeCreatorIDs(); len(nodes) > 0 && !auo.mutation.EmployeeCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeCreatorTable,
			Columns: []string{admin.EmployeeCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EmployeeUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EmployeeUpdaterTable,
			Columns: []string{admin.EmployeeUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   admin.EmployeeTable,
			Columns: []string{admin.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOccupationCreatorIDs(); len(nodes) > 0 && !auo.mutation.OccupationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OccupationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationCreatorTable,
			Columns: []string{admin.OccupationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOccupationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.OccupationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OccupationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OccupationUpdaterTable,
			Columns: []string{admin.OccupationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occupation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventCreatorIDs(); len(nodes) > 0 && !auo.mutation.EventCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventCreatorTable,
			Columns: []string{admin.EventCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EventUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventUpdaterTable,
			Columns: []string{admin.EventUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVideoCreatorIDs(); len(nodes) > 0 && !auo.mutation.VideoCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VideoCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoCreatorTable,
			Columns: []string{admin.VideoCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVideoUpdaterIDs(); len(nodes) > 0 && !auo.mutation.VideoUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VideoUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.VideoUpdaterTable,
			Columns: []string{admin.VideoUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAreaCreatorIDs(); len(nodes) > 0 && !auo.mutation.AreaCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AreaCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaCreatorTable,
			Columns: []string{admin.AreaCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAreaUpdaterIDs(); len(nodes) > 0 && !auo.mutation.AreaUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AreaUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AreaUpdaterTable,
			Columns: []string{admin.AreaUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceCreatorIDs(); len(nodes) > 0 && !auo.mutation.DeviceCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceCreatorTable,
			Columns: []string{admin.DeviceCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DeviceUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceUpdaterTable,
			Columns: []string{admin.DeviceUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceInstallationCreatorIDs(); len(nodes) > 0 && !auo.mutation.DeviceInstallationCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceInstallationCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationCreatorTable,
			Columns: []string{admin.DeviceInstallationCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceInstallationUpdaterIDs(); len(nodes) > 0 && !auo.mutation.DeviceInstallationUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceInstallationUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.DeviceInstallationUpdaterTable,
			Columns: []string{admin.DeviceInstallationUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLevelCreatorIDs(); len(nodes) > 0 && !auo.mutation.EventLevelCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLevelCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelCreatorTable,
			Columns: []string{admin.EventLevelCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLevelUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EventLevelUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLevelUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLevelUpdaterTable,
			Columns: []string{admin.EventLevelUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlevel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FixingCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFixingCreatorIDs(); len(nodes) > 0 && !auo.mutation.FixingCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FixingCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingCreatorTable,
			Columns: []string{admin.FixingCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FixingUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFixingUpdaterIDs(); len(nodes) > 0 && !auo.mutation.FixingUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FixingUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixingUpdaterTable,
			Columns: []string{admin.FixingUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFixerIDs(); len(nodes) > 0 && !auo.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.FixerTable,
			Columns: []string{admin.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLogCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLogCreatorIDs(); len(nodes) > 0 && !auo.mutation.EventLogCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLogCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogCreatorTable,
			Columns: []string{admin.EventLogCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLogUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLogUpdaterIDs(); len(nodes) > 0 && !auo.mutation.EventLogUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLogUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogUpdaterTable,
			Columns: []string{admin.EventLogUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLogActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLogActorIDs(); len(nodes) > 0 && !auo.mutation.EventLogActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLogActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActorTable,
			Columns: []string{admin.EventLogActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventLogActor2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventLogActor2IDs(); len(nodes) > 0 && !auo.mutation.EventLogActor2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventLogActor2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.EventLogActor2Table,
			Columns: []string{admin.EventLogActor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepCreatorIDs(); len(nodes) > 0 && !auo.mutation.SweepCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepCreatorTable,
			Columns: []string{admin.SweepCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepUpdaterIDs(); len(nodes) > 0 && !auo.mutation.SweepUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepUpdaterTable,
			Columns: []string{admin.SweepUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepScheduleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepScheduleCreatorIDs(); len(nodes) > 0 && !auo.mutation.SweepScheduleCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepScheduleCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleCreatorTable,
			Columns: []string{admin.SweepScheduleCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepScheduleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepScheduleUpdaterIDs(); len(nodes) > 0 && !auo.mutation.SweepScheduleUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepScheduleUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepScheduleUpdaterTable,
			Columns: []string{admin.SweepScheduleUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepScheduleIDs(); len(nodes) > 0 && !auo.mutation.SweepScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.SweepScheduleTable,
			Columns: admin.SweepSchedulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepResultCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepResultCreatorIDs(); len(nodes) > 0 && !auo.mutation.SweepResultCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepResultCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultCreatorTable,
			Columns: []string{admin.SweepResultCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepResultUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepResultUpdaterIDs(); len(nodes) > 0 && !auo.mutation.SweepResultUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepResultUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultUpdaterTable,
			Columns: []string{admin.SweepResultUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepResultDetailsCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepResultDetailsCreatorIDs(); len(nodes) > 0 && !auo.mutation.SweepResultDetailsCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepResultDetailsCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsCreatorTable,
			Columns: []string{admin.SweepResultDetailsCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SweepResultDetailsUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSweepResultDetailsUpdaterIDs(); len(nodes) > 0 && !auo.mutation.SweepResultDetailsUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SweepResultDetailsUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.SweepResultDetailsUpdaterTable,
			Columns: []string{admin.SweepResultDetailsUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UserUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUserUpdaterIDs(); len(nodes) > 0 && !auo.mutation.UserUpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserUpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.UserUpdaterTable,
			Columns: []string{admin.UserUpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
