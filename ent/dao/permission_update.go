// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/permission"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDeleteTime sets the "delete_time" field.
func (pu *PermissionUpdate) SetDeleteTime(t time.Time) *PermissionUpdate {
	pu.mutation.SetDeleteTime(t)
	return pu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDeleteTime(t *time.Time) *PermissionUpdate {
	if t != nil {
		pu.SetDeleteTime(*t)
	}
	return pu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (pu *PermissionUpdate) ClearDeleteTime() *PermissionUpdate {
	pu.mutation.ClearDeleteTime()
	return pu
}

// SetUpdaterID sets the "updater_id" field.
func (pu *PermissionUpdate) SetUpdaterID(i int) *PermissionUpdate {
	pu.mutation.SetUpdaterID(i)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PermissionUpdate) SetUpdateTime(t time.Time) *PermissionUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetAccessIds sets the "access_ids" field.
func (pu *PermissionUpdate) SetAccessIds(s []string) *PermissionUpdate {
	pu.mutation.SetAccessIds(s)
	return pu
}

// AppendAccessIds appends s to the "access_ids" field.
func (pu *PermissionUpdate) AppendAccessIds(s []string) *PermissionUpdate {
	pu.mutation.AppendAccessIds(s)
	return pu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (pu *PermissionUpdate) SetUpdater(a *Admin) *PermissionUpdate {
	return pu.SetUpdaterID(a.ID)
}

// AddAdminIDs adds the "admin" edge to the Admin entity by IDs.
func (pu *PermissionUpdate) AddAdminIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddAdminIDs(ids...)
	return pu
}

// AddAdmin adds the "admin" edges to the Admin entity.
func (pu *PermissionUpdate) AddAdmin(a ...*Admin) *PermissionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAdminIDs(ids...)
}

// AddDepartmentIDs adds the "department" edge to the Department entity by IDs.
func (pu *PermissionUpdate) AddDepartmentIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddDepartmentIDs(ids...)
	return pu
}

// AddDepartment adds the "department" edges to the Department entity.
func (pu *PermissionUpdate) AddDepartment(d ...*Department) *PermissionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDepartmentIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (pu *PermissionUpdate) ClearUpdater() *PermissionUpdate {
	pu.mutation.ClearUpdater()
	return pu
}

// ClearAdmin clears all "admin" edges to the Admin entity.
func (pu *PermissionUpdate) ClearAdmin() *PermissionUpdate {
	pu.mutation.ClearAdmin()
	return pu
}

// RemoveAdminIDs removes the "admin" edge to Admin entities by IDs.
func (pu *PermissionUpdate) RemoveAdminIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveAdminIDs(ids...)
	return pu
}

// RemoveAdmin removes "admin" edges to Admin entities.
func (pu *PermissionUpdate) RemoveAdmin(a ...*Admin) *PermissionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAdminIDs(ids...)
}

// ClearDepartment clears all "department" edges to the Department entity.
func (pu *PermissionUpdate) ClearDepartment() *PermissionUpdate {
	pu.mutation.ClearDepartment()
	return pu
}

// RemoveDepartmentIDs removes the "department" edge to Department entities by IDs.
func (pu *PermissionUpdate) RemoveDepartmentIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveDepartmentIDs(ids...)
	return pu
}

// RemoveDepartment removes "department" edges to Department entities.
func (pu *PermissionUpdate) RemoveDepartment(d ...*Department) *PermissionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionUpdate) defaults() error {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		if permission.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized permission.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := permission.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if v, ok := pu.mutation.UpdaterID(); ok {
		if err := permission.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Permission.updater_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if _, ok := pu.mutation.CreatorID(); pu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Permission.creator"`)
	}
	if _, ok := pu.mutation.UpdaterID(); pu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Permission.updater"`)
	}
	return nil
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DeleteTime(); ok {
		_spec.SetField(permission.FieldDeleteTime, field.TypeTime, value)
	}
	if pu.mutation.DeleteTimeCleared() {
		_spec.ClearField(permission.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(permission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.AccessIds(); ok {
		_spec.SetField(permission.FieldAccessIds, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAccessIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldAccessIds, value)
		})
	}
	if pu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.UpdaterTable,
			Columns: []string{permission.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.UpdaterTable,
			Columns: []string{permission.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAdminIDs(); len(nodes) > 0 && !pu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDepartmentIDs(); len(nodes) > 0 && !pu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionMutation
}

// SetDeleteTime sets the "delete_time" field.
func (puo *PermissionUpdateOne) SetDeleteTime(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetDeleteTime(t)
	return puo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDeleteTime(t *time.Time) *PermissionUpdateOne {
	if t != nil {
		puo.SetDeleteTime(*t)
	}
	return puo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (puo *PermissionUpdateOne) ClearDeleteTime() *PermissionUpdateOne {
	puo.mutation.ClearDeleteTime()
	return puo
}

// SetUpdaterID sets the "updater_id" field.
func (puo *PermissionUpdateOne) SetUpdaterID(i int) *PermissionUpdateOne {
	puo.mutation.SetUpdaterID(i)
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *PermissionUpdateOne) SetUpdateTime(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetAccessIds sets the "access_ids" field.
func (puo *PermissionUpdateOne) SetAccessIds(s []string) *PermissionUpdateOne {
	puo.mutation.SetAccessIds(s)
	return puo
}

// AppendAccessIds appends s to the "access_ids" field.
func (puo *PermissionUpdateOne) AppendAccessIds(s []string) *PermissionUpdateOne {
	puo.mutation.AppendAccessIds(s)
	return puo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (puo *PermissionUpdateOne) SetUpdater(a *Admin) *PermissionUpdateOne {
	return puo.SetUpdaterID(a.ID)
}

// AddAdminIDs adds the "admin" edge to the Admin entity by IDs.
func (puo *PermissionUpdateOne) AddAdminIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddAdminIDs(ids...)
	return puo
}

// AddAdmin adds the "admin" edges to the Admin entity.
func (puo *PermissionUpdateOne) AddAdmin(a ...*Admin) *PermissionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAdminIDs(ids...)
}

// AddDepartmentIDs adds the "department" edge to the Department entity by IDs.
func (puo *PermissionUpdateOne) AddDepartmentIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddDepartmentIDs(ids...)
	return puo
}

// AddDepartment adds the "department" edges to the Department entity.
func (puo *PermissionUpdateOne) AddDepartment(d ...*Department) *PermissionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDepartmentIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (puo *PermissionUpdateOne) ClearUpdater() *PermissionUpdateOne {
	puo.mutation.ClearUpdater()
	return puo
}

// ClearAdmin clears all "admin" edges to the Admin entity.
func (puo *PermissionUpdateOne) ClearAdmin() *PermissionUpdateOne {
	puo.mutation.ClearAdmin()
	return puo
}

// RemoveAdminIDs removes the "admin" edge to Admin entities by IDs.
func (puo *PermissionUpdateOne) RemoveAdminIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveAdminIDs(ids...)
	return puo
}

// RemoveAdmin removes "admin" edges to Admin entities.
func (puo *PermissionUpdateOne) RemoveAdmin(a ...*Admin) *PermissionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAdminIDs(ids...)
}

// ClearDepartment clears all "department" edges to the Department entity.
func (puo *PermissionUpdateOne) ClearDepartment() *PermissionUpdateOne {
	puo.mutation.ClearDepartment()
	return puo
}

// RemoveDepartmentIDs removes the "department" edge to Department entities by IDs.
func (puo *PermissionUpdateOne) RemoveDepartmentIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveDepartmentIDs(ids...)
	return puo
}

// RemoveDepartment removes "department" edges to Department entities.
func (puo *PermissionUpdateOne) RemoveDepartment(d ...*Department) *PermissionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDepartmentIDs(ids...)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		if permission.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized permission.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := permission.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if v, ok := puo.mutation.UpdaterID(); ok {
		if err := permission.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Permission.updater_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if _, ok := puo.mutation.CreatorID(); puo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Permission.creator"`)
	}
	if _, ok := puo.mutation.UpdaterID(); puo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Permission.updater"`)
	}
	return nil
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DeleteTime(); ok {
		_spec.SetField(permission.FieldDeleteTime, field.TypeTime, value)
	}
	if puo.mutation.DeleteTimeCleared() {
		_spec.ClearField(permission.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(permission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.AccessIds(); ok {
		_spec.SetField(permission.FieldAccessIds, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAccessIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldAccessIds, value)
		})
	}
	if puo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.UpdaterTable,
			Columns: []string{permission.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.UpdaterTable,
			Columns: []string{permission.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAdminIDs(); len(nodes) > 0 && !puo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.AdminTable,
			Columns: permission.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDepartmentIDs(); len(nodes) > 0 && !puo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.DepartmentTable,
			Columns: permission.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
