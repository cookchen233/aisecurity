// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RiskQuery is the builder for querying Risk entities.
type RiskQuery struct {
	config
	ctx              *QueryContext
	order            []risk.OrderOption
	inters           []Interceptor
	predicates       []predicate.Risk
	withCreator      *AdminQuery
	withUpdater      *AdminQuery
	withRiskCategory *RiskCategoryQuery
	withRiskLocation *RiskLocationQuery
	withReporter     *EmployeeQuery
	withMaintainer   *EmployeeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RiskQuery builder.
func (rq *RiskQuery) Where(ps ...predicate.Risk) *RiskQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RiskQuery) Limit(limit int) *RiskQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *RiskQuery) Offset(offset int) *RiskQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RiskQuery) Unique(unique bool) *RiskQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RiskQuery) Order(o ...risk.OrderOption) *RiskQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryCreator chains the current query on the "creator" edge.
func (rq *RiskQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.CreatorTable, risk.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (rq *RiskQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.UpdaterTable, risk.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskCategory chains the current query on the "risk_category" edge.
func (rq *RiskQuery) QueryRiskCategory() *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.RiskCategoryTable, risk.RiskCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskLocation chains the current query on the "risk_location" edge.
func (rq *RiskQuery) QueryRiskLocation() *RiskLocationQuery {
	query := (&RiskLocationClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.RiskLocationTable, risk.RiskLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReporter chains the current query on the "reporter" edge.
func (rq *RiskQuery) QueryReporter() *EmployeeQuery {
	query := (&EmployeeClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.ReporterTable, risk.ReporterColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMaintainer chains the current query on the "maintainer" edge.
func (rq *RiskQuery) QueryMaintainer() *EmployeeQuery {
	query := (&EmployeeClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.MaintainerTable, risk.MaintainerColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Risk entity from the query.
// Returns a *NotFoundError when no Risk was found.
func (rq *RiskQuery) First(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{risk.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RiskQuery) FirstX(ctx context.Context) *Risk {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Risk ID from the query.
// Returns a *NotFoundError when no Risk ID was found.
func (rq *RiskQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{risk.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RiskQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Risk entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Risk entity is found.
// Returns a *NotFoundError when no Risk entities are found.
func (rq *RiskQuery) Only(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{risk.Label}
	default:
		return nil, &NotSingularError{risk.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RiskQuery) OnlyX(ctx context.Context) *Risk {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Risk ID in the query.
// Returns a *NotSingularError when more than one Risk ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RiskQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{risk.Label}
	default:
		err = &NotSingularError{risk.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RiskQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Risks.
func (rq *RiskQuery) All(ctx context.Context) ([]*Risk, error) {
	ctx = setContextOp(ctx, rq.ctx, "All")
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Risk, *RiskQuery]()
	return withInterceptors[[]*Risk](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RiskQuery) AllX(ctx context.Context) []*Risk {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Risk IDs.
func (rq *RiskQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rq.ctx.Unique == nil && rq.path != nil {
		rq.Unique(true)
	}
	ctx = setContextOp(ctx, rq.ctx, "IDs")
	if err = rq.Select(risk.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RiskQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RiskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, "Count")
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RiskQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RiskQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RiskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, "Exist")
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RiskQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RiskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RiskQuery) Clone() *RiskQuery {
	if rq == nil {
		return nil
	}
	return &RiskQuery{
		config:           rq.config,
		ctx:              rq.ctx.Clone(),
		order:            append([]risk.OrderOption{}, rq.order...),
		inters:           append([]Interceptor{}, rq.inters...),
		predicates:       append([]predicate.Risk{}, rq.predicates...),
		withCreator:      rq.withCreator.Clone(),
		withUpdater:      rq.withUpdater.Clone(),
		withRiskCategory: rq.withRiskCategory.Clone(),
		withRiskLocation: rq.withRiskLocation.Clone(),
		withReporter:     rq.withReporter.Clone(),
		withMaintainer:   rq.withMaintainer.Clone(),
		// clone intermediate query.
		sql:  rq.sql.Clone(),
		path: rq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithCreator(opts ...func(*AdminQuery)) *RiskQuery {
	query := (&AdminClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withCreator = query
	return rq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithUpdater(opts ...func(*AdminQuery)) *RiskQuery {
	query := (&AdminClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withUpdater = query
	return rq
}

// WithRiskCategory tells the query-builder to eager-load the nodes that are connected to
// the "risk_category" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithRiskCategory(opts ...func(*RiskCategoryQuery)) *RiskQuery {
	query := (&RiskCategoryClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withRiskCategory = query
	return rq
}

// WithRiskLocation tells the query-builder to eager-load the nodes that are connected to
// the "risk_location" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithRiskLocation(opts ...func(*RiskLocationQuery)) *RiskQuery {
	query := (&RiskLocationClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withRiskLocation = query
	return rq
}

// WithReporter tells the query-builder to eager-load the nodes that are connected to
// the "reporter" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithReporter(opts ...func(*EmployeeQuery)) *RiskQuery {
	query := (&EmployeeClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withReporter = query
	return rq
}

// WithMaintainer tells the query-builder to eager-load the nodes that are connected to
// the "maintainer" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithMaintainer(opts ...func(*EmployeeQuery)) *RiskQuery {
	query := (&EmployeeClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withMaintainer = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Risk.Query().
//		GroupBy(risk.FieldCreatedAt).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (rq *RiskQuery) GroupBy(field string, fields ...string) *RiskGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RiskGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = risk.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.Risk.Query().
//		Select(risk.FieldCreatedAt).
//		Scan(ctx, &v)
func (rq *RiskQuery) Select(fields ...string) *RiskSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &RiskSelect{RiskQuery: rq}
	sbuild.label = risk.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RiskSelect configured with the given aggregations.
func (rq *RiskQuery) Aggregate(fns ...AggregateFunc) *RiskSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RiskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !risk.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *RiskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Risk, error) {
	var (
		nodes       = []*Risk{}
		_spec       = rq.querySpec()
		loadedTypes = [6]bool{
			rq.withCreator != nil,
			rq.withUpdater != nil,
			rq.withRiskCategory != nil,
			rq.withRiskLocation != nil,
			rq.withReporter != nil,
			rq.withMaintainer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Risk).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Risk{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withCreator; query != nil {
		if err := rq.loadCreator(ctx, query, nodes, nil,
			func(n *Risk, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withUpdater; query != nil {
		if err := rq.loadUpdater(ctx, query, nodes, nil,
			func(n *Risk, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withRiskCategory; query != nil {
		if err := rq.loadRiskCategory(ctx, query, nodes, nil,
			func(n *Risk, e *RiskCategory) { n.Edges.RiskCategory = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withRiskLocation; query != nil {
		if err := rq.loadRiskLocation(ctx, query, nodes, nil,
			func(n *Risk, e *RiskLocation) { n.Edges.RiskLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withReporter; query != nil {
		if err := rq.loadReporter(ctx, query, nodes, nil,
			func(n *Risk, e *Employee) { n.Edges.Reporter = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withMaintainer; query != nil {
		if err := rq.loadMaintainer(ctx, query, nodes, nil,
			func(n *Risk, e *Employee) { n.Edges.Maintainer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RiskQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].UpdatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadRiskCategory(ctx context.Context, query *RiskCategoryQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *RiskCategory)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].RiskCategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(riskcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "risk_category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadRiskLocation(ctx context.Context, query *RiskLocationQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *RiskLocation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].RiskLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(risklocation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "risk_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadReporter(ctx context.Context, query *EmployeeQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Employee)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].ReporterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reporter_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadMaintainer(ctx context.Context, query *EmployeeQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Employee)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Risk)
	for i := range nodes {
		fk := nodes[i].MaintainerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "maintainer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rq *RiskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Columns = rq.ctx.Fields
	if len(rq.ctx.Fields) > 0 {
		_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RiskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for i := range fields {
			if fields[i] != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rq.withCreator != nil {
			_spec.Node.AddColumnOnce(risk.FieldCreatedBy)
		}
		if rq.withUpdater != nil {
			_spec.Node.AddColumnOnce(risk.FieldUpdatedBy)
		}
		if rq.withRiskCategory != nil {
			_spec.Node.AddColumnOnce(risk.FieldRiskCategoryID)
		}
		if rq.withRiskLocation != nil {
			_spec.Node.AddColumnOnce(risk.FieldRiskLocationID)
		}
		if rq.withReporter != nil {
			_spec.Node.AddColumnOnce(risk.FieldReporterID)
		}
		if rq.withMaintainer != nil {
			_spec.Node.AddColumnOnce(risk.FieldMaintainerID)
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RiskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(risk.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = risk.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RiskGroupBy is the group-by builder for Risk entities.
type RiskGroupBy struct {
	selector
	build *RiskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RiskGroupBy) Aggregate(fns ...AggregateFunc) *RiskGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RiskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, "GroupBy")
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RiskGroupBy) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RiskSelect is the builder for selecting fields of Risk entities.
type RiskSelect struct {
	*RiskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RiskSelect) Aggregate(fns ...AggregateFunc) *RiskSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RiskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, "Select")
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskSelect](ctx, rs.RiskQuery, rs, rs.inters, v)
}

func (rs *RiskSelect) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
