// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventLogCreate is the builder for creating a EventLog entity.
type EventLogCreate struct {
	config
	mutation *EventLogMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (elc *EventLogCreate) SetCreateTime(t time.Time) *EventLogCreate {
	elc.mutation.SetCreateTime(t)
	return elc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableCreateTime(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetCreateTime(*t)
	}
	return elc
}

// SetCreatorID sets the "creator_id" field.
func (elc *EventLogCreate) SetCreatorID(i int) *EventLogCreate {
	elc.mutation.SetCreatorID(i)
	return elc
}

// SetDeleteTime sets the "delete_time" field.
func (elc *EventLogCreate) SetDeleteTime(t time.Time) *EventLogCreate {
	elc.mutation.SetDeleteTime(t)
	return elc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableDeleteTime(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetDeleteTime(*t)
	}
	return elc
}

// SetUpdaterID sets the "updater_id" field.
func (elc *EventLogCreate) SetUpdaterID(i int) *EventLogCreate {
	elc.mutation.SetUpdaterID(i)
	return elc
}

// SetUpdateTime sets the "update_time" field.
func (elc *EventLogCreate) SetUpdateTime(t time.Time) *EventLogCreate {
	elc.mutation.SetUpdateTime(t)
	return elc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableUpdateTime(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetUpdateTime(*t)
	}
	return elc
}

// SetDeviceID sets the "device_id" field.
func (elc *EventLogCreate) SetDeviceID(i int) *EventLogCreate {
	elc.mutation.SetDeviceID(i)
	return elc
}

// SetEventID sets the "event_id" field.
func (elc *EventLogCreate) SetEventID(i int) *EventLogCreate {
	elc.mutation.SetEventID(i)
	return elc
}

// SetActorID sets the "actor_id" field.
func (elc *EventLogCreate) SetActorID(i int) *EventLogCreate {
	elc.mutation.SetActorID(i)
	return elc
}

// SetNillableActorID sets the "actor_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableActorID(i *int) *EventLogCreate {
	if i != nil {
		elc.SetActorID(*i)
	}
	return elc
}

// SetActor2ID sets the "actor2_id" field.
func (elc *EventLogCreate) SetActor2ID(i int) *EventLogCreate {
	elc.mutation.SetActor2ID(i)
	return elc
}

// SetNillableActor2ID sets the "actor2_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableActor2ID(i *int) *EventLogCreate {
	if i != nil {
		elc.SetActor2ID(*i)
	}
	return elc
}

// SetLogType sets the "log_type" field.
func (elc *EventLogCreate) SetLogType(elt enums.EventLogType) *EventLogCreate {
	elc.mutation.SetLogType(elt)
	return elc
}

// SetNillableLogType sets the "log_type" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableLogType(elt *enums.EventLogType) *EventLogCreate {
	if elt != nil {
		elc.SetLogType(*elt)
	}
	return elc
}

// SetNotes sets the "notes" field.
func (elc *EventLogCreate) SetNotes(s string) *EventLogCreate {
	elc.mutation.SetNotes(s)
	return elc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableNotes(s *string) *EventLogCreate {
	if s != nil {
		elc.SetNotes(*s)
	}
	return elc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (elc *EventLogCreate) SetCreator(a *Admin) *EventLogCreate {
	return elc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (elc *EventLogCreate) SetUpdater(a *Admin) *EventLogCreate {
	return elc.SetUpdaterID(a.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (elc *EventLogCreate) SetEvent(e *Event) *EventLogCreate {
	return elc.SetEventID(e.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (elc *EventLogCreate) SetDevice(d *Device) *EventLogCreate {
	return elc.SetDeviceID(d.ID)
}

// SetActor sets the "actor" edge to the Admin entity.
func (elc *EventLogCreate) SetActor(a *Admin) *EventLogCreate {
	return elc.SetActorID(a.ID)
}

// SetActor2 sets the "actor2" edge to the Admin entity.
func (elc *EventLogCreate) SetActor2(a *Admin) *EventLogCreate {
	return elc.SetActor2ID(a.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (elc *EventLogCreate) Mutation() *EventLogMutation {
	return elc.mutation
}

// Save creates the EventLog in the database.
func (elc *EventLogCreate) Save(ctx context.Context) (*EventLog, error) {
	if err := elc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EventLogCreate) SaveX(ctx context.Context) *EventLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EventLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EventLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EventLogCreate) defaults() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		if eventlog.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlog.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := eventlog.DefaultCreateTime()
		elc.mutation.SetCreateTime(v)
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		if eventlog.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized eventlog.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := eventlog.DefaultUpdateTime()
		elc.mutation.SetUpdateTime(v)
	}
	if _, ok := elc.mutation.LogType(); !ok {
		v := eventlog.DefaultLogType
		elc.mutation.SetLogType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (elc *EventLogCreate) check() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "EventLog.create_time"`)}
	}
	if _, ok := elc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "EventLog.creator_id"`)}
	}
	if v, ok := elc.mutation.CreatorID(); ok {
		if err := eventlog.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.creator_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "EventLog.updater_id"`)}
	}
	if v, ok := elc.mutation.UpdaterID(); ok {
		if err := eventlog.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.updater_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "EventLog.update_time"`)}
	}
	if _, ok := elc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "EventLog.device_id"`)}
	}
	if v, ok := elc.mutation.DeviceID(); ok {
		if err := eventlog.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.device_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`dao: missing required field "EventLog.event_id"`)}
	}
	if v, ok := elc.mutation.EventID(); ok {
		if err := eventlog.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.event_id": %w`, err)}
		}
	}
	if v, ok := elc.mutation.ActorID(); ok {
		if err := eventlog.ActorIDValidator(v); err != nil {
			return &ValidationError{Name: "actor_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.actor_id": %w`, err)}
		}
	}
	if v, ok := elc.mutation.Actor2ID(); ok {
		if err := eventlog.Actor2IDValidator(v); err != nil {
			return &ValidationError{Name: "actor2_id", err: fmt.Errorf(`dao: validator failed for field "EventLog.actor2_id": %w`, err)}
		}
	}
	if _, ok := elc.mutation.LogType(); !ok {
		return &ValidationError{Name: "log_type", err: errors.New(`dao: missing required field "EventLog.log_type"`)}
	}
	if v, ok := elc.mutation.LogType(); ok {
		if err := eventlog.LogTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "log_type", err: fmt.Errorf(`dao: validator failed for field "EventLog.log_type": %w`, err)}
		}
	}
	if _, ok := elc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "EventLog.creator"`)}
	}
	if _, ok := elc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "EventLog.updater"`)}
	}
	if _, ok := elc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`dao: missing required edge "EventLog.event"`)}
	}
	if _, ok := elc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`dao: missing required edge "EventLog.device"`)}
	}
	return nil
}

func (elc *EventLogCreate) sqlSave(ctx context.Context) (*EventLog, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EventLogCreate) createSpec() (*EventLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EventLog{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(eventlog.Table, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	)
	if value, ok := elc.mutation.CreateTime(); ok {
		_spec.SetField(eventlog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := elc.mutation.DeleteTime(); ok {
		_spec.SetField(eventlog.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := elc.mutation.UpdateTime(); ok {
		_spec.SetField(eventlog.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := elc.mutation.LogType(); ok {
		_spec.SetField(eventlog.FieldLogType, field.TypeInt, value)
		_node.LogType = value
	}
	if value, ok := elc.mutation.Notes(); ok {
		_spec.SetField(eventlog.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := elc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.CreatorTable,
			Columns: []string{eventlog.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.UpdaterTable,
			Columns: []string{eventlog.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.EventTable,
			Columns: []string{eventlog.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.DeviceTable,
			Columns: []string{eventlog.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ActorTable,
			Columns: []string{eventlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.Actor2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.Actor2Table,
			Columns: []string{eventlog.Actor2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Actor2ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventLogCreateBulk is the builder for creating many EventLog entities in bulk.
type EventLogCreateBulk struct {
	config
	err      error
	builders []*EventLogCreate
}

// Save creates the EventLog entities in the database.
func (elcb *EventLogCreateBulk) Save(ctx context.Context) ([]*EventLog, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EventLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EventLogCreateBulk) SaveX(ctx context.Context) []*EventLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EventLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EventLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
