// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepScheduleUpdate is the builder for updating SweepSchedule entities.
type SweepScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *SweepScheduleMutation
}

// Where appends a list predicates to the SweepScheduleUpdate builder.
func (ssu *SweepScheduleUpdate) Where(ps ...predicate.SweepSchedule) *SweepScheduleUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetDeleteTime sets the "delete_time" field.
func (ssu *SweepScheduleUpdate) SetDeleteTime(t time.Time) *SweepScheduleUpdate {
	ssu.mutation.SetDeleteTime(t)
	return ssu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableDeleteTime(t *time.Time) *SweepScheduleUpdate {
	if t != nil {
		ssu.SetDeleteTime(*t)
	}
	return ssu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ssu *SweepScheduleUpdate) ClearDeleteTime() *SweepScheduleUpdate {
	ssu.mutation.ClearDeleteTime()
	return ssu
}

// SetUpdaterID sets the "updater_id" field.
func (ssu *SweepScheduleUpdate) SetUpdaterID(i int) *SweepScheduleUpdate {
	ssu.mutation.SetUpdaterID(i)
	return ssu
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableUpdaterID(i *int) *SweepScheduleUpdate {
	if i != nil {
		ssu.SetUpdaterID(*i)
	}
	return ssu
}

// SetUpdateTime sets the "update_time" field.
func (ssu *SweepScheduleUpdate) SetUpdateTime(t time.Time) *SweepScheduleUpdate {
	ssu.mutation.SetUpdateTime(t)
	return ssu
}

// SetName sets the "name" field.
func (ssu *SweepScheduleUpdate) SetName(s string) *SweepScheduleUpdate {
	ssu.mutation.SetName(s)
	return ssu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableName(s *string) *SweepScheduleUpdate {
	if s != nil {
		ssu.SetName(*s)
	}
	return ssu
}

// SetSweepID sets the "sweep_id" field.
func (ssu *SweepScheduleUpdate) SetSweepID(i int) *SweepScheduleUpdate {
	ssu.mutation.SetSweepID(i)
	return ssu
}

// SetNillableSweepID sets the "sweep_id" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableSweepID(i *int) *SweepScheduleUpdate {
	if i != nil {
		ssu.SetSweepID(*i)
	}
	return ssu
}

// SetScheduleStatus sets the "schedule_status" field.
func (ssu *SweepScheduleUpdate) SetScheduleStatus(es enums.AdminStatus) *SweepScheduleUpdate {
	ssu.mutation.ResetScheduleStatus()
	ssu.mutation.SetScheduleStatus(es)
	return ssu
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableScheduleStatus(es *enums.AdminStatus) *SweepScheduleUpdate {
	if es != nil {
		ssu.SetScheduleStatus(*es)
	}
	return ssu
}

// AddScheduleStatus adds es to the "schedule_status" field.
func (ssu *SweepScheduleUpdate) AddScheduleStatus(es enums.AdminStatus) *SweepScheduleUpdate {
	ssu.mutation.AddScheduleStatus(es)
	return ssu
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (ssu *SweepScheduleUpdate) ClearScheduleStatus() *SweepScheduleUpdate {
	ssu.mutation.ClearScheduleStatus()
	return ssu
}

// SetActionTime sets the "action_time" field.
func (ssu *SweepScheduleUpdate) SetActionTime(t time.Time) *SweepScheduleUpdate {
	ssu.mutation.SetActionTime(t)
	return ssu
}

// SetNillableActionTime sets the "action_time" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableActionTime(t *time.Time) *SweepScheduleUpdate {
	if t != nil {
		ssu.SetActionTime(*t)
	}
	return ssu
}

// SetRemind sets the "remind" field.
func (ssu *SweepScheduleUpdate) SetRemind(tr types.ScheduleRemind) *SweepScheduleUpdate {
	ssu.mutation.SetRemind(tr)
	return ssu
}

// SetNillableRemind sets the "remind" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableRemind(tr *types.ScheduleRemind) *SweepScheduleUpdate {
	if tr != nil {
		ssu.SetRemind(*tr)
	}
	return ssu
}

// SetRepeat sets the "repeat" field.
func (ssu *SweepScheduleUpdate) SetRepeat(tr types.ScheduleRepeat) *SweepScheduleUpdate {
	ssu.mutation.SetRepeat(tr)
	return ssu
}

// SetNillableRepeat sets the "repeat" field if the given value is not nil.
func (ssu *SweepScheduleUpdate) SetNillableRepeat(tr *types.ScheduleRepeat) *SweepScheduleUpdate {
	if tr != nil {
		ssu.SetRepeat(*tr)
	}
	return ssu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ssu *SweepScheduleUpdate) SetUpdater(a *Admin) *SweepScheduleUpdate {
	return ssu.SetUpdaterID(a.ID)
}

// SetSweep sets the "sweep" edge to the Sweep entity.
func (ssu *SweepScheduleUpdate) SetSweep(s *Sweep) *SweepScheduleUpdate {
	return ssu.SetSweepID(s.ID)
}

// AddWorkerIDs adds the "workers" edge to the Admin entity by IDs.
func (ssu *SweepScheduleUpdate) AddWorkerIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.AddWorkerIDs(ids...)
	return ssu
}

// AddWorkers adds the "workers" edges to the Admin entity.
func (ssu *SweepScheduleUpdate) AddWorkers(a ...*Admin) *SweepScheduleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ssu.AddWorkerIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (ssu *SweepScheduleUpdate) AddSweepResultIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.AddSweepResultIDs(ids...)
	return ssu
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (ssu *SweepScheduleUpdate) AddSweepResult(s ...*SweepResult) *SweepScheduleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (ssu *SweepScheduleUpdate) AddSweepResultDetailIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.AddSweepResultDetailIDs(ids...)
	return ssu
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (ssu *SweepScheduleUpdate) AddSweepResultDetails(s ...*SweepResultDetails) *SweepScheduleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepScheduleMutation object of the builder.
func (ssu *SweepScheduleUpdate) Mutation() *SweepScheduleMutation {
	return ssu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ssu *SweepScheduleUpdate) ClearUpdater() *SweepScheduleUpdate {
	ssu.mutation.ClearUpdater()
	return ssu
}

// ClearSweep clears the "sweep" edge to the Sweep entity.
func (ssu *SweepScheduleUpdate) ClearSweep() *SweepScheduleUpdate {
	ssu.mutation.ClearSweep()
	return ssu
}

// ClearWorkers clears all "workers" edges to the Admin entity.
func (ssu *SweepScheduleUpdate) ClearWorkers() *SweepScheduleUpdate {
	ssu.mutation.ClearWorkers()
	return ssu
}

// RemoveWorkerIDs removes the "workers" edge to Admin entities by IDs.
func (ssu *SweepScheduleUpdate) RemoveWorkerIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.RemoveWorkerIDs(ids...)
	return ssu
}

// RemoveWorkers removes "workers" edges to Admin entities.
func (ssu *SweepScheduleUpdate) RemoveWorkers(a ...*Admin) *SweepScheduleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ssu.RemoveWorkerIDs(ids...)
}

// ClearSweepResult clears all "sweep_result" edges to the SweepResult entity.
func (ssu *SweepScheduleUpdate) ClearSweepResult() *SweepScheduleUpdate {
	ssu.mutation.ClearSweepResult()
	return ssu
}

// RemoveSweepResultIDs removes the "sweep_result" edge to SweepResult entities by IDs.
func (ssu *SweepScheduleUpdate) RemoveSweepResultIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.RemoveSweepResultIDs(ids...)
	return ssu
}

// RemoveSweepResult removes "sweep_result" edges to SweepResult entities.
func (ssu *SweepScheduleUpdate) RemoveSweepResult(s ...*SweepResult) *SweepScheduleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveSweepResultIDs(ids...)
}

// ClearSweepResultDetails clears all "sweep_result_details" edges to the SweepResultDetails entity.
func (ssu *SweepScheduleUpdate) ClearSweepResultDetails() *SweepScheduleUpdate {
	ssu.mutation.ClearSweepResultDetails()
	return ssu
}

// RemoveSweepResultDetailIDs removes the "sweep_result_details" edge to SweepResultDetails entities by IDs.
func (ssu *SweepScheduleUpdate) RemoveSweepResultDetailIDs(ids ...int) *SweepScheduleUpdate {
	ssu.mutation.RemoveSweepResultDetailIDs(ids...)
	return ssu
}

// RemoveSweepResultDetails removes "sweep_result_details" edges to SweepResultDetails entities.
func (ssu *SweepScheduleUpdate) RemoveSweepResultDetails(s ...*SweepResultDetails) *SweepScheduleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveSweepResultDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SweepScheduleUpdate) Save(ctx context.Context) (int, error) {
	if err := ssu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SweepScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SweepScheduleUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SweepScheduleUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SweepScheduleUpdate) defaults() error {
	if _, ok := ssu.mutation.UpdateTime(); !ok {
		if sweepschedule.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepschedule.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweepschedule.UpdateDefaultUpdateTime()
		ssu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SweepScheduleUpdate) check() error {
	if v, ok := ssu.mutation.UpdaterID(); ok {
		if err := sweepschedule.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.updater_id": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.Name(); ok {
		if err := sweepschedule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.name": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.SweepID(); ok {
		if err := sweepschedule.SweepIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.sweep_id": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.ScheduleStatus(); ok {
		if err := sweepschedule.ScheduleStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.schedule_status": %w`, err)}
		}
	}
	if _, ok := ssu.mutation.CreatorID(); ssu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.creator"`)
	}
	if _, ok := ssu.mutation.UpdaterID(); ssu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.updater"`)
	}
	if _, ok := ssu.mutation.SweepID(); ssu.mutation.SweepCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.sweep"`)
	}
	return nil
}

func (ssu *SweepScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sweepschedule.Table, sweepschedule.Columns, sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.DeleteTime(); ok {
		_spec.SetField(sweepschedule.FieldDeleteTime, field.TypeTime, value)
	}
	if ssu.mutation.DeleteTimeCleared() {
		_spec.ClearField(sweepschedule.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ssu.mutation.UpdateTime(); ok {
		_spec.SetField(sweepschedule.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Name(); ok {
		_spec.SetField(sweepschedule.FieldName, field.TypeString, value)
	}
	if value, ok := ssu.mutation.ScheduleStatus(); ok {
		_spec.SetField(sweepschedule.FieldScheduleStatus, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedScheduleStatus(); ok {
		_spec.AddField(sweepschedule.FieldScheduleStatus, field.TypeInt, value)
	}
	if ssu.mutation.ScheduleStatusCleared() {
		_spec.ClearField(sweepschedule.FieldScheduleStatus, field.TypeInt)
	}
	if value, ok := ssu.mutation.ActionTime(); ok {
		_spec.SetField(sweepschedule.FieldActionTime, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Remind(); ok {
		_spec.SetField(sweepschedule.FieldRemind, field.TypeJSON, value)
	}
	if value, ok := ssu.mutation.Repeat(); ok {
		_spec.SetField(sweepschedule.FieldRepeat, field.TypeJSON, value)
	}
	if ssu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SweepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SweepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.WorkersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedWorkersIDs(); len(nodes) > 0 && !ssu.mutation.WorkersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.WorkersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedSweepResultIDs(); len(nodes) > 0 && !ssu.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedSweepResultDetailsIDs(); len(nodes) > 0 && !ssu.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sweepschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SweepScheduleUpdateOne is the builder for updating a single SweepSchedule entity.
type SweepScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SweepScheduleMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ssuo *SweepScheduleUpdateOne) SetDeleteTime(t time.Time) *SweepScheduleUpdateOne {
	ssuo.mutation.SetDeleteTime(t)
	return ssuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableDeleteTime(t *time.Time) *SweepScheduleUpdateOne {
	if t != nil {
		ssuo.SetDeleteTime(*t)
	}
	return ssuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ssuo *SweepScheduleUpdateOne) ClearDeleteTime() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearDeleteTime()
	return ssuo
}

// SetUpdaterID sets the "updater_id" field.
func (ssuo *SweepScheduleUpdateOne) SetUpdaterID(i int) *SweepScheduleUpdateOne {
	ssuo.mutation.SetUpdaterID(i)
	return ssuo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableUpdaterID(i *int) *SweepScheduleUpdateOne {
	if i != nil {
		ssuo.SetUpdaterID(*i)
	}
	return ssuo
}

// SetUpdateTime sets the "update_time" field.
func (ssuo *SweepScheduleUpdateOne) SetUpdateTime(t time.Time) *SweepScheduleUpdateOne {
	ssuo.mutation.SetUpdateTime(t)
	return ssuo
}

// SetName sets the "name" field.
func (ssuo *SweepScheduleUpdateOne) SetName(s string) *SweepScheduleUpdateOne {
	ssuo.mutation.SetName(s)
	return ssuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableName(s *string) *SweepScheduleUpdateOne {
	if s != nil {
		ssuo.SetName(*s)
	}
	return ssuo
}

// SetSweepID sets the "sweep_id" field.
func (ssuo *SweepScheduleUpdateOne) SetSweepID(i int) *SweepScheduleUpdateOne {
	ssuo.mutation.SetSweepID(i)
	return ssuo
}

// SetNillableSweepID sets the "sweep_id" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableSweepID(i *int) *SweepScheduleUpdateOne {
	if i != nil {
		ssuo.SetSweepID(*i)
	}
	return ssuo
}

// SetScheduleStatus sets the "schedule_status" field.
func (ssuo *SweepScheduleUpdateOne) SetScheduleStatus(es enums.AdminStatus) *SweepScheduleUpdateOne {
	ssuo.mutation.ResetScheduleStatus()
	ssuo.mutation.SetScheduleStatus(es)
	return ssuo
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableScheduleStatus(es *enums.AdminStatus) *SweepScheduleUpdateOne {
	if es != nil {
		ssuo.SetScheduleStatus(*es)
	}
	return ssuo
}

// AddScheduleStatus adds es to the "schedule_status" field.
func (ssuo *SweepScheduleUpdateOne) AddScheduleStatus(es enums.AdminStatus) *SweepScheduleUpdateOne {
	ssuo.mutation.AddScheduleStatus(es)
	return ssuo
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (ssuo *SweepScheduleUpdateOne) ClearScheduleStatus() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearScheduleStatus()
	return ssuo
}

// SetActionTime sets the "action_time" field.
func (ssuo *SweepScheduleUpdateOne) SetActionTime(t time.Time) *SweepScheduleUpdateOne {
	ssuo.mutation.SetActionTime(t)
	return ssuo
}

// SetNillableActionTime sets the "action_time" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableActionTime(t *time.Time) *SweepScheduleUpdateOne {
	if t != nil {
		ssuo.SetActionTime(*t)
	}
	return ssuo
}

// SetRemind sets the "remind" field.
func (ssuo *SweepScheduleUpdateOne) SetRemind(tr types.ScheduleRemind) *SweepScheduleUpdateOne {
	ssuo.mutation.SetRemind(tr)
	return ssuo
}

// SetNillableRemind sets the "remind" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableRemind(tr *types.ScheduleRemind) *SweepScheduleUpdateOne {
	if tr != nil {
		ssuo.SetRemind(*tr)
	}
	return ssuo
}

// SetRepeat sets the "repeat" field.
func (ssuo *SweepScheduleUpdateOne) SetRepeat(tr types.ScheduleRepeat) *SweepScheduleUpdateOne {
	ssuo.mutation.SetRepeat(tr)
	return ssuo
}

// SetNillableRepeat sets the "repeat" field if the given value is not nil.
func (ssuo *SweepScheduleUpdateOne) SetNillableRepeat(tr *types.ScheduleRepeat) *SweepScheduleUpdateOne {
	if tr != nil {
		ssuo.SetRepeat(*tr)
	}
	return ssuo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ssuo *SweepScheduleUpdateOne) SetUpdater(a *Admin) *SweepScheduleUpdateOne {
	return ssuo.SetUpdaterID(a.ID)
}

// SetSweep sets the "sweep" edge to the Sweep entity.
func (ssuo *SweepScheduleUpdateOne) SetSweep(s *Sweep) *SweepScheduleUpdateOne {
	return ssuo.SetSweepID(s.ID)
}

// AddWorkerIDs adds the "workers" edge to the Admin entity by IDs.
func (ssuo *SweepScheduleUpdateOne) AddWorkerIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.AddWorkerIDs(ids...)
	return ssuo
}

// AddWorkers adds the "workers" edges to the Admin entity.
func (ssuo *SweepScheduleUpdateOne) AddWorkers(a ...*Admin) *SweepScheduleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ssuo.AddWorkerIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (ssuo *SweepScheduleUpdateOne) AddSweepResultIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.AddSweepResultIDs(ids...)
	return ssuo
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (ssuo *SweepScheduleUpdateOne) AddSweepResult(s ...*SweepResult) *SweepScheduleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (ssuo *SweepScheduleUpdateOne) AddSweepResultDetailIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.AddSweepResultDetailIDs(ids...)
	return ssuo
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (ssuo *SweepScheduleUpdateOne) AddSweepResultDetails(s ...*SweepResultDetails) *SweepScheduleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepScheduleMutation object of the builder.
func (ssuo *SweepScheduleUpdateOne) Mutation() *SweepScheduleMutation {
	return ssuo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ssuo *SweepScheduleUpdateOne) ClearUpdater() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearUpdater()
	return ssuo
}

// ClearSweep clears the "sweep" edge to the Sweep entity.
func (ssuo *SweepScheduleUpdateOne) ClearSweep() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearSweep()
	return ssuo
}

// ClearWorkers clears all "workers" edges to the Admin entity.
func (ssuo *SweepScheduleUpdateOne) ClearWorkers() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearWorkers()
	return ssuo
}

// RemoveWorkerIDs removes the "workers" edge to Admin entities by IDs.
func (ssuo *SweepScheduleUpdateOne) RemoveWorkerIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.RemoveWorkerIDs(ids...)
	return ssuo
}

// RemoveWorkers removes "workers" edges to Admin entities.
func (ssuo *SweepScheduleUpdateOne) RemoveWorkers(a ...*Admin) *SweepScheduleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ssuo.RemoveWorkerIDs(ids...)
}

// ClearSweepResult clears all "sweep_result" edges to the SweepResult entity.
func (ssuo *SweepScheduleUpdateOne) ClearSweepResult() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearSweepResult()
	return ssuo
}

// RemoveSweepResultIDs removes the "sweep_result" edge to SweepResult entities by IDs.
func (ssuo *SweepScheduleUpdateOne) RemoveSweepResultIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.RemoveSweepResultIDs(ids...)
	return ssuo
}

// RemoveSweepResult removes "sweep_result" edges to SweepResult entities.
func (ssuo *SweepScheduleUpdateOne) RemoveSweepResult(s ...*SweepResult) *SweepScheduleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveSweepResultIDs(ids...)
}

// ClearSweepResultDetails clears all "sweep_result_details" edges to the SweepResultDetails entity.
func (ssuo *SweepScheduleUpdateOne) ClearSweepResultDetails() *SweepScheduleUpdateOne {
	ssuo.mutation.ClearSweepResultDetails()
	return ssuo
}

// RemoveSweepResultDetailIDs removes the "sweep_result_details" edge to SweepResultDetails entities by IDs.
func (ssuo *SweepScheduleUpdateOne) RemoveSweepResultDetailIDs(ids ...int) *SweepScheduleUpdateOne {
	ssuo.mutation.RemoveSweepResultDetailIDs(ids...)
	return ssuo
}

// RemoveSweepResultDetails removes "sweep_result_details" edges to SweepResultDetails entities.
func (ssuo *SweepScheduleUpdateOne) RemoveSweepResultDetails(s ...*SweepResultDetails) *SweepScheduleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveSweepResultDetailIDs(ids...)
}

// Where appends a list predicates to the SweepScheduleUpdate builder.
func (ssuo *SweepScheduleUpdateOne) Where(ps ...predicate.SweepSchedule) *SweepScheduleUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SweepScheduleUpdateOne) Select(field string, fields ...string) *SweepScheduleUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SweepSchedule entity.
func (ssuo *SweepScheduleUpdateOne) Save(ctx context.Context) (*SweepSchedule, error) {
	if err := ssuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SweepScheduleUpdateOne) SaveX(ctx context.Context) *SweepSchedule {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SweepScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SweepScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SweepScheduleUpdateOne) defaults() error {
	if _, ok := ssuo.mutation.UpdateTime(); !ok {
		if sweepschedule.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepschedule.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweepschedule.UpdateDefaultUpdateTime()
		ssuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SweepScheduleUpdateOne) check() error {
	if v, ok := ssuo.mutation.UpdaterID(); ok {
		if err := sweepschedule.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.updater_id": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.Name(); ok {
		if err := sweepschedule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.name": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.SweepID(); ok {
		if err := sweepschedule.SweepIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.sweep_id": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.ScheduleStatus(); ok {
		if err := sweepschedule.ScheduleStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.schedule_status": %w`, err)}
		}
	}
	if _, ok := ssuo.mutation.CreatorID(); ssuo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.creator"`)
	}
	if _, ok := ssuo.mutation.UpdaterID(); ssuo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.updater"`)
	}
	if _, ok := ssuo.mutation.SweepID(); ssuo.mutation.SweepCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "SweepSchedule.sweep"`)
	}
	return nil
}

func (ssuo *SweepScheduleUpdateOne) sqlSave(ctx context.Context) (_node *SweepSchedule, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sweepschedule.Table, sweepschedule.Columns, sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "SweepSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sweepschedule.FieldID)
		for _, f := range fields {
			if !sweepschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != sweepschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.DeleteTime(); ok {
		_spec.SetField(sweepschedule.FieldDeleteTime, field.TypeTime, value)
	}
	if ssuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(sweepschedule.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ssuo.mutation.UpdateTime(); ok {
		_spec.SetField(sweepschedule.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Name(); ok {
		_spec.SetField(sweepschedule.FieldName, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.ScheduleStatus(); ok {
		_spec.SetField(sweepschedule.FieldScheduleStatus, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedScheduleStatus(); ok {
		_spec.AddField(sweepschedule.FieldScheduleStatus, field.TypeInt, value)
	}
	if ssuo.mutation.ScheduleStatusCleared() {
		_spec.ClearField(sweepschedule.FieldScheduleStatus, field.TypeInt)
	}
	if value, ok := ssuo.mutation.ActionTime(); ok {
		_spec.SetField(sweepschedule.FieldActionTime, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Remind(); ok {
		_spec.SetField(sweepschedule.FieldRemind, field.TypeJSON, value)
	}
	if value, ok := ssuo.mutation.Repeat(); ok {
		_spec.SetField(sweepschedule.FieldRepeat, field.TypeJSON, value)
	}
	if ssuo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SweepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SweepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.WorkersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedWorkersIDs(); len(nodes) > 0 && !ssuo.mutation.WorkersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.WorkersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedSweepResultIDs(); len(nodes) > 0 && !ssuo.mutation.SweepResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedSweepResultDetailsIDs(); len(nodes) > 0 && !ssuo.mutation.SweepResultDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SweepSchedule{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sweepschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
