// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/ipcreportevent"
	"aisecurity/ent/dao/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPCReportEventQuery is the builder for querying IPCReportEvent entities.
type IPCReportEventQuery struct {
	config
	ctx         *QueryContext
	order       []ipcreportevent.OrderOption
	inters      []Interceptor
	predicates  []predicate.IPCReportEvent
	withCreator *AdminQuery
	withUpdater *AdminQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IPCReportEventQuery builder.
func (ireq *IPCReportEventQuery) Where(ps ...predicate.IPCReportEvent) *IPCReportEventQuery {
	ireq.predicates = append(ireq.predicates, ps...)
	return ireq
}

// Limit the number of records to be returned by this query.
func (ireq *IPCReportEventQuery) Limit(limit int) *IPCReportEventQuery {
	ireq.ctx.Limit = &limit
	return ireq
}

// Offset to start from.
func (ireq *IPCReportEventQuery) Offset(offset int) *IPCReportEventQuery {
	ireq.ctx.Offset = &offset
	return ireq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ireq *IPCReportEventQuery) Unique(unique bool) *IPCReportEventQuery {
	ireq.ctx.Unique = &unique
	return ireq
}

// Order specifies how the records should be ordered.
func (ireq *IPCReportEventQuery) Order(o ...ipcreportevent.OrderOption) *IPCReportEventQuery {
	ireq.order = append(ireq.order, o...)
	return ireq
}

// QueryCreator chains the current query on the "creator" edge.
func (ireq *IPCReportEventQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: ireq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ireq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ireq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcreportevent.Table, ipcreportevent.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcreportevent.CreatorTable, ipcreportevent.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ireq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (ireq *IPCReportEventQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: ireq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ireq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ireq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcreportevent.Table, ipcreportevent.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcreportevent.UpdaterTable, ipcreportevent.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ireq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IPCReportEvent entity from the query.
// Returns a *NotFoundError when no IPCReportEvent was found.
func (ireq *IPCReportEventQuery) First(ctx context.Context) (*IPCReportEvent, error) {
	nodes, err := ireq.Limit(1).All(setContextOp(ctx, ireq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ipcreportevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ireq *IPCReportEventQuery) FirstX(ctx context.Context) *IPCReportEvent {
	node, err := ireq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IPCReportEvent ID from the query.
// Returns a *NotFoundError when no IPCReportEvent ID was found.
func (ireq *IPCReportEventQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ireq.Limit(1).IDs(setContextOp(ctx, ireq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ipcreportevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ireq *IPCReportEventQuery) FirstIDX(ctx context.Context) int {
	id, err := ireq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IPCReportEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IPCReportEvent entity is found.
// Returns a *NotFoundError when no IPCReportEvent entities are found.
func (ireq *IPCReportEventQuery) Only(ctx context.Context) (*IPCReportEvent, error) {
	nodes, err := ireq.Limit(2).All(setContextOp(ctx, ireq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ipcreportevent.Label}
	default:
		return nil, &NotSingularError{ipcreportevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ireq *IPCReportEventQuery) OnlyX(ctx context.Context) *IPCReportEvent {
	node, err := ireq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IPCReportEvent ID in the query.
// Returns a *NotSingularError when more than one IPCReportEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (ireq *IPCReportEventQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ireq.Limit(2).IDs(setContextOp(ctx, ireq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ipcreportevent.Label}
	default:
		err = &NotSingularError{ipcreportevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ireq *IPCReportEventQuery) OnlyIDX(ctx context.Context) int {
	id, err := ireq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IPCReportEvents.
func (ireq *IPCReportEventQuery) All(ctx context.Context) ([]*IPCReportEvent, error) {
	ctx = setContextOp(ctx, ireq.ctx, "All")
	if err := ireq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IPCReportEvent, *IPCReportEventQuery]()
	return withInterceptors[[]*IPCReportEvent](ctx, ireq, qr, ireq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ireq *IPCReportEventQuery) AllX(ctx context.Context) []*IPCReportEvent {
	nodes, err := ireq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IPCReportEvent IDs.
func (ireq *IPCReportEventQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ireq.ctx.Unique == nil && ireq.path != nil {
		ireq.Unique(true)
	}
	ctx = setContextOp(ctx, ireq.ctx, "IDs")
	if err = ireq.Select(ipcreportevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ireq *IPCReportEventQuery) IDsX(ctx context.Context) []int {
	ids, err := ireq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ireq *IPCReportEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ireq.ctx, "Count")
	if err := ireq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ireq, querierCount[*IPCReportEventQuery](), ireq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ireq *IPCReportEventQuery) CountX(ctx context.Context) int {
	count, err := ireq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ireq *IPCReportEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ireq.ctx, "Exist")
	switch _, err := ireq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ireq *IPCReportEventQuery) ExistX(ctx context.Context) bool {
	exist, err := ireq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IPCReportEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ireq *IPCReportEventQuery) Clone() *IPCReportEventQuery {
	if ireq == nil {
		return nil
	}
	return &IPCReportEventQuery{
		config:      ireq.config,
		ctx:         ireq.ctx.Clone(),
		order:       append([]ipcreportevent.OrderOption{}, ireq.order...),
		inters:      append([]Interceptor{}, ireq.inters...),
		predicates:  append([]predicate.IPCReportEvent{}, ireq.predicates...),
		withCreator: ireq.withCreator.Clone(),
		withUpdater: ireq.withUpdater.Clone(),
		// clone intermediate query.
		sql:  ireq.sql.Clone(),
		path: ireq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (ireq *IPCReportEventQuery) WithCreator(opts ...func(*AdminQuery)) *IPCReportEventQuery {
	query := (&AdminClient{config: ireq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ireq.withCreator = query
	return ireq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (ireq *IPCReportEventQuery) WithUpdater(opts ...func(*AdminQuery)) *IPCReportEventQuery {
	query := (&AdminClient{config: ireq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ireq.withUpdater = query
	return ireq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IPCReportEvent.Query().
//		GroupBy(ipcreportevent.FieldCreatedAt).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (ireq *IPCReportEventQuery) GroupBy(field string, fields ...string) *IPCReportEventGroupBy {
	ireq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IPCReportEventGroupBy{build: ireq}
	grbuild.flds = &ireq.ctx.Fields
	grbuild.label = ipcreportevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.IPCReportEvent.Query().
//		Select(ipcreportevent.FieldCreatedAt).
//		Scan(ctx, &v)
func (ireq *IPCReportEventQuery) Select(fields ...string) *IPCReportEventSelect {
	ireq.ctx.Fields = append(ireq.ctx.Fields, fields...)
	sbuild := &IPCReportEventSelect{IPCReportEventQuery: ireq}
	sbuild.label = ipcreportevent.Label
	sbuild.flds, sbuild.scan = &ireq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IPCReportEventSelect configured with the given aggregations.
func (ireq *IPCReportEventQuery) Aggregate(fns ...AggregateFunc) *IPCReportEventSelect {
	return ireq.Select().Aggregate(fns...)
}

func (ireq *IPCReportEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ireq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ireq); err != nil {
				return err
			}
		}
	}
	for _, f := range ireq.ctx.Fields {
		if !ipcreportevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if ireq.path != nil {
		prev, err := ireq.path(ctx)
		if err != nil {
			return err
		}
		ireq.sql = prev
	}
	return nil
}

func (ireq *IPCReportEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IPCReportEvent, error) {
	var (
		nodes       = []*IPCReportEvent{}
		_spec       = ireq.querySpec()
		loadedTypes = [2]bool{
			ireq.withCreator != nil,
			ireq.withUpdater != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IPCReportEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IPCReportEvent{config: ireq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ireq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ireq.withCreator; query != nil {
		if err := ireq.loadCreator(ctx, query, nodes, nil,
			func(n *IPCReportEvent, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := ireq.withUpdater; query != nil {
		if err := ireq.loadUpdater(ctx, query, nodes, nil,
			func(n *IPCReportEvent, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ireq *IPCReportEventQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*IPCReportEvent, init func(*IPCReportEvent), assign func(*IPCReportEvent, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCReportEvent)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ireq *IPCReportEventQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*IPCReportEvent, init func(*IPCReportEvent), assign func(*IPCReportEvent, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCReportEvent)
	for i := range nodes {
		fk := nodes[i].UpdatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ireq *IPCReportEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ireq.querySpec()
	_spec.Node.Columns = ireq.ctx.Fields
	if len(ireq.ctx.Fields) > 0 {
		_spec.Unique = ireq.ctx.Unique != nil && *ireq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ireq.driver, _spec)
}

func (ireq *IPCReportEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ipcreportevent.Table, ipcreportevent.Columns, sqlgraph.NewFieldSpec(ipcreportevent.FieldID, field.TypeInt))
	_spec.From = ireq.sql
	if unique := ireq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ireq.path != nil {
		_spec.Unique = true
	}
	if fields := ireq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipcreportevent.FieldID)
		for i := range fields {
			if fields[i] != ipcreportevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ireq.withCreator != nil {
			_spec.Node.AddColumnOnce(ipcreportevent.FieldCreatedBy)
		}
		if ireq.withUpdater != nil {
			_spec.Node.AddColumnOnce(ipcreportevent.FieldUpdatedBy)
		}
	}
	if ps := ireq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ireq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ireq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ireq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ireq *IPCReportEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ireq.driver.Dialect())
	t1 := builder.Table(ipcreportevent.Table)
	columns := ireq.ctx.Fields
	if len(columns) == 0 {
		columns = ipcreportevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ireq.sql != nil {
		selector = ireq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ireq.ctx.Unique != nil && *ireq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ireq.predicates {
		p(selector)
	}
	for _, p := range ireq.order {
		p(selector)
	}
	if offset := ireq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ireq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IPCReportEventGroupBy is the group-by builder for IPCReportEvent entities.
type IPCReportEventGroupBy struct {
	selector
	build *IPCReportEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iregb *IPCReportEventGroupBy) Aggregate(fns ...AggregateFunc) *IPCReportEventGroupBy {
	iregb.fns = append(iregb.fns, fns...)
	return iregb
}

// Scan applies the selector query and scans the result into the given value.
func (iregb *IPCReportEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iregb.build.ctx, "GroupBy")
	if err := iregb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPCReportEventQuery, *IPCReportEventGroupBy](ctx, iregb.build, iregb, iregb.build.inters, v)
}

func (iregb *IPCReportEventGroupBy) sqlScan(ctx context.Context, root *IPCReportEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iregb.fns))
	for _, fn := range iregb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iregb.flds)+len(iregb.fns))
		for _, f := range *iregb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iregb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iregb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IPCReportEventSelect is the builder for selecting fields of IPCReportEvent entities.
type IPCReportEventSelect struct {
	*IPCReportEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ires *IPCReportEventSelect) Aggregate(fns ...AggregateFunc) *IPCReportEventSelect {
	ires.fns = append(ires.fns, fns...)
	return ires
}

// Scan applies the selector query and scans the result into the given value.
func (ires *IPCReportEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ires.ctx, "Select")
	if err := ires.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPCReportEventQuery, *IPCReportEventSelect](ctx, ires.IPCReportEventQuery, ires, ires.inters, v)
}

func (ires *IPCReportEventSelect) sqlScan(ctx context.Context, root *IPCReportEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ires.fns))
	for _, fn := range ires.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ires.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ires.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
