// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/risklocation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RiskLocation is the model entity for the RiskLocation schema.
type RiskLocation struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 标题
	Title string `json:"title" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RiskLocationQuery when eager-loading is set.
	Edges        RiskLocationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RiskLocationEdges holds the relations/edges for other nodes in the graph.
type RiskLocationEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updator holds the value of the updator edge.
	Updator *Admin `json:"updator,omitempty"`
	// RiskRiskLocation holds the value of the risk_risk_location edge.
	RiskRiskLocation []*Risk `json:"risk_risk_location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskLocationEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdatorOrErr returns the Updator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskLocationEdges) UpdatorOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updator, nil
	}
	return nil, &NotLoadedError{edge: "updator"}
}

// RiskRiskLocationOrErr returns the RiskRiskLocation value or an error if the edge
// was not loaded in eager-loading.
func (e RiskLocationEdges) RiskRiskLocationOrErr() ([]*Risk, error) {
	if e.loadedTypes[2] {
		return e.RiskRiskLocation, nil
	}
	return nil, &NotLoadedError{edge: "risk_risk_location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RiskLocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case risklocation.FieldID, risklocation.FieldCreatedBy, risklocation.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case risklocation.FieldTitle:
			values[i] = new(sql.NullString)
		case risklocation.FieldCreatedAt, risklocation.FieldDeletedAt, risklocation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RiskLocation fields.
func (rl *RiskLocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case risklocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case risklocation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rl.CreatedAt = value.Time
			}
		case risklocation.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				rl.CreatedBy = int(value.Int64)
			}
		case risklocation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rl.DeletedAt = new(time.Time)
				*rl.DeletedAt = value.Time
			}
		case risklocation.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				rl.UpdatedBy = int(value.Int64)
			}
		case risklocation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rl.UpdatedAt = value.Time
			}
		case risklocation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rl.Title = value.String
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RiskLocation.
// This includes values selected through modifiers, order, etc.
func (rl *RiskLocation) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the RiskLocation entity.
func (rl *RiskLocation) QueryCreator() *AdminQuery {
	return NewRiskLocationClient(rl.config).QueryCreator(rl)
}

// QueryUpdator queries the "updator" edge of the RiskLocation entity.
func (rl *RiskLocation) QueryUpdator() *AdminQuery {
	return NewRiskLocationClient(rl.config).QueryUpdator(rl)
}

// QueryRiskRiskLocation queries the "risk_risk_location" edge of the RiskLocation entity.
func (rl *RiskLocation) QueryRiskRiskLocation() *RiskQuery {
	return NewRiskLocationClient(rl.config).QueryRiskRiskLocation(rl)
}

// Update returns a builder for updating this RiskLocation.
// Note that you need to call RiskLocation.Unwrap() before calling this method if this RiskLocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *RiskLocation) Update() *RiskLocationUpdateOne {
	return NewRiskLocationClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the RiskLocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *RiskLocation) Unwrap() *RiskLocation {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("dao: RiskLocation is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *RiskLocation) String() string {
	var builder strings.Builder
	builder.WriteString("RiskLocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", rl.CreatedBy))
	builder.WriteString(", ")
	if v := rl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", rl.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rl.Title)
	builder.WriteByte(')')
	return builder.String()
}

// RiskLocations is a parsable slice of RiskLocation.
type RiskLocations []*RiskLocation
