// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepScheduleQuery is the builder for querying SweepSchedule entities.
type SweepScheduleQuery struct {
	config
	ctx                    *QueryContext
	order                  []sweepschedule.OrderOption
	inters                 []Interceptor
	predicates             []predicate.SweepSchedule
	withCreator            *AdminQuery
	withUpdater            *AdminQuery
	withSweep              *SweepQuery
	withWorkers            *AdminQuery
	withSweepResult        *SweepResultQuery
	withSweepResultDetails *SweepResultDetailsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SweepScheduleQuery builder.
func (ssq *SweepScheduleQuery) Where(ps ...predicate.SweepSchedule) *SweepScheduleQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit the number of records to be returned by this query.
func (ssq *SweepScheduleQuery) Limit(limit int) *SweepScheduleQuery {
	ssq.ctx.Limit = &limit
	return ssq
}

// Offset to start from.
func (ssq *SweepScheduleQuery) Offset(offset int) *SweepScheduleQuery {
	ssq.ctx.Offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *SweepScheduleQuery) Unique(unique bool) *SweepScheduleQuery {
	ssq.ctx.Unique = &unique
	return ssq
}

// Order specifies how the records should be ordered.
func (ssq *SweepScheduleQuery) Order(o ...sweepschedule.OrderOption) *SweepScheduleQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryCreator chains the current query on the "creator" edge.
func (ssq *SweepScheduleQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.CreatorTable, sweepschedule.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (ssq *SweepScheduleQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.UpdaterTable, sweepschedule.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweep chains the current query on the "sweep" edge.
func (ssq *SweepScheduleQuery) QuerySweep() *SweepQuery {
	query := (&SweepClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.SweepTable, sweepschedule.SweepColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkers chains the current query on the "workers" edge.
func (ssq *SweepScheduleQuery) QueryWorkers() *AdminQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sweepschedule.WorkersTable, sweepschedule.WorkersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweepResult chains the current query on the "sweep_result" edge.
func (ssq *SweepScheduleQuery) QuerySweepResult() *SweepResultQuery {
	query := (&SweepResultClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweepschedule.SweepResultTable, sweepschedule.SweepResultColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweepResultDetails chains the current query on the "sweep_result_details" edge.
func (ssq *SweepScheduleQuery) QuerySweepResultDetails() *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, selector),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweepschedule.SweepResultDetailsTable, sweepschedule.SweepResultDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SweepSchedule entity from the query.
// Returns a *NotFoundError when no SweepSchedule was found.
func (ssq *SweepScheduleQuery) First(ctx context.Context) (*SweepSchedule, error) {
	nodes, err := ssq.Limit(1).All(setContextOp(ctx, ssq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sweepschedule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *SweepScheduleQuery) FirstX(ctx context.Context) *SweepSchedule {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SweepSchedule ID from the query.
// Returns a *NotFoundError when no SweepSchedule ID was found.
func (ssq *SweepScheduleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ssq.Limit(1).IDs(setContextOp(ctx, ssq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sweepschedule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *SweepScheduleQuery) FirstIDX(ctx context.Context) int {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SweepSchedule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SweepSchedule entity is found.
// Returns a *NotFoundError when no SweepSchedule entities are found.
func (ssq *SweepScheduleQuery) Only(ctx context.Context) (*SweepSchedule, error) {
	nodes, err := ssq.Limit(2).All(setContextOp(ctx, ssq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sweepschedule.Label}
	default:
		return nil, &NotSingularError{sweepschedule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *SweepScheduleQuery) OnlyX(ctx context.Context) *SweepSchedule {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SweepSchedule ID in the query.
// Returns a *NotSingularError when more than one SweepSchedule ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *SweepScheduleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ssq.Limit(2).IDs(setContextOp(ctx, ssq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sweepschedule.Label}
	default:
		err = &NotSingularError{sweepschedule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *SweepScheduleQuery) OnlyIDX(ctx context.Context) int {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SweepSchedules.
func (ssq *SweepScheduleQuery) All(ctx context.Context) ([]*SweepSchedule, error) {
	ctx = setContextOp(ctx, ssq.ctx, "All")
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SweepSchedule, *SweepScheduleQuery]()
	return withInterceptors[[]*SweepSchedule](ctx, ssq, qr, ssq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssq *SweepScheduleQuery) AllX(ctx context.Context) []*SweepSchedule {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SweepSchedule IDs.
func (ssq *SweepScheduleQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ssq.ctx.Unique == nil && ssq.path != nil {
		ssq.Unique(true)
	}
	ctx = setContextOp(ctx, ssq.ctx, "IDs")
	if err = ssq.Select(sweepschedule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *SweepScheduleQuery) IDsX(ctx context.Context) []int {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *SweepScheduleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ssq.ctx, "Count")
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssq, querierCount[*SweepScheduleQuery](), ssq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *SweepScheduleQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *SweepScheduleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ssq.ctx, "Exist")
	switch _, err := ssq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *SweepScheduleQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SweepScheduleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *SweepScheduleQuery) Clone() *SweepScheduleQuery {
	if ssq == nil {
		return nil
	}
	return &SweepScheduleQuery{
		config:                 ssq.config,
		ctx:                    ssq.ctx.Clone(),
		order:                  append([]sweepschedule.OrderOption{}, ssq.order...),
		inters:                 append([]Interceptor{}, ssq.inters...),
		predicates:             append([]predicate.SweepSchedule{}, ssq.predicates...),
		withCreator:            ssq.withCreator.Clone(),
		withUpdater:            ssq.withUpdater.Clone(),
		withSweep:              ssq.withSweep.Clone(),
		withWorkers:            ssq.withWorkers.Clone(),
		withSweepResult:        ssq.withSweepResult.Clone(),
		withSweepResultDetails: ssq.withSweepResultDetails.Clone(),
		// clone intermediate query.
		sql:  ssq.sql.Clone(),
		path: ssq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithCreator(opts ...func(*AdminQuery)) *SweepScheduleQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withCreator = query
	return ssq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithUpdater(opts ...func(*AdminQuery)) *SweepScheduleQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withUpdater = query
	return ssq
}

// WithSweep tells the query-builder to eager-load the nodes that are connected to
// the "sweep" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithSweep(opts ...func(*SweepQuery)) *SweepScheduleQuery {
	query := (&SweepClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSweep = query
	return ssq
}

// WithWorkers tells the query-builder to eager-load the nodes that are connected to
// the "workers" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithWorkers(opts ...func(*AdminQuery)) *SweepScheduleQuery {
	query := (&AdminClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withWorkers = query
	return ssq
}

// WithSweepResult tells the query-builder to eager-load the nodes that are connected to
// the "sweep_result" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithSweepResult(opts ...func(*SweepResultQuery)) *SweepScheduleQuery {
	query := (&SweepResultClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSweepResult = query
	return ssq
}

// WithSweepResultDetails tells the query-builder to eager-load the nodes that are connected to
// the "sweep_result_details" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SweepScheduleQuery) WithSweepResultDetails(opts ...func(*SweepResultDetailsQuery)) *SweepScheduleQuery {
	query := (&SweepResultDetailsClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSweepResultDetails = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SweepSchedule.Query().
//		GroupBy(sweepschedule.FieldCreateTime).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (ssq *SweepScheduleQuery) GroupBy(field string, fields ...string) *SweepScheduleGroupBy {
	ssq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SweepScheduleGroupBy{build: ssq}
	grbuild.flds = &ssq.ctx.Fields
	grbuild.label = sweepschedule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.SweepSchedule.Query().
//		Select(sweepschedule.FieldCreateTime).
//		Scan(ctx, &v)
func (ssq *SweepScheduleQuery) Select(fields ...string) *SweepScheduleSelect {
	ssq.ctx.Fields = append(ssq.ctx.Fields, fields...)
	sbuild := &SweepScheduleSelect{SweepScheduleQuery: ssq}
	sbuild.label = sweepschedule.Label
	sbuild.flds, sbuild.scan = &ssq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SweepScheduleSelect configured with the given aggregations.
func (ssq *SweepScheduleQuery) Aggregate(fns ...AggregateFunc) *SweepScheduleSelect {
	return ssq.Select().Aggregate(fns...)
}

func (ssq *SweepScheduleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssq.ctx.Fields {
		if !sweepschedule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *SweepScheduleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SweepSchedule, error) {
	var (
		nodes       = []*SweepSchedule{}
		_spec       = ssq.querySpec()
		loadedTypes = [6]bool{
			ssq.withCreator != nil,
			ssq.withUpdater != nil,
			ssq.withSweep != nil,
			ssq.withWorkers != nil,
			ssq.withSweepResult != nil,
			ssq.withSweepResultDetails != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SweepSchedule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SweepSchedule{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withCreator; query != nil {
		if err := ssq.loadCreator(ctx, query, nodes, nil,
			func(n *SweepSchedule, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withUpdater; query != nil {
		if err := ssq.loadUpdater(ctx, query, nodes, nil,
			func(n *SweepSchedule, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSweep; query != nil {
		if err := ssq.loadSweep(ctx, query, nodes, nil,
			func(n *SweepSchedule, e *Sweep) { n.Edges.Sweep = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withWorkers; query != nil {
		if err := ssq.loadWorkers(ctx, query, nodes,
			func(n *SweepSchedule) { n.Edges.Workers = []*Admin{} },
			func(n *SweepSchedule, e *Admin) { n.Edges.Workers = append(n.Edges.Workers, e) }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSweepResult; query != nil {
		if err := ssq.loadSweepResult(ctx, query, nodes,
			func(n *SweepSchedule) { n.Edges.SweepResult = []*SweepResult{} },
			func(n *SweepSchedule, e *SweepResult) { n.Edges.SweepResult = append(n.Edges.SweepResult, e) }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSweepResultDetails; query != nil {
		if err := ssq.loadSweepResultDetails(ctx, query, nodes,
			func(n *SweepSchedule) { n.Edges.SweepResultDetails = []*SweepResultDetails{} },
			func(n *SweepSchedule, e *SweepResultDetails) {
				n.Edges.SweepResultDetails = append(n.Edges.SweepResultDetails, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *SweepScheduleQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepSchedule)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SweepScheduleQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepSchedule)
	for i := range nodes {
		fk := nodes[i].UpdaterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updater_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SweepScheduleQuery) loadSweep(ctx context.Context, query *SweepQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *Sweep)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepSchedule)
	for i := range nodes {
		fk := nodes[i].SweepID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sweep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sweep_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SweepScheduleQuery) loadWorkers(ctx context.Context, query *AdminQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *Admin)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*SweepSchedule)
	nids := make(map[int]map[*SweepSchedule]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(sweepschedule.WorkersTable)
		s.Join(joinT).On(s.C(admin.FieldID), joinT.C(sweepschedule.WorkersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(sweepschedule.WorkersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(sweepschedule.WorkersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*SweepSchedule]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Admin](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "workers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ssq *SweepScheduleQuery) loadSweepResult(ctx context.Context, query *SweepResultQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *SweepResult)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*SweepSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sweepresult.FieldSweepScheduleID)
	}
	query.Where(predicate.SweepResult(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sweepschedule.SweepResultColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SweepScheduleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "sweep_schedule_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ssq *SweepScheduleQuery) loadSweepResultDetails(ctx context.Context, query *SweepResultDetailsQuery, nodes []*SweepSchedule, init func(*SweepSchedule), assign func(*SweepSchedule, *SweepResultDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*SweepSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sweepresultdetails.FieldSweepScheduleID)
	}
	query.Where(predicate.SweepResultDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sweepschedule.SweepResultDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SweepScheduleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "sweep_schedule_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ssq *SweepScheduleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	_spec.Node.Columns = ssq.ctx.Fields
	if len(ssq.ctx.Fields) > 0 {
		_spec.Unique = ssq.ctx.Unique != nil && *ssq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *SweepScheduleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sweepschedule.Table, sweepschedule.Columns, sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt))
	_spec.From = ssq.sql
	if unique := ssq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ssq.path != nil {
		_spec.Unique = true
	}
	if fields := ssq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sweepschedule.FieldID)
		for i := range fields {
			if fields[i] != sweepschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ssq.withCreator != nil {
			_spec.Node.AddColumnOnce(sweepschedule.FieldCreatorID)
		}
		if ssq.withUpdater != nil {
			_spec.Node.AddColumnOnce(sweepschedule.FieldUpdaterID)
		}
		if ssq.withSweep != nil {
			_spec.Node.AddColumnOnce(sweepschedule.FieldSweepID)
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *SweepScheduleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(sweepschedule.Table)
	columns := ssq.ctx.Fields
	if len(columns) == 0 {
		columns = sweepschedule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.ctx.Unique != nil && *ssq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SweepScheduleGroupBy is the group-by builder for SweepSchedule entities.
type SweepScheduleGroupBy struct {
	selector
	build *SweepScheduleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *SweepScheduleGroupBy) Aggregate(fns ...AggregateFunc) *SweepScheduleGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssgb *SweepScheduleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssgb.build.ctx, "GroupBy")
	if err := ssgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SweepScheduleQuery, *SweepScheduleGroupBy](ctx, ssgb.build, ssgb, ssgb.build.inters, v)
}

func (ssgb *SweepScheduleGroupBy) sqlScan(ctx context.Context, root *SweepScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssgb.flds)+len(ssgb.fns))
		for _, f := range *ssgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SweepScheduleSelect is the builder for selecting fields of SweepSchedule entities.
type SweepScheduleSelect struct {
	*SweepScheduleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sss *SweepScheduleSelect) Aggregate(fns ...AggregateFunc) *SweepScheduleSelect {
	sss.fns = append(sss.fns, fns...)
	return sss
}

// Scan applies the selector query and scans the result into the given value.
func (sss *SweepScheduleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sss.ctx, "Select")
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SweepScheduleQuery, *SweepScheduleSelect](ctx, sss.SweepScheduleQuery, sss, sss.inters, v)
}

func (sss *SweepScheduleSelect) sqlScan(ctx context.Context, root *SweepScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sss.fns))
	for _, fn := range sss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
