// Code generated by ent, DO NOT EDIT.

package device

import (
	"aisecurity/enums"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldDeviceType holds the string denoting the device_type field in the database.
	FieldDeviceType = "device_type"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdater holds the string denoting the updater edge name in mutations.
	EdgeUpdater = "updater"
	// EdgeIpcEventDevice holds the string denoting the ipc_event_device edge name in mutations.
	EdgeIpcEventDevice = "ipc_event_device"
	// EdgeDeviceInstallationDevice holds the string denoting the device_installation_device edge name in mutations.
	EdgeDeviceInstallationDevice = "device_installation_device"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "devices"
	// CreatorInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	CreatorInverseTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// UpdaterTable is the table that holds the updater relation/edge.
	UpdaterTable = "devices"
	// UpdaterInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	UpdaterInverseTable = "admins"
	// UpdaterColumn is the table column denoting the updater relation/edge.
	UpdaterColumn = "updated_by"
	// IpcEventDeviceTable is the table that holds the ipc_event_device relation/edge.
	IpcEventDeviceTable = "ipc_events"
	// IpcEventDeviceInverseTable is the table name for the IPCEvent entity.
	// It exists in this package in order to avoid circular dependency with the "ipcevent" package.
	IpcEventDeviceInverseTable = "ipc_events"
	// IpcEventDeviceColumn is the table column denoting the ipc_event_device relation/edge.
	IpcEventDeviceColumn = "device_id"
	// DeviceInstallationDeviceTable is the table that holds the device_installation_device relation/edge.
	DeviceInstallationDeviceTable = "device_installations"
	// DeviceInstallationDeviceInverseTable is the table name for the DeviceInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinstallation" package.
	DeviceInstallationDeviceInverseTable = "device_installations"
	// DeviceInstallationDeviceColumn is the table column denoting the device_installation_device relation/edge.
	DeviceInstallationDeviceColumn = "device_id"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldDeletedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldBrand,
	FieldModel,
	FieldName,
	FieldSn,
	FieldDeviceType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBrand holds the default value on creation for the "brand" field.
	DefaultBrand enums.DeviceBrand
	// BrandValidator is a validator for the "brand" field. It is called by the builders before save.
	BrandValidator func(int) error
	// DefaultModel holds the default value on creation for the "model" field.
	DefaultModel enums.DeviceModel
	// ModelValidator is a validator for the "model" field. It is called by the builders before save.
	ModelValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SnValidator is a validator for the "sn" field. It is called by the builders before save.
	SnValidator func(string) error
	// DefaultDeviceType holds the default value on creation for the "device_type" field.
	DefaultDeviceType enums.DeviceType
	// DeviceTypeValidator is a validator for the "device_type" field. It is called by the builders before save.
	DeviceTypeValidator func(int) error
)

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByDeviceType orders the results by the device_type field.
func ByDeviceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceType, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdaterField orders the results by updater field.
func ByUpdaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdaterStep(), sql.OrderByField(field, opts...))
	}
}

// ByIpcEventDeviceCount orders the results by ipc_event_device count.
func ByIpcEventDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIpcEventDeviceStep(), opts...)
	}
}

// ByIpcEventDevice orders the results by ipc_event_device terms.
func ByIpcEventDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIpcEventDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInstallationDeviceCount orders the results by device_installation_device count.
func ByDeviceInstallationDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInstallationDeviceStep(), opts...)
	}
}

// ByDeviceInstallationDevice orders the results by device_installation_device terms.
func ByDeviceInstallationDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInstallationDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
	)
}
func newIpcEventDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IpcEventDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IpcEventDeviceTable, IpcEventDeviceColumn),
	)
}
func newDeviceInstallationDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInstallationDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceInstallationDeviceTable, DeviceInstallationDeviceColumn),
	)
}
