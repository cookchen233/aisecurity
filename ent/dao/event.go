// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建者
	CreatorID int `json:"creator_id,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 最后更新者
	UpdaterID int `json:"updater_id,omitempty"`
	// 最后更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 设备ID
	DeviceID int `json:"device_id,omitempty" validate:"required"`
	// 视频ID
	VideoID int `json:"video_id,omitempty"`
	// 事件发生时间
	EventTime time.Time `json:"event_time,omitempty" validate:"required"`
	// 事件类型
	EventType enums.EventType `json:"event_type,omitempty" validate:"required"`
	// 事件状态
	EventStatus enums.EventStatus `json:"event_status,omitempty"`
	// 图片
	Images []*types.UploadedImage `json:"images,omitempty" validate:"required"`
	// 标记的图片
	LabeledImages []*types.UploadedImage `json:"labeled_images,omitempty"`
	// 请求数据ID
	DataID string `json:"data_id,omitempty" validate:"required"`
	// 描述
	Description string `json:"description,omitempty"`
	// 设备商原始上报数据
	RawData string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues

	EventTypeLabel        string `json:"event_type_label"`
	EventStatusLabel      string `json:"event_status_label"`
	Location              string `json:"location"`
	LocationWithAliasName string `json:"location_with_alias_name"`
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// Fixing holds the value of the fixing edge.
	Fixing *Fixing `json:"fixing,omitempty"`
	// EventLog holds the value of the event_log edge.
	EventLog []*EventLog `json:"event_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) VideoOrErr() (*Video, error) {
	if e.loadedTypes[2] {
		if e.Video == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: video.Label}
		}
		return e.Video, nil
	}
	return nil, &NotLoadedError{edge: "video"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[3] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// FixingOrErr returns the Fixing value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) FixingOrErr() (*Fixing, error) {
	if e.loadedTypes[4] {
		if e.Fixing == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fixing.Label}
		}
		return e.Fixing, nil
	}
	return nil, &NotLoadedError{edge: "fixing"}
}

// EventLogOrErr returns the EventLog value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) EventLogOrErr() ([]*EventLog, error) {
	if e.loadedTypes[5] {
		return e.EventLog, nil
	}
	return nil, &NotLoadedError{edge: "event_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldImages, event.FieldLabeledImages:
			values[i] = new([]byte)
		case event.FieldID, event.FieldCreatorID, event.FieldUpdaterID, event.FieldDeviceID, event.FieldVideoID, event.FieldEventType, event.FieldEventStatus:
			values[i] = new(sql.NullInt64)
		case event.FieldDataID, event.FieldDescription, event.FieldRawData:
			values[i] = new(sql.NullString)
		case event.FieldCreateTime, event.FieldDeleteTime, event.FieldUpdateTime, event.FieldEventTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case event.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				e.CreatorID = int(value.Int64)
			}
		case event.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				e.DeleteTime = new(time.Time)
				*e.DeleteTime = value.Time
			}
		case event.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				e.UpdaterID = int(value.Int64)
			}
		case event.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = value.Time
			}
		case event.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				e.DeviceID = int(value.Int64)
			}
		case event.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				e.VideoID = int(value.Int64)
			}
		case event.FieldEventTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_time", values[i])
			} else if value.Valid {
				e.EventTime = value.Time
			}
		case event.FieldEventType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				e.EventType = enums.EventType(value.Int64)
			}
		case event.FieldEventStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_status", values[i])
			} else if value.Valid {
				e.EventStatus = enums.EventStatus(value.Int64)
			}
		case event.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case event.FieldLabeledImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labeled_images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LabeledImages); err != nil {
					return fmt.Errorf("unmarshal field labeled_images: %w", err)
				}
			}
		case event.FieldDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_id", values[i])
			} else if value.Valid {
				e.DataID = value.String
			}
		case event.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case event.FieldRawData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_data", values[i])
			} else if value.Valid {
				e.RawData = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Event entity.
func (e *Event) QueryCreator() *AdminQuery {
	return NewEventClient(e.config).QueryCreator(e)
}

// QueryUpdater queries the "updater" edge of the Event entity.
func (e *Event) QueryUpdater() *AdminQuery {
	return NewEventClient(e.config).QueryUpdater(e)
}

// QueryVideo queries the "video" edge of the Event entity.
func (e *Event) QueryVideo() *VideoQuery {
	return NewEventClient(e.config).QueryVideo(e)
}

// QueryDevice queries the "device" edge of the Event entity.
func (e *Event) QueryDevice() *DeviceQuery {
	return NewEventClient(e.config).QueryDevice(e)
}

// QueryFixing queries the "fixing" edge of the Event entity.
func (e *Event) QueryFixing() *FixingQuery {
	return NewEventClient(e.config).QueryFixing(e)
}

// QueryEventLog queries the "event_log" edge of the Event entity.
func (e *Event) QueryEventLog() *EventLogQuery {
	return NewEventClient(e.config).QueryEventLog(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("dao: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatorID))
	builder.WriteString(", ")
	if v := e.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", e.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", e.VideoID))
	builder.WriteString(", ")
	builder.WriteString("event_time=")
	builder.WriteString(e.EventTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", e.EventType))
	builder.WriteString(", ")
	builder.WriteString("event_status=")
	builder.WriteString(fmt.Sprintf("%v", e.EventStatus))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", e.Images))
	builder.WriteString(", ")
	builder.WriteString("labeled_images=")
	builder.WriteString(fmt.Sprintf("%v", e.LabeledImages))
	builder.WriteString(", ")
	builder.WriteString("data_id=")
	builder.WriteString(e.DataID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("raw_data=")
	builder.WriteString(e.RawData)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
