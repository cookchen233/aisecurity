// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AdminRole is the model entity for the AdminRole schema.
type AdminRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 名称
	Name string `json:"name"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminRoleQuery when eager-loading is set.
	Edges        AdminRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminRoleEdges holds the relations/edges for other nodes in the graph.
type AdminRoleEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updator holds the value of the updator edge.
	Updator *Admin `json:"updator,omitempty"`
	// Admins holds the value of the admins edge.
	Admins []*Admin `json:"admins,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminRoleEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdatorOrErr returns the Updator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminRoleEdges) UpdatorOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updator, nil
	}
	return nil, &NotLoadedError{edge: "updator"}
}

// AdminsOrErr returns the Admins value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRoleEdges) AdminsOrErr() ([]*Admin, error) {
	if e.loadedTypes[2] {
		return e.Admins, nil
	}
	return nil, &NotLoadedError{edge: "admins"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminrole.FieldID, adminrole.FieldCreatedBy, adminrole.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case adminrole.FieldName:
			values[i] = new(sql.NullString)
		case adminrole.FieldCreatedAt, adminrole.FieldDeletedAt, adminrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminRole fields.
func (ar *AdminRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case adminrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case adminrole.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ar.CreatedBy = int(value.Int64)
			}
		case adminrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case adminrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ar.DeletedAt = new(time.Time)
				*ar.DeletedAt = value.Time
			}
		case adminrole.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ar.UpdatedBy = int(value.Int64)
			}
		case adminrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminRole.
// This includes values selected through modifiers, order, etc.
func (ar *AdminRole) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the AdminRole entity.
func (ar *AdminRole) QueryCreator() *AdminQuery {
	return NewAdminRoleClient(ar.config).QueryCreator(ar)
}

// QueryUpdator queries the "updator" edge of the AdminRole entity.
func (ar *AdminRole) QueryUpdator() *AdminQuery {
	return NewAdminRoleClient(ar.config).QueryUpdator(ar)
}

// QueryAdmins queries the "admins" edge of the AdminRole entity.
func (ar *AdminRole) QueryAdmins() *AdminQuery {
	return NewAdminRoleClient(ar.config).QueryAdmins(ar)
}

// Update returns a builder for updating this AdminRole.
// Note that you need to call AdminRole.Unwrap() before calling this method if this AdminRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AdminRole) Update() *AdminRoleUpdateOne {
	return NewAdminRoleClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AdminRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AdminRole) Unwrap() *AdminRole {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("dao: AdminRole is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AdminRole) String() string {
	var builder strings.Builder
	builder.WriteString("AdminRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ar.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", ")
	if v := ar.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ar.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminRoles is a parsable slice of AdminRole.
type AdminRoles []*AdminRole
