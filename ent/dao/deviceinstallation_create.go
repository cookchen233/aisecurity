// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceInstallationCreate is the builder for creating a DeviceInstallation entity.
type DeviceInstallationCreate struct {
	config
	mutation *DeviceInstallationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dic *DeviceInstallationCreate) SetCreateTime(t time.Time) *DeviceInstallationCreate {
	dic.mutation.SetCreateTime(t)
	return dic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableCreateTime(t *time.Time) *DeviceInstallationCreate {
	if t != nil {
		dic.SetCreateTime(*t)
	}
	return dic
}

// SetCreatorID sets the "creator_id" field.
func (dic *DeviceInstallationCreate) SetCreatorID(i int) *DeviceInstallationCreate {
	dic.mutation.SetCreatorID(i)
	return dic
}

// SetDeleteTime sets the "delete_time" field.
func (dic *DeviceInstallationCreate) SetDeleteTime(t time.Time) *DeviceInstallationCreate {
	dic.mutation.SetDeleteTime(t)
	return dic
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableDeleteTime(t *time.Time) *DeviceInstallationCreate {
	if t != nil {
		dic.SetDeleteTime(*t)
	}
	return dic
}

// SetUpdaterID sets the "updater_id" field.
func (dic *DeviceInstallationCreate) SetUpdaterID(i int) *DeviceInstallationCreate {
	dic.mutation.SetUpdaterID(i)
	return dic
}

// SetUpdateTime sets the "update_time" field.
func (dic *DeviceInstallationCreate) SetUpdateTime(t time.Time) *DeviceInstallationCreate {
	dic.mutation.SetUpdateTime(t)
	return dic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableUpdateTime(t *time.Time) *DeviceInstallationCreate {
	if t != nil {
		dic.SetUpdateTime(*t)
	}
	return dic
}

// SetDeviceID sets the "device_id" field.
func (dic *DeviceInstallationCreate) SetDeviceID(i int) *DeviceInstallationCreate {
	dic.mutation.SetDeviceID(i)
	return dic
}

// SetAreaID sets the "area_id" field.
func (dic *DeviceInstallationCreate) SetAreaID(i int) *DeviceInstallationCreate {
	dic.mutation.SetAreaID(i)
	return dic
}

// SetAliasName sets the "alias_name" field.
func (dic *DeviceInstallationCreate) SetAliasName(s string) *DeviceInstallationCreate {
	dic.mutation.SetAliasName(s)
	return dic
}

// SetNillableAliasName sets the "alias_name" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableAliasName(s *string) *DeviceInstallationCreate {
	if s != nil {
		dic.SetAliasName(*s)
	}
	return dic
}

// SetLongitude sets the "longitude" field.
func (dic *DeviceInstallationCreate) SetLongitude(f float64) *DeviceInstallationCreate {
	dic.mutation.SetLongitude(f)
	return dic
}

// SetLatitude sets the "latitude" field.
func (dic *DeviceInstallationCreate) SetLatitude(f float64) *DeviceInstallationCreate {
	dic.mutation.SetLatitude(f)
	return dic
}

// SetLocationData sets the "location_data" field.
func (dic *DeviceInstallationCreate) SetLocationData(s string) *DeviceInstallationCreate {
	dic.mutation.SetLocationData(s)
	return dic
}

// SetNillableLocationData sets the "location_data" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableLocationData(s *string) *DeviceInstallationCreate {
	if s != nil {
		dic.SetLocationData(*s)
	}
	return dic
}

// SetLocation sets the "location" field.
func (dic *DeviceInstallationCreate) SetLocation(s string) *DeviceInstallationCreate {
	dic.mutation.SetLocation(s)
	return dic
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableLocation(s *string) *DeviceInstallationCreate {
	if s != nil {
		dic.SetLocation(*s)
	}
	return dic
}

// SetInstaller sets the "installer" field.
func (dic *DeviceInstallationCreate) SetInstaller(s string) *DeviceInstallationCreate {
	dic.mutation.SetInstaller(s)
	return dic
}

// SetNillableInstaller sets the "installer" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableInstaller(s *string) *DeviceInstallationCreate {
	if s != nil {
		dic.SetInstaller(*s)
	}
	return dic
}

// SetInstallTime sets the "install_time" field.
func (dic *DeviceInstallationCreate) SetInstallTime(t time.Time) *DeviceInstallationCreate {
	dic.mutation.SetInstallTime(t)
	return dic
}

// SetNillableInstallTime sets the "install_time" field if the given value is not nil.
func (dic *DeviceInstallationCreate) SetNillableInstallTime(t *time.Time) *DeviceInstallationCreate {
	if t != nil {
		dic.SetInstallTime(*t)
	}
	return dic
}

// SetCreator sets the "creator" edge to the Admin entity.
func (dic *DeviceInstallationCreate) SetCreator(a *Admin) *DeviceInstallationCreate {
	return dic.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (dic *DeviceInstallationCreate) SetUpdater(a *Admin) *DeviceInstallationCreate {
	return dic.SetUpdaterID(a.ID)
}

// SetArea sets the "area" edge to the Area entity.
func (dic *DeviceInstallationCreate) SetArea(a *Area) *DeviceInstallationCreate {
	return dic.SetAreaID(a.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (dic *DeviceInstallationCreate) SetDevice(d *Device) *DeviceInstallationCreate {
	return dic.SetDeviceID(d.ID)
}

// Mutation returns the DeviceInstallationMutation object of the builder.
func (dic *DeviceInstallationCreate) Mutation() *DeviceInstallationMutation {
	return dic.mutation
}

// Save creates the DeviceInstallation in the database.
func (dic *DeviceInstallationCreate) Save(ctx context.Context) (*DeviceInstallation, error) {
	if err := dic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeviceInstallationCreate) SaveX(ctx context.Context) *DeviceInstallation {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeviceInstallationCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeviceInstallationCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DeviceInstallationCreate) defaults() error {
	if _, ok := dic.mutation.CreateTime(); !ok {
		if deviceinstallation.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized deviceinstallation.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := deviceinstallation.DefaultCreateTime()
		dic.mutation.SetCreateTime(v)
	}
	if _, ok := dic.mutation.UpdateTime(); !ok {
		if deviceinstallation.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized deviceinstallation.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := deviceinstallation.DefaultUpdateTime()
		dic.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeviceInstallationCreate) check() error {
	if _, ok := dic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "DeviceInstallation.create_time"`)}
	}
	if _, ok := dic.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "DeviceInstallation.creator_id"`)}
	}
	if v, ok := dic.mutation.CreatorID(); ok {
		if err := deviceinstallation.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "DeviceInstallation.creator_id": %w`, err)}
		}
	}
	if _, ok := dic.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "DeviceInstallation.updater_id"`)}
	}
	if v, ok := dic.mutation.UpdaterID(); ok {
		if err := deviceinstallation.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "DeviceInstallation.updater_id": %w`, err)}
		}
	}
	if _, ok := dic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "DeviceInstallation.update_time"`)}
	}
	if _, ok := dic.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "DeviceInstallation.device_id"`)}
	}
	if v, ok := dic.mutation.DeviceID(); ok {
		if err := deviceinstallation.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "DeviceInstallation.device_id": %w`, err)}
		}
	}
	if _, ok := dic.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area_id", err: errors.New(`dao: missing required field "DeviceInstallation.area_id"`)}
	}
	if v, ok := dic.mutation.AreaID(); ok {
		if err := deviceinstallation.AreaIDValidator(v); err != nil {
			return &ValidationError{Name: "area_id", err: fmt.Errorf(`dao: validator failed for field "DeviceInstallation.area_id": %w`, err)}
		}
	}
	if v, ok := dic.mutation.AliasName(); ok {
		if err := deviceinstallation.AliasNameValidator(v); err != nil {
			return &ValidationError{Name: "alias_name", err: fmt.Errorf(`dao: validator failed for field "DeviceInstallation.alias_name": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`dao: missing required field "DeviceInstallation.longitude"`)}
	}
	if _, ok := dic.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`dao: missing required field "DeviceInstallation.latitude"`)}
	}
	if _, ok := dic.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "DeviceInstallation.creator"`)}
	}
	if _, ok := dic.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "DeviceInstallation.updater"`)}
	}
	if _, ok := dic.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`dao: missing required edge "DeviceInstallation.area"`)}
	}
	if _, ok := dic.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`dao: missing required edge "DeviceInstallation.device"`)}
	}
	return nil
}

func (dic *DeviceInstallationCreate) sqlSave(ctx context.Context) (*DeviceInstallation, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DeviceInstallationCreate) createSpec() (*DeviceInstallation, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceInstallation{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(deviceinstallation.Table, sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt))
	)
	if value, ok := dic.mutation.CreateTime(); ok {
		_spec.SetField(deviceinstallation.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dic.mutation.DeleteTime(); ok {
		_spec.SetField(deviceinstallation.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := dic.mutation.UpdateTime(); ok {
		_spec.SetField(deviceinstallation.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dic.mutation.AliasName(); ok {
		_spec.SetField(deviceinstallation.FieldAliasName, field.TypeString, value)
		_node.AliasName = value
	}
	if value, ok := dic.mutation.Longitude(); ok {
		_spec.SetField(deviceinstallation.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := dic.mutation.Latitude(); ok {
		_spec.SetField(deviceinstallation.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := dic.mutation.LocationData(); ok {
		_spec.SetField(deviceinstallation.FieldLocationData, field.TypeString, value)
		_node.LocationData = value
	}
	if value, ok := dic.mutation.Location(); ok {
		_spec.SetField(deviceinstallation.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := dic.mutation.Installer(); ok {
		_spec.SetField(deviceinstallation.FieldInstaller, field.TypeString, value)
		_node.Installer = value
	}
	if value, ok := dic.mutation.InstallTime(); ok {
		_spec.SetField(deviceinstallation.FieldInstallTime, field.TypeTime, value)
		_node.InstallTime = value
	}
	if nodes := dic.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.CreatorTable,
			Columns: []string{deviceinstallation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.UpdaterTable,
			Columns: []string{deviceinstallation.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.AreaTable,
			Columns: []string{deviceinstallation.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceinstallation.DeviceTable,
			Columns: []string{deviceinstallation.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceInstallationCreateBulk is the builder for creating many DeviceInstallation entities in bulk.
type DeviceInstallationCreateBulk struct {
	config
	err      error
	builders []*DeviceInstallationCreate
}

// Save creates the DeviceInstallation entities in the database.
func (dicb *DeviceInstallationCreateBulk) Save(ctx context.Context) ([]*DeviceInstallation, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeviceInstallation, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceInstallationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeviceInstallationCreateBulk) SaveX(ctx context.Context) []*DeviceInstallation {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeviceInstallationCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeviceInstallationCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
