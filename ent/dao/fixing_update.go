// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixingUpdate is the builder for updating Fixing entities.
type FixingUpdate struct {
	config
	hooks    []Hook
	mutation *FixingMutation
}

// Where appends a list predicates to the FixingUpdate builder.
func (fu *FixingUpdate) Where(ps ...predicate.Fixing) *FixingUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetDeleteTime sets the "delete_time" field.
func (fu *FixingUpdate) SetDeleteTime(t time.Time) *FixingUpdate {
	fu.mutation.SetDeleteTime(t)
	return fu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (fu *FixingUpdate) SetNillableDeleteTime(t *time.Time) *FixingUpdate {
	if t != nil {
		fu.SetDeleteTime(*t)
	}
	return fu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (fu *FixingUpdate) ClearDeleteTime() *FixingUpdate {
	fu.mutation.ClearDeleteTime()
	return fu
}

// SetUpdaterID sets the "updater_id" field.
func (fu *FixingUpdate) SetUpdaterID(i int) *FixingUpdate {
	fu.mutation.SetUpdaterID(i)
	return fu
}

// SetUpdateTime sets the "update_time" field.
func (fu *FixingUpdate) SetUpdateTime(t time.Time) *FixingUpdate {
	fu.mutation.SetUpdateTime(t)
	return fu
}

// SetFixerID sets the "fixer_id" field.
func (fu *FixingUpdate) SetFixerID(i int) *FixingUpdate {
	fu.mutation.SetFixerID(i)
	return fu
}

// SetFixTime sets the "fix_time" field.
func (fu *FixingUpdate) SetFixTime(t time.Time) *FixingUpdate {
	fu.mutation.SetFixTime(t)
	return fu
}

// SetNillableFixTime sets the "fix_time" field if the given value is not nil.
func (fu *FixingUpdate) SetNillableFixTime(t *time.Time) *FixingUpdate {
	if t != nil {
		fu.SetFixTime(*t)
	}
	return fu
}

// ClearFixTime clears the value of the "fix_time" field.
func (fu *FixingUpdate) ClearFixTime() *FixingUpdate {
	fu.mutation.ClearFixTime()
	return fu
}

// SetCompleteTime sets the "complete_time" field.
func (fu *FixingUpdate) SetCompleteTime(t time.Time) *FixingUpdate {
	fu.mutation.SetCompleteTime(t)
	return fu
}

// SetNillableCompleteTime sets the "complete_time" field if the given value is not nil.
func (fu *FixingUpdate) SetNillableCompleteTime(t *time.Time) *FixingUpdate {
	if t != nil {
		fu.SetCompleteTime(*t)
	}
	return fu
}

// ClearCompleteTime clears the value of the "complete_time" field.
func (fu *FixingUpdate) ClearCompleteTime() *FixingUpdate {
	fu.mutation.ClearCompleteTime()
	return fu
}

// SetCompleteNotes sets the "complete_notes" field.
func (fu *FixingUpdate) SetCompleteNotes(s string) *FixingUpdate {
	fu.mutation.SetCompleteNotes(s)
	return fu
}

// SetNillableCompleteNotes sets the "complete_notes" field if the given value is not nil.
func (fu *FixingUpdate) SetNillableCompleteNotes(s *string) *FixingUpdate {
	if s != nil {
		fu.SetCompleteNotes(*s)
	}
	return fu
}

// ClearCompleteNotes clears the value of the "complete_notes" field.
func (fu *FixingUpdate) ClearCompleteNotes() *FixingUpdate {
	fu.mutation.ClearCompleteNotes()
	return fu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (fu *FixingUpdate) SetUpdater(a *Admin) *FixingUpdate {
	return fu.SetUpdaterID(a.ID)
}

// SetFixer sets the "fixer" edge to the Admin entity.
func (fu *FixingUpdate) SetFixer(a *Admin) *FixingUpdate {
	return fu.SetFixerID(a.ID)
}

// Mutation returns the FixingMutation object of the builder.
func (fu *FixingUpdate) Mutation() *FixingMutation {
	return fu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (fu *FixingUpdate) ClearUpdater() *FixingUpdate {
	fu.mutation.ClearUpdater()
	return fu
}

// ClearFixer clears the "fixer" edge to the Admin entity.
func (fu *FixingUpdate) ClearFixer() *FixingUpdate {
	fu.mutation.ClearFixer()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FixingUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FixingUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FixingUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FixingUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FixingUpdate) defaults() error {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		if fixing.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized fixing.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := fixing.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fu *FixingUpdate) check() error {
	if v, ok := fu.mutation.UpdaterID(); ok {
		if err := fixing.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.updater_id": %w`, err)}
		}
	}
	if v, ok := fu.mutation.FixerID(); ok {
		if err := fixing.FixerIDValidator(v); err != nil {
			return &ValidationError{Name: "fixer_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.fixer_id": %w`, err)}
		}
	}
	if _, ok := fu.mutation.CreatorID(); fu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.creator"`)
	}
	if _, ok := fu.mutation.UpdaterID(); fu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.updater"`)
	}
	if _, ok := fu.mutation.FixerID(); fu.mutation.FixerCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.fixer"`)
	}
	if _, ok := fu.mutation.EventID(); fu.mutation.EventCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.event"`)
	}
	if _, ok := fu.mutation.DeviceID(); fu.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.device"`)
	}
	return nil
}

func (fu *FixingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixing.Table, fixing.Columns, sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.DeleteTime(); ok {
		_spec.SetField(fixing.FieldDeleteTime, field.TypeTime, value)
	}
	if fu.mutation.DeleteTimeCleared() {
		_spec.ClearField(fixing.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.SetField(fixing.FieldUpdateTime, field.TypeTime, value)
	}
	if fu.mutation.AssignNotesCleared() {
		_spec.ClearField(fixing.FieldAssignNotes, field.TypeString)
	}
	if value, ok := fu.mutation.FixTime(); ok {
		_spec.SetField(fixing.FieldFixTime, field.TypeTime, value)
	}
	if fu.mutation.FixTimeCleared() {
		_spec.ClearField(fixing.FieldFixTime, field.TypeTime)
	}
	if value, ok := fu.mutation.CompleteTime(); ok {
		_spec.SetField(fixing.FieldCompleteTime, field.TypeTime, value)
	}
	if fu.mutation.CompleteTimeCleared() {
		_spec.ClearField(fixing.FieldCompleteTime, field.TypeTime)
	}
	if value, ok := fu.mutation.CompleteNotes(); ok {
		_spec.SetField(fixing.FieldCompleteNotes, field.TypeString, value)
	}
	if fu.mutation.CompleteNotesCleared() {
		_spec.ClearField(fixing.FieldCompleteNotes, field.TypeString)
	}
	if fu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FixingUpdateOne is the builder for updating a single Fixing entity.
type FixingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FixingMutation
}

// SetDeleteTime sets the "delete_time" field.
func (fuo *FixingUpdateOne) SetDeleteTime(t time.Time) *FixingUpdateOne {
	fuo.mutation.SetDeleteTime(t)
	return fuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (fuo *FixingUpdateOne) SetNillableDeleteTime(t *time.Time) *FixingUpdateOne {
	if t != nil {
		fuo.SetDeleteTime(*t)
	}
	return fuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (fuo *FixingUpdateOne) ClearDeleteTime() *FixingUpdateOne {
	fuo.mutation.ClearDeleteTime()
	return fuo
}

// SetUpdaterID sets the "updater_id" field.
func (fuo *FixingUpdateOne) SetUpdaterID(i int) *FixingUpdateOne {
	fuo.mutation.SetUpdaterID(i)
	return fuo
}

// SetUpdateTime sets the "update_time" field.
func (fuo *FixingUpdateOne) SetUpdateTime(t time.Time) *FixingUpdateOne {
	fuo.mutation.SetUpdateTime(t)
	return fuo
}

// SetFixerID sets the "fixer_id" field.
func (fuo *FixingUpdateOne) SetFixerID(i int) *FixingUpdateOne {
	fuo.mutation.SetFixerID(i)
	return fuo
}

// SetFixTime sets the "fix_time" field.
func (fuo *FixingUpdateOne) SetFixTime(t time.Time) *FixingUpdateOne {
	fuo.mutation.SetFixTime(t)
	return fuo
}

// SetNillableFixTime sets the "fix_time" field if the given value is not nil.
func (fuo *FixingUpdateOne) SetNillableFixTime(t *time.Time) *FixingUpdateOne {
	if t != nil {
		fuo.SetFixTime(*t)
	}
	return fuo
}

// ClearFixTime clears the value of the "fix_time" field.
func (fuo *FixingUpdateOne) ClearFixTime() *FixingUpdateOne {
	fuo.mutation.ClearFixTime()
	return fuo
}

// SetCompleteTime sets the "complete_time" field.
func (fuo *FixingUpdateOne) SetCompleteTime(t time.Time) *FixingUpdateOne {
	fuo.mutation.SetCompleteTime(t)
	return fuo
}

// SetNillableCompleteTime sets the "complete_time" field if the given value is not nil.
func (fuo *FixingUpdateOne) SetNillableCompleteTime(t *time.Time) *FixingUpdateOne {
	if t != nil {
		fuo.SetCompleteTime(*t)
	}
	return fuo
}

// ClearCompleteTime clears the value of the "complete_time" field.
func (fuo *FixingUpdateOne) ClearCompleteTime() *FixingUpdateOne {
	fuo.mutation.ClearCompleteTime()
	return fuo
}

// SetCompleteNotes sets the "complete_notes" field.
func (fuo *FixingUpdateOne) SetCompleteNotes(s string) *FixingUpdateOne {
	fuo.mutation.SetCompleteNotes(s)
	return fuo
}

// SetNillableCompleteNotes sets the "complete_notes" field if the given value is not nil.
func (fuo *FixingUpdateOne) SetNillableCompleteNotes(s *string) *FixingUpdateOne {
	if s != nil {
		fuo.SetCompleteNotes(*s)
	}
	return fuo
}

// ClearCompleteNotes clears the value of the "complete_notes" field.
func (fuo *FixingUpdateOne) ClearCompleteNotes() *FixingUpdateOne {
	fuo.mutation.ClearCompleteNotes()
	return fuo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (fuo *FixingUpdateOne) SetUpdater(a *Admin) *FixingUpdateOne {
	return fuo.SetUpdaterID(a.ID)
}

// SetFixer sets the "fixer" edge to the Admin entity.
func (fuo *FixingUpdateOne) SetFixer(a *Admin) *FixingUpdateOne {
	return fuo.SetFixerID(a.ID)
}

// Mutation returns the FixingMutation object of the builder.
func (fuo *FixingUpdateOne) Mutation() *FixingMutation {
	return fuo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (fuo *FixingUpdateOne) ClearUpdater() *FixingUpdateOne {
	fuo.mutation.ClearUpdater()
	return fuo
}

// ClearFixer clears the "fixer" edge to the Admin entity.
func (fuo *FixingUpdateOne) ClearFixer() *FixingUpdateOne {
	fuo.mutation.ClearFixer()
	return fuo
}

// Where appends a list predicates to the FixingUpdate builder.
func (fuo *FixingUpdateOne) Where(ps ...predicate.Fixing) *FixingUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FixingUpdateOne) Select(field string, fields ...string) *FixingUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fixing entity.
func (fuo *FixingUpdateOne) Save(ctx context.Context) (*Fixing, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FixingUpdateOne) SaveX(ctx context.Context) *Fixing {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FixingUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FixingUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FixingUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		if fixing.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized fixing.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := fixing.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FixingUpdateOne) check() error {
	if v, ok := fuo.mutation.UpdaterID(); ok {
		if err := fixing.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.updater_id": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.FixerID(); ok {
		if err := fixing.FixerIDValidator(v); err != nil {
			return &ValidationError{Name: "fixer_id", err: fmt.Errorf(`dao: validator failed for field "Fixing.fixer_id": %w`, err)}
		}
	}
	if _, ok := fuo.mutation.CreatorID(); fuo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.creator"`)
	}
	if _, ok := fuo.mutation.UpdaterID(); fuo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.updater"`)
	}
	if _, ok := fuo.mutation.FixerID(); fuo.mutation.FixerCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.fixer"`)
	}
	if _, ok := fuo.mutation.EventID(); fuo.mutation.EventCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.event"`)
	}
	if _, ok := fuo.mutation.DeviceID(); fuo.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Fixing.device"`)
	}
	return nil
}

func (fuo *FixingUpdateOne) sqlSave(ctx context.Context) (_node *Fixing, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixing.Table, fixing.Columns, sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Fixing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixing.FieldID)
		for _, f := range fields {
			if !fixing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != fixing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.DeleteTime(); ok {
		_spec.SetField(fixing.FieldDeleteTime, field.TypeTime, value)
	}
	if fuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(fixing.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.SetField(fixing.FieldUpdateTime, field.TypeTime, value)
	}
	if fuo.mutation.AssignNotesCleared() {
		_spec.ClearField(fixing.FieldAssignNotes, field.TypeString)
	}
	if value, ok := fuo.mutation.FixTime(); ok {
		_spec.SetField(fixing.FieldFixTime, field.TypeTime, value)
	}
	if fuo.mutation.FixTimeCleared() {
		_spec.ClearField(fixing.FieldFixTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.CompleteTime(); ok {
		_spec.SetField(fixing.FieldCompleteTime, field.TypeTime, value)
	}
	if fuo.mutation.CompleteTimeCleared() {
		_spec.ClearField(fixing.FieldCompleteTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.CompleteNotes(); ok {
		_spec.SetField(fixing.FieldCompleteNotes, field.TypeString, value)
	}
	if fuo.mutation.CompleteNotesCleared() {
		_spec.ClearField(fixing.FieldCompleteNotes, field.TypeString)
	}
	if fuo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.UpdaterTable,
			Columns: []string{fixing.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FixerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FixerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixing.FixerTable,
			Columns: []string{fixing.FixerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fixing{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
