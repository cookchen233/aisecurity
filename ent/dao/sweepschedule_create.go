// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepScheduleCreate is the builder for creating a SweepSchedule entity.
type SweepScheduleCreate struct {
	config
	mutation *SweepScheduleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ssc *SweepScheduleCreate) SetCreateTime(t time.Time) *SweepScheduleCreate {
	ssc.mutation.SetCreateTime(t)
	return ssc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ssc *SweepScheduleCreate) SetNillableCreateTime(t *time.Time) *SweepScheduleCreate {
	if t != nil {
		ssc.SetCreateTime(*t)
	}
	return ssc
}

// SetCreatorID sets the "creator_id" field.
func (ssc *SweepScheduleCreate) SetCreatorID(i int) *SweepScheduleCreate {
	ssc.mutation.SetCreatorID(i)
	return ssc
}

// SetDeleteTime sets the "delete_time" field.
func (ssc *SweepScheduleCreate) SetDeleteTime(t time.Time) *SweepScheduleCreate {
	ssc.mutation.SetDeleteTime(t)
	return ssc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ssc *SweepScheduleCreate) SetNillableDeleteTime(t *time.Time) *SweepScheduleCreate {
	if t != nil {
		ssc.SetDeleteTime(*t)
	}
	return ssc
}

// SetUpdaterID sets the "updater_id" field.
func (ssc *SweepScheduleCreate) SetUpdaterID(i int) *SweepScheduleCreate {
	ssc.mutation.SetUpdaterID(i)
	return ssc
}

// SetUpdateTime sets the "update_time" field.
func (ssc *SweepScheduleCreate) SetUpdateTime(t time.Time) *SweepScheduleCreate {
	ssc.mutation.SetUpdateTime(t)
	return ssc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ssc *SweepScheduleCreate) SetNillableUpdateTime(t *time.Time) *SweepScheduleCreate {
	if t != nil {
		ssc.SetUpdateTime(*t)
	}
	return ssc
}

// SetName sets the "name" field.
func (ssc *SweepScheduleCreate) SetName(s string) *SweepScheduleCreate {
	ssc.mutation.SetName(s)
	return ssc
}

// SetSweepID sets the "sweep_id" field.
func (ssc *SweepScheduleCreate) SetSweepID(i int) *SweepScheduleCreate {
	ssc.mutation.SetSweepID(i)
	return ssc
}

// SetEnabledStatus sets the "enabled_status" field.
func (ssc *SweepScheduleCreate) SetEnabledStatus(es enums.EnabledStatus) *SweepScheduleCreate {
	ssc.mutation.SetEnabledStatus(es)
	return ssc
}

// SetNillableEnabledStatus sets the "enabled_status" field if the given value is not nil.
func (ssc *SweepScheduleCreate) SetNillableEnabledStatus(es *enums.EnabledStatus) *SweepScheduleCreate {
	if es != nil {
		ssc.SetEnabledStatus(*es)
	}
	return ssc
}

// SetActionTime sets the "action_time" field.
func (ssc *SweepScheduleCreate) SetActionTime(t time.Time) *SweepScheduleCreate {
	ssc.mutation.SetActionTime(t)
	return ssc
}

// SetRemind sets the "remind" field.
func (ssc *SweepScheduleCreate) SetRemind(tr types.ScheduleRemind) *SweepScheduleCreate {
	ssc.mutation.SetRemind(tr)
	return ssc
}

// SetRepeat sets the "repeat" field.
func (ssc *SweepScheduleCreate) SetRepeat(tr types.ScheduleRepeat) *SweepScheduleCreate {
	ssc.mutation.SetRepeat(tr)
	return ssc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (ssc *SweepScheduleCreate) SetCreator(a *Admin) *SweepScheduleCreate {
	return ssc.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ssc *SweepScheduleCreate) SetUpdater(a *Admin) *SweepScheduleCreate {
	return ssc.SetUpdaterID(a.ID)
}

// SetSweep sets the "sweep" edge to the Sweep entity.
func (ssc *SweepScheduleCreate) SetSweep(s *Sweep) *SweepScheduleCreate {
	return ssc.SetSweepID(s.ID)
}

// AddWorkerIDs adds the "workers" edge to the Admin entity by IDs.
func (ssc *SweepScheduleCreate) AddWorkerIDs(ids ...int) *SweepScheduleCreate {
	ssc.mutation.AddWorkerIDs(ids...)
	return ssc
}

// AddWorkers adds the "workers" edges to the Admin entity.
func (ssc *SweepScheduleCreate) AddWorkers(a ...*Admin) *SweepScheduleCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ssc.AddWorkerIDs(ids...)
}

// AddSweepResultIDs adds the "sweep_result" edge to the SweepResult entity by IDs.
func (ssc *SweepScheduleCreate) AddSweepResultIDs(ids ...int) *SweepScheduleCreate {
	ssc.mutation.AddSweepResultIDs(ids...)
	return ssc
}

// AddSweepResult adds the "sweep_result" edges to the SweepResult entity.
func (ssc *SweepScheduleCreate) AddSweepResult(s ...*SweepResult) *SweepScheduleCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddSweepResultIDs(ids...)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (ssc *SweepScheduleCreate) AddSweepResultDetailIDs(ids ...int) *SweepScheduleCreate {
	ssc.mutation.AddSweepResultDetailIDs(ids...)
	return ssc
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (ssc *SweepScheduleCreate) AddSweepResultDetails(s ...*SweepResultDetails) *SweepScheduleCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepScheduleMutation object of the builder.
func (ssc *SweepScheduleCreate) Mutation() *SweepScheduleMutation {
	return ssc.mutation
}

// Save creates the SweepSchedule in the database.
func (ssc *SweepScheduleCreate) Save(ctx context.Context) (*SweepSchedule, error) {
	if err := ssc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SweepScheduleCreate) SaveX(ctx context.Context) *SweepSchedule {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SweepScheduleCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SweepScheduleCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SweepScheduleCreate) defaults() error {
	if _, ok := ssc.mutation.CreateTime(); !ok {
		if sweepschedule.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepschedule.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := sweepschedule.DefaultCreateTime()
		ssc.mutation.SetCreateTime(v)
	}
	if _, ok := ssc.mutation.UpdateTime(); !ok {
		if sweepschedule.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepschedule.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweepschedule.DefaultUpdateTime()
		ssc.mutation.SetUpdateTime(v)
	}
	if _, ok := ssc.mutation.EnabledStatus(); !ok {
		v := sweepschedule.DefaultEnabledStatus
		ssc.mutation.SetEnabledStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SweepScheduleCreate) check() error {
	if _, ok := ssc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "SweepSchedule.create_time"`)}
	}
	if _, ok := ssc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "SweepSchedule.creator_id"`)}
	}
	if v, ok := ssc.mutation.CreatorID(); ok {
		if err := sweepschedule.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.creator_id": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "SweepSchedule.updater_id"`)}
	}
	if v, ok := ssc.mutation.UpdaterID(); ok {
		if err := sweepschedule.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.updater_id": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "SweepSchedule.update_time"`)}
	}
	if _, ok := ssc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`dao: missing required field "SweepSchedule.name"`)}
	}
	if v, ok := ssc.mutation.Name(); ok {
		if err := sweepschedule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.name": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep_id", err: errors.New(`dao: missing required field "SweepSchedule.sweep_id"`)}
	}
	if v, ok := ssc.mutation.SweepID(); ok {
		if err := sweepschedule.SweepIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_id", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.sweep_id": %w`, err)}
		}
	}
	if v, ok := ssc.mutation.EnabledStatus(); ok {
		if err := sweepschedule.EnabledStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "enabled_status", err: fmt.Errorf(`dao: validator failed for field "SweepSchedule.enabled_status": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.ActionTime(); !ok {
		return &ValidationError{Name: "action_time", err: errors.New(`dao: missing required field "SweepSchedule.action_time"`)}
	}
	if _, ok := ssc.mutation.Remind(); !ok {
		return &ValidationError{Name: "remind", err: errors.New(`dao: missing required field "SweepSchedule.remind"`)}
	}
	if _, ok := ssc.mutation.Repeat(); !ok {
		return &ValidationError{Name: "repeat", err: errors.New(`dao: missing required field "SweepSchedule.repeat"`)}
	}
	if _, ok := ssc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "SweepSchedule.creator"`)}
	}
	if _, ok := ssc.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "SweepSchedule.updater"`)}
	}
	if _, ok := ssc.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep", err: errors.New(`dao: missing required edge "SweepSchedule.sweep"`)}
	}
	return nil
}

func (ssc *SweepScheduleCreate) sqlSave(ctx context.Context) (*SweepSchedule, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SweepScheduleCreate) createSpec() (*SweepSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &SweepSchedule{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(sweepschedule.Table, sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt))
	)
	if value, ok := ssc.mutation.CreateTime(); ok {
		_spec.SetField(sweepschedule.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ssc.mutation.DeleteTime(); ok {
		_spec.SetField(sweepschedule.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ssc.mutation.UpdateTime(); ok {
		_spec.SetField(sweepschedule.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ssc.mutation.Name(); ok {
		_spec.SetField(sweepschedule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ssc.mutation.EnabledStatus(); ok {
		_spec.SetField(sweepschedule.FieldEnabledStatus, field.TypeInt, value)
		_node.EnabledStatus = value
	}
	if value, ok := ssc.mutation.ActionTime(); ok {
		_spec.SetField(sweepschedule.FieldActionTime, field.TypeTime, value)
		_node.ActionTime = value
	}
	if value, ok := ssc.mutation.Remind(); ok {
		_spec.SetField(sweepschedule.FieldRemind, field.TypeJSON, value)
		_node.Remind = value
	}
	if value, ok := ssc.mutation.Repeat(); ok {
		_spec.SetField(sweepschedule.FieldRepeat, field.TypeJSON, value)
		_node.Repeat = value
	}
	if nodes := ssc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.CreatorTable,
			Columns: []string{sweepschedule.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.UpdaterTable,
			Columns: []string{sweepschedule.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SweepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepschedule.SweepTable,
			Columns: []string{sweepschedule.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.WorkersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sweepschedule.WorkersTable,
			Columns: sweepschedule.WorkersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SweepResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultTable,
			Columns: []string{sweepschedule.SweepResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepschedule.SweepResultDetailsTable,
			Columns: []string{sweepschedule.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SweepScheduleCreateBulk is the builder for creating many SweepSchedule entities in bulk.
type SweepScheduleCreateBulk struct {
	config
	err      error
	builders []*SweepScheduleCreate
}

// Save creates the SweepSchedule entities in the database.
func (sscb *SweepScheduleCreateBulk) Save(ctx context.Context) ([]*SweepSchedule, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SweepSchedule, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SweepScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SweepScheduleCreateBulk) SaveX(ctx context.Context) []*SweepSchedule {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SweepScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SweepScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
