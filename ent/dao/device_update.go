// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/predicate"
	"aisecurity/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDeleteTime sets the "delete_time" field.
func (du *DeviceUpdate) SetDeleteTime(t time.Time) *DeviceUpdate {
	du.mutation.SetDeleteTime(t)
	return du
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeleteTime(t *time.Time) *DeviceUpdate {
	if t != nil {
		du.SetDeleteTime(*t)
	}
	return du
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (du *DeviceUpdate) ClearDeleteTime() *DeviceUpdate {
	du.mutation.ClearDeleteTime()
	return du
}

// SetUpdaterID sets the "updater_id" field.
func (du *DeviceUpdate) SetUpdaterID(i int) *DeviceUpdate {
	du.mutation.SetUpdaterID(i)
	return du
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableUpdaterID(i *int) *DeviceUpdate {
	if i != nil {
		du.SetUpdaterID(*i)
	}
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DeviceUpdate) SetUpdateTime(t time.Time) *DeviceUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetBrand sets the "brand" field.
func (du *DeviceUpdate) SetBrand(eb enums.DeviceBrand) *DeviceUpdate {
	du.mutation.ResetBrand()
	du.mutation.SetBrand(eb)
	return du
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableBrand(eb *enums.DeviceBrand) *DeviceUpdate {
	if eb != nil {
		du.SetBrand(*eb)
	}
	return du
}

// AddBrand adds eb to the "brand" field.
func (du *DeviceUpdate) AddBrand(eb enums.DeviceBrand) *DeviceUpdate {
	du.mutation.AddBrand(eb)
	return du
}

// ClearBrand clears the value of the "brand" field.
func (du *DeviceUpdate) ClearBrand() *DeviceUpdate {
	du.mutation.ClearBrand()
	return du
}

// SetModel sets the "model" field.
func (du *DeviceUpdate) SetModel(em enums.DeviceModel) *DeviceUpdate {
	du.mutation.ResetModel()
	du.mutation.SetModel(em)
	return du
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableModel(em *enums.DeviceModel) *DeviceUpdate {
	if em != nil {
		du.SetModel(*em)
	}
	return du
}

// AddModel adds em to the "model" field.
func (du *DeviceUpdate) AddModel(em enums.DeviceModel) *DeviceUpdate {
	du.mutation.AddModel(em)
	return du
}

// ClearModel clears the value of the "model" field.
func (du *DeviceUpdate) ClearModel() *DeviceUpdate {
	du.mutation.ClearModel()
	return du
}

// SetName sets the "name" field.
func (du *DeviceUpdate) SetName(s string) *DeviceUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableName(s *string) *DeviceUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DeviceUpdate) ClearName() *DeviceUpdate {
	du.mutation.ClearName()
	return du
}

// SetSn sets the "sn" field.
func (du *DeviceUpdate) SetSn(s string) *DeviceUpdate {
	du.mutation.SetSn(s)
	return du
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableSn(s *string) *DeviceUpdate {
	if s != nil {
		du.SetSn(*s)
	}
	return du
}

// ClearSn clears the value of the "sn" field.
func (du *DeviceUpdate) ClearSn() *DeviceUpdate {
	du.mutation.ClearSn()
	return du
}

// SetDeviceType sets the "device_type" field.
func (du *DeviceUpdate) SetDeviceType(et enums.DeviceType) *DeviceUpdate {
	du.mutation.ResetDeviceType()
	du.mutation.SetDeviceType(et)
	return du
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceType(et *enums.DeviceType) *DeviceUpdate {
	if et != nil {
		du.SetDeviceType(*et)
	}
	return du
}

// AddDeviceType adds et to the "device_type" field.
func (du *DeviceUpdate) AddDeviceType(et enums.DeviceType) *DeviceUpdate {
	du.mutation.AddDeviceType(et)
	return du
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (du *DeviceUpdate) SetUpdater(a *Admin) *DeviceUpdate {
	return du.SetUpdaterID(a.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (du *DeviceUpdate) AddEventIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddEventIDs(ids...)
	return du
}

// AddEvent adds the "event" edges to the Event entity.
func (du *DeviceUpdate) AddEvent(e ...*Event) *DeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.AddEventIDs(ids...)
}

// AddDeviceInstallationIDs adds the "device_installation" edge to the DeviceInstallation entity by IDs.
func (du *DeviceUpdate) AddDeviceInstallationIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddDeviceInstallationIDs(ids...)
	return du
}

// AddDeviceInstallation adds the "device_installation" edges to the DeviceInstallation entity.
func (du *DeviceUpdate) AddDeviceInstallation(d ...*DeviceInstallation) *DeviceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDeviceInstallationIDs(ids...)
}

// AddEventLogIDs adds the "event_log" edge to the EventLog entity by IDs.
func (du *DeviceUpdate) AddEventLogIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddEventLogIDs(ids...)
	return du
}

// AddEventLog adds the "event_log" edges to the EventLog entity.
func (du *DeviceUpdate) AddEventLog(e ...*EventLog) *DeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.AddEventLogIDs(ids...)
}

// AddFixingIDs adds the "fixing" edge to the Fixing entity by IDs.
func (du *DeviceUpdate) AddFixingIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddFixingIDs(ids...)
	return du
}

// AddFixing adds the "fixing" edges to the Fixing entity.
func (du *DeviceUpdate) AddFixing(f ...*Fixing) *DeviceUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.AddFixingIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (du *DeviceUpdate) ClearUpdater() *DeviceUpdate {
	du.mutation.ClearUpdater()
	return du
}

// ClearEvent clears all "event" edges to the Event entity.
func (du *DeviceUpdate) ClearEvent() *DeviceUpdate {
	du.mutation.ClearEvent()
	return du
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (du *DeviceUpdate) RemoveEventIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveEventIDs(ids...)
	return du
}

// RemoveEvent removes "event" edges to Event entities.
func (du *DeviceUpdate) RemoveEvent(e ...*Event) *DeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.RemoveEventIDs(ids...)
}

// ClearDeviceInstallation clears all "device_installation" edges to the DeviceInstallation entity.
func (du *DeviceUpdate) ClearDeviceInstallation() *DeviceUpdate {
	du.mutation.ClearDeviceInstallation()
	return du
}

// RemoveDeviceInstallationIDs removes the "device_installation" edge to DeviceInstallation entities by IDs.
func (du *DeviceUpdate) RemoveDeviceInstallationIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveDeviceInstallationIDs(ids...)
	return du
}

// RemoveDeviceInstallation removes "device_installation" edges to DeviceInstallation entities.
func (du *DeviceUpdate) RemoveDeviceInstallation(d ...*DeviceInstallation) *DeviceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDeviceInstallationIDs(ids...)
}

// ClearEventLog clears all "event_log" edges to the EventLog entity.
func (du *DeviceUpdate) ClearEventLog() *DeviceUpdate {
	du.mutation.ClearEventLog()
	return du
}

// RemoveEventLogIDs removes the "event_log" edge to EventLog entities by IDs.
func (du *DeviceUpdate) RemoveEventLogIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveEventLogIDs(ids...)
	return du
}

// RemoveEventLog removes "event_log" edges to EventLog entities.
func (du *DeviceUpdate) RemoveEventLog(e ...*EventLog) *DeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.RemoveEventLogIDs(ids...)
}

// ClearFixing clears all "fixing" edges to the Fixing entity.
func (du *DeviceUpdate) ClearFixing() *DeviceUpdate {
	du.mutation.ClearFixing()
	return du
}

// RemoveFixingIDs removes the "fixing" edge to Fixing entities by IDs.
func (du *DeviceUpdate) RemoveFixingIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveFixingIDs(ids...)
	return du
}

// RemoveFixing removes "fixing" edges to Fixing entities.
func (du *DeviceUpdate) RemoveFixing(f ...*Fixing) *DeviceUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.RemoveFixingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DeviceUpdate) defaults() error {
	if _, ok := du.mutation.UpdateTime(); !ok {
		if device.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized device.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := device.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (du *DeviceUpdate) check() error {
	if v, ok := du.mutation.UpdaterID(); ok {
		if err := device.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Device.updater_id": %w`, err)}
		}
	}
	if v, ok := du.mutation.Brand(); ok {
		if err := device.BrandValidator(int(v)); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`dao: validator failed for field "Device.brand": %w`, err)}
		}
	}
	if v, ok := du.mutation.Model(); ok {
		if err := device.ModelValidator(int(v)); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`dao: validator failed for field "Device.model": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := device.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Device.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Sn(); ok {
		if err := device.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`dao: validator failed for field "Device.sn": %w`, err)}
		}
	}
	if v, ok := du.mutation.DeviceType(); ok {
		if err := device.DeviceTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`dao: validator failed for field "Device.device_type": %w`, err)}
		}
	}
	if _, ok := du.mutation.CreatorID(); du.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Device.creator"`)
	}
	if _, ok := du.mutation.UpdaterID(); du.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Device.updater"`)
	}
	return nil
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeleteTime(); ok {
		_spec.SetField(device.FieldDeleteTime, field.TypeTime, value)
	}
	if du.mutation.DeleteTimeCleared() {
		_spec.ClearField(device.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(device.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Brand(); ok {
		_spec.SetField(device.FieldBrand, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedBrand(); ok {
		_spec.AddField(device.FieldBrand, field.TypeInt, value)
	}
	if du.mutation.BrandCleared() {
		_spec.ClearField(device.FieldBrand, field.TypeInt)
	}
	if value, ok := du.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedModel(); ok {
		_spec.AddField(device.FieldModel, field.TypeInt, value)
	}
	if du.mutation.ModelCleared() {
		_spec.ClearField(device.FieldModel, field.TypeInt)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(device.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
	}
	if du.mutation.SnCleared() {
		_spec.ClearField(device.FieldSn, field.TypeString)
	}
	if value, ok := du.mutation.DeviceType(); ok {
		_spec.SetField(device.FieldDeviceType, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDeviceType(); ok {
		_spec.AddField(device.FieldDeviceType, field.TypeInt, value)
	}
	if du.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedEventIDs(); len(nodes) > 0 && !du.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDeviceInstallationIDs(); len(nodes) > 0 && !du.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DeviceInstallationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedEventLogIDs(); len(nodes) > 0 && !du.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedFixingIDs(); len(nodes) > 0 && !du.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FixingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetDeleteTime sets the "delete_time" field.
func (duo *DeviceUpdateOne) SetDeleteTime(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetDeleteTime(t)
	return duo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeleteTime(t *time.Time) *DeviceUpdateOne {
	if t != nil {
		duo.SetDeleteTime(*t)
	}
	return duo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (duo *DeviceUpdateOne) ClearDeleteTime() *DeviceUpdateOne {
	duo.mutation.ClearDeleteTime()
	return duo
}

// SetUpdaterID sets the "updater_id" field.
func (duo *DeviceUpdateOne) SetUpdaterID(i int) *DeviceUpdateOne {
	duo.mutation.SetUpdaterID(i)
	return duo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableUpdaterID(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetUpdaterID(*i)
	}
	return duo
}

// SetUpdateTime sets the "update_time" field.
func (duo *DeviceUpdateOne) SetUpdateTime(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetBrand sets the "brand" field.
func (duo *DeviceUpdateOne) SetBrand(eb enums.DeviceBrand) *DeviceUpdateOne {
	duo.mutation.ResetBrand()
	duo.mutation.SetBrand(eb)
	return duo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableBrand(eb *enums.DeviceBrand) *DeviceUpdateOne {
	if eb != nil {
		duo.SetBrand(*eb)
	}
	return duo
}

// AddBrand adds eb to the "brand" field.
func (duo *DeviceUpdateOne) AddBrand(eb enums.DeviceBrand) *DeviceUpdateOne {
	duo.mutation.AddBrand(eb)
	return duo
}

// ClearBrand clears the value of the "brand" field.
func (duo *DeviceUpdateOne) ClearBrand() *DeviceUpdateOne {
	duo.mutation.ClearBrand()
	return duo
}

// SetModel sets the "model" field.
func (duo *DeviceUpdateOne) SetModel(em enums.DeviceModel) *DeviceUpdateOne {
	duo.mutation.ResetModel()
	duo.mutation.SetModel(em)
	return duo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableModel(em *enums.DeviceModel) *DeviceUpdateOne {
	if em != nil {
		duo.SetModel(*em)
	}
	return duo
}

// AddModel adds em to the "model" field.
func (duo *DeviceUpdateOne) AddModel(em enums.DeviceModel) *DeviceUpdateOne {
	duo.mutation.AddModel(em)
	return duo
}

// ClearModel clears the value of the "model" field.
func (duo *DeviceUpdateOne) ClearModel() *DeviceUpdateOne {
	duo.mutation.ClearModel()
	return duo
}

// SetName sets the "name" field.
func (duo *DeviceUpdateOne) SetName(s string) *DeviceUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableName(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DeviceUpdateOne) ClearName() *DeviceUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetSn sets the "sn" field.
func (duo *DeviceUpdateOne) SetSn(s string) *DeviceUpdateOne {
	duo.mutation.SetSn(s)
	return duo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableSn(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetSn(*s)
	}
	return duo
}

// ClearSn clears the value of the "sn" field.
func (duo *DeviceUpdateOne) ClearSn() *DeviceUpdateOne {
	duo.mutation.ClearSn()
	return duo
}

// SetDeviceType sets the "device_type" field.
func (duo *DeviceUpdateOne) SetDeviceType(et enums.DeviceType) *DeviceUpdateOne {
	duo.mutation.ResetDeviceType()
	duo.mutation.SetDeviceType(et)
	return duo
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceType(et *enums.DeviceType) *DeviceUpdateOne {
	if et != nil {
		duo.SetDeviceType(*et)
	}
	return duo
}

// AddDeviceType adds et to the "device_type" field.
func (duo *DeviceUpdateOne) AddDeviceType(et enums.DeviceType) *DeviceUpdateOne {
	duo.mutation.AddDeviceType(et)
	return duo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (duo *DeviceUpdateOne) SetUpdater(a *Admin) *DeviceUpdateOne {
	return duo.SetUpdaterID(a.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (duo *DeviceUpdateOne) AddEventIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddEventIDs(ids...)
	return duo
}

// AddEvent adds the "event" edges to the Event entity.
func (duo *DeviceUpdateOne) AddEvent(e ...*Event) *DeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.AddEventIDs(ids...)
}

// AddDeviceInstallationIDs adds the "device_installation" edge to the DeviceInstallation entity by IDs.
func (duo *DeviceUpdateOne) AddDeviceInstallationIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddDeviceInstallationIDs(ids...)
	return duo
}

// AddDeviceInstallation adds the "device_installation" edges to the DeviceInstallation entity.
func (duo *DeviceUpdateOne) AddDeviceInstallation(d ...*DeviceInstallation) *DeviceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDeviceInstallationIDs(ids...)
}

// AddEventLogIDs adds the "event_log" edge to the EventLog entity by IDs.
func (duo *DeviceUpdateOne) AddEventLogIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddEventLogIDs(ids...)
	return duo
}

// AddEventLog adds the "event_log" edges to the EventLog entity.
func (duo *DeviceUpdateOne) AddEventLog(e ...*EventLog) *DeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.AddEventLogIDs(ids...)
}

// AddFixingIDs adds the "fixing" edge to the Fixing entity by IDs.
func (duo *DeviceUpdateOne) AddFixingIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddFixingIDs(ids...)
	return duo
}

// AddFixing adds the "fixing" edges to the Fixing entity.
func (duo *DeviceUpdateOne) AddFixing(f ...*Fixing) *DeviceUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.AddFixingIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (duo *DeviceUpdateOne) ClearUpdater() *DeviceUpdateOne {
	duo.mutation.ClearUpdater()
	return duo
}

// ClearEvent clears all "event" edges to the Event entity.
func (duo *DeviceUpdateOne) ClearEvent() *DeviceUpdateOne {
	duo.mutation.ClearEvent()
	return duo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (duo *DeviceUpdateOne) RemoveEventIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveEventIDs(ids...)
	return duo
}

// RemoveEvent removes "event" edges to Event entities.
func (duo *DeviceUpdateOne) RemoveEvent(e ...*Event) *DeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.RemoveEventIDs(ids...)
}

// ClearDeviceInstallation clears all "device_installation" edges to the DeviceInstallation entity.
func (duo *DeviceUpdateOne) ClearDeviceInstallation() *DeviceUpdateOne {
	duo.mutation.ClearDeviceInstallation()
	return duo
}

// RemoveDeviceInstallationIDs removes the "device_installation" edge to DeviceInstallation entities by IDs.
func (duo *DeviceUpdateOne) RemoveDeviceInstallationIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveDeviceInstallationIDs(ids...)
	return duo
}

// RemoveDeviceInstallation removes "device_installation" edges to DeviceInstallation entities.
func (duo *DeviceUpdateOne) RemoveDeviceInstallation(d ...*DeviceInstallation) *DeviceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDeviceInstallationIDs(ids...)
}

// ClearEventLog clears all "event_log" edges to the EventLog entity.
func (duo *DeviceUpdateOne) ClearEventLog() *DeviceUpdateOne {
	duo.mutation.ClearEventLog()
	return duo
}

// RemoveEventLogIDs removes the "event_log" edge to EventLog entities by IDs.
func (duo *DeviceUpdateOne) RemoveEventLogIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveEventLogIDs(ids...)
	return duo
}

// RemoveEventLog removes "event_log" edges to EventLog entities.
func (duo *DeviceUpdateOne) RemoveEventLog(e ...*EventLog) *DeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.RemoveEventLogIDs(ids...)
}

// ClearFixing clears all "fixing" edges to the Fixing entity.
func (duo *DeviceUpdateOne) ClearFixing() *DeviceUpdateOne {
	duo.mutation.ClearFixing()
	return duo
}

// RemoveFixingIDs removes the "fixing" edge to Fixing entities by IDs.
func (duo *DeviceUpdateOne) RemoveFixingIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveFixingIDs(ids...)
	return duo
}

// RemoveFixing removes "fixing" edges to Fixing entities.
func (duo *DeviceUpdateOne) RemoveFixing(f ...*Fixing) *DeviceUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.RemoveFixingIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DeviceUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		if device.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized device.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := device.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeviceUpdateOne) check() error {
	if v, ok := duo.mutation.UpdaterID(); ok {
		if err := device.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Device.updater_id": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Brand(); ok {
		if err := device.BrandValidator(int(v)); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`dao: validator failed for field "Device.brand": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Model(); ok {
		if err := device.ModelValidator(int(v)); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`dao: validator failed for field "Device.model": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := device.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Device.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Sn(); ok {
		if err := device.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`dao: validator failed for field "Device.sn": %w`, err)}
		}
	}
	if v, ok := duo.mutation.DeviceType(); ok {
		if err := device.DeviceTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`dao: validator failed for field "Device.device_type": %w`, err)}
		}
	}
	if _, ok := duo.mutation.CreatorID(); duo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Device.creator"`)
	}
	if _, ok := duo.mutation.UpdaterID(); duo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Device.updater"`)
	}
	return nil
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DeleteTime(); ok {
		_spec.SetField(device.FieldDeleteTime, field.TypeTime, value)
	}
	if duo.mutation.DeleteTimeCleared() {
		_spec.ClearField(device.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(device.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Brand(); ok {
		_spec.SetField(device.FieldBrand, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedBrand(); ok {
		_spec.AddField(device.FieldBrand, field.TypeInt, value)
	}
	if duo.mutation.BrandCleared() {
		_spec.ClearField(device.FieldBrand, field.TypeInt)
	}
	if value, ok := duo.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedModel(); ok {
		_spec.AddField(device.FieldModel, field.TypeInt, value)
	}
	if duo.mutation.ModelCleared() {
		_spec.ClearField(device.FieldModel, field.TypeInt)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(device.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
	}
	if duo.mutation.SnCleared() {
		_spec.ClearField(device.FieldSn, field.TypeString)
	}
	if value, ok := duo.mutation.DeviceType(); ok {
		_spec.SetField(device.FieldDeviceType, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDeviceType(); ok {
		_spec.AddField(device.FieldDeviceType, field.TypeInt, value)
	}
	if duo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedEventIDs(); len(nodes) > 0 && !duo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventTable,
			Columns: []string{device.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDeviceInstallationIDs(); len(nodes) > 0 && !duo.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DeviceInstallationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceInstallationTable,
			Columns: []string{device.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedEventLogIDs(); len(nodes) > 0 && !duo.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.EventLogTable,
			Columns: []string{device.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedFixingIDs(); len(nodes) > 0 && !duo.mutation.FixingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FixingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FixingTable,
			Columns: []string{device.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
