// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ec *EventCreate) SetCreateTime(t time.Time) *EventCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreateTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetCreatorID sets the "creator_id" field.
func (ec *EventCreate) SetCreatorID(i int) *EventCreate {
	ec.mutation.SetCreatorID(i)
	return ec
}

// SetDeleteTime sets the "delete_time" field.
func (ec *EventCreate) SetDeleteTime(t time.Time) *EventCreate {
	ec.mutation.SetDeleteTime(t)
	return ec
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableDeleteTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetDeleteTime(*t)
	}
	return ec
}

// SetUpdaterID sets the "updater_id" field.
func (ec *EventCreate) SetUpdaterID(i int) *EventCreate {
	ec.mutation.SetUpdaterID(i)
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *EventCreate) SetUpdateTime(t time.Time) *EventCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdateTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// SetDeviceID sets the "device_id" field.
func (ec *EventCreate) SetDeviceID(i int) *EventCreate {
	ec.mutation.SetDeviceID(i)
	return ec
}

// SetVideoID sets the "video_id" field.
func (ec *EventCreate) SetVideoID(i int) *EventCreate {
	ec.mutation.SetVideoID(i)
	return ec
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableVideoID(i *int) *EventCreate {
	if i != nil {
		ec.SetVideoID(*i)
	}
	return ec
}

// SetEventTime sets the "event_time" field.
func (ec *EventCreate) SetEventTime(t time.Time) *EventCreate {
	ec.mutation.SetEventTime(t)
	return ec
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableEventTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetEventTime(*t)
	}
	return ec
}

// SetEventType sets the "event_type" field.
func (ec *EventCreate) SetEventType(et enums.EventType) *EventCreate {
	ec.mutation.SetEventType(et)
	return ec
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ec *EventCreate) SetNillableEventType(et *enums.EventType) *EventCreate {
	if et != nil {
		ec.SetEventType(*et)
	}
	return ec
}

// SetEventStatus sets the "event_status" field.
func (ec *EventCreate) SetEventStatus(es enums.EventStatus) *EventCreate {
	ec.mutation.SetEventStatus(es)
	return ec
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (ec *EventCreate) SetNillableEventStatus(es *enums.EventStatus) *EventCreate {
	if es != nil {
		ec.SetEventStatus(*es)
	}
	return ec
}

// SetImages sets the "images" field.
func (ec *EventCreate) SetImages(ti []*types.UploadedImage) *EventCreate {
	ec.mutation.SetImages(ti)
	return ec
}

// SetLabeledImages sets the "labeled_images" field.
func (ec *EventCreate) SetLabeledImages(ti []*types.UploadedImage) *EventCreate {
	ec.mutation.SetLabeledImages(ti)
	return ec
}

// SetDataID sets the "data_id" field.
func (ec *EventCreate) SetDataID(s string) *EventCreate {
	ec.mutation.SetDataID(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetRawData sets the "raw_data" field.
func (ec *EventCreate) SetRawData(s string) *EventCreate {
	ec.mutation.SetRawData(s)
	return ec
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (ec *EventCreate) SetNillableRawData(s *string) *EventCreate {
	if s != nil {
		ec.SetRawData(*s)
	}
	return ec
}

// SetCreator sets the "creator" edge to the Admin entity.
func (ec *EventCreate) SetCreator(a *Admin) *EventCreate {
	return ec.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ec *EventCreate) SetUpdater(a *Admin) *EventCreate {
	return ec.SetUpdaterID(a.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (ec *EventCreate) SetVideo(v *Video) *EventCreate {
	return ec.SetVideoID(v.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (ec *EventCreate) SetDevice(d *Device) *EventCreate {
	return ec.SetDeviceID(d.ID)
}

// SetFixingID sets the "fixing" edge to the Fixing entity by ID.
func (ec *EventCreate) SetFixingID(id int) *EventCreate {
	ec.mutation.SetFixingID(id)
	return ec
}

// SetNillableFixingID sets the "fixing" edge to the Fixing entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableFixingID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetFixingID(*id)
	}
	return ec
}

// SetFixing sets the "fixing" edge to the Fixing entity.
func (ec *EventCreate) SetFixing(f *Fixing) *EventCreate {
	return ec.SetFixingID(f.ID)
}

// AddEventLogIDs adds the "event_log" edge to the EventLog entity by IDs.
func (ec *EventCreate) AddEventLogIDs(ids ...int) *EventCreate {
	ec.mutation.AddEventLogIDs(ids...)
	return ec
}

// AddEventLog adds the "event_log" edges to the EventLog entity.
func (ec *EventCreate) AddEventLog(e ...*EventLog) *EventCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventLogIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() error {
	if _, ok := ec.mutation.CreateTime(); !ok {
		if event.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized event.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := event.DefaultCreateTime()
		ec.mutation.SetCreateTime(v)
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		if event.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized event.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := event.DefaultUpdateTime()
		ec.mutation.SetUpdateTime(v)
	}
	if _, ok := ec.mutation.EventTime(); !ok {
		if event.DefaultEventTime == nil {
			return fmt.Errorf("dao: uninitialized event.DefaultEventTime (forgotten import dao/runtime?)")
		}
		v := event.DefaultEventTime()
		ec.mutation.SetEventTime(v)
	}
	if _, ok := ec.mutation.EventType(); !ok {
		v := event.DefaultEventType
		ec.mutation.SetEventType(v)
	}
	if _, ok := ec.mutation.EventStatus(); !ok {
		v := event.DefaultEventStatus
		ec.mutation.SetEventStatus(v)
	}
	if _, ok := ec.mutation.Images(); !ok {
		v := event.DefaultImages
		ec.mutation.SetImages(v)
	}
	if _, ok := ec.mutation.LabeledImages(); !ok {
		v := event.DefaultLabeledImages
		ec.mutation.SetLabeledImages(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "Event.create_time"`)}
	}
	if _, ok := ec.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "Event.creator_id"`)}
	}
	if v, ok := ec.mutation.CreatorID(); ok {
		if err := event.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "Event.creator_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "Event.updater_id"`)}
	}
	if v, ok := ec.mutation.UpdaterID(); ok {
		if err := event.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Event.updater_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "Event.update_time"`)}
	}
	if _, ok := ec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "Event.device_id"`)}
	}
	if v, ok := ec.mutation.DeviceID(); ok {
		if err := event.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "Event.device_id": %w`, err)}
		}
	}
	if v, ok := ec.mutation.VideoID(); ok {
		if err := event.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`dao: validator failed for field "Event.video_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventTime(); !ok {
		return &ValidationError{Name: "event_time", err: errors.New(`dao: missing required field "Event.event_time"`)}
	}
	if _, ok := ec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`dao: missing required field "Event.event_type"`)}
	}
	if v, ok := ec.mutation.EventType(); ok {
		if err := event.EventTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`dao: validator failed for field "Event.event_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventStatus(); !ok {
		return &ValidationError{Name: "event_status", err: errors.New(`dao: missing required field "Event.event_status"`)}
	}
	if v, ok := ec.mutation.EventStatus(); ok {
		if err := event.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "Event.event_status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.DataID(); !ok {
		return &ValidationError{Name: "data_id", err: errors.New(`dao: missing required field "Event.data_id"`)}
	}
	if v, ok := ec.mutation.DataID(); ok {
		if err := event.DataIDValidator(v); err != nil {
			return &ValidationError{Name: "data_id", err: fmt.Errorf(`dao: validator failed for field "Event.data_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "Event.creator"`)}
	}
	if _, ok := ec.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "Event.updater"`)}
	}
	if _, ok := ec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`dao: missing required edge "Event.device"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.SetField(event.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ec.mutation.DeleteTime(); ok {
		_spec.SetField(event.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ec.mutation.EventTime(); ok {
		_spec.SetField(event.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := ec.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeInt, value)
		_node.EventType = value
	}
	if value, ok := ec.mutation.EventStatus(); ok {
		_spec.SetField(event.FieldEventStatus, field.TypeInt, value)
		_node.EventStatus = value
	}
	if value, ok := ec.mutation.Images(); ok {
		_spec.SetField(event.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := ec.mutation.LabeledImages(); ok {
		_spec.SetField(event.FieldLabeledImages, field.TypeJSON, value)
		_node.LabeledImages = value
	}
	if value, ok := ec.mutation.DataID(); ok {
		_spec.SetField(event.FieldDataID, field.TypeString, value)
		_node.DataID = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.RawData(); ok {
		_spec.SetField(event.FieldRawData, field.TypeString, value)
		_node.RawData = value
	}
	if nodes := ec.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatorTable,
			Columns: []string{event.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UpdaterTable,
			Columns: []string{event.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.VideoTable,
			Columns: []string{event.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FixingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.FixingTable,
			Columns: []string{event.FixingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventLogTable,
			Columns: []string{event.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
