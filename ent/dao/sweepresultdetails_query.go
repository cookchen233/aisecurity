// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepResultDetailsQuery is the builder for querying SweepResultDetails entities.
type SweepResultDetailsQuery struct {
	config
	ctx               *QueryContext
	order             []sweepresultdetails.OrderOption
	inters            []Interceptor
	predicates        []predicate.SweepResultDetails
	withCreator       *AdminQuery
	withUpdater       *AdminQuery
	withSweep         *SweepQuery
	withSweepSchedule *SweepScheduleQuery
	withSweepResult   *SweepResultQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SweepResultDetailsQuery builder.
func (srdq *SweepResultDetailsQuery) Where(ps ...predicate.SweepResultDetails) *SweepResultDetailsQuery {
	srdq.predicates = append(srdq.predicates, ps...)
	return srdq
}

// Limit the number of records to be returned by this query.
func (srdq *SweepResultDetailsQuery) Limit(limit int) *SweepResultDetailsQuery {
	srdq.ctx.Limit = &limit
	return srdq
}

// Offset to start from.
func (srdq *SweepResultDetailsQuery) Offset(offset int) *SweepResultDetailsQuery {
	srdq.ctx.Offset = &offset
	return srdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srdq *SweepResultDetailsQuery) Unique(unique bool) *SweepResultDetailsQuery {
	srdq.ctx.Unique = &unique
	return srdq
}

// Order specifies how the records should be ordered.
func (srdq *SweepResultDetailsQuery) Order(o ...sweepresultdetails.OrderOption) *SweepResultDetailsQuery {
	srdq.order = append(srdq.order, o...)
	return srdq
}

// QueryCreator chains the current query on the "creator" edge.
func (srdq *SweepResultDetailsQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: srdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.CreatorTable, sweepresultdetails.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(srdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (srdq *SweepResultDetailsQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: srdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.UpdaterTable, sweepresultdetails.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(srdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweep chains the current query on the "sweep" edge.
func (srdq *SweepResultDetailsQuery) QuerySweep() *SweepQuery {
	query := (&SweepClient{config: srdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, selector),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepTable, sweepresultdetails.SweepColumn),
		)
		fromU = sqlgraph.SetNeighbors(srdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweepSchedule chains the current query on the "sweep_schedule" edge.
func (srdq *SweepResultDetailsQuery) QuerySweepSchedule() *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: srdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, selector),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepScheduleTable, sweepresultdetails.SweepScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(srdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySweepResult chains the current query on the "sweep_result" edge.
func (srdq *SweepResultDetailsQuery) QuerySweepResult() *SweepResultQuery {
	query := (&SweepResultClient{config: srdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, selector),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepResultTable, sweepresultdetails.SweepResultColumn),
		)
		fromU = sqlgraph.SetNeighbors(srdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SweepResultDetails entity from the query.
// Returns a *NotFoundError when no SweepResultDetails was found.
func (srdq *SweepResultDetailsQuery) First(ctx context.Context) (*SweepResultDetails, error) {
	nodes, err := srdq.Limit(1).All(setContextOp(ctx, srdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sweepresultdetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) FirstX(ctx context.Context) *SweepResultDetails {
	node, err := srdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SweepResultDetails ID from the query.
// Returns a *NotFoundError when no SweepResultDetails ID was found.
func (srdq *SweepResultDetailsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = srdq.Limit(1).IDs(setContextOp(ctx, srdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sweepresultdetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) FirstIDX(ctx context.Context) int {
	id, err := srdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SweepResultDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SweepResultDetails entity is found.
// Returns a *NotFoundError when no SweepResultDetails entities are found.
func (srdq *SweepResultDetailsQuery) Only(ctx context.Context) (*SweepResultDetails, error) {
	nodes, err := srdq.Limit(2).All(setContextOp(ctx, srdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sweepresultdetails.Label}
	default:
		return nil, &NotSingularError{sweepresultdetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) OnlyX(ctx context.Context) *SweepResultDetails {
	node, err := srdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SweepResultDetails ID in the query.
// Returns a *NotSingularError when more than one SweepResultDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (srdq *SweepResultDetailsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = srdq.Limit(2).IDs(setContextOp(ctx, srdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sweepresultdetails.Label}
	default:
		err = &NotSingularError{sweepresultdetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) OnlyIDX(ctx context.Context) int {
	id, err := srdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SweepResultDetailsSlice.
func (srdq *SweepResultDetailsQuery) All(ctx context.Context) ([]*SweepResultDetails, error) {
	ctx = setContextOp(ctx, srdq.ctx, "All")
	if err := srdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SweepResultDetails, *SweepResultDetailsQuery]()
	return withInterceptors[[]*SweepResultDetails](ctx, srdq, qr, srdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) AllX(ctx context.Context) []*SweepResultDetails {
	nodes, err := srdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SweepResultDetails IDs.
func (srdq *SweepResultDetailsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if srdq.ctx.Unique == nil && srdq.path != nil {
		srdq.Unique(true)
	}
	ctx = setContextOp(ctx, srdq.ctx, "IDs")
	if err = srdq.Select(sweepresultdetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) IDsX(ctx context.Context) []int {
	ids, err := srdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srdq *SweepResultDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srdq.ctx, "Count")
	if err := srdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srdq, querierCount[*SweepResultDetailsQuery](), srdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) CountX(ctx context.Context) int {
	count, err := srdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srdq *SweepResultDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srdq.ctx, "Exist")
	switch _, err := srdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srdq *SweepResultDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := srdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SweepResultDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srdq *SweepResultDetailsQuery) Clone() *SweepResultDetailsQuery {
	if srdq == nil {
		return nil
	}
	return &SweepResultDetailsQuery{
		config:            srdq.config,
		ctx:               srdq.ctx.Clone(),
		order:             append([]sweepresultdetails.OrderOption{}, srdq.order...),
		inters:            append([]Interceptor{}, srdq.inters...),
		predicates:        append([]predicate.SweepResultDetails{}, srdq.predicates...),
		withCreator:       srdq.withCreator.Clone(),
		withUpdater:       srdq.withUpdater.Clone(),
		withSweep:         srdq.withSweep.Clone(),
		withSweepSchedule: srdq.withSweepSchedule.Clone(),
		withSweepResult:   srdq.withSweepResult.Clone(),
		// clone intermediate query.
		sql:  srdq.sql.Clone(),
		path: srdq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (srdq *SweepResultDetailsQuery) WithCreator(opts ...func(*AdminQuery)) *SweepResultDetailsQuery {
	query := (&AdminClient{config: srdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srdq.withCreator = query
	return srdq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (srdq *SweepResultDetailsQuery) WithUpdater(opts ...func(*AdminQuery)) *SweepResultDetailsQuery {
	query := (&AdminClient{config: srdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srdq.withUpdater = query
	return srdq
}

// WithSweep tells the query-builder to eager-load the nodes that are connected to
// the "sweep" edge. The optional arguments are used to configure the query builder of the edge.
func (srdq *SweepResultDetailsQuery) WithSweep(opts ...func(*SweepQuery)) *SweepResultDetailsQuery {
	query := (&SweepClient{config: srdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srdq.withSweep = query
	return srdq
}

// WithSweepSchedule tells the query-builder to eager-load the nodes that are connected to
// the "sweep_schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (srdq *SweepResultDetailsQuery) WithSweepSchedule(opts ...func(*SweepScheduleQuery)) *SweepResultDetailsQuery {
	query := (&SweepScheduleClient{config: srdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srdq.withSweepSchedule = query
	return srdq
}

// WithSweepResult tells the query-builder to eager-load the nodes that are connected to
// the "sweep_result" edge. The optional arguments are used to configure the query builder of the edge.
func (srdq *SweepResultDetailsQuery) WithSweepResult(opts ...func(*SweepResultQuery)) *SweepResultDetailsQuery {
	query := (&SweepResultClient{config: srdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srdq.withSweepResult = query
	return srdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SweepResultDetails.Query().
//		GroupBy(sweepresultdetails.FieldCreateTime).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (srdq *SweepResultDetailsQuery) GroupBy(field string, fields ...string) *SweepResultDetailsGroupBy {
	srdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SweepResultDetailsGroupBy{build: srdq}
	grbuild.flds = &srdq.ctx.Fields
	grbuild.label = sweepresultdetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.SweepResultDetails.Query().
//		Select(sweepresultdetails.FieldCreateTime).
//		Scan(ctx, &v)
func (srdq *SweepResultDetailsQuery) Select(fields ...string) *SweepResultDetailsSelect {
	srdq.ctx.Fields = append(srdq.ctx.Fields, fields...)
	sbuild := &SweepResultDetailsSelect{SweepResultDetailsQuery: srdq}
	sbuild.label = sweepresultdetails.Label
	sbuild.flds, sbuild.scan = &srdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SweepResultDetailsSelect configured with the given aggregations.
func (srdq *SweepResultDetailsQuery) Aggregate(fns ...AggregateFunc) *SweepResultDetailsSelect {
	return srdq.Select().Aggregate(fns...)
}

func (srdq *SweepResultDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srdq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srdq); err != nil {
				return err
			}
		}
	}
	for _, f := range srdq.ctx.Fields {
		if !sweepresultdetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if srdq.path != nil {
		prev, err := srdq.path(ctx)
		if err != nil {
			return err
		}
		srdq.sql = prev
	}
	return nil
}

func (srdq *SweepResultDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SweepResultDetails, error) {
	var (
		nodes       = []*SweepResultDetails{}
		_spec       = srdq.querySpec()
		loadedTypes = [5]bool{
			srdq.withCreator != nil,
			srdq.withUpdater != nil,
			srdq.withSweep != nil,
			srdq.withSweepSchedule != nil,
			srdq.withSweepResult != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SweepResultDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SweepResultDetails{config: srdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srdq.withCreator; query != nil {
		if err := srdq.loadCreator(ctx, query, nodes, nil,
			func(n *SweepResultDetails, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := srdq.withUpdater; query != nil {
		if err := srdq.loadUpdater(ctx, query, nodes, nil,
			func(n *SweepResultDetails, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := srdq.withSweep; query != nil {
		if err := srdq.loadSweep(ctx, query, nodes, nil,
			func(n *SweepResultDetails, e *Sweep) { n.Edges.Sweep = e }); err != nil {
			return nil, err
		}
	}
	if query := srdq.withSweepSchedule; query != nil {
		if err := srdq.loadSweepSchedule(ctx, query, nodes, nil,
			func(n *SweepResultDetails, e *SweepSchedule) { n.Edges.SweepSchedule = e }); err != nil {
			return nil, err
		}
	}
	if query := srdq.withSweepResult; query != nil {
		if err := srdq.loadSweepResult(ctx, query, nodes, nil,
			func(n *SweepResultDetails, e *SweepResult) { n.Edges.SweepResult = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srdq *SweepResultDetailsQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*SweepResultDetails, init func(*SweepResultDetails), assign func(*SweepResultDetails, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepResultDetails)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srdq *SweepResultDetailsQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*SweepResultDetails, init func(*SweepResultDetails), assign func(*SweepResultDetails, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepResultDetails)
	for i := range nodes {
		fk := nodes[i].UpdaterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updater_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srdq *SweepResultDetailsQuery) loadSweep(ctx context.Context, query *SweepQuery, nodes []*SweepResultDetails, init func(*SweepResultDetails), assign func(*SweepResultDetails, *Sweep)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepResultDetails)
	for i := range nodes {
		fk := nodes[i].SweepID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sweep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sweep_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srdq *SweepResultDetailsQuery) loadSweepSchedule(ctx context.Context, query *SweepScheduleQuery, nodes []*SweepResultDetails, init func(*SweepResultDetails), assign func(*SweepResultDetails, *SweepSchedule)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepResultDetails)
	for i := range nodes {
		fk := nodes[i].SweepScheduleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sweepschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sweep_schedule_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srdq *SweepResultDetailsQuery) loadSweepResult(ctx context.Context, query *SweepResultQuery, nodes []*SweepResultDetails, init func(*SweepResultDetails), assign func(*SweepResultDetails, *SweepResult)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SweepResultDetails)
	for i := range nodes {
		fk := nodes[i].SweepResultID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sweepresult.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sweep_result_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (srdq *SweepResultDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srdq.querySpec()
	_spec.Node.Columns = srdq.ctx.Fields
	if len(srdq.ctx.Fields) > 0 {
		_spec.Unique = srdq.ctx.Unique != nil && *srdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srdq.driver, _spec)
}

func (srdq *SweepResultDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sweepresultdetails.Table, sweepresultdetails.Columns, sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt))
	_spec.From = srdq.sql
	if unique := srdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srdq.path != nil {
		_spec.Unique = true
	}
	if fields := srdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sweepresultdetails.FieldID)
		for i := range fields {
			if fields[i] != sweepresultdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srdq.withCreator != nil {
			_spec.Node.AddColumnOnce(sweepresultdetails.FieldCreatorID)
		}
		if srdq.withUpdater != nil {
			_spec.Node.AddColumnOnce(sweepresultdetails.FieldUpdaterID)
		}
		if srdq.withSweep != nil {
			_spec.Node.AddColumnOnce(sweepresultdetails.FieldSweepID)
		}
		if srdq.withSweepSchedule != nil {
			_spec.Node.AddColumnOnce(sweepresultdetails.FieldSweepScheduleID)
		}
		if srdq.withSweepResult != nil {
			_spec.Node.AddColumnOnce(sweepresultdetails.FieldSweepResultID)
		}
	}
	if ps := srdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srdq *SweepResultDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srdq.driver.Dialect())
	t1 := builder.Table(sweepresultdetails.Table)
	columns := srdq.ctx.Fields
	if len(columns) == 0 {
		columns = sweepresultdetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srdq.sql != nil {
		selector = srdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srdq.ctx.Unique != nil && *srdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range srdq.predicates {
		p(selector)
	}
	for _, p := range srdq.order {
		p(selector)
	}
	if offset := srdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SweepResultDetailsGroupBy is the group-by builder for SweepResultDetails entities.
type SweepResultDetailsGroupBy struct {
	selector
	build *SweepResultDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srdgb *SweepResultDetailsGroupBy) Aggregate(fns ...AggregateFunc) *SweepResultDetailsGroupBy {
	srdgb.fns = append(srdgb.fns, fns...)
	return srdgb
}

// Scan applies the selector query and scans the result into the given value.
func (srdgb *SweepResultDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srdgb.build.ctx, "GroupBy")
	if err := srdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SweepResultDetailsQuery, *SweepResultDetailsGroupBy](ctx, srdgb.build, srdgb, srdgb.build.inters, v)
}

func (srdgb *SweepResultDetailsGroupBy) sqlScan(ctx context.Context, root *SweepResultDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srdgb.fns))
	for _, fn := range srdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srdgb.flds)+len(srdgb.fns))
		for _, f := range *srdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SweepResultDetailsSelect is the builder for selecting fields of SweepResultDetails entities.
type SweepResultDetailsSelect struct {
	*SweepResultDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srds *SweepResultDetailsSelect) Aggregate(fns ...AggregateFunc) *SweepResultDetailsSelect {
	srds.fns = append(srds.fns, fns...)
	return srds
}

// Scan applies the selector query and scans the result into the given value.
func (srds *SweepResultDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srds.ctx, "Select")
	if err := srds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SweepResultDetailsQuery, *SweepResultDetailsSelect](ctx, srds.SweepResultDetailsQuery, srds, srds.inters, v)
}

func (srds *SweepResultDetailsSelect) sqlScan(ctx context.Context, root *SweepResultDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srds.fns))
	for _, fn := range srds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
