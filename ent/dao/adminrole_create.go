// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminRoleCreate is the builder for creating a AdminRole entity.
type AdminRoleCreate struct {
	config
	mutation *AdminRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (arc *AdminRoleCreate) SetCreatedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableCreatedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetCreatedBy sets the "created_by" field.
func (arc *AdminRoleCreate) SetCreatedBy(i int) *AdminRoleCreate {
	arc.mutation.SetCreatedBy(i)
	return arc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableCreatedBy(i *int) *AdminRoleCreate {
	if i != nil {
		arc.SetCreatedBy(*i)
	}
	return arc
}

// SetName sets the "name" field.
func (arc *AdminRoleCreate) SetName(s string) *AdminRoleCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetDeletedAt sets the "deleted_at" field.
func (arc *AdminRoleCreate) SetDeletedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetDeletedAt(t)
	return arc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableDeletedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetDeletedAt(*t)
	}
	return arc
}

// SetUpdatedBy sets the "updated_by" field.
func (arc *AdminRoleCreate) SetUpdatedBy(i int) *AdminRoleCreate {
	arc.mutation.SetUpdatedBy(i)
	return arc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableUpdatedBy(i *int) *AdminRoleCreate {
	if i != nil {
		arc.SetUpdatedBy(*i)
	}
	return arc
}

// SetUpdatedAt sets the "updated_at" field.
func (arc *AdminRoleCreate) SetUpdatedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetUpdatedAt(t)
	return arc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableUpdatedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetUpdatedAt(*t)
	}
	return arc
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (arc *AdminRoleCreate) SetCreatorID(id int) *AdminRoleCreate {
	arc.mutation.SetCreatorID(id)
	return arc
}

// SetNillableCreatorID sets the "creator" edge to the Admin entity by ID if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableCreatorID(id *int) *AdminRoleCreate {
	if id != nil {
		arc = arc.SetCreatorID(*id)
	}
	return arc
}

// SetCreator sets the "creator" edge to the Admin entity.
func (arc *AdminRoleCreate) SetCreator(a *Admin) *AdminRoleCreate {
	return arc.SetCreatorID(a.ID)
}

// SetUpdatorID sets the "updator" edge to the Admin entity by ID.
func (arc *AdminRoleCreate) SetUpdatorID(id int) *AdminRoleCreate {
	arc.mutation.SetUpdatorID(id)
	return arc
}

// SetNillableUpdatorID sets the "updator" edge to the Admin entity by ID if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableUpdatorID(id *int) *AdminRoleCreate {
	if id != nil {
		arc = arc.SetUpdatorID(*id)
	}
	return arc
}

// SetUpdator sets the "updator" edge to the Admin entity.
func (arc *AdminRoleCreate) SetUpdator(a *Admin) *AdminRoleCreate {
	return arc.SetUpdatorID(a.ID)
}

// AddAdminIDs adds the "admins" edge to the Admin entity by IDs.
func (arc *AdminRoleCreate) AddAdminIDs(ids ...int) *AdminRoleCreate {
	arc.mutation.AddAdminIDs(ids...)
	return arc
}

// AddAdmins adds the "admins" edges to the Admin entity.
func (arc *AdminRoleCreate) AddAdmins(a ...*Admin) *AdminRoleCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddAdminIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (arc *AdminRoleCreate) Mutation() *AdminRoleMutation {
	return arc.mutation
}

// Save creates the AdminRole in the database.
func (arc *AdminRoleCreate) Save(ctx context.Context) (*AdminRole, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AdminRoleCreate) SaveX(ctx context.Context) *AdminRole {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AdminRoleCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AdminRoleCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AdminRoleCreate) defaults() {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := adminrole.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		v := adminrole.DefaultUpdatedAt()
		arc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AdminRoleCreate) check() error {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "AdminRole.created_at"`)}
	}
	if v, ok := arc.mutation.CreatedBy(); ok {
		if err := adminrole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.created_by": %w`, err)}
		}
	}
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`dao: missing required field "AdminRole.name"`)}
	}
	if v, ok := arc.mutation.Name(); ok {
		if err := adminrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "AdminRole.name": %w`, err)}
		}
	}
	if v, ok := arc.mutation.UpdatedBy(); ok {
		if err := adminrole.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.updated_by": %w`, err)}
		}
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "AdminRole.updated_at"`)}
	}
	return nil
}

func (arc *AdminRoleCreate) sqlSave(ctx context.Context) (*AdminRole, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AdminRoleCreate) createSpec() (*AdminRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminRole{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(adminrole.Table, sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt))
	)
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.SetField(adminrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(adminrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.DeletedAt(); ok {
		_spec.SetField(adminrole.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := arc.mutation.UpdatedAt(); ok {
		_spec.SetField(adminrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := arc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.UpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdatorTable,
			Columns: []string{adminrole.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminRoleCreateBulk is the builder for creating many AdminRole entities in bulk.
type AdminRoleCreateBulk struct {
	config
	err      error
	builders []*AdminRoleCreate
}

// Save creates the AdminRole entities in the database.
func (arcb *AdminRoleCreateBulk) Save(ctx context.Context) ([]*AdminRole, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AdminRole, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AdminRoleCreateBulk) SaveX(ctx context.Context) []*AdminRole {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AdminRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AdminRoleCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
