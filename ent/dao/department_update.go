// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DepartmentUpdate) SetDeletedAt(t time.Time) *DepartmentUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableDeletedAt(t *time.Time) *DepartmentUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DepartmentUpdate) ClearDeletedAt() *DepartmentUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DepartmentUpdate) SetUpdatedBy(i int) *DepartmentUpdate {
	du.mutation.SetUpdatedBy(i)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableUpdatedBy(i *int) *DepartmentUpdate {
	if i != nil {
		du.SetUpdatedBy(*i)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DepartmentUpdate) SetUpdatedAt(t time.Time) *DepartmentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetName sets the "name" field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableName(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetParentID sets the "parent_id" field.
func (du *DepartmentUpdate) SetParentID(i int) *DepartmentUpdate {
	du.mutation.SetParentID(i)
	return du
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableParentID(i *int) *DepartmentUpdate {
	if i != nil {
		du.SetParentID(*i)
	}
	return du
}

// ClearParentID clears the value of the "parent_id" field.
func (du *DepartmentUpdate) ClearParentID() *DepartmentUpdate {
	du.mutation.ClearParentID()
	return du
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (du *DepartmentUpdate) SetUpdaterID(id int) *DepartmentUpdate {
	du.mutation.SetUpdaterID(id)
	return du
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (du *DepartmentUpdate) SetUpdater(a *Admin) *DepartmentUpdate {
	return du.SetUpdaterID(a.ID)
}

// SetParent sets the "parent" edge to the Department entity.
func (du *DepartmentUpdate) SetParent(d *Department) *DepartmentUpdate {
	return du.SetParentID(d.ID)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (du *DepartmentUpdate) AddEmployeeIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddEmployeeIDs(ids...)
	return du
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (du *DepartmentUpdate) AddEmployees(e ...*Employee) *DepartmentUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.AddEmployeeIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (du *DepartmentUpdate) AddChildIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddChildIDs(ids...)
	return du
}

// AddChildren adds the "children" edges to the Department entity.
func (du *DepartmentUpdate) AddChildren(d ...*Department) *DepartmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (du *DepartmentUpdate) ClearUpdater() *DepartmentUpdate {
	du.mutation.ClearUpdater()
	return du
}

// ClearParent clears the "parent" edge to the Department entity.
func (du *DepartmentUpdate) ClearParent() *DepartmentUpdate {
	du.mutation.ClearParent()
	return du
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (du *DepartmentUpdate) ClearEmployees() *DepartmentUpdate {
	du.mutation.ClearEmployees()
	return du
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (du *DepartmentUpdate) RemoveEmployeeIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveEmployeeIDs(ids...)
	return du
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (du *DepartmentUpdate) RemoveEmployees(e ...*Employee) *DepartmentUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.RemoveEmployeeIDs(ids...)
}

// ClearChildren clears all "children" edges to the Department entity.
func (du *DepartmentUpdate) ClearChildren() *DepartmentUpdate {
	du.mutation.ClearChildren()
	return du
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (du *DepartmentUpdate) RemoveChildIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveChildIDs(ids...)
	return du
}

// RemoveChildren removes "children" edges to Department entities.
func (du *DepartmentUpdate) RemoveChildren(d ...*Department) *DepartmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DepartmentUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		if department.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized department.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := department.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (du *DepartmentUpdate) check() error {
	if v, ok := du.mutation.UpdatedBy(); ok {
		if err := department.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Department.updated_by": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.ParentID(); ok {
		if err := department.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`dao: validator failed for field "Department.parent_id": %w`, err)}
		}
	}
	if _, ok := du.mutation.CreatorID(); du.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Department.creator"`)
	}
	if _, ok := du.mutation.UpdaterID(); du.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Department.updater"`)
	}
	return nil
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(department.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(department.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if du.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !du.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DepartmentUpdateOne) SetDeletedAt(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableDeletedAt(t *time.Time) *DepartmentUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DepartmentUpdateOne) ClearDeletedAt() *DepartmentUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DepartmentUpdateOne) SetUpdatedBy(i int) *DepartmentUpdateOne {
	duo.mutation.SetUpdatedBy(i)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableUpdatedBy(i *int) *DepartmentUpdateOne {
	if i != nil {
		duo.SetUpdatedBy(*i)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DepartmentUpdateOne) SetUpdatedAt(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetName sets the "name" field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableName(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetParentID sets the "parent_id" field.
func (duo *DepartmentUpdateOne) SetParentID(i int) *DepartmentUpdateOne {
	duo.mutation.SetParentID(i)
	return duo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableParentID(i *int) *DepartmentUpdateOne {
	if i != nil {
		duo.SetParentID(*i)
	}
	return duo
}

// ClearParentID clears the value of the "parent_id" field.
func (duo *DepartmentUpdateOne) ClearParentID() *DepartmentUpdateOne {
	duo.mutation.ClearParentID()
	return duo
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (duo *DepartmentUpdateOne) SetUpdaterID(id int) *DepartmentUpdateOne {
	duo.mutation.SetUpdaterID(id)
	return duo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (duo *DepartmentUpdateOne) SetUpdater(a *Admin) *DepartmentUpdateOne {
	return duo.SetUpdaterID(a.ID)
}

// SetParent sets the "parent" edge to the Department entity.
func (duo *DepartmentUpdateOne) SetParent(d *Department) *DepartmentUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (duo *DepartmentUpdateOne) AddEmployeeIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddEmployeeIDs(ids...)
	return duo
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (duo *DepartmentUpdateOne) AddEmployees(e ...*Employee) *DepartmentUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.AddEmployeeIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (duo *DepartmentUpdateOne) AddChildIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddChildIDs(ids...)
	return duo
}

// AddChildren adds the "children" edges to the Department entity.
func (duo *DepartmentUpdateOne) AddChildren(d ...*Department) *DepartmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (duo *DepartmentUpdateOne) ClearUpdater() *DepartmentUpdateOne {
	duo.mutation.ClearUpdater()
	return duo
}

// ClearParent clears the "parent" edge to the Department entity.
func (duo *DepartmentUpdateOne) ClearParent() *DepartmentUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (duo *DepartmentUpdateOne) ClearEmployees() *DepartmentUpdateOne {
	duo.mutation.ClearEmployees()
	return duo
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (duo *DepartmentUpdateOne) RemoveEmployeeIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveEmployeeIDs(ids...)
	return duo
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (duo *DepartmentUpdateOne) RemoveEmployees(e ...*Employee) *DepartmentUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.RemoveEmployeeIDs(ids...)
}

// ClearChildren clears all "children" edges to the Department entity.
func (duo *DepartmentUpdateOne) ClearChildren() *DepartmentUpdateOne {
	duo.mutation.ClearChildren()
	return duo
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (duo *DepartmentUpdateOne) RemoveChildIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveChildIDs(ids...)
	return duo
}

// RemoveChildren removes "children" edges to Department entities.
func (duo *DepartmentUpdateOne) RemoveChildren(d ...*Department) *DepartmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DepartmentUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		if department.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized department.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := department.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (duo *DepartmentUpdateOne) check() error {
	if v, ok := duo.mutation.UpdatedBy(); ok {
		if err := department.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "Department.updated_by": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ParentID(); ok {
		if err := department.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`dao: validator failed for field "Department.parent_id": %w`, err)}
		}
	}
	if _, ok := duo.mutation.CreatorID(); duo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Department.creator"`)
	}
	if _, ok := duo.mutation.UpdaterID(); duo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Department.updater"`)
	}
	return nil
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(department.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(department.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if duo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.UpdaterTable,
			Columns: []string{department.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !duo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.EmployeesTable,
			Columns: []string{department.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
