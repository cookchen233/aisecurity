// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/enums"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 设备品牌
	Brand enums.DeviceBrand `json:"brand" validate:"required"`
	// 设备型号
	Model enums.DeviceModel `json:"model" validate:"required"`
	// 设备名称
	Name string `json:"name" validate:"required"`
	// 设备序列号
	Sn string `json:"sn" validate:"required"`
	// 设备类型
	DeviceType enums.DeviceType `json:"device_type" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceQuery when eager-loading is set.
	Edges        DeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceEdges holds the relations/edges for other nodes in the graph.
type DeviceEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Admin `json:"creator,omitempty"`
	// Updater holds the value of the updater edge.
	Updater *Admin `json:"updater,omitempty"`
	// IpcEventDevice holds the value of the ipc_event_device edge.
	IpcEventDevice []*IPCEvent `json:"ipc_event_device,omitempty"`
	// DeviceInstallationDevice holds the value of the device_installation_device edge.
	DeviceInstallationDevice []*DeviceInstallation `json:"device_installation_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceEdges) CreatorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceEdges) UpdaterOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updater == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updater, nil
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// IpcEventDeviceOrErr returns the IpcEventDevice value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) IpcEventDeviceOrErr() ([]*IPCEvent, error) {
	if e.loadedTypes[2] {
		return e.IpcEventDevice, nil
	}
	return nil, &NotLoadedError{edge: "ipc_event_device"}
}

// DeviceInstallationDeviceOrErr returns the DeviceInstallationDevice value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) DeviceInstallationDeviceOrErr() ([]*DeviceInstallation, error) {
	if e.loadedTypes[3] {
		return e.DeviceInstallationDevice, nil
	}
	return nil, &NotLoadedError{edge: "device_installation_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldID, device.FieldCreatedBy, device.FieldUpdatedBy, device.FieldBrand, device.FieldModel, device.FieldDeviceType:
			values[i] = new(sql.NullInt64)
		case device.FieldName, device.FieldSn:
			values[i] = new(sql.NullString)
		case device.FieldCreatedAt, device.FieldDeletedAt, device.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case device.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case device.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = int(value.Int64)
			}
		case device.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = new(time.Time)
				*d.DeletedAt = value.Time
			}
		case device.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = int(value.Int64)
			}
		case device.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case device.FieldBrand:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				d.Brand = enums.DeviceBrand(value.Int64)
			}
		case device.FieldModel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				d.Model = enums.DeviceModel(value.Int64)
			}
		case device.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case device.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				d.Sn = value.String
			}
		case device.FieldDeviceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_type", values[i])
			} else if value.Valid {
				d.DeviceType = enums.DeviceType(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Device.
// This includes values selected through modifiers, order, etc.
func (d *Device) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Device entity.
func (d *Device) QueryCreator() *AdminQuery {
	return NewDeviceClient(d.config).QueryCreator(d)
}

// QueryUpdater queries the "updater" edge of the Device entity.
func (d *Device) QueryUpdater() *AdminQuery {
	return NewDeviceClient(d.config).QueryUpdater(d)
}

// QueryIpcEventDevice queries the "ipc_event_device" edge of the Device entity.
func (d *Device) QueryIpcEventDevice() *IPCEventQuery {
	return NewDeviceClient(d.config).QueryIpcEventDevice(d)
}

// QueryDeviceInstallationDevice queries the "device_installation_device" edge of the Device entity.
func (d *Device) QueryDeviceInstallationDevice() *DeviceInstallationQuery {
	return NewDeviceClient(d.config).QueryDeviceInstallationDevice(d)
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return NewDeviceClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("dao: Device is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedBy))
	builder.WriteString(", ")
	if v := d.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(fmt.Sprintf("%v", d.Brand))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(fmt.Sprintf("%v", d.Model))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(d.Sn)
	builder.WriteString(", ")
	builder.WriteString("device_type=")
	builder.WriteString(fmt.Sprintf("%v", d.DeviceType))
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device
