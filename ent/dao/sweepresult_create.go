// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SweepResultCreate is the builder for creating a SweepResult entity.
type SweepResultCreate struct {
	config
	mutation *SweepResultMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (src *SweepResultCreate) SetCreateTime(t time.Time) *SweepResultCreate {
	src.mutation.SetCreateTime(t)
	return src
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (src *SweepResultCreate) SetNillableCreateTime(t *time.Time) *SweepResultCreate {
	if t != nil {
		src.SetCreateTime(*t)
	}
	return src
}

// SetCreatorID sets the "creator_id" field.
func (src *SweepResultCreate) SetCreatorID(i int) *SweepResultCreate {
	src.mutation.SetCreatorID(i)
	return src
}

// SetDeleteTime sets the "delete_time" field.
func (src *SweepResultCreate) SetDeleteTime(t time.Time) *SweepResultCreate {
	src.mutation.SetDeleteTime(t)
	return src
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (src *SweepResultCreate) SetNillableDeleteTime(t *time.Time) *SweepResultCreate {
	if t != nil {
		src.SetDeleteTime(*t)
	}
	return src
}

// SetUpdaterID sets the "updater_id" field.
func (src *SweepResultCreate) SetUpdaterID(i int) *SweepResultCreate {
	src.mutation.SetUpdaterID(i)
	return src
}

// SetUpdateTime sets the "update_time" field.
func (src *SweepResultCreate) SetUpdateTime(t time.Time) *SweepResultCreate {
	src.mutation.SetUpdateTime(t)
	return src
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (src *SweepResultCreate) SetNillableUpdateTime(t *time.Time) *SweepResultCreate {
	if t != nil {
		src.SetUpdateTime(*t)
	}
	return src
}

// SetSweepID sets the "sweep_id" field.
func (src *SweepResultCreate) SetSweepID(i int) *SweepResultCreate {
	src.mutation.SetSweepID(i)
	return src
}

// SetSweepScheduleID sets the "sweep_schedule_id" field.
func (src *SweepResultCreate) SetSweepScheduleID(i int) *SweepResultCreate {
	src.mutation.SetSweepScheduleID(i)
	return src
}

// SetCheckInTime sets the "check_in_time" field.
func (src *SweepResultCreate) SetCheckInTime(t time.Time) *SweepResultCreate {
	src.mutation.SetCheckInTime(t)
	return src
}

// SetNillableCheckInTime sets the "check_in_time" field if the given value is not nil.
func (src *SweepResultCreate) SetNillableCheckInTime(t *time.Time) *SweepResultCreate {
	if t != nil {
		src.SetCheckInTime(*t)
	}
	return src
}

// SetCheckInImage sets the "check_in_image" field.
func (src *SweepResultCreate) SetCheckInImage(ti types.UploadedImage) *SweepResultCreate {
	src.mutation.SetCheckInImage(ti)
	return src
}

// SetNillableCheckInImage sets the "check_in_image" field if the given value is not nil.
func (src *SweepResultCreate) SetNillableCheckInImage(ti *types.UploadedImage) *SweepResultCreate {
	if ti != nil {
		src.SetCheckInImage(*ti)
	}
	return src
}

// SetSweepJobs sets the "sweep_jobs" field.
func (src *SweepResultCreate) SetSweepJobs(tj []*types.SweepJob) *SweepResultCreate {
	src.mutation.SetSweepJobs(tj)
	return src
}

// SetCreator sets the "creator" edge to the Admin entity.
func (src *SweepResultCreate) SetCreator(a *Admin) *SweepResultCreate {
	return src.SetCreatorID(a.ID)
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (src *SweepResultCreate) SetUpdater(a *Admin) *SweepResultCreate {
	return src.SetUpdaterID(a.ID)
}

// SetSweep sets the "sweep" edge to the Sweep entity.
func (src *SweepResultCreate) SetSweep(s *Sweep) *SweepResultCreate {
	return src.SetSweepID(s.ID)
}

// SetSweepSchedule sets the "sweep_schedule" edge to the SweepSchedule entity.
func (src *SweepResultCreate) SetSweepSchedule(s *SweepSchedule) *SweepResultCreate {
	return src.SetSweepScheduleID(s.ID)
}

// AddSweepResultDetailIDs adds the "sweep_result_details" edge to the SweepResultDetails entity by IDs.
func (src *SweepResultCreate) AddSweepResultDetailIDs(ids ...int) *SweepResultCreate {
	src.mutation.AddSweepResultDetailIDs(ids...)
	return src
}

// AddSweepResultDetails adds the "sweep_result_details" edges to the SweepResultDetails entity.
func (src *SweepResultCreate) AddSweepResultDetails(s ...*SweepResultDetails) *SweepResultCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return src.AddSweepResultDetailIDs(ids...)
}

// Mutation returns the SweepResultMutation object of the builder.
func (src *SweepResultCreate) Mutation() *SweepResultMutation {
	return src.mutation
}

// Save creates the SweepResult in the database.
func (src *SweepResultCreate) Save(ctx context.Context) (*SweepResult, error) {
	if err := src.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SweepResultCreate) SaveX(ctx context.Context) *SweepResult {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SweepResultCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SweepResultCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SweepResultCreate) defaults() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		if sweepresult.DefaultCreateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepresult.DefaultCreateTime (forgotten import dao/runtime?)")
		}
		v := sweepresult.DefaultCreateTime()
		src.mutation.SetCreateTime(v)
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		if sweepresult.DefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized sweepresult.DefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := sweepresult.DefaultUpdateTime()
		src.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (src *SweepResultCreate) check() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`dao: missing required field "SweepResult.create_time"`)}
	}
	if _, ok := src.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`dao: missing required field "SweepResult.creator_id"`)}
	}
	if v, ok := src.mutation.CreatorID(); ok {
		if err := sweepresult.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`dao: validator failed for field "SweepResult.creator_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater_id", err: errors.New(`dao: missing required field "SweepResult.updater_id"`)}
	}
	if v, ok := src.mutation.UpdaterID(); ok {
		if err := sweepresult.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "SweepResult.updater_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`dao: missing required field "SweepResult.update_time"`)}
	}
	if _, ok := src.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep_id", err: errors.New(`dao: missing required field "SweepResult.sweep_id"`)}
	}
	if v, ok := src.mutation.SweepID(); ok {
		if err := sweepresult.SweepIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_id", err: fmt.Errorf(`dao: validator failed for field "SweepResult.sweep_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.SweepScheduleID(); !ok {
		return &ValidationError{Name: "sweep_schedule_id", err: errors.New(`dao: missing required field "SweepResult.sweep_schedule_id"`)}
	}
	if v, ok := src.mutation.SweepScheduleID(); ok {
		if err := sweepresult.SweepScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "sweep_schedule_id", err: fmt.Errorf(`dao: validator failed for field "SweepResult.sweep_schedule_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "SweepResult.creator"`)}
	}
	if _, ok := src.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "SweepResult.updater"`)}
	}
	if _, ok := src.mutation.SweepID(); !ok {
		return &ValidationError{Name: "sweep", err: errors.New(`dao: missing required edge "SweepResult.sweep"`)}
	}
	if _, ok := src.mutation.SweepScheduleID(); !ok {
		return &ValidationError{Name: "sweep_schedule", err: errors.New(`dao: missing required edge "SweepResult.sweep_schedule"`)}
	}
	return nil
}

func (src *SweepResultCreate) sqlSave(ctx context.Context) (*SweepResult, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SweepResultCreate) createSpec() (*SweepResult, *sqlgraph.CreateSpec) {
	var (
		_node = &SweepResult{config: src.config}
		_spec = sqlgraph.NewCreateSpec(sweepresult.Table, sqlgraph.NewFieldSpec(sweepresult.FieldID, field.TypeInt))
	)
	if value, ok := src.mutation.CreateTime(); ok {
		_spec.SetField(sweepresult.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := src.mutation.DeleteTime(); ok {
		_spec.SetField(sweepresult.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := src.mutation.UpdateTime(); ok {
		_spec.SetField(sweepresult.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := src.mutation.CheckInTime(); ok {
		_spec.SetField(sweepresult.FieldCheckInTime, field.TypeTime, value)
		_node.CheckInTime = value
	}
	if value, ok := src.mutation.CheckInImage(); ok {
		_spec.SetField(sweepresult.FieldCheckInImage, field.TypeJSON, value)
		_node.CheckInImage = value
	}
	if value, ok := src.mutation.SweepJobs(); ok {
		_spec.SetField(sweepresult.FieldSweepJobs, field.TypeJSON, value)
		_node.SweepJobs = value
	}
	if nodes := src.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.CreatorTable,
			Columns: []string{sweepresult.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.UpdaterTable,
			Columns: []string{sweepresult.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdaterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SweepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.SweepTable,
			Columns: []string{sweepresult.SweepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweep.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SweepScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sweepresult.SweepScheduleTable,
			Columns: []string{sweepresult.SweepScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SweepScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SweepResultDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sweepresult.SweepResultDetailsTable,
			Columns: []string{sweepresult.SweepResultDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sweepresultdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SweepResultCreateBulk is the builder for creating many SweepResult entities in bulk.
type SweepResultCreateBulk struct {
	config
	err      error
	builders []*SweepResultCreate
}

// Save creates the SweepResult entities in the database.
func (srcb *SweepResultCreateBulk) Save(ctx context.Context) ([]*SweepResult, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SweepResult, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SweepResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SweepResultCreateBulk) SaveX(ctx context.Context) []*SweepResult {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SweepResultCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SweepResultCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
