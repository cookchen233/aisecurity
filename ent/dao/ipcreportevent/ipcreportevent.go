// Code generated by ent, DO NOT EDIT.

package ipcreportevent

import (
	"aisecurity/enums"
	"aisecurity/structs/types"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ipcreportevent type in the database.
	Label = "ipc_report_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeviceBrand holds the string denoting the device_brand field in the database.
	FieldDeviceBrand = "device_brand"
	// FieldDeviceModel holds the string denoting the device_model field in the database.
	FieldDeviceModel = "device_model"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldEventTime holds the string denoting the event_time field in the database.
	FieldEventTime = "event_time"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldEventStatus holds the string denoting the event_status field in the database.
	FieldEventStatus = "event_status"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldLabeledImages holds the string denoting the labeled_images field in the database.
	FieldLabeledImages = "labeled_images"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRawData holds the string denoting the raw_data field in the database.
	FieldRawData = "raw_data"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeUpdater holds the string denoting the updater edge name in mutations.
	EdgeUpdater = "updater"
	// EdgeVideo holds the string denoting the video edge name in mutations.
	EdgeVideo = "video"
	// Table holds the table name of the ipcreportevent in the database.
	Table = "ipc_report_events"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "ipc_report_events"
	// CreatorInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	CreatorInverseTable = "admins"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// UpdaterTable is the table that holds the updater relation/edge.
	UpdaterTable = "ipc_report_events"
	// UpdaterInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	UpdaterInverseTable = "admins"
	// UpdaterColumn is the table column denoting the updater relation/edge.
	UpdaterColumn = "updated_by"
	// VideoTable is the table that holds the video relation/edge.
	VideoTable = "ipc_report_events"
	// VideoInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoInverseTable = "videos"
	// VideoColumn is the table column denoting the video relation/edge.
	VideoColumn = "video_id"
)

// Columns holds all SQL columns for ipcreportevent fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldDeletedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldDeviceBrand,
	FieldDeviceModel,
	FieldDeviceID,
	FieldEventID,
	FieldEventTime,
	FieldEventType,
	FieldEventStatus,
	FieldImages,
	FieldLabeledImages,
	FieldVideoID,
	FieldDescription,
	FieldRawData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "aisecurity/ent/dao/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeviceBrand holds the default value on creation for the "device_brand" field.
	DefaultDeviceBrand enums.IPCReportEventDeviceBrand
	// DeviceBrandValidator is a validator for the "device_brand" field. It is called by the builders before save.
	DeviceBrandValidator func(int) error
	// DefaultDeviceModel holds the default value on creation for the "device_model" field.
	DefaultDeviceModel enums.IPCReportEventDeviceModel
	// DeviceModelValidator is a validator for the "device_model" field. It is called by the builders before save.
	DeviceModelValidator func(int) error
	// DeviceIDValidator is a validator for the "device_id" field. It is called by the builders before save.
	DeviceIDValidator func(string) error
	// EventIDValidator is a validator for the "event_id" field. It is called by the builders before save.
	EventIDValidator func(string) error
	// DefaultEventTime holds the default value on creation for the "event_time" field.
	DefaultEventTime func() time.Time
	// DefaultEventType holds the default value on creation for the "event_type" field.
	DefaultEventType enums.IPCReportEventType
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(int) error
	// DefaultEventStatus holds the default value on creation for the "event_status" field.
	DefaultEventStatus enums.IPCReportEventStatus
	// EventStatusValidator is a validator for the "event_status" field. It is called by the builders before save.
	EventStatusValidator func(int) error
	// DefaultImages holds the default value on creation for the "images" field.
	DefaultImages []*types.UploadedImage
	// DefaultLabeledImages holds the default value on creation for the "labeled_images" field.
	DefaultLabeledImages []*types.UploadedImage
	// VideoIDValidator is a validator for the "video_id" field. It is called by the builders before save.
	VideoIDValidator func(int) error
)

// OrderOption defines the ordering options for the IPCReportEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeviceBrand orders the results by the device_brand field.
func ByDeviceBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceBrand, opts...).ToFunc()
}

// ByDeviceModel orders the results by the device_model field.
func ByDeviceModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceModel, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByEventTime orders the results by the event_time field.
func ByEventTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventTime, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByEventStatus orders the results by the event_status field.
func ByEventStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventStatus, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRawData orders the results by the raw_data field.
func ByRawData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawData, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdaterField orders the results by updater field.
func ByUpdaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdaterStep(), sql.OrderByField(field, opts...))
	}
}

// ByVideoField orders the results by video field.
func ByVideoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoStep(), sql.OrderByField(field, opts...))
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newUpdaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdaterTable, UpdaterColumn),
	)
}
func newVideoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
	)
}
