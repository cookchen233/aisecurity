// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/video"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPCEventQuery is the builder for querying IPCEvent entities.
type IPCEventQuery struct {
	config
	ctx         *QueryContext
	order       []ipcevent.OrderOption
	inters      []Interceptor
	predicates  []predicate.IPCEvent
	withCreator *AdminQuery
	withUpdater *AdminQuery
	withVideo   *VideoQuery
	withDevice  *DeviceQuery
	withFixers  *EmployeeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IPCEventQuery builder.
func (ieq *IPCEventQuery) Where(ps ...predicate.IPCEvent) *IPCEventQuery {
	ieq.predicates = append(ieq.predicates, ps...)
	return ieq
}

// Limit the number of records to be returned by this query.
func (ieq *IPCEventQuery) Limit(limit int) *IPCEventQuery {
	ieq.ctx.Limit = &limit
	return ieq
}

// Offset to start from.
func (ieq *IPCEventQuery) Offset(offset int) *IPCEventQuery {
	ieq.ctx.Offset = &offset
	return ieq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ieq *IPCEventQuery) Unique(unique bool) *IPCEventQuery {
	ieq.ctx.Unique = &unique
	return ieq
}

// Order specifies how the records should be ordered.
func (ieq *IPCEventQuery) Order(o ...ipcevent.OrderOption) *IPCEventQuery {
	ieq.order = append(ieq.order, o...)
	return ieq
}

// QueryCreator chains the current query on the "creator" edge.
func (ieq *IPCEventQuery) QueryCreator() *AdminQuery {
	query := (&AdminClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcevent.Table, ipcevent.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcevent.CreatorTable, ipcevent.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdater chains the current query on the "updater" edge.
func (ieq *IPCEventQuery) QueryUpdater() *AdminQuery {
	query := (&AdminClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcevent.Table, ipcevent.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcevent.UpdaterTable, ipcevent.UpdaterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVideo chains the current query on the "video" edge.
func (ieq *IPCEventQuery) QueryVideo() *VideoQuery {
	query := (&VideoClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcevent.Table, ipcevent.FieldID, selector),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcevent.VideoTable, ipcevent.VideoColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (ieq *IPCEventQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcevent.Table, ipcevent.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipcevent.DeviceTable, ipcevent.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixers chains the current query on the "fixers" edge.
func (ieq *IPCEventQuery) QueryFixers() *EmployeeQuery {
	query := (&EmployeeClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipcevent.Table, ipcevent.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ipcevent.FixersTable, ipcevent.FixersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IPCEvent entity from the query.
// Returns a *NotFoundError when no IPCEvent was found.
func (ieq *IPCEventQuery) First(ctx context.Context) (*IPCEvent, error) {
	nodes, err := ieq.Limit(1).All(setContextOp(ctx, ieq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ipcevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ieq *IPCEventQuery) FirstX(ctx context.Context) *IPCEvent {
	node, err := ieq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IPCEvent ID from the query.
// Returns a *NotFoundError when no IPCEvent ID was found.
func (ieq *IPCEventQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ieq.Limit(1).IDs(setContextOp(ctx, ieq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ipcevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ieq *IPCEventQuery) FirstIDX(ctx context.Context) int {
	id, err := ieq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IPCEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IPCEvent entity is found.
// Returns a *NotFoundError when no IPCEvent entities are found.
func (ieq *IPCEventQuery) Only(ctx context.Context) (*IPCEvent, error) {
	nodes, err := ieq.Limit(2).All(setContextOp(ctx, ieq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ipcevent.Label}
	default:
		return nil, &NotSingularError{ipcevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ieq *IPCEventQuery) OnlyX(ctx context.Context) *IPCEvent {
	node, err := ieq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IPCEvent ID in the query.
// Returns a *NotSingularError when more than one IPCEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (ieq *IPCEventQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ieq.Limit(2).IDs(setContextOp(ctx, ieq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ipcevent.Label}
	default:
		err = &NotSingularError{ipcevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ieq *IPCEventQuery) OnlyIDX(ctx context.Context) int {
	id, err := ieq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IPCEvents.
func (ieq *IPCEventQuery) All(ctx context.Context) ([]*IPCEvent, error) {
	ctx = setContextOp(ctx, ieq.ctx, "All")
	if err := ieq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IPCEvent, *IPCEventQuery]()
	return withInterceptors[[]*IPCEvent](ctx, ieq, qr, ieq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ieq *IPCEventQuery) AllX(ctx context.Context) []*IPCEvent {
	nodes, err := ieq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IPCEvent IDs.
func (ieq *IPCEventQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ieq.ctx.Unique == nil && ieq.path != nil {
		ieq.Unique(true)
	}
	ctx = setContextOp(ctx, ieq.ctx, "IDs")
	if err = ieq.Select(ipcevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ieq *IPCEventQuery) IDsX(ctx context.Context) []int {
	ids, err := ieq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ieq *IPCEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ieq.ctx, "Count")
	if err := ieq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ieq, querierCount[*IPCEventQuery](), ieq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ieq *IPCEventQuery) CountX(ctx context.Context) int {
	count, err := ieq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ieq *IPCEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ieq.ctx, "Exist")
	switch _, err := ieq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dao: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ieq *IPCEventQuery) ExistX(ctx context.Context) bool {
	exist, err := ieq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IPCEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ieq *IPCEventQuery) Clone() *IPCEventQuery {
	if ieq == nil {
		return nil
	}
	return &IPCEventQuery{
		config:      ieq.config,
		ctx:         ieq.ctx.Clone(),
		order:       append([]ipcevent.OrderOption{}, ieq.order...),
		inters:      append([]Interceptor{}, ieq.inters...),
		predicates:  append([]predicate.IPCEvent{}, ieq.predicates...),
		withCreator: ieq.withCreator.Clone(),
		withUpdater: ieq.withUpdater.Clone(),
		withVideo:   ieq.withVideo.Clone(),
		withDevice:  ieq.withDevice.Clone(),
		withFixers:  ieq.withFixers.Clone(),
		// clone intermediate query.
		sql:  ieq.sql.Clone(),
		path: ieq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IPCEventQuery) WithCreator(opts ...func(*AdminQuery)) *IPCEventQuery {
	query := (&AdminClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withCreator = query
	return ieq
}

// WithUpdater tells the query-builder to eager-load the nodes that are connected to
// the "updater" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IPCEventQuery) WithUpdater(opts ...func(*AdminQuery)) *IPCEventQuery {
	query := (&AdminClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withUpdater = query
	return ieq
}

// WithVideo tells the query-builder to eager-load the nodes that are connected to
// the "video" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IPCEventQuery) WithVideo(opts ...func(*VideoQuery)) *IPCEventQuery {
	query := (&VideoClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withVideo = query
	return ieq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IPCEventQuery) WithDevice(opts ...func(*DeviceQuery)) *IPCEventQuery {
	query := (&DeviceClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withDevice = query
	return ieq
}

// WithFixers tells the query-builder to eager-load the nodes that are connected to
// the "fixers" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IPCEventQuery) WithFixers(opts ...func(*EmployeeQuery)) *IPCEventQuery {
	query := (&EmployeeClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withFixers = query
	return ieq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IPCEvent.Query().
//		GroupBy(ipcevent.FieldCreatedAt).
//		Aggregate(dao.Count()).
//		Scan(ctx, &v)
func (ieq *IPCEventQuery) GroupBy(field string, fields ...string) *IPCEventGroupBy {
	ieq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IPCEventGroupBy{build: ieq}
	grbuild.flds = &ieq.ctx.Fields
	grbuild.label = ipcevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.IPCEvent.Query().
//		Select(ipcevent.FieldCreatedAt).
//		Scan(ctx, &v)
func (ieq *IPCEventQuery) Select(fields ...string) *IPCEventSelect {
	ieq.ctx.Fields = append(ieq.ctx.Fields, fields...)
	sbuild := &IPCEventSelect{IPCEventQuery: ieq}
	sbuild.label = ipcevent.Label
	sbuild.flds, sbuild.scan = &ieq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IPCEventSelect configured with the given aggregations.
func (ieq *IPCEventQuery) Aggregate(fns ...AggregateFunc) *IPCEventSelect {
	return ieq.Select().Aggregate(fns...)
}

func (ieq *IPCEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ieq.inters {
		if inter == nil {
			return fmt.Errorf("dao: uninitialized interceptor (forgotten import dao/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ieq); err != nil {
				return err
			}
		}
	}
	for _, f := range ieq.ctx.Fields {
		if !ipcevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
		}
	}
	if ieq.path != nil {
		prev, err := ieq.path(ctx)
		if err != nil {
			return err
		}
		ieq.sql = prev
	}
	return nil
}

func (ieq *IPCEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IPCEvent, error) {
	var (
		nodes       = []*IPCEvent{}
		_spec       = ieq.querySpec()
		loadedTypes = [5]bool{
			ieq.withCreator != nil,
			ieq.withUpdater != nil,
			ieq.withVideo != nil,
			ieq.withDevice != nil,
			ieq.withFixers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IPCEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IPCEvent{config: ieq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ieq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ieq.withCreator; query != nil {
		if err := ieq.loadCreator(ctx, query, nodes, nil,
			func(n *IPCEvent, e *Admin) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := ieq.withUpdater; query != nil {
		if err := ieq.loadUpdater(ctx, query, nodes, nil,
			func(n *IPCEvent, e *Admin) { n.Edges.Updater = e }); err != nil {
			return nil, err
		}
	}
	if query := ieq.withVideo; query != nil {
		if err := ieq.loadVideo(ctx, query, nodes, nil,
			func(n *IPCEvent, e *Video) { n.Edges.Video = e }); err != nil {
			return nil, err
		}
	}
	if query := ieq.withDevice; query != nil {
		if err := ieq.loadDevice(ctx, query, nodes, nil,
			func(n *IPCEvent, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	if query := ieq.withFixers; query != nil {
		if err := ieq.loadFixers(ctx, query, nodes,
			func(n *IPCEvent) { n.Edges.Fixers = []*Employee{} },
			func(n *IPCEvent, e *Employee) { n.Edges.Fixers = append(n.Edges.Fixers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ieq *IPCEventQuery) loadCreator(ctx context.Context, query *AdminQuery, nodes []*IPCEvent, init func(*IPCEvent), assign func(*IPCEvent, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCEvent)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ieq *IPCEventQuery) loadUpdater(ctx context.Context, query *AdminQuery, nodes []*IPCEvent, init func(*IPCEvent), assign func(*IPCEvent, *Admin)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCEvent)
	for i := range nodes {
		fk := nodes[i].UpdatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(admin.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ieq *IPCEventQuery) loadVideo(ctx context.Context, query *VideoQuery, nodes []*IPCEvent, init func(*IPCEvent), assign func(*IPCEvent, *Video)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCEvent)
	for i := range nodes {
		fk := nodes[i].VideoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(video.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "video_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ieq *IPCEventQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*IPCEvent, init func(*IPCEvent), assign func(*IPCEvent, *Device)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IPCEvent)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ieq *IPCEventQuery) loadFixers(ctx context.Context, query *EmployeeQuery, nodes []*IPCEvent, init func(*IPCEvent), assign func(*IPCEvent, *Employee)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*IPCEvent)
	nids := make(map[int]map[*IPCEvent]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(ipcevent.FixersTable)
		s.Join(joinT).On(s.C(employee.FieldID), joinT.C(ipcevent.FixersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(ipcevent.FixersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(ipcevent.FixersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*IPCEvent]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Employee](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "fixers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ieq *IPCEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ieq.querySpec()
	_spec.Node.Columns = ieq.ctx.Fields
	if len(ieq.ctx.Fields) > 0 {
		_spec.Unique = ieq.ctx.Unique != nil && *ieq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ieq.driver, _spec)
}

func (ieq *IPCEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ipcevent.Table, ipcevent.Columns, sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt))
	_spec.From = ieq.sql
	if unique := ieq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ieq.path != nil {
		_spec.Unique = true
	}
	if fields := ieq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipcevent.FieldID)
		for i := range fields {
			if fields[i] != ipcevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ieq.withCreator != nil {
			_spec.Node.AddColumnOnce(ipcevent.FieldCreatedBy)
		}
		if ieq.withUpdater != nil {
			_spec.Node.AddColumnOnce(ipcevent.FieldUpdatedBy)
		}
		if ieq.withVideo != nil {
			_spec.Node.AddColumnOnce(ipcevent.FieldVideoID)
		}
		if ieq.withDevice != nil {
			_spec.Node.AddColumnOnce(ipcevent.FieldDeviceID)
		}
	}
	if ps := ieq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ieq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ieq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ieq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ieq *IPCEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ieq.driver.Dialect())
	t1 := builder.Table(ipcevent.Table)
	columns := ieq.ctx.Fields
	if len(columns) == 0 {
		columns = ipcevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ieq.sql != nil {
		selector = ieq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ieq.ctx.Unique != nil && *ieq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ieq.predicates {
		p(selector)
	}
	for _, p := range ieq.order {
		p(selector)
	}
	if offset := ieq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ieq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IPCEventGroupBy is the group-by builder for IPCEvent entities.
type IPCEventGroupBy struct {
	selector
	build *IPCEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iegb *IPCEventGroupBy) Aggregate(fns ...AggregateFunc) *IPCEventGroupBy {
	iegb.fns = append(iegb.fns, fns...)
	return iegb
}

// Scan applies the selector query and scans the result into the given value.
func (iegb *IPCEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iegb.build.ctx, "GroupBy")
	if err := iegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPCEventQuery, *IPCEventGroupBy](ctx, iegb.build, iegb, iegb.build.inters, v)
}

func (iegb *IPCEventGroupBy) sqlScan(ctx context.Context, root *IPCEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iegb.fns))
	for _, fn := range iegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iegb.flds)+len(iegb.fns))
		for _, f := range *iegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IPCEventSelect is the builder for selecting fields of IPCEvent entities.
type IPCEventSelect struct {
	*IPCEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ies *IPCEventSelect) Aggregate(fns ...AggregateFunc) *IPCEventSelect {
	ies.fns = append(ies.fns, fns...)
	return ies
}

// Scan applies the selector query and scans the result into the given value.
func (ies *IPCEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ies.ctx, "Select")
	if err := ies.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPCEventQuery, *IPCEventSelect](ctx, ies.IPCEventQuery, ies, ies.inters, v)
}

func (ies *IPCEventSelect) sqlScan(ctx context.Context, root *IPCEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ies.fns))
	for _, fn := range ies.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ies.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ies.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
