// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/adminrole"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminRoleUpdate is the builder for updating AdminRole entities.
type AdminRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AdminRoleMutation
}

// Where appends a list predicates to the AdminRoleUpdate builder.
func (aru *AdminRoleUpdate) Where(ps ...predicate.AdminRole) *AdminRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetCreatedBy sets the "created_by" field.
func (aru *AdminRoleUpdate) SetCreatedBy(i int) *AdminRoleUpdate {
	aru.mutation.SetCreatedBy(i)
	return aru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableCreatedBy(i *int) *AdminRoleUpdate {
	if i != nil {
		aru.SetCreatedBy(*i)
	}
	return aru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (aru *AdminRoleUpdate) ClearCreatedBy() *AdminRoleUpdate {
	aru.mutation.ClearCreatedBy()
	return aru
}

// SetName sets the "name" field.
func (aru *AdminRoleUpdate) SetName(s string) *AdminRoleUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableName(s *string) *AdminRoleUpdate {
	if s != nil {
		aru.SetName(*s)
	}
	return aru
}

// SetDeletedAt sets the "deleted_at" field.
func (aru *AdminRoleUpdate) SetDeletedAt(t time.Time) *AdminRoleUpdate {
	aru.mutation.SetDeletedAt(t)
	return aru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableDeletedAt(t *time.Time) *AdminRoleUpdate {
	if t != nil {
		aru.SetDeletedAt(*t)
	}
	return aru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aru *AdminRoleUpdate) ClearDeletedAt() *AdminRoleUpdate {
	aru.mutation.ClearDeletedAt()
	return aru
}

// SetUpdatedBy sets the "updated_by" field.
func (aru *AdminRoleUpdate) SetUpdatedBy(i int) *AdminRoleUpdate {
	aru.mutation.SetUpdatedBy(i)
	return aru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableUpdatedBy(i *int) *AdminRoleUpdate {
	if i != nil {
		aru.SetUpdatedBy(*i)
	}
	return aru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aru *AdminRoleUpdate) ClearUpdatedBy() *AdminRoleUpdate {
	aru.mutation.ClearUpdatedBy()
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AdminRoleUpdate) SetUpdatedAt(t time.Time) *AdminRoleUpdate {
	aru.mutation.SetUpdatedAt(t)
	return aru
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (aru *AdminRoleUpdate) SetCreatorID(id int) *AdminRoleUpdate {
	aru.mutation.SetCreatorID(id)
	return aru
}

// SetNillableCreatorID sets the "creator" edge to the Admin entity by ID if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableCreatorID(id *int) *AdminRoleUpdate {
	if id != nil {
		aru = aru.SetCreatorID(*id)
	}
	return aru
}

// SetCreator sets the "creator" edge to the Admin entity.
func (aru *AdminRoleUpdate) SetCreator(a *Admin) *AdminRoleUpdate {
	return aru.SetCreatorID(a.ID)
}

// SetUpdatorID sets the "updator" edge to the Admin entity by ID.
func (aru *AdminRoleUpdate) SetUpdatorID(id int) *AdminRoleUpdate {
	aru.mutation.SetUpdatorID(id)
	return aru
}

// SetNillableUpdatorID sets the "updator" edge to the Admin entity by ID if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableUpdatorID(id *int) *AdminRoleUpdate {
	if id != nil {
		aru = aru.SetUpdatorID(*id)
	}
	return aru
}

// SetUpdator sets the "updator" edge to the Admin entity.
func (aru *AdminRoleUpdate) SetUpdator(a *Admin) *AdminRoleUpdate {
	return aru.SetUpdatorID(a.ID)
}

// AddAdminIDs adds the "admins" edge to the Admin entity by IDs.
func (aru *AdminRoleUpdate) AddAdminIDs(ids ...int) *AdminRoleUpdate {
	aru.mutation.AddAdminIDs(ids...)
	return aru
}

// AddAdmins adds the "admins" edges to the Admin entity.
func (aru *AdminRoleUpdate) AddAdmins(a ...*Admin) *AdminRoleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAdminIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (aru *AdminRoleUpdate) Mutation() *AdminRoleMutation {
	return aru.mutation
}

// ClearCreator clears the "creator" edge to the Admin entity.
func (aru *AdminRoleUpdate) ClearCreator() *AdminRoleUpdate {
	aru.mutation.ClearCreator()
	return aru
}

// ClearUpdator clears the "updator" edge to the Admin entity.
func (aru *AdminRoleUpdate) ClearUpdator() *AdminRoleUpdate {
	aru.mutation.ClearUpdator()
	return aru
}

// ClearAdmins clears all "admins" edges to the Admin entity.
func (aru *AdminRoleUpdate) ClearAdmins() *AdminRoleUpdate {
	aru.mutation.ClearAdmins()
	return aru
}

// RemoveAdminIDs removes the "admins" edge to Admin entities by IDs.
func (aru *AdminRoleUpdate) RemoveAdminIDs(ids ...int) *AdminRoleUpdate {
	aru.mutation.RemoveAdminIDs(ids...)
	return aru
}

// RemoveAdmins removes "admins" edges to Admin entities.
func (aru *AdminRoleUpdate) RemoveAdmins(a ...*Admin) *AdminRoleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AdminRoleUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AdminRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AdminRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AdminRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AdminRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok {
		v := adminrole.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AdminRoleUpdate) check() error {
	if v, ok := aru.mutation.CreatedBy(); ok {
		if err := adminrole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.created_by": %w`, err)}
		}
	}
	if v, ok := aru.mutation.Name(); ok {
		if err := adminrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "AdminRole.name": %w`, err)}
		}
	}
	if v, ok := aru.mutation.UpdatedBy(); ok {
		if err := adminrole.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.updated_by": %w`, err)}
		}
	}
	return nil
}

func (aru *AdminRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminrole.Table, adminrole.Columns, sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.SetField(adminrole.FieldName, field.TypeString, value)
	}
	if value, ok := aru.mutation.DeletedAt(); ok {
		_spec.SetField(adminrole.FieldDeletedAt, field.TypeTime, value)
	}
	if aru.mutation.DeletedAtCleared() {
		_spec.ClearField(adminrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.SetField(adminrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if aru.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.UpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdatorTable,
			Columns: []string{adminrole.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.UpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdatorTable,
			Columns: []string{adminrole.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !aru.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AdminRoleUpdateOne is the builder for updating a single AdminRole entity.
type AdminRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminRoleMutation
}

// SetCreatedBy sets the "created_by" field.
func (aruo *AdminRoleUpdateOne) SetCreatedBy(i int) *AdminRoleUpdateOne {
	aruo.mutation.SetCreatedBy(i)
	return aruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableCreatedBy(i *int) *AdminRoleUpdateOne {
	if i != nil {
		aruo.SetCreatedBy(*i)
	}
	return aruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (aruo *AdminRoleUpdateOne) ClearCreatedBy() *AdminRoleUpdateOne {
	aruo.mutation.ClearCreatedBy()
	return aruo
}

// SetName sets the "name" field.
func (aruo *AdminRoleUpdateOne) SetName(s string) *AdminRoleUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableName(s *string) *AdminRoleUpdateOne {
	if s != nil {
		aruo.SetName(*s)
	}
	return aruo
}

// SetDeletedAt sets the "deleted_at" field.
func (aruo *AdminRoleUpdateOne) SetDeletedAt(t time.Time) *AdminRoleUpdateOne {
	aruo.mutation.SetDeletedAt(t)
	return aruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminRoleUpdateOne {
	if t != nil {
		aruo.SetDeletedAt(*t)
	}
	return aruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aruo *AdminRoleUpdateOne) ClearDeletedAt() *AdminRoleUpdateOne {
	aruo.mutation.ClearDeletedAt()
	return aruo
}

// SetUpdatedBy sets the "updated_by" field.
func (aruo *AdminRoleUpdateOne) SetUpdatedBy(i int) *AdminRoleUpdateOne {
	aruo.mutation.SetUpdatedBy(i)
	return aruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableUpdatedBy(i *int) *AdminRoleUpdateOne {
	if i != nil {
		aruo.SetUpdatedBy(*i)
	}
	return aruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aruo *AdminRoleUpdateOne) ClearUpdatedBy() *AdminRoleUpdateOne {
	aruo.mutation.ClearUpdatedBy()
	return aruo
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AdminRoleUpdateOne) SetUpdatedAt(t time.Time) *AdminRoleUpdateOne {
	aruo.mutation.SetUpdatedAt(t)
	return aruo
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (aruo *AdminRoleUpdateOne) SetCreatorID(id int) *AdminRoleUpdateOne {
	aruo.mutation.SetCreatorID(id)
	return aruo
}

// SetNillableCreatorID sets the "creator" edge to the Admin entity by ID if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableCreatorID(id *int) *AdminRoleUpdateOne {
	if id != nil {
		aruo = aruo.SetCreatorID(*id)
	}
	return aruo
}

// SetCreator sets the "creator" edge to the Admin entity.
func (aruo *AdminRoleUpdateOne) SetCreator(a *Admin) *AdminRoleUpdateOne {
	return aruo.SetCreatorID(a.ID)
}

// SetUpdatorID sets the "updator" edge to the Admin entity by ID.
func (aruo *AdminRoleUpdateOne) SetUpdatorID(id int) *AdminRoleUpdateOne {
	aruo.mutation.SetUpdatorID(id)
	return aruo
}

// SetNillableUpdatorID sets the "updator" edge to the Admin entity by ID if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableUpdatorID(id *int) *AdminRoleUpdateOne {
	if id != nil {
		aruo = aruo.SetUpdatorID(*id)
	}
	return aruo
}

// SetUpdator sets the "updator" edge to the Admin entity.
func (aruo *AdminRoleUpdateOne) SetUpdator(a *Admin) *AdminRoleUpdateOne {
	return aruo.SetUpdatorID(a.ID)
}

// AddAdminIDs adds the "admins" edge to the Admin entity by IDs.
func (aruo *AdminRoleUpdateOne) AddAdminIDs(ids ...int) *AdminRoleUpdateOne {
	aruo.mutation.AddAdminIDs(ids...)
	return aruo
}

// AddAdmins adds the "admins" edges to the Admin entity.
func (aruo *AdminRoleUpdateOne) AddAdmins(a ...*Admin) *AdminRoleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAdminIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (aruo *AdminRoleUpdateOne) Mutation() *AdminRoleMutation {
	return aruo.mutation
}

// ClearCreator clears the "creator" edge to the Admin entity.
func (aruo *AdminRoleUpdateOne) ClearCreator() *AdminRoleUpdateOne {
	aruo.mutation.ClearCreator()
	return aruo
}

// ClearUpdator clears the "updator" edge to the Admin entity.
func (aruo *AdminRoleUpdateOne) ClearUpdator() *AdminRoleUpdateOne {
	aruo.mutation.ClearUpdator()
	return aruo
}

// ClearAdmins clears all "admins" edges to the Admin entity.
func (aruo *AdminRoleUpdateOne) ClearAdmins() *AdminRoleUpdateOne {
	aruo.mutation.ClearAdmins()
	return aruo
}

// RemoveAdminIDs removes the "admins" edge to Admin entities by IDs.
func (aruo *AdminRoleUpdateOne) RemoveAdminIDs(ids ...int) *AdminRoleUpdateOne {
	aruo.mutation.RemoveAdminIDs(ids...)
	return aruo
}

// RemoveAdmins removes "admins" edges to Admin entities.
func (aruo *AdminRoleUpdateOne) RemoveAdmins(a ...*Admin) *AdminRoleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAdminIDs(ids...)
}

// Where appends a list predicates to the AdminRoleUpdate builder.
func (aruo *AdminRoleUpdateOne) Where(ps ...predicate.AdminRole) *AdminRoleUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AdminRoleUpdateOne) Select(field string, fields ...string) *AdminRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AdminRole entity.
func (aruo *AdminRoleUpdateOne) Save(ctx context.Context) (*AdminRole, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AdminRoleUpdateOne) SaveX(ctx context.Context) *AdminRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AdminRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AdminRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AdminRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok {
		v := adminrole.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AdminRoleUpdateOne) check() error {
	if v, ok := aruo.mutation.CreatedBy(); ok {
		if err := adminrole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.created_by": %w`, err)}
		}
	}
	if v, ok := aruo.mutation.Name(); ok {
		if err := adminrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "AdminRole.name": %w`, err)}
		}
	}
	if v, ok := aruo.mutation.UpdatedBy(); ok {
		if err := adminrole.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "AdminRole.updated_by": %w`, err)}
		}
	}
	return nil
}

func (aruo *AdminRoleUpdateOne) sqlSave(ctx context.Context) (_node *AdminRole, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminrole.Table, adminrole.Columns, sqlgraph.NewFieldSpec(adminrole.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "AdminRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminrole.FieldID)
		for _, f := range fields {
			if !adminrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != adminrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.SetField(adminrole.FieldName, field.TypeString, value)
	}
	if value, ok := aruo.mutation.DeletedAt(); ok {
		_spec.SetField(adminrole.FieldDeletedAt, field.TypeTime, value)
	}
	if aruo.mutation.DeletedAtCleared() {
		_spec.ClearField(adminrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.SetField(adminrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if aruo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.CreatorTable,
			Columns: []string{adminrole.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.UpdatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdatorTable,
			Columns: []string{adminrole.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.UpdatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrole.UpdatorTable,
			Columns: []string{adminrole.UpdatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !aruo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.AdminsTable,
			Columns: adminrole.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
