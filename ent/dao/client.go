// Code generated by ent, DO NOT EDIT.

package dao

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"aisecurity/ent/dao/migrate"

	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/department"
	"aisecurity/ent/dao/device"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/event"
	"aisecurity/ent/dao/eventlevel"
	"aisecurity/ent/dao/eventlog"
	"aisecurity/ent/dao/fixing"
	"aisecurity/ent/dao/occupation"
	"aisecurity/ent/dao/permission"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/ent/dao/sweep"
	"aisecurity/ent/dao/sweepresult"
	"aisecurity/ent/dao/sweepresultdetails"
	"aisecurity/ent/dao/sweepschedule"
	"aisecurity/ent/dao/user"
	"aisecurity/ent/dao/video"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Area is the client for interacting with the Area builders.
	Area *AreaClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// DeviceInstallation is the client for interacting with the DeviceInstallation builders.
	DeviceInstallation *DeviceInstallationClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventLevel is the client for interacting with the EventLevel builders.
	EventLevel *EventLevelClient
	// EventLog is the client for interacting with the EventLog builders.
	EventLog *EventLogClient
	// Fixing is the client for interacting with the Fixing builders.
	Fixing *FixingClient
	// Occupation is the client for interacting with the Occupation builders.
	Occupation *OccupationClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Risk is the client for interacting with the Risk builders.
	Risk *RiskClient
	// RiskCategory is the client for interacting with the RiskCategory builders.
	RiskCategory *RiskCategoryClient
	// RiskLocation is the client for interacting with the RiskLocation builders.
	RiskLocation *RiskLocationClient
	// Sweep is the client for interacting with the Sweep builders.
	Sweep *SweepClient
	// SweepResult is the client for interacting with the SweepResult builders.
	SweepResult *SweepResultClient
	// SweepResultDetails is the client for interacting with the SweepResultDetails builders.
	SweepResultDetails *SweepResultDetailsClient
	// SweepSchedule is the client for interacting with the SweepSchedule builders.
	SweepSchedule *SweepScheduleClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Video is the client for interacting with the Video builders.
	Video *VideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.Area = NewAreaClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Device = NewDeviceClient(c.config)
	c.DeviceInstallation = NewDeviceInstallationClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Event = NewEventClient(c.config)
	c.EventLevel = NewEventLevelClient(c.config)
	c.EventLog = NewEventLogClient(c.config)
	c.Fixing = NewFixingClient(c.config)
	c.Occupation = NewOccupationClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.Risk = NewRiskClient(c.config)
	c.RiskCategory = NewRiskCategoryClient(c.config)
	c.RiskLocation = NewRiskLocationClient(c.config)
	c.Sweep = NewSweepClient(c.config)
	c.SweepResult = NewSweepResultClient(c.config)
	c.SweepResultDetails = NewSweepResultDetailsClient(c.config)
	c.SweepSchedule = NewSweepScheduleClient(c.config)
	c.User = NewUserClient(c.config)
	c.Video = NewVideoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("dao: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("dao: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Admin:              NewAdminClient(cfg),
		Area:               NewAreaClient(cfg),
		Department:         NewDepartmentClient(cfg),
		Device:             NewDeviceClient(cfg),
		DeviceInstallation: NewDeviceInstallationClient(cfg),
		Employee:           NewEmployeeClient(cfg),
		Event:              NewEventClient(cfg),
		EventLevel:         NewEventLevelClient(cfg),
		EventLog:           NewEventLogClient(cfg),
		Fixing:             NewFixingClient(cfg),
		Occupation:         NewOccupationClient(cfg),
		Permission:         NewPermissionClient(cfg),
		Risk:               NewRiskClient(cfg),
		RiskCategory:       NewRiskCategoryClient(cfg),
		RiskLocation:       NewRiskLocationClient(cfg),
		Sweep:              NewSweepClient(cfg),
		SweepResult:        NewSweepResultClient(cfg),
		SweepResultDetails: NewSweepResultDetailsClient(cfg),
		SweepSchedule:      NewSweepScheduleClient(cfg),
		User:               NewUserClient(cfg),
		Video:              NewVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Admin:              NewAdminClient(cfg),
		Area:               NewAreaClient(cfg),
		Department:         NewDepartmentClient(cfg),
		Device:             NewDeviceClient(cfg),
		DeviceInstallation: NewDeviceInstallationClient(cfg),
		Employee:           NewEmployeeClient(cfg),
		Event:              NewEventClient(cfg),
		EventLevel:         NewEventLevelClient(cfg),
		EventLog:           NewEventLogClient(cfg),
		Fixing:             NewFixingClient(cfg),
		Occupation:         NewOccupationClient(cfg),
		Permission:         NewPermissionClient(cfg),
		Risk:               NewRiskClient(cfg),
		RiskCategory:       NewRiskCategoryClient(cfg),
		RiskLocation:       NewRiskLocationClient(cfg),
		Sweep:              NewSweepClient(cfg),
		SweepResult:        NewSweepResultClient(cfg),
		SweepResultDetails: NewSweepResultDetailsClient(cfg),
		SweepSchedule:      NewSweepScheduleClient(cfg),
		User:               NewUserClient(cfg),
		Video:              NewVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Admin, c.Area, c.Department, c.Device, c.DeviceInstallation, c.Employee,
		c.Event, c.EventLevel, c.EventLog, c.Fixing, c.Occupation, c.Permission,
		c.Risk, c.RiskCategory, c.RiskLocation, c.Sweep, c.SweepResult,
		c.SweepResultDetails, c.SweepSchedule, c.User, c.Video,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Admin, c.Area, c.Department, c.Device, c.DeviceInstallation, c.Employee,
		c.Event, c.EventLevel, c.EventLog, c.Fixing, c.Occupation, c.Permission,
		c.Risk, c.RiskCategory, c.RiskLocation, c.Sweep, c.SweepResult,
		c.SweepResultDetails, c.SweepSchedule, c.User, c.Video,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminMutation:
		return c.Admin.mutate(ctx, m)
	case *AreaMutation:
		return c.Area.mutate(ctx, m)
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *DeviceMutation:
		return c.Device.mutate(ctx, m)
	case *DeviceInstallationMutation:
		return c.DeviceInstallation.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *EventLevelMutation:
		return c.EventLevel.mutate(ctx, m)
	case *EventLogMutation:
		return c.EventLog.mutate(ctx, m)
	case *FixingMutation:
		return c.Fixing.mutate(ctx, m)
	case *OccupationMutation:
		return c.Occupation.mutate(ctx, m)
	case *PermissionMutation:
		return c.Permission.mutate(ctx, m)
	case *RiskMutation:
		return c.Risk.mutate(ctx, m)
	case *RiskCategoryMutation:
		return c.RiskCategory.mutate(ctx, m)
	case *RiskLocationMutation:
		return c.RiskLocation.mutate(ctx, m)
	case *SweepMutation:
		return c.Sweep.mutate(ctx, m)
	case *SweepResultMutation:
		return c.SweepResult.mutate(ctx, m)
	case *SweepResultDetailsMutation:
		return c.SweepResultDetails.mutate(ctx, m)
	case *SweepScheduleMutation:
		return c.SweepSchedule.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VideoMutation:
		return c.Video.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("dao: unknown mutation type %T", m)
	}
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `admin.Intercept(f(g(h())))`.
func (c *AdminClient) Intercept(interceptors ...Interceptor) {
	c.inters.Admin = append(c.inters.Admin, interceptors...)
}

// Create returns a builder for creating a Admin entity.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminClient) MapCreateBulk(slice any, setFunc func(*AdminCreate, int)) *AdminCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminCreateBulk{err: fmt.Errorf("calling to AdminClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdmin},
		inters: c.Interceptors(),
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Admin.
func (c *AdminClient) QueryCreator(a *Admin) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, admin.CreatorTable, admin.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Admin.
func (c *AdminClient) QueryUpdater(a *Admin) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, admin.UpdaterTable, admin.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a Admin.
func (c *AdminClient) QueryPermissions(a *Admin) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, admin.PermissionsTable, admin.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminCreator queries the admin_creator edge of a Admin.
func (c *AdminClient) QueryAdminCreator(a *Admin) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminCreatorTable, admin.AdminCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminUpdater queries the admin_updater edge of a Admin.
func (c *AdminClient) QueryAdminUpdater(a *Admin) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminUpdaterTable, admin.AdminUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionCreator queries the permission_creator edge of a Admin.
func (c *AdminClient) QueryPermissionCreator(a *Admin) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.PermissionCreatorTable, admin.PermissionCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionUpdater queries the permission_updater edge of a Admin.
func (c *AdminClient) QueryPermissionUpdater(a *Admin) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.PermissionUpdaterTable, admin.PermissionUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskCreator queries the risk_creator edge of a Admin.
func (c *AdminClient) QueryRiskCreator(a *Admin) *RiskQuery {
	query := (&RiskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCreatorTable, admin.RiskCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskUpdater queries the risk_updater edge of a Admin.
func (c *AdminClient) QueryRiskUpdater(a *Admin) *RiskQuery {
	query := (&RiskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskUpdaterTable, admin.RiskUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskMaintainer queries the risk_maintainer edge of a Admin.
func (c *AdminClient) QueryRiskMaintainer(a *Admin) *RiskQuery {
	query := (&RiskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskMaintainerTable, admin.RiskMaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskLocationCreator queries the risk_location_creator edge of a Admin.
func (c *AdminClient) QueryRiskLocationCreator(a *Admin) *RiskLocationQuery {
	query := (&RiskLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskLocationCreatorTable, admin.RiskLocationCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskLocationUpdater queries the risk_location_updater edge of a Admin.
func (c *AdminClient) QueryRiskLocationUpdater(a *Admin) *RiskLocationQuery {
	query := (&RiskLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskLocationUpdaterTable, admin.RiskLocationUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskCategoryCreator queries the risk_category_creator edge of a Admin.
func (c *AdminClient) QueryRiskCategoryCreator(a *Admin) *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCategoryCreatorTable, admin.RiskCategoryCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskCategoryUpdater queries the risk_category_updater edge of a Admin.
func (c *AdminClient) QueryRiskCategoryUpdater(a *Admin) *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RiskCategoryUpdaterTable, admin.RiskCategoryUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartmentCreator queries the department_creator edge of a Admin.
func (c *AdminClient) QueryDepartmentCreator(a *Admin) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DepartmentCreatorTable, admin.DepartmentCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartmentUpdater queries the department_updater edge of a Admin.
func (c *AdminClient) QueryDepartmentUpdater(a *Admin) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DepartmentUpdaterTable, admin.DepartmentUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployeeCreator queries the employee_creator edge of a Admin.
func (c *AdminClient) QueryEmployeeCreator(a *Admin) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EmployeeCreatorTable, admin.EmployeeCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployeeUpdater queries the employee_updater edge of a Admin.
func (c *AdminClient) QueryEmployeeUpdater(a *Admin) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EmployeeUpdaterTable, admin.EmployeeUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Admin.
func (c *AdminClient) QueryEmployee(a *Admin) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, admin.EmployeeTable, admin.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOccupationCreator queries the occupation_creator edge of a Admin.
func (c *AdminClient) QueryOccupationCreator(a *Admin) *OccupationQuery {
	query := (&OccupationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(occupation.Table, occupation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.OccupationCreatorTable, admin.OccupationCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOccupationUpdater queries the occupation_updater edge of a Admin.
func (c *AdminClient) QueryOccupationUpdater(a *Admin) *OccupationQuery {
	query := (&OccupationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(occupation.Table, occupation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.OccupationUpdaterTable, admin.OccupationUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventCreator queries the event_creator edge of a Admin.
func (c *AdminClient) QueryEventCreator(a *Admin) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventCreatorTable, admin.EventCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventUpdater queries the event_updater edge of a Admin.
func (c *AdminClient) QueryEventUpdater(a *Admin) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventUpdaterTable, admin.EventUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoCreator queries the video_creator edge of a Admin.
func (c *AdminClient) QueryVideoCreator(a *Admin) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.VideoCreatorTable, admin.VideoCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoUpdater queries the video_updater edge of a Admin.
func (c *AdminClient) QueryVideoUpdater(a *Admin) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.VideoUpdaterTable, admin.VideoUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAreaCreator queries the area_creator edge of a Admin.
func (c *AdminClient) QueryAreaCreator(a *Admin) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AreaCreatorTable, admin.AreaCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAreaUpdater queries the area_updater edge of a Admin.
func (c *AdminClient) QueryAreaUpdater(a *Admin) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AreaUpdaterTable, admin.AreaUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceCreator queries the device_creator edge of a Admin.
func (c *AdminClient) QueryDeviceCreator(a *Admin) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DeviceCreatorTable, admin.DeviceCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceUpdater queries the device_updater edge of a Admin.
func (c *AdminClient) QueryDeviceUpdater(a *Admin) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DeviceUpdaterTable, admin.DeviceUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInstallationCreator queries the device_installation_creator edge of a Admin.
func (c *AdminClient) QueryDeviceInstallationCreator(a *Admin) *DeviceInstallationQuery {
	query := (&DeviceInstallationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(deviceinstallation.Table, deviceinstallation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DeviceInstallationCreatorTable, admin.DeviceInstallationCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInstallationUpdater queries the device_installation_updater edge of a Admin.
func (c *AdminClient) QueryDeviceInstallationUpdater(a *Admin) *DeviceInstallationQuery {
	query := (&DeviceInstallationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(deviceinstallation.Table, deviceinstallation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.DeviceInstallationUpdaterTable, admin.DeviceInstallationUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLevelCreator queries the event_level_creator edge of a Admin.
func (c *AdminClient) QueryEventLevelCreator(a *Admin) *EventLevelQuery {
	query := (&EventLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlevel.Table, eventlevel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLevelCreatorTable, admin.EventLevelCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLevelUpdater queries the event_level_updater edge of a Admin.
func (c *AdminClient) QueryEventLevelUpdater(a *Admin) *EventLevelQuery {
	query := (&EventLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlevel.Table, eventlevel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLevelUpdaterTable, admin.EventLevelUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixingCreator queries the fixing_creator edge of a Admin.
func (c *AdminClient) QueryFixingCreator(a *Admin) *FixingQuery {
	query := (&FixingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(fixing.Table, fixing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.FixingCreatorTable, admin.FixingCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixingUpdater queries the fixing_updater edge of a Admin.
func (c *AdminClient) QueryFixingUpdater(a *Admin) *FixingQuery {
	query := (&FixingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(fixing.Table, fixing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.FixingUpdaterTable, admin.FixingUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixer queries the fixer edge of a Admin.
func (c *AdminClient) QueryFixer(a *Admin) *FixingQuery {
	query := (&FixingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(fixing.Table, fixing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.FixerTable, admin.FixerColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLogCreator queries the event_log_creator edge of a Admin.
func (c *AdminClient) QueryEventLogCreator(a *Admin) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLogCreatorTable, admin.EventLogCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLogUpdater queries the event_log_updater edge of a Admin.
func (c *AdminClient) QueryEventLogUpdater(a *Admin) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLogUpdaterTable, admin.EventLogUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLogActor queries the event_log_actor edge of a Admin.
func (c *AdminClient) QueryEventLogActor(a *Admin) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLogActorTable, admin.EventLogActorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLogActor2 queries the event_log_actor2 edge of a Admin.
func (c *AdminClient) QueryEventLogActor2(a *Admin) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.EventLogActor2Table, admin.EventLogActor2Column),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepCreator queries the sweep_creator edge of a Admin.
func (c *AdminClient) QuerySweepCreator(a *Admin) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepCreatorTable, admin.SweepCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepUpdater queries the sweep_updater edge of a Admin.
func (c *AdminClient) QuerySweepUpdater(a *Admin) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepUpdaterTable, admin.SweepUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepScheduleCreator queries the sweep_schedule_creator edge of a Admin.
func (c *AdminClient) QuerySweepScheduleCreator(a *Admin) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepScheduleCreatorTable, admin.SweepScheduleCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepScheduleUpdater queries the sweep_schedule_updater edge of a Admin.
func (c *AdminClient) QuerySweepScheduleUpdater(a *Admin) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepScheduleUpdaterTable, admin.SweepScheduleUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepSchedule queries the sweep_schedule edge of a Admin.
func (c *AdminClient) QuerySweepSchedule(a *Admin) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, admin.SweepScheduleTable, admin.SweepSchedulePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultCreator queries the sweep_result_creator edge of a Admin.
func (c *AdminClient) QuerySweepResultCreator(a *Admin) *SweepResultQuery {
	query := (&SweepResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepResultCreatorTable, admin.SweepResultCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultUpdater queries the sweep_result_updater edge of a Admin.
func (c *AdminClient) QuerySweepResultUpdater(a *Admin) *SweepResultQuery {
	query := (&SweepResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepResultUpdaterTable, admin.SweepResultUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultDetailsCreator queries the sweep_result_details_creator edge of a Admin.
func (c *AdminClient) QuerySweepResultDetailsCreator(a *Admin) *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepResultDetailsCreatorTable, admin.SweepResultDetailsCreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultDetailsUpdater queries the sweep_result_details_updater edge of a Admin.
func (c *AdminClient) QuerySweepResultDetailsUpdater(a *Admin) *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SweepResultDetailsUpdaterTable, admin.SweepResultDetailsUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserUpdater queries the user_updater edge of a Admin.
func (c *AdminClient) QueryUserUpdater(a *Admin) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.UserUpdaterTable, admin.UserUpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	hooks := c.hooks.Admin
	return append(hooks[:len(hooks):len(hooks)], admin.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AdminClient) Interceptors() []Interceptor {
	return c.inters.Admin
}

func (c *AdminClient) mutate(ctx context.Context, m *AdminMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Admin mutation op: %q", m.Op())
	}
}

// AreaClient is a client for the Area schema.
type AreaClient struct {
	config
}

// NewAreaClient returns a client for the Area from the given config.
func NewAreaClient(c config) *AreaClient {
	return &AreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `area.Hooks(f(g(h())))`.
func (c *AreaClient) Use(hooks ...Hook) {
	c.hooks.Area = append(c.hooks.Area, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `area.Intercept(f(g(h())))`.
func (c *AreaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Area = append(c.inters.Area, interceptors...)
}

// Create returns a builder for creating a Area entity.
func (c *AreaClient) Create() *AreaCreate {
	mutation := newAreaMutation(c.config, OpCreate)
	return &AreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Area entities.
func (c *AreaClient) CreateBulk(builders ...*AreaCreate) *AreaCreateBulk {
	return &AreaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AreaClient) MapCreateBulk(slice any, setFunc func(*AreaCreate, int)) *AreaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AreaCreateBulk{err: fmt.Errorf("calling to AreaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AreaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AreaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Area.
func (c *AreaClient) Update() *AreaUpdate {
	mutation := newAreaMutation(c.config, OpUpdate)
	return &AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaClient) UpdateOne(a *Area) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withArea(a))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaClient) UpdateOneID(id int) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withAreaID(id))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Area.
func (c *AreaClient) Delete() *AreaDelete {
	mutation := newAreaMutation(c.config, OpDelete)
	return &AreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AreaClient) DeleteOne(a *Area) *AreaDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AreaClient) DeleteOneID(id int) *AreaDeleteOne {
	builder := c.Delete().Where(area.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaDeleteOne{builder}
}

// Query returns a query builder for Area.
func (c *AreaClient) Query() *AreaQuery {
	return &AreaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArea},
		inters: c.Interceptors(),
	}
}

// Get returns a Area entity by its id.
func (c *AreaClient) Get(ctx context.Context, id int) (*Area, error) {
	return c.Query().Where(area.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaClient) GetX(ctx context.Context, id int) *Area {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Area.
func (c *AreaClient) QueryCreator(a *Area) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.CreatorTable, area.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Area.
func (c *AreaClient) QueryUpdater(a *Area) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.UpdaterTable, area.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInstallation queries the device_installation edge of a Area.
func (c *AreaClient) QueryDeviceInstallation(a *Area) *DeviceInstallationQuery {
	query := (&DeviceInstallationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(deviceinstallation.Table, deviceinstallation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, area.DeviceInstallationTable, area.DeviceInstallationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaClient) Hooks() []Hook {
	hooks := c.hooks.Area
	return append(hooks[:len(hooks):len(hooks)], area.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AreaClient) Interceptors() []Interceptor {
	return c.inters.Area
}

func (c *AreaClient) mutate(ctx context.Context, m *AreaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AreaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AreaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Area mutation op: %q", m.Op())
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Department.
func (c *DepartmentClient) QueryCreator(d *Department) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, department.CreatorTable, department.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Department.
func (c *DepartmentClient) QueryUpdater(d *Department) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, department.UpdaterTable, department.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Department.
func (c *DepartmentClient) QueryParent(d *Department) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, department.ParentTable, department.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a Department.
func (c *DepartmentClient) QueryPermissions(d *Department) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, department.PermissionsTable, department.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployees queries the employees edge of a Department.
func (c *DepartmentClient) QueryEmployees(d *Department) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.EmployeesTable, department.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Department.
func (c *DepartmentClient) QueryChildren(d *Department) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.ChildrenTable, department.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	hooks := c.hooks.Department
	return append(hooks[:len(hooks):len(hooks)], department.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	return c.inters.Department
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Department mutation op: %q", m.Op())
	}
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `device.Intercept(f(g(h())))`.
func (c *DeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Device = append(c.inters.Device, interceptors...)
}

// Create returns a builder for creating a Device entity.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Device entities.
func (c *DeviceClient) CreateBulk(builders ...*DeviceCreate) *DeviceCreateBulk {
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceClient) MapCreateBulk(slice any, setFunc func(*DeviceCreate, int)) *DeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceCreateBulk{err: fmt.Errorf("calling to DeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id int) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceClient) DeleteOneID(id int) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Query returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id int) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id int) *Device {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Device.
func (c *DeviceClient) QueryCreator(d *Device) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.CreatorTable, device.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Device.
func (c *DeviceClient) QueryUpdater(d *Device) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.UpdaterTable, device.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvent queries the event edge of a Device.
func (c *DeviceClient) QueryEvent(d *Device) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.EventTable, device.EventColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInstallation queries the device_installation edge of a Device.
func (c *DeviceClient) QueryDeviceInstallation(d *Device) *DeviceInstallationQuery {
	query := (&DeviceInstallationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(deviceinstallation.Table, deviceinstallation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.DeviceInstallationTable, device.DeviceInstallationColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLog queries the event_log edge of a Device.
func (c *DeviceClient) QueryEventLog(d *Device) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.EventLogTable, device.EventLogColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixing queries the fixing edge of a Device.
func (c *DeviceClient) QueryFixing(d *Device) *FixingQuery {
	query := (&FixingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(fixing.Table, fixing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.FixingTable, device.FixingColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	hooks := c.hooks.Device
	return append(hooks[:len(hooks):len(hooks)], device.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeviceClient) Interceptors() []Interceptor {
	return c.inters.Device
}

func (c *DeviceClient) mutate(ctx context.Context, m *DeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Device mutation op: %q", m.Op())
	}
}

// DeviceInstallationClient is a client for the DeviceInstallation schema.
type DeviceInstallationClient struct {
	config
}

// NewDeviceInstallationClient returns a client for the DeviceInstallation from the given config.
func NewDeviceInstallationClient(c config) *DeviceInstallationClient {
	return &DeviceInstallationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinstallation.Hooks(f(g(h())))`.
func (c *DeviceInstallationClient) Use(hooks ...Hook) {
	c.hooks.DeviceInstallation = append(c.hooks.DeviceInstallation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deviceinstallation.Intercept(f(g(h())))`.
func (c *DeviceInstallationClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceInstallation = append(c.inters.DeviceInstallation, interceptors...)
}

// Create returns a builder for creating a DeviceInstallation entity.
func (c *DeviceInstallationClient) Create() *DeviceInstallationCreate {
	mutation := newDeviceInstallationMutation(c.config, OpCreate)
	return &DeviceInstallationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInstallation entities.
func (c *DeviceInstallationClient) CreateBulk(builders ...*DeviceInstallationCreate) *DeviceInstallationCreateBulk {
	return &DeviceInstallationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceInstallationClient) MapCreateBulk(slice any, setFunc func(*DeviceInstallationCreate, int)) *DeviceInstallationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceInstallationCreateBulk{err: fmt.Errorf("calling to DeviceInstallationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceInstallationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceInstallationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInstallation.
func (c *DeviceInstallationClient) Update() *DeviceInstallationUpdate {
	mutation := newDeviceInstallationMutation(c.config, OpUpdate)
	return &DeviceInstallationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInstallationClient) UpdateOne(di *DeviceInstallation) *DeviceInstallationUpdateOne {
	mutation := newDeviceInstallationMutation(c.config, OpUpdateOne, withDeviceInstallation(di))
	return &DeviceInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInstallationClient) UpdateOneID(id int) *DeviceInstallationUpdateOne {
	mutation := newDeviceInstallationMutation(c.config, OpUpdateOne, withDeviceInstallationID(id))
	return &DeviceInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInstallation.
func (c *DeviceInstallationClient) Delete() *DeviceInstallationDelete {
	mutation := newDeviceInstallationMutation(c.config, OpDelete)
	return &DeviceInstallationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInstallationClient) DeleteOne(di *DeviceInstallation) *DeviceInstallationDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceInstallationClient) DeleteOneID(id int) *DeviceInstallationDeleteOne {
	builder := c.Delete().Where(deviceinstallation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInstallationDeleteOne{builder}
}

// Query returns a query builder for DeviceInstallation.
func (c *DeviceInstallationClient) Query() *DeviceInstallationQuery {
	return &DeviceInstallationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceInstallation},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceInstallation entity by its id.
func (c *DeviceInstallationClient) Get(ctx context.Context, id int) (*DeviceInstallation, error) {
	return c.Query().Where(deviceinstallation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInstallationClient) GetX(ctx context.Context, id int) *DeviceInstallation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a DeviceInstallation.
func (c *DeviceInstallationClient) QueryCreator(di *DeviceInstallation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.CreatorTable, deviceinstallation.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a DeviceInstallation.
func (c *DeviceInstallationClient) QueryUpdater(di *DeviceInstallation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.UpdaterTable, deviceinstallation.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArea queries the area edge of a DeviceInstallation.
func (c *DeviceInstallationClient) QueryArea(di *DeviceInstallation) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.AreaTable, deviceinstallation.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a DeviceInstallation.
func (c *DeviceInstallationClient) QueryDevice(di *DeviceInstallation) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinstallation.Table, deviceinstallation.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceinstallation.DeviceTable, deviceinstallation.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceInstallationClient) Hooks() []Hook {
	hooks := c.hooks.DeviceInstallation
	return append(hooks[:len(hooks):len(hooks)], deviceinstallation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeviceInstallationClient) Interceptors() []Interceptor {
	return c.inters.DeviceInstallation
}

func (c *DeviceInstallationClient) mutate(ctx context.Context, m *DeviceInstallationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceInstallationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceInstallationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceInstallationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown DeviceInstallation mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmployeeClient) MapCreateBulk(slice any, setFunc func(*EmployeeCreate, int)) *EmployeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmployeeCreateBulk{err: fmt.Errorf("calling to EmployeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmployeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Employee.
func (c *EmployeeClient) QueryCreator(e *Employee) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.CreatorTable, employee.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Employee.
func (c *EmployeeClient) QueryUpdater(e *Employee) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.UpdaterTable, employee.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a Employee.
func (c *EmployeeClient) QueryAdmin(e *Employee) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, employee.AdminTable, employee.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOccupation queries the occupation edge of a Employee.
func (c *EmployeeClient) QueryOccupation(e *Employee) *OccupationQuery {
	query := (&OccupationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(occupation.Table, occupation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.OccupationTable, employee.OccupationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Employee.
func (c *EmployeeClient) QueryDepartment(e *Employee) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.DepartmentTable, employee.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	hooks := c.hooks.Employee
	return append(hooks[:len(hooks):len(hooks)], employee.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Employee mutation op: %q", m.Op())
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventClient) MapCreateBulk(slice any, setFunc func(*EventCreate, int)) *EventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventCreateBulk{err: fmt.Errorf("calling to EventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Event.
func (c *EventClient) QueryCreator(e *Event) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.CreatorTable, event.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Event.
func (c *EventClient) QueryUpdater(e *Event) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.UpdaterTable, event.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideo queries the video edge of a Event.
func (c *EventClient) QueryVideo(e *Event) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.VideoTable, event.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a Event.
func (c *EventClient) QueryDevice(e *Event) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.DeviceTable, event.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixing queries the fixing edge of a Event.
func (c *EventClient) QueryFixing(e *Event) *FixingQuery {
	query := (&FixingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(fixing.Table, fixing.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.FixingTable, event.FixingColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventLog queries the event_log edge of a Event.
func (c *EventClient) QueryEventLog(e *Event) *EventLogQuery {
	query := (&EventLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.EventLogTable, event.EventLogColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	hooks := c.hooks.Event
	return append(hooks[:len(hooks):len(hooks)], event.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	return c.inters.Event
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Event mutation op: %q", m.Op())
	}
}

// EventLevelClient is a client for the EventLevel schema.
type EventLevelClient struct {
	config
}

// NewEventLevelClient returns a client for the EventLevel from the given config.
func NewEventLevelClient(c config) *EventLevelClient {
	return &EventLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventlevel.Hooks(f(g(h())))`.
func (c *EventLevelClient) Use(hooks ...Hook) {
	c.hooks.EventLevel = append(c.hooks.EventLevel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eventlevel.Intercept(f(g(h())))`.
func (c *EventLevelClient) Intercept(interceptors ...Interceptor) {
	c.inters.EventLevel = append(c.inters.EventLevel, interceptors...)
}

// Create returns a builder for creating a EventLevel entity.
func (c *EventLevelClient) Create() *EventLevelCreate {
	mutation := newEventLevelMutation(c.config, OpCreate)
	return &EventLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventLevel entities.
func (c *EventLevelClient) CreateBulk(builders ...*EventLevelCreate) *EventLevelCreateBulk {
	return &EventLevelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventLevelClient) MapCreateBulk(slice any, setFunc func(*EventLevelCreate, int)) *EventLevelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventLevelCreateBulk{err: fmt.Errorf("calling to EventLevelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventLevelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventLevelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventLevel.
func (c *EventLevelClient) Update() *EventLevelUpdate {
	mutation := newEventLevelMutation(c.config, OpUpdate)
	return &EventLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventLevelClient) UpdateOne(el *EventLevel) *EventLevelUpdateOne {
	mutation := newEventLevelMutation(c.config, OpUpdateOne, withEventLevel(el))
	return &EventLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventLevelClient) UpdateOneID(id int) *EventLevelUpdateOne {
	mutation := newEventLevelMutation(c.config, OpUpdateOne, withEventLevelID(id))
	return &EventLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventLevel.
func (c *EventLevelClient) Delete() *EventLevelDelete {
	mutation := newEventLevelMutation(c.config, OpDelete)
	return &EventLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventLevelClient) DeleteOne(el *EventLevel) *EventLevelDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventLevelClient) DeleteOneID(id int) *EventLevelDeleteOne {
	builder := c.Delete().Where(eventlevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventLevelDeleteOne{builder}
}

// Query returns a query builder for EventLevel.
func (c *EventLevelClient) Query() *EventLevelQuery {
	return &EventLevelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEventLevel},
		inters: c.Interceptors(),
	}
}

// Get returns a EventLevel entity by its id.
func (c *EventLevelClient) Get(ctx context.Context, id int) (*EventLevel, error) {
	return c.Query().Where(eventlevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventLevelClient) GetX(ctx context.Context, id int) *EventLevel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a EventLevel.
func (c *EventLevelClient) QueryCreator(el *EventLevel) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlevel.Table, eventlevel.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlevel.CreatorTable, eventlevel.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a EventLevel.
func (c *EventLevelClient) QueryUpdater(el *EventLevel) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlevel.Table, eventlevel.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlevel.UpdaterTable, eventlevel.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventLevelClient) Hooks() []Hook {
	hooks := c.hooks.EventLevel
	return append(hooks[:len(hooks):len(hooks)], eventlevel.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EventLevelClient) Interceptors() []Interceptor {
	return c.inters.EventLevel
}

func (c *EventLevelClient) mutate(ctx context.Context, m *EventLevelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventLevelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventLevelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown EventLevel mutation op: %q", m.Op())
	}
}

// EventLogClient is a client for the EventLog schema.
type EventLogClient struct {
	config
}

// NewEventLogClient returns a client for the EventLog from the given config.
func NewEventLogClient(c config) *EventLogClient {
	return &EventLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventlog.Hooks(f(g(h())))`.
func (c *EventLogClient) Use(hooks ...Hook) {
	c.hooks.EventLog = append(c.hooks.EventLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eventlog.Intercept(f(g(h())))`.
func (c *EventLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.EventLog = append(c.inters.EventLog, interceptors...)
}

// Create returns a builder for creating a EventLog entity.
func (c *EventLogClient) Create() *EventLogCreate {
	mutation := newEventLogMutation(c.config, OpCreate)
	return &EventLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventLog entities.
func (c *EventLogClient) CreateBulk(builders ...*EventLogCreate) *EventLogCreateBulk {
	return &EventLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventLogClient) MapCreateBulk(slice any, setFunc func(*EventLogCreate, int)) *EventLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventLogCreateBulk{err: fmt.Errorf("calling to EventLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventLog.
func (c *EventLogClient) Update() *EventLogUpdate {
	mutation := newEventLogMutation(c.config, OpUpdate)
	return &EventLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventLogClient) UpdateOne(el *EventLog) *EventLogUpdateOne {
	mutation := newEventLogMutation(c.config, OpUpdateOne, withEventLog(el))
	return &EventLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventLogClient) UpdateOneID(id int) *EventLogUpdateOne {
	mutation := newEventLogMutation(c.config, OpUpdateOne, withEventLogID(id))
	return &EventLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventLog.
func (c *EventLogClient) Delete() *EventLogDelete {
	mutation := newEventLogMutation(c.config, OpDelete)
	return &EventLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventLogClient) DeleteOne(el *EventLog) *EventLogDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventLogClient) DeleteOneID(id int) *EventLogDeleteOne {
	builder := c.Delete().Where(eventlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventLogDeleteOne{builder}
}

// Query returns a query builder for EventLog.
func (c *EventLogClient) Query() *EventLogQuery {
	return &EventLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEventLog},
		inters: c.Interceptors(),
	}
}

// Get returns a EventLog entity by its id.
func (c *EventLogClient) Get(ctx context.Context, id int) (*EventLog, error) {
	return c.Query().Where(eventlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventLogClient) GetX(ctx context.Context, id int) *EventLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a EventLog.
func (c *EventLogClient) QueryCreator(el *EventLog) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.CreatorTable, eventlog.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a EventLog.
func (c *EventLogClient) QueryUpdater(el *EventLog) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.UpdaterTable, eventlog.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvent queries the event edge of a EventLog.
func (c *EventLogClient) QueryEvent(el *EventLog) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.EventTable, eventlog.EventColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a EventLog.
func (c *EventLogClient) QueryDevice(el *EventLog) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.DeviceTable, eventlog.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActor queries the actor edge of a EventLog.
func (c *EventLogClient) QueryActor(el *EventLog) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.ActorTable, eventlog.ActorColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActor2 queries the actor2 edge of a EventLog.
func (c *EventLogClient) QueryActor2(el *EventLog) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.Actor2Table, eventlog.Actor2Column),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventLogClient) Hooks() []Hook {
	hooks := c.hooks.EventLog
	return append(hooks[:len(hooks):len(hooks)], eventlog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EventLogClient) Interceptors() []Interceptor {
	return c.inters.EventLog
}

func (c *EventLogClient) mutate(ctx context.Context, m *EventLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown EventLog mutation op: %q", m.Op())
	}
}

// FixingClient is a client for the Fixing schema.
type FixingClient struct {
	config
}

// NewFixingClient returns a client for the Fixing from the given config.
func NewFixingClient(c config) *FixingClient {
	return &FixingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fixing.Hooks(f(g(h())))`.
func (c *FixingClient) Use(hooks ...Hook) {
	c.hooks.Fixing = append(c.hooks.Fixing, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fixing.Intercept(f(g(h())))`.
func (c *FixingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fixing = append(c.inters.Fixing, interceptors...)
}

// Create returns a builder for creating a Fixing entity.
func (c *FixingClient) Create() *FixingCreate {
	mutation := newFixingMutation(c.config, OpCreate)
	return &FixingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fixing entities.
func (c *FixingClient) CreateBulk(builders ...*FixingCreate) *FixingCreateBulk {
	return &FixingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FixingClient) MapCreateBulk(slice any, setFunc func(*FixingCreate, int)) *FixingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FixingCreateBulk{err: fmt.Errorf("calling to FixingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FixingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FixingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fixing.
func (c *FixingClient) Update() *FixingUpdate {
	mutation := newFixingMutation(c.config, OpUpdate)
	return &FixingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FixingClient) UpdateOne(f *Fixing) *FixingUpdateOne {
	mutation := newFixingMutation(c.config, OpUpdateOne, withFixing(f))
	return &FixingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FixingClient) UpdateOneID(id int) *FixingUpdateOne {
	mutation := newFixingMutation(c.config, OpUpdateOne, withFixingID(id))
	return &FixingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fixing.
func (c *FixingClient) Delete() *FixingDelete {
	mutation := newFixingMutation(c.config, OpDelete)
	return &FixingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FixingClient) DeleteOne(f *Fixing) *FixingDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FixingClient) DeleteOneID(id int) *FixingDeleteOne {
	builder := c.Delete().Where(fixing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FixingDeleteOne{builder}
}

// Query returns a query builder for Fixing.
func (c *FixingClient) Query() *FixingQuery {
	return &FixingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFixing},
		inters: c.Interceptors(),
	}
}

// Get returns a Fixing entity by its id.
func (c *FixingClient) Get(ctx context.Context, id int) (*Fixing, error) {
	return c.Query().Where(fixing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FixingClient) GetX(ctx context.Context, id int) *Fixing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Fixing.
func (c *FixingClient) QueryCreator(f *Fixing) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixing.Table, fixing.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixing.CreatorTable, fixing.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Fixing.
func (c *FixingClient) QueryUpdater(f *Fixing) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixing.Table, fixing.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixing.UpdaterTable, fixing.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixer queries the fixer edge of a Fixing.
func (c *FixingClient) QueryFixer(f *Fixing) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixing.Table, fixing.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixing.FixerTable, fixing.FixerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvent queries the event edge of a Fixing.
func (c *FixingClient) QueryEvent(f *Fixing) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixing.Table, fixing.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, fixing.EventTable, fixing.EventColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a Fixing.
func (c *FixingClient) QueryDevice(f *Fixing) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixing.Table, fixing.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixing.DeviceTable, fixing.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FixingClient) Hooks() []Hook {
	hooks := c.hooks.Fixing
	return append(hooks[:len(hooks):len(hooks)], fixing.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FixingClient) Interceptors() []Interceptor {
	return c.inters.Fixing
}

func (c *FixingClient) mutate(ctx context.Context, m *FixingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FixingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FixingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FixingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FixingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Fixing mutation op: %q", m.Op())
	}
}

// OccupationClient is a client for the Occupation schema.
type OccupationClient struct {
	config
}

// NewOccupationClient returns a client for the Occupation from the given config.
func NewOccupationClient(c config) *OccupationClient {
	return &OccupationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `occupation.Hooks(f(g(h())))`.
func (c *OccupationClient) Use(hooks ...Hook) {
	c.hooks.Occupation = append(c.hooks.Occupation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `occupation.Intercept(f(g(h())))`.
func (c *OccupationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Occupation = append(c.inters.Occupation, interceptors...)
}

// Create returns a builder for creating a Occupation entity.
func (c *OccupationClient) Create() *OccupationCreate {
	mutation := newOccupationMutation(c.config, OpCreate)
	return &OccupationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Occupation entities.
func (c *OccupationClient) CreateBulk(builders ...*OccupationCreate) *OccupationCreateBulk {
	return &OccupationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OccupationClient) MapCreateBulk(slice any, setFunc func(*OccupationCreate, int)) *OccupationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OccupationCreateBulk{err: fmt.Errorf("calling to OccupationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OccupationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OccupationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Occupation.
func (c *OccupationClient) Update() *OccupationUpdate {
	mutation := newOccupationMutation(c.config, OpUpdate)
	return &OccupationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OccupationClient) UpdateOne(o *Occupation) *OccupationUpdateOne {
	mutation := newOccupationMutation(c.config, OpUpdateOne, withOccupation(o))
	return &OccupationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OccupationClient) UpdateOneID(id int) *OccupationUpdateOne {
	mutation := newOccupationMutation(c.config, OpUpdateOne, withOccupationID(id))
	return &OccupationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Occupation.
func (c *OccupationClient) Delete() *OccupationDelete {
	mutation := newOccupationMutation(c.config, OpDelete)
	return &OccupationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OccupationClient) DeleteOne(o *Occupation) *OccupationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OccupationClient) DeleteOneID(id int) *OccupationDeleteOne {
	builder := c.Delete().Where(occupation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OccupationDeleteOne{builder}
}

// Query returns a query builder for Occupation.
func (c *OccupationClient) Query() *OccupationQuery {
	return &OccupationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOccupation},
		inters: c.Interceptors(),
	}
}

// Get returns a Occupation entity by its id.
func (c *OccupationClient) Get(ctx context.Context, id int) (*Occupation, error) {
	return c.Query().Where(occupation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OccupationClient) GetX(ctx context.Context, id int) *Occupation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Occupation.
func (c *OccupationClient) QueryCreator(o *Occupation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occupation.Table, occupation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, occupation.CreatorTable, occupation.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Occupation.
func (c *OccupationClient) QueryUpdater(o *Occupation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occupation.Table, occupation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, occupation.UpdaterTable, occupation.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Occupation.
func (c *OccupationClient) QueryEmployee(o *Occupation) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occupation.Table, occupation.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, occupation.EmployeeTable, occupation.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OccupationClient) Hooks() []Hook {
	hooks := c.hooks.Occupation
	return append(hooks[:len(hooks):len(hooks)], occupation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OccupationClient) Interceptors() []Interceptor {
	return c.inters.Occupation
}

func (c *OccupationClient) mutate(ctx context.Context, m *OccupationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OccupationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OccupationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OccupationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OccupationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Occupation mutation op: %q", m.Op())
	}
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permission.Intercept(f(g(h())))`.
func (c *PermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Permission = append(c.inters.Permission, interceptors...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionClient) MapCreateBulk(slice any, setFunc func(*PermissionCreate, int)) *PermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionCreateBulk{err: fmt.Errorf("calling to PermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id int) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Permission.
func (c *PermissionClient) QueryCreator(pe *Permission) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permission.CreatorTable, permission.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Permission.
func (c *PermissionClient) QueryUpdater(pe *Permission) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permission.UpdaterTable, permission.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a Permission.
func (c *PermissionClient) QueryAdmin(pe *Permission) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, permission.AdminTable, permission.AdminPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Permission.
func (c *PermissionClient) QueryDepartment(pe *Permission) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, permission.DepartmentTable, permission.DepartmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	hooks := c.hooks.Permission
	return append(hooks[:len(hooks):len(hooks)], permission.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PermissionClient) Interceptors() []Interceptor {
	return c.inters.Permission
}

func (c *PermissionClient) mutate(ctx context.Context, m *PermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Permission mutation op: %q", m.Op())
	}
}

// RiskClient is a client for the Risk schema.
type RiskClient struct {
	config
}

// NewRiskClient returns a client for the Risk from the given config.
func NewRiskClient(c config) *RiskClient {
	return &RiskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `risk.Hooks(f(g(h())))`.
func (c *RiskClient) Use(hooks ...Hook) {
	c.hooks.Risk = append(c.hooks.Risk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `risk.Intercept(f(g(h())))`.
func (c *RiskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Risk = append(c.inters.Risk, interceptors...)
}

// Create returns a builder for creating a Risk entity.
func (c *RiskClient) Create() *RiskCreate {
	mutation := newRiskMutation(c.config, OpCreate)
	return &RiskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Risk entities.
func (c *RiskClient) CreateBulk(builders ...*RiskCreate) *RiskCreateBulk {
	return &RiskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskClient) MapCreateBulk(slice any, setFunc func(*RiskCreate, int)) *RiskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskCreateBulk{err: fmt.Errorf("calling to RiskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Risk.
func (c *RiskClient) Update() *RiskUpdate {
	mutation := newRiskMutation(c.config, OpUpdate)
	return &RiskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskClient) UpdateOne(r *Risk) *RiskUpdateOne {
	mutation := newRiskMutation(c.config, OpUpdateOne, withRisk(r))
	return &RiskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskClient) UpdateOneID(id int) *RiskUpdateOne {
	mutation := newRiskMutation(c.config, OpUpdateOne, withRiskID(id))
	return &RiskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Risk.
func (c *RiskClient) Delete() *RiskDelete {
	mutation := newRiskMutation(c.config, OpDelete)
	return &RiskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskClient) DeleteOne(r *Risk) *RiskDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskClient) DeleteOneID(id int) *RiskDeleteOne {
	builder := c.Delete().Where(risk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskDeleteOne{builder}
}

// Query returns a query builder for Risk.
func (c *RiskClient) Query() *RiskQuery {
	return &RiskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRisk},
		inters: c.Interceptors(),
	}
}

// Get returns a Risk entity by its id.
func (c *RiskClient) Get(ctx context.Context, id int) (*Risk, error) {
	return c.Query().Where(risk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskClient) GetX(ctx context.Context, id int) *Risk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Risk.
func (c *RiskClient) QueryCreator(r *Risk) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.CreatorTable, risk.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Risk.
func (c *RiskClient) QueryUpdater(r *Risk) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.UpdaterTable, risk.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskCategory queries the risk_category edge of a Risk.
func (c *RiskClient) QueryRiskCategory(r *Risk) *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, id),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.RiskCategoryTable, risk.RiskCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskLocation queries the risk_location edge of a Risk.
func (c *RiskClient) QueryRiskLocation(r *Risk) *RiskLocationQuery {
	query := (&RiskLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, id),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.RiskLocationTable, risk.RiskLocationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintainer queries the maintainer edge of a Risk.
func (c *RiskClient) QueryMaintainer(r *Risk) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.MaintainerTable, risk.MaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiskClient) Hooks() []Hook {
	hooks := c.hooks.Risk
	return append(hooks[:len(hooks):len(hooks)], risk.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiskClient) Interceptors() []Interceptor {
	return c.inters.Risk
}

func (c *RiskClient) mutate(ctx context.Context, m *RiskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Risk mutation op: %q", m.Op())
	}
}

// RiskCategoryClient is a client for the RiskCategory schema.
type RiskCategoryClient struct {
	config
}

// NewRiskCategoryClient returns a client for the RiskCategory from the given config.
func NewRiskCategoryClient(c config) *RiskCategoryClient {
	return &RiskCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riskcategory.Hooks(f(g(h())))`.
func (c *RiskCategoryClient) Use(hooks ...Hook) {
	c.hooks.RiskCategory = append(c.hooks.RiskCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riskcategory.Intercept(f(g(h())))`.
func (c *RiskCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiskCategory = append(c.inters.RiskCategory, interceptors...)
}

// Create returns a builder for creating a RiskCategory entity.
func (c *RiskCategoryClient) Create() *RiskCategoryCreate {
	mutation := newRiskCategoryMutation(c.config, OpCreate)
	return &RiskCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiskCategory entities.
func (c *RiskCategoryClient) CreateBulk(builders ...*RiskCategoryCreate) *RiskCategoryCreateBulk {
	return &RiskCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskCategoryClient) MapCreateBulk(slice any, setFunc func(*RiskCategoryCreate, int)) *RiskCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskCategoryCreateBulk{err: fmt.Errorf("calling to RiskCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiskCategory.
func (c *RiskCategoryClient) Update() *RiskCategoryUpdate {
	mutation := newRiskCategoryMutation(c.config, OpUpdate)
	return &RiskCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskCategoryClient) UpdateOne(rc *RiskCategory) *RiskCategoryUpdateOne {
	mutation := newRiskCategoryMutation(c.config, OpUpdateOne, withRiskCategory(rc))
	return &RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskCategoryClient) UpdateOneID(id int) *RiskCategoryUpdateOne {
	mutation := newRiskCategoryMutation(c.config, OpUpdateOne, withRiskCategoryID(id))
	return &RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiskCategory.
func (c *RiskCategoryClient) Delete() *RiskCategoryDelete {
	mutation := newRiskCategoryMutation(c.config, OpDelete)
	return &RiskCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskCategoryClient) DeleteOne(rc *RiskCategory) *RiskCategoryDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskCategoryClient) DeleteOneID(id int) *RiskCategoryDeleteOne {
	builder := c.Delete().Where(riskcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskCategoryDeleteOne{builder}
}

// Query returns a query builder for RiskCategory.
func (c *RiskCategoryClient) Query() *RiskCategoryQuery {
	return &RiskCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiskCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a RiskCategory entity by its id.
func (c *RiskCategoryClient) Get(ctx context.Context, id int) (*RiskCategory, error) {
	return c.Query().Where(riskcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskCategoryClient) GetX(ctx context.Context, id int) *RiskCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a RiskCategory.
func (c *RiskCategoryClient) QueryCreator(rc *RiskCategory) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riskcategory.Table, riskcategory.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riskcategory.CreatorTable, riskcategory.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a RiskCategory.
func (c *RiskCategoryClient) QueryUpdater(rc *RiskCategory) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riskcategory.Table, riskcategory.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riskcategory.UpdaterTable, riskcategory.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRisk queries the risk edge of a RiskCategory.
func (c *RiskCategoryClient) QueryRisk(rc *RiskCategory) *RiskQuery {
	query := (&RiskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riskcategory.Table, riskcategory.FieldID, id),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, riskcategory.RiskTable, riskcategory.RiskColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweep queries the sweep edge of a RiskCategory.
func (c *RiskCategoryClient) QuerySweep(rc *RiskCategory) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riskcategory.Table, riskcategory.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, riskcategory.SweepTable, riskcategory.SweepColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiskCategoryClient) Hooks() []Hook {
	hooks := c.hooks.RiskCategory
	return append(hooks[:len(hooks):len(hooks)], riskcategory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiskCategoryClient) Interceptors() []Interceptor {
	return c.inters.RiskCategory
}

func (c *RiskCategoryClient) mutate(ctx context.Context, m *RiskCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown RiskCategory mutation op: %q", m.Op())
	}
}

// RiskLocationClient is a client for the RiskLocation schema.
type RiskLocationClient struct {
	config
}

// NewRiskLocationClient returns a client for the RiskLocation from the given config.
func NewRiskLocationClient(c config) *RiskLocationClient {
	return &RiskLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `risklocation.Hooks(f(g(h())))`.
func (c *RiskLocationClient) Use(hooks ...Hook) {
	c.hooks.RiskLocation = append(c.hooks.RiskLocation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `risklocation.Intercept(f(g(h())))`.
func (c *RiskLocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiskLocation = append(c.inters.RiskLocation, interceptors...)
}

// Create returns a builder for creating a RiskLocation entity.
func (c *RiskLocationClient) Create() *RiskLocationCreate {
	mutation := newRiskLocationMutation(c.config, OpCreate)
	return &RiskLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiskLocation entities.
func (c *RiskLocationClient) CreateBulk(builders ...*RiskLocationCreate) *RiskLocationCreateBulk {
	return &RiskLocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiskLocationClient) MapCreateBulk(slice any, setFunc func(*RiskLocationCreate, int)) *RiskLocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiskLocationCreateBulk{err: fmt.Errorf("calling to RiskLocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiskLocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiskLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiskLocation.
func (c *RiskLocationClient) Update() *RiskLocationUpdate {
	mutation := newRiskLocationMutation(c.config, OpUpdate)
	return &RiskLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiskLocationClient) UpdateOne(rl *RiskLocation) *RiskLocationUpdateOne {
	mutation := newRiskLocationMutation(c.config, OpUpdateOne, withRiskLocation(rl))
	return &RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiskLocationClient) UpdateOneID(id int) *RiskLocationUpdateOne {
	mutation := newRiskLocationMutation(c.config, OpUpdateOne, withRiskLocationID(id))
	return &RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiskLocation.
func (c *RiskLocationClient) Delete() *RiskLocationDelete {
	mutation := newRiskLocationMutation(c.config, OpDelete)
	return &RiskLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiskLocationClient) DeleteOne(rl *RiskLocation) *RiskLocationDeleteOne {
	return c.DeleteOneID(rl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiskLocationClient) DeleteOneID(id int) *RiskLocationDeleteOne {
	builder := c.Delete().Where(risklocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiskLocationDeleteOne{builder}
}

// Query returns a query builder for RiskLocation.
func (c *RiskLocationClient) Query() *RiskLocationQuery {
	return &RiskLocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiskLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a RiskLocation entity by its id.
func (c *RiskLocationClient) Get(ctx context.Context, id int) (*RiskLocation, error) {
	return c.Query().Where(risklocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiskLocationClient) GetX(ctx context.Context, id int) *RiskLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a RiskLocation.
func (c *RiskLocationClient) QueryCreator(rl *RiskLocation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risklocation.Table, risklocation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risklocation.CreatorTable, risklocation.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a RiskLocation.
func (c *RiskLocationClient) QueryUpdater(rl *RiskLocation) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risklocation.Table, risklocation.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risklocation.UpdaterTable, risklocation.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRisk queries the risk edge of a RiskLocation.
func (c *RiskLocationClient) QueryRisk(rl *RiskLocation) *RiskQuery {
	query := (&RiskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risklocation.Table, risklocation.FieldID, id),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, risklocation.RiskTable, risklocation.RiskColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweep queries the sweep edge of a RiskLocation.
func (c *RiskLocationClient) QuerySweep(rl *RiskLocation) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risklocation.Table, risklocation.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, risklocation.SweepTable, risklocation.SweepColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiskLocationClient) Hooks() []Hook {
	hooks := c.hooks.RiskLocation
	return append(hooks[:len(hooks):len(hooks)], risklocation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiskLocationClient) Interceptors() []Interceptor {
	return c.inters.RiskLocation
}

func (c *RiskLocationClient) mutate(ctx context.Context, m *RiskLocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiskLocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiskLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiskLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiskLocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown RiskLocation mutation op: %q", m.Op())
	}
}

// SweepClient is a client for the Sweep schema.
type SweepClient struct {
	config
}

// NewSweepClient returns a client for the Sweep from the given config.
func NewSweepClient(c config) *SweepClient {
	return &SweepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sweep.Hooks(f(g(h())))`.
func (c *SweepClient) Use(hooks ...Hook) {
	c.hooks.Sweep = append(c.hooks.Sweep, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sweep.Intercept(f(g(h())))`.
func (c *SweepClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sweep = append(c.inters.Sweep, interceptors...)
}

// Create returns a builder for creating a Sweep entity.
func (c *SweepClient) Create() *SweepCreate {
	mutation := newSweepMutation(c.config, OpCreate)
	return &SweepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sweep entities.
func (c *SweepClient) CreateBulk(builders ...*SweepCreate) *SweepCreateBulk {
	return &SweepCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SweepClient) MapCreateBulk(slice any, setFunc func(*SweepCreate, int)) *SweepCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SweepCreateBulk{err: fmt.Errorf("calling to SweepClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SweepCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SweepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sweep.
func (c *SweepClient) Update() *SweepUpdate {
	mutation := newSweepMutation(c.config, OpUpdate)
	return &SweepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SweepClient) UpdateOne(s *Sweep) *SweepUpdateOne {
	mutation := newSweepMutation(c.config, OpUpdateOne, withSweep(s))
	return &SweepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SweepClient) UpdateOneID(id int) *SweepUpdateOne {
	mutation := newSweepMutation(c.config, OpUpdateOne, withSweepID(id))
	return &SweepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sweep.
func (c *SweepClient) Delete() *SweepDelete {
	mutation := newSweepMutation(c.config, OpDelete)
	return &SweepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SweepClient) DeleteOne(s *Sweep) *SweepDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SweepClient) DeleteOneID(id int) *SweepDeleteOne {
	builder := c.Delete().Where(sweep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SweepDeleteOne{builder}
}

// Query returns a query builder for Sweep.
func (c *SweepClient) Query() *SweepQuery {
	return &SweepQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSweep},
		inters: c.Interceptors(),
	}
}

// Get returns a Sweep entity by its id.
func (c *SweepClient) Get(ctx context.Context, id int) (*Sweep, error) {
	return c.Query().Where(sweep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SweepClient) GetX(ctx context.Context, id int) *Sweep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Sweep.
func (c *SweepClient) QueryCreator(s *Sweep) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweep.CreatorTable, sweep.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Sweep.
func (c *SweepClient) QueryUpdater(s *Sweep) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweep.UpdaterTable, sweep.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskCategory queries the risk_category edge of a Sweep.
func (c *SweepClient) QueryRiskCategory(s *Sweep) *RiskCategoryQuery {
	query := (&RiskCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(riskcategory.Table, riskcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweep.RiskCategoryTable, sweep.RiskCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiskLocation queries the risk_location edge of a Sweep.
func (c *SweepClient) QueryRiskLocation(s *Sweep) *RiskLocationQuery {
	query := (&RiskLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(risklocation.Table, risklocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweep.RiskLocationTable, sweep.RiskLocationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepSchedule queries the sweep_schedule edge of a Sweep.
func (c *SweepClient) QuerySweepSchedule(s *Sweep) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweep.SweepScheduleTable, sweep.SweepScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResult queries the sweep_result edge of a Sweep.
func (c *SweepClient) QuerySweepResult(s *Sweep) *SweepResultQuery {
	query := (&SweepResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweep.SweepResultTable, sweep.SweepResultColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultDetails queries the sweep_result_details edge of a Sweep.
func (c *SweepClient) QuerySweepResultDetails(s *Sweep) *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweep.Table, sweep.FieldID, id),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweep.SweepResultDetailsTable, sweep.SweepResultDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SweepClient) Hooks() []Hook {
	hooks := c.hooks.Sweep
	return append(hooks[:len(hooks):len(hooks)], sweep.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SweepClient) Interceptors() []Interceptor {
	return c.inters.Sweep
}

func (c *SweepClient) mutate(ctx context.Context, m *SweepMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SweepCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SweepUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SweepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SweepDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Sweep mutation op: %q", m.Op())
	}
}

// SweepResultClient is a client for the SweepResult schema.
type SweepResultClient struct {
	config
}

// NewSweepResultClient returns a client for the SweepResult from the given config.
func NewSweepResultClient(c config) *SweepResultClient {
	return &SweepResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sweepresult.Hooks(f(g(h())))`.
func (c *SweepResultClient) Use(hooks ...Hook) {
	c.hooks.SweepResult = append(c.hooks.SweepResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sweepresult.Intercept(f(g(h())))`.
func (c *SweepResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.SweepResult = append(c.inters.SweepResult, interceptors...)
}

// Create returns a builder for creating a SweepResult entity.
func (c *SweepResultClient) Create() *SweepResultCreate {
	mutation := newSweepResultMutation(c.config, OpCreate)
	return &SweepResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SweepResult entities.
func (c *SweepResultClient) CreateBulk(builders ...*SweepResultCreate) *SweepResultCreateBulk {
	return &SweepResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SweepResultClient) MapCreateBulk(slice any, setFunc func(*SweepResultCreate, int)) *SweepResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SweepResultCreateBulk{err: fmt.Errorf("calling to SweepResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SweepResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SweepResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SweepResult.
func (c *SweepResultClient) Update() *SweepResultUpdate {
	mutation := newSweepResultMutation(c.config, OpUpdate)
	return &SweepResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SweepResultClient) UpdateOne(sr *SweepResult) *SweepResultUpdateOne {
	mutation := newSweepResultMutation(c.config, OpUpdateOne, withSweepResult(sr))
	return &SweepResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SweepResultClient) UpdateOneID(id int) *SweepResultUpdateOne {
	mutation := newSweepResultMutation(c.config, OpUpdateOne, withSweepResultID(id))
	return &SweepResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SweepResult.
func (c *SweepResultClient) Delete() *SweepResultDelete {
	mutation := newSweepResultMutation(c.config, OpDelete)
	return &SweepResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SweepResultClient) DeleteOne(sr *SweepResult) *SweepResultDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SweepResultClient) DeleteOneID(id int) *SweepResultDeleteOne {
	builder := c.Delete().Where(sweepresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SweepResultDeleteOne{builder}
}

// Query returns a query builder for SweepResult.
func (c *SweepResultClient) Query() *SweepResultQuery {
	return &SweepResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSweepResult},
		inters: c.Interceptors(),
	}
}

// Get returns a SweepResult entity by its id.
func (c *SweepResultClient) Get(ctx context.Context, id int) (*SweepResult, error) {
	return c.Query().Where(sweepresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SweepResultClient) GetX(ctx context.Context, id int) *SweepResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a SweepResult.
func (c *SweepResultClient) QueryCreator(sr *SweepResult) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresult.Table, sweepresult.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresult.CreatorTable, sweepresult.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a SweepResult.
func (c *SweepResultClient) QueryUpdater(sr *SweepResult) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresult.Table, sweepresult.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresult.UpdaterTable, sweepresult.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweep queries the sweep edge of a SweepResult.
func (c *SweepResultClient) QuerySweep(sr *SweepResult) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresult.Table, sweepresult.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresult.SweepTable, sweepresult.SweepColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepSchedule queries the sweep_schedule edge of a SweepResult.
func (c *SweepResultClient) QuerySweepSchedule(sr *SweepResult) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresult.Table, sweepresult.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresult.SweepScheduleTable, sweepresult.SweepScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultDetails queries the sweep_result_details edge of a SweepResult.
func (c *SweepResultClient) QuerySweepResultDetails(sr *SweepResult) *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresult.Table, sweepresult.FieldID, id),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweepresult.SweepResultDetailsTable, sweepresult.SweepResultDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SweepResultClient) Hooks() []Hook {
	hooks := c.hooks.SweepResult
	return append(hooks[:len(hooks):len(hooks)], sweepresult.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SweepResultClient) Interceptors() []Interceptor {
	return c.inters.SweepResult
}

func (c *SweepResultClient) mutate(ctx context.Context, m *SweepResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SweepResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SweepResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SweepResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SweepResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown SweepResult mutation op: %q", m.Op())
	}
}

// SweepResultDetailsClient is a client for the SweepResultDetails schema.
type SweepResultDetailsClient struct {
	config
}

// NewSweepResultDetailsClient returns a client for the SweepResultDetails from the given config.
func NewSweepResultDetailsClient(c config) *SweepResultDetailsClient {
	return &SweepResultDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sweepresultdetails.Hooks(f(g(h())))`.
func (c *SweepResultDetailsClient) Use(hooks ...Hook) {
	c.hooks.SweepResultDetails = append(c.hooks.SweepResultDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sweepresultdetails.Intercept(f(g(h())))`.
func (c *SweepResultDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SweepResultDetails = append(c.inters.SweepResultDetails, interceptors...)
}

// Create returns a builder for creating a SweepResultDetails entity.
func (c *SweepResultDetailsClient) Create() *SweepResultDetailsCreate {
	mutation := newSweepResultDetailsMutation(c.config, OpCreate)
	return &SweepResultDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SweepResultDetails entities.
func (c *SweepResultDetailsClient) CreateBulk(builders ...*SweepResultDetailsCreate) *SweepResultDetailsCreateBulk {
	return &SweepResultDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SweepResultDetailsClient) MapCreateBulk(slice any, setFunc func(*SweepResultDetailsCreate, int)) *SweepResultDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SweepResultDetailsCreateBulk{err: fmt.Errorf("calling to SweepResultDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SweepResultDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SweepResultDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SweepResultDetails.
func (c *SweepResultDetailsClient) Update() *SweepResultDetailsUpdate {
	mutation := newSweepResultDetailsMutation(c.config, OpUpdate)
	return &SweepResultDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SweepResultDetailsClient) UpdateOne(srd *SweepResultDetails) *SweepResultDetailsUpdateOne {
	mutation := newSweepResultDetailsMutation(c.config, OpUpdateOne, withSweepResultDetails(srd))
	return &SweepResultDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SweepResultDetailsClient) UpdateOneID(id int) *SweepResultDetailsUpdateOne {
	mutation := newSweepResultDetailsMutation(c.config, OpUpdateOne, withSweepResultDetailsID(id))
	return &SweepResultDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SweepResultDetails.
func (c *SweepResultDetailsClient) Delete() *SweepResultDetailsDelete {
	mutation := newSweepResultDetailsMutation(c.config, OpDelete)
	return &SweepResultDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SweepResultDetailsClient) DeleteOne(srd *SweepResultDetails) *SweepResultDetailsDeleteOne {
	return c.DeleteOneID(srd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SweepResultDetailsClient) DeleteOneID(id int) *SweepResultDetailsDeleteOne {
	builder := c.Delete().Where(sweepresultdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SweepResultDetailsDeleteOne{builder}
}

// Query returns a query builder for SweepResultDetails.
func (c *SweepResultDetailsClient) Query() *SweepResultDetailsQuery {
	return &SweepResultDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSweepResultDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a SweepResultDetails entity by its id.
func (c *SweepResultDetailsClient) Get(ctx context.Context, id int) (*SweepResultDetails, error) {
	return c.Query().Where(sweepresultdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SweepResultDetailsClient) GetX(ctx context.Context, id int) *SweepResultDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a SweepResultDetails.
func (c *SweepResultDetailsClient) QueryCreator(srd *SweepResultDetails) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.CreatorTable, sweepresultdetails.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(srd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a SweepResultDetails.
func (c *SweepResultDetailsClient) QueryUpdater(srd *SweepResultDetails) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.UpdaterTable, sweepresultdetails.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(srd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweep queries the sweep edge of a SweepResultDetails.
func (c *SweepResultDetailsClient) QuerySweep(srd *SweepResultDetails) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepTable, sweepresultdetails.SweepColumn),
		)
		fromV = sqlgraph.Neighbors(srd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepSchedule queries the sweep_schedule edge of a SweepResultDetails.
func (c *SweepResultDetailsClient) QuerySweepSchedule(srd *SweepResultDetails) *SweepScheduleQuery {
	query := (&SweepScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, id),
			sqlgraph.To(sweepschedule.Table, sweepschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepScheduleTable, sweepresultdetails.SweepScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(srd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResult queries the sweep_result edge of a SweepResultDetails.
func (c *SweepResultDetailsClient) QuerySweepResult(srd *SweepResultDetails) *SweepResultQuery {
	query := (&SweepResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepresultdetails.Table, sweepresultdetails.FieldID, id),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepresultdetails.SweepResultTable, sweepresultdetails.SweepResultColumn),
		)
		fromV = sqlgraph.Neighbors(srd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SweepResultDetailsClient) Hooks() []Hook {
	hooks := c.hooks.SweepResultDetails
	return append(hooks[:len(hooks):len(hooks)], sweepresultdetails.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SweepResultDetailsClient) Interceptors() []Interceptor {
	return c.inters.SweepResultDetails
}

func (c *SweepResultDetailsClient) mutate(ctx context.Context, m *SweepResultDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SweepResultDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SweepResultDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SweepResultDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SweepResultDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown SweepResultDetails mutation op: %q", m.Op())
	}
}

// SweepScheduleClient is a client for the SweepSchedule schema.
type SweepScheduleClient struct {
	config
}

// NewSweepScheduleClient returns a client for the SweepSchedule from the given config.
func NewSweepScheduleClient(c config) *SweepScheduleClient {
	return &SweepScheduleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sweepschedule.Hooks(f(g(h())))`.
func (c *SweepScheduleClient) Use(hooks ...Hook) {
	c.hooks.SweepSchedule = append(c.hooks.SweepSchedule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sweepschedule.Intercept(f(g(h())))`.
func (c *SweepScheduleClient) Intercept(interceptors ...Interceptor) {
	c.inters.SweepSchedule = append(c.inters.SweepSchedule, interceptors...)
}

// Create returns a builder for creating a SweepSchedule entity.
func (c *SweepScheduleClient) Create() *SweepScheduleCreate {
	mutation := newSweepScheduleMutation(c.config, OpCreate)
	return &SweepScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SweepSchedule entities.
func (c *SweepScheduleClient) CreateBulk(builders ...*SweepScheduleCreate) *SweepScheduleCreateBulk {
	return &SweepScheduleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SweepScheduleClient) MapCreateBulk(slice any, setFunc func(*SweepScheduleCreate, int)) *SweepScheduleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SweepScheduleCreateBulk{err: fmt.Errorf("calling to SweepScheduleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SweepScheduleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SweepScheduleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SweepSchedule.
func (c *SweepScheduleClient) Update() *SweepScheduleUpdate {
	mutation := newSweepScheduleMutation(c.config, OpUpdate)
	return &SweepScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SweepScheduleClient) UpdateOne(ss *SweepSchedule) *SweepScheduleUpdateOne {
	mutation := newSweepScheduleMutation(c.config, OpUpdateOne, withSweepSchedule(ss))
	return &SweepScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SweepScheduleClient) UpdateOneID(id int) *SweepScheduleUpdateOne {
	mutation := newSweepScheduleMutation(c.config, OpUpdateOne, withSweepScheduleID(id))
	return &SweepScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SweepSchedule.
func (c *SweepScheduleClient) Delete() *SweepScheduleDelete {
	mutation := newSweepScheduleMutation(c.config, OpDelete)
	return &SweepScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SweepScheduleClient) DeleteOne(ss *SweepSchedule) *SweepScheduleDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SweepScheduleClient) DeleteOneID(id int) *SweepScheduleDeleteOne {
	builder := c.Delete().Where(sweepschedule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SweepScheduleDeleteOne{builder}
}

// Query returns a query builder for SweepSchedule.
func (c *SweepScheduleClient) Query() *SweepScheduleQuery {
	return &SweepScheduleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSweepSchedule},
		inters: c.Interceptors(),
	}
}

// Get returns a SweepSchedule entity by its id.
func (c *SweepScheduleClient) Get(ctx context.Context, id int) (*SweepSchedule, error) {
	return c.Query().Where(sweepschedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SweepScheduleClient) GetX(ctx context.Context, id int) *SweepSchedule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a SweepSchedule.
func (c *SweepScheduleClient) QueryCreator(ss *SweepSchedule) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.CreatorTable, sweepschedule.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a SweepSchedule.
func (c *SweepScheduleClient) QueryUpdater(ss *SweepSchedule) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.UpdaterTable, sweepschedule.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweep queries the sweep edge of a SweepSchedule.
func (c *SweepScheduleClient) QuerySweep(ss *SweepSchedule) *SweepQuery {
	query := (&SweepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(sweep.Table, sweep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sweepschedule.SweepTable, sweepschedule.SweepColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkers queries the workers edge of a SweepSchedule.
func (c *SweepScheduleClient) QueryWorkers(ss *SweepSchedule) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sweepschedule.WorkersTable, sweepschedule.WorkersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResult queries the sweep_result edge of a SweepSchedule.
func (c *SweepScheduleClient) QuerySweepResult(ss *SweepSchedule) *SweepResultQuery {
	query := (&SweepResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(sweepresult.Table, sweepresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweepschedule.SweepResultTable, sweepschedule.SweepResultColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySweepResultDetails queries the sweep_result_details edge of a SweepSchedule.
func (c *SweepScheduleClient) QuerySweepResultDetails(ss *SweepSchedule) *SweepResultDetailsQuery {
	query := (&SweepResultDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sweepschedule.Table, sweepschedule.FieldID, id),
			sqlgraph.To(sweepresultdetails.Table, sweepresultdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sweepschedule.SweepResultDetailsTable, sweepschedule.SweepResultDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SweepScheduleClient) Hooks() []Hook {
	hooks := c.hooks.SweepSchedule
	return append(hooks[:len(hooks):len(hooks)], sweepschedule.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SweepScheduleClient) Interceptors() []Interceptor {
	return c.inters.SweepSchedule
}

func (c *SweepScheduleClient) mutate(ctx context.Context, m *SweepScheduleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SweepScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SweepScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SweepScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SweepScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown SweepSchedule mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpdater queries the updater edge of a User.
func (c *UserClient) QueryUpdater(u *User) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.UpdaterTable, user.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown User mutation op: %q", m.Op())
	}
}

// VideoClient is a client for the Video schema.
type VideoClient struct {
	config
}

// NewVideoClient returns a client for the Video from the given config.
func NewVideoClient(c config) *VideoClient {
	return &VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video.Hooks(f(g(h())))`.
func (c *VideoClient) Use(hooks ...Hook) {
	c.hooks.Video = append(c.hooks.Video, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video.Intercept(f(g(h())))`.
func (c *VideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video = append(c.inters.Video, interceptors...)
}

// Create returns a builder for creating a Video entity.
func (c *VideoClient) Create() *VideoCreate {
	mutation := newVideoMutation(c.config, OpCreate)
	return &VideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video entities.
func (c *VideoClient) CreateBulk(builders ...*VideoCreate) *VideoCreateBulk {
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoClient) MapCreateBulk(slice any, setFunc func(*VideoCreate, int)) *VideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoCreateBulk{err: fmt.Errorf("calling to VideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video.
func (c *VideoClient) Update() *VideoUpdate {
	mutation := newVideoMutation(c.config, OpUpdate)
	return &VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClient) UpdateOne(v *Video) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideo(v))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClient) UpdateOneID(id int) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideoID(id))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video.
func (c *VideoClient) Delete() *VideoDelete {
	mutation := newVideoMutation(c.config, OpDelete)
	return &VideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoClient) DeleteOne(v *Video) *VideoDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoClient) DeleteOneID(id int) *VideoDeleteOne {
	builder := c.Delete().Where(video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDeleteOne{builder}
}

// Query returns a query builder for Video.
func (c *VideoClient) Query() *VideoQuery {
	return &VideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a Video entity by its id.
func (c *VideoClient) Get(ctx context.Context, id int) (*Video, error) {
	return c.Query().Where(video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClient) GetX(ctx context.Context, id int) *Video {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Video.
func (c *VideoClient) QueryCreator(v *Video) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.CreatorTable, video.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Video.
func (c *VideoClient) QueryUpdater(v *Video) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.UpdaterTable, video.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvent queries the event edge of a Video.
func (c *VideoClient) QueryEvent(v *Video) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, video.EventTable, video.EventColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClient) Hooks() []Hook {
	hooks := c.hooks.Video
	return append(hooks[:len(hooks):len(hooks)], video.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *VideoClient) Interceptors() []Interceptor {
	return c.inters.Video
}

func (c *VideoClient) mutate(ctx context.Context, m *VideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("dao: unknown Video mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Admin, Area, Department, Device, DeviceInstallation, Employee, Event,
		EventLevel, EventLog, Fixing, Occupation, Permission, Risk, RiskCategory,
		RiskLocation, Sweep, SweepResult, SweepResultDetails, SweepSchedule, User,
		Video []ent.Hook
	}
	inters struct {
		Admin, Area, Department, Device, DeviceInstallation, Employee, Event,
		EventLevel, EventLog, Fixing, Occupation, Permission, Risk, RiskCategory,
		RiskLocation, Sweep, SweepResult, SweepResultDetails, SweepSchedule, User,
		Video []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
