// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/properties"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Risk is the model entity for the Risk schema.
type Risk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 创建者
	CreatedBy int `json:"created_by"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at"`
	// 最后更新者
	UpdatedBy int `json:"updated_by"`
	// 最后更新时间
	UpdatedAt time.Time `json:"updated_at"`
	// 标题
	Title string `json:"title"`
	// 内容
	Content string `json:"content"`
	// 图片
	Images []struct {
		Title string "json:\"title\""
		URL   string "json:\"url\""
	} `json:"images"`
	// 风险类别
	RiskCategoryID int `json:"risk_category_id"`
	// 地点
	RiskLocationID int `json:"risk_location_id"`
	// 整改人
	MaintainerID int `json:"maintainer_id"`
	// 整改措施
	Measures string `json:"measures"`
	// 整改状态
	MaintainStatus properties.MaintainStatus `json:"maintain_status"`
	// 计划完成日期
	DueTime time.Time `json:"due_time"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RiskQuery when eager-loading is set.
	Edges                 RiskEdges `json:"edges"`
	admin_risk_creator    *int
	admin_risk_maintainer *int
	selectValues          sql.SelectValues
}

// RiskEdges holds the relations/edges for other nodes in the graph.
type RiskEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Employee `json:"creator,omitempty"`
	// Updator holds the value of the updator edge.
	Updator *Admin `json:"updator,omitempty"`
	// Maintainer holds the value of the maintainer edge.
	Maintainer *Employee `json:"maintainer,omitempty"`
	// RiskCategory holds the value of the risk_category edge.
	RiskCategory *RiskCategory `json:"risk_category,omitempty"`
	// RiskLocation holds the value of the risk_location edge.
	RiskLocation *RiskLocation `json:"risk_location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) CreatorOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdatorOrErr returns the Updator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) UpdatorOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Updator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Updator, nil
	}
	return nil, &NotLoadedError{edge: "updator"}
}

// MaintainerOrErr returns the Maintainer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) MaintainerOrErr() (*Employee, error) {
	if e.loadedTypes[2] {
		if e.Maintainer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Maintainer, nil
	}
	return nil, &NotLoadedError{edge: "maintainer"}
}

// RiskCategoryOrErr returns the RiskCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) RiskCategoryOrErr() (*RiskCategory, error) {
	if e.loadedTypes[3] {
		if e.RiskCategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: riskcategory.Label}
		}
		return e.RiskCategory, nil
	}
	return nil, &NotLoadedError{edge: "risk_category"}
}

// RiskLocationOrErr returns the RiskLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) RiskLocationOrErr() (*RiskLocation, error) {
	if e.loadedTypes[4] {
		if e.RiskLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: risklocation.Label}
		}
		return e.RiskLocation, nil
	}
	return nil, &NotLoadedError{edge: "risk_location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Risk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case risk.FieldImages:
			values[i] = new([]byte)
		case risk.FieldID, risk.FieldCreatedBy, risk.FieldUpdatedBy, risk.FieldRiskCategoryID, risk.FieldRiskLocationID, risk.FieldMaintainerID, risk.FieldMaintainStatus:
			values[i] = new(sql.NullInt64)
		case risk.FieldTitle, risk.FieldContent, risk.FieldMeasures:
			values[i] = new(sql.NullString)
		case risk.FieldCreatedAt, risk.FieldDeletedAt, risk.FieldUpdatedAt, risk.FieldDueTime:
			values[i] = new(sql.NullTime)
		case risk.ForeignKeys[0]: // admin_risk_creator
			values[i] = new(sql.NullInt64)
		case risk.ForeignKeys[1]: // admin_risk_maintainer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Risk fields.
func (r *Risk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case risk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case risk.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case risk.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = int(value.Int64)
			}
		case risk.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = new(time.Time)
				*r.DeletedAt = value.Time
			}
		case risk.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				r.UpdatedBy = int(value.Int64)
			}
		case risk.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case risk.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				r.Title = value.String
			}
		case risk.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case risk.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case risk.FieldRiskCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_category_id", values[i])
			} else if value.Valid {
				r.RiskCategoryID = int(value.Int64)
			}
		case risk.FieldRiskLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_location_id", values[i])
			} else if value.Valid {
				r.RiskLocationID = int(value.Int64)
			}
		case risk.FieldMaintainerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintainer_id", values[i])
			} else if value.Valid {
				r.MaintainerID = int(value.Int64)
			}
		case risk.FieldMeasures:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measures", values[i])
			} else if value.Valid {
				r.Measures = value.String
			}
		case risk.FieldMaintainStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_status", values[i])
			} else if value.Valid {
				r.MaintainStatus = properties.MaintainStatus(value.Int64)
			}
		case risk.FieldDueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_time", values[i])
			} else if value.Valid {
				r.DueTime = value.Time
			}
		case risk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field admin_risk_creator", value)
			} else if value.Valid {
				r.admin_risk_creator = new(int)
				*r.admin_risk_creator = int(value.Int64)
			}
		case risk.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field admin_risk_maintainer", value)
			} else if value.Valid {
				r.admin_risk_maintainer = new(int)
				*r.admin_risk_maintainer = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Risk.
// This includes values selected through modifiers, order, etc.
func (r *Risk) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Risk entity.
func (r *Risk) QueryCreator() *EmployeeQuery {
	return NewRiskClient(r.config).QueryCreator(r)
}

// QueryUpdator queries the "updator" edge of the Risk entity.
func (r *Risk) QueryUpdator() *AdminQuery {
	return NewRiskClient(r.config).QueryUpdator(r)
}

// QueryMaintainer queries the "maintainer" edge of the Risk entity.
func (r *Risk) QueryMaintainer() *EmployeeQuery {
	return NewRiskClient(r.config).QueryMaintainer(r)
}

// QueryRiskCategory queries the "risk_category" edge of the Risk entity.
func (r *Risk) QueryRiskCategory() *RiskCategoryQuery {
	return NewRiskClient(r.config).QueryRiskCategory(r)
}

// QueryRiskLocation queries the "risk_location" edge of the Risk entity.
func (r *Risk) QueryRiskLocation() *RiskLocationQuery {
	return NewRiskClient(r.config).QueryRiskLocation(r)
}

// Update returns a builder for updating this Risk.
// Note that you need to call Risk.Unwrap() before calling this method if this Risk
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Risk) Update() *RiskUpdateOne {
	return NewRiskClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Risk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Risk) Unwrap() *Risk {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("dao: Risk is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Risk) String() string {
	var builder strings.Builder
	builder.WriteString("Risk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", r.CreatedBy))
	builder.WriteString(", ")
	if v := r.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(r.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", r.Images))
	builder.WriteString(", ")
	builder.WriteString("risk_category_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RiskCategoryID))
	builder.WriteString(", ")
	builder.WriteString("risk_location_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RiskLocationID))
	builder.WriteString(", ")
	builder.WriteString("maintainer_id=")
	builder.WriteString(fmt.Sprintf("%v", r.MaintainerID))
	builder.WriteString(", ")
	builder.WriteString("measures=")
	builder.WriteString(r.Measures)
	builder.WriteString(", ")
	builder.WriteString("maintain_status=")
	builder.WriteString(fmt.Sprintf("%v", r.MaintainStatus))
	builder.WriteString(", ")
	builder.WriteString("due_time=")
	builder.WriteString(r.DueTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Risks is a parsable slice of Risk.
type Risks []*Risk
