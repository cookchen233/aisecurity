// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/predicate"
	"aisecurity/ent/dao/risk"
	"aisecurity/ent/dao/riskcategory"
	"aisecurity/ent/dao/risklocation"
	"aisecurity/properties/maintain_status"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// RiskUpdate is the builder for updating Risk entities.
type RiskUpdate struct {
	config
	hooks    []Hook
	mutation *RiskMutation
}

// Where appends a list predicates to the RiskUpdate builder.
func (ru *RiskUpdate) Where(ps ...predicate.Risk) *RiskUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeleteTime sets the "delete_time" field.
func (ru *RiskUpdate) SetDeleteTime(t time.Time) *RiskUpdate {
	ru.mutation.SetDeleteTime(t)
	return ru
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDeleteTime(t *time.Time) *RiskUpdate {
	if t != nil {
		ru.SetDeleteTime(*t)
	}
	return ru
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ru *RiskUpdate) ClearDeleteTime() *RiskUpdate {
	ru.mutation.ClearDeleteTime()
	return ru
}

// SetUpdaterID sets the "updater_id" field.
func (ru *RiskUpdate) SetUpdaterID(i int) *RiskUpdate {
	ru.mutation.SetUpdaterID(i)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RiskUpdate) SetUpdateTime(t time.Time) *RiskUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetTitle sets the "title" field.
func (ru *RiskUpdate) SetTitle(s string) *RiskUpdate {
	ru.mutation.SetTitle(s)
	return ru
}

// SetContent sets the "content" field.
func (ru *RiskUpdate) SetContent(s string) *RiskUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableContent(s *string) *RiskUpdate {
	if s != nil {
		ru.SetContent(*s)
	}
	return ru
}

// ClearContent clears the value of the "content" field.
func (ru *RiskUpdate) ClearContent() *RiskUpdate {
	ru.mutation.ClearContent()
	return ru
}

// SetImages sets the "images" field.
func (ru *RiskUpdate) SetImages(ti []types.UploadedImage) *RiskUpdate {
	ru.mutation.SetImages(ti)
	return ru
}

// AppendImages appends ti to the "images" field.
func (ru *RiskUpdate) AppendImages(ti []types.UploadedImage) *RiskUpdate {
	ru.mutation.AppendImages(ti)
	return ru
}

// ClearImages clears the value of the "images" field.
func (ru *RiskUpdate) ClearImages() *RiskUpdate {
	ru.mutation.ClearImages()
	return ru
}

// SetMaintainedImages sets the "maintained_images" field.
func (ru *RiskUpdate) SetMaintainedImages(ti []types.UploadedImage) *RiskUpdate {
	ru.mutation.SetMaintainedImages(ti)
	return ru
}

// AppendMaintainedImages appends ti to the "maintained_images" field.
func (ru *RiskUpdate) AppendMaintainedImages(ti []types.UploadedImage) *RiskUpdate {
	ru.mutation.AppendMaintainedImages(ti)
	return ru
}

// ClearMaintainedImages clears the value of the "maintained_images" field.
func (ru *RiskUpdate) ClearMaintainedImages() *RiskUpdate {
	ru.mutation.ClearMaintainedImages()
	return ru
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (ru *RiskUpdate) SetRiskCategoryID(i int) *RiskUpdate {
	ru.mutation.SetRiskCategoryID(i)
	return ru
}

// SetRiskLocationID sets the "risk_location_id" field.
func (ru *RiskUpdate) SetRiskLocationID(i int) *RiskUpdate {
	ru.mutation.SetRiskLocationID(i)
	return ru
}

// SetMaintainerID sets the "maintainer_id" field.
func (ru *RiskUpdate) SetMaintainerID(i int) *RiskUpdate {
	ru.mutation.SetMaintainerID(i)
	return ru
}

// SetMeasures sets the "measures" field.
func (ru *RiskUpdate) SetMeasures(s string) *RiskUpdate {
	ru.mutation.SetMeasures(s)
	return ru
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableMeasures(s *string) *RiskUpdate {
	if s != nil {
		ru.SetMeasures(*s)
	}
	return ru
}

// ClearMeasures clears the value of the "measures" field.
func (ru *RiskUpdate) ClearMeasures() *RiskUpdate {
	ru.mutation.ClearMeasures()
	return ru
}

// SetMaintainStatus sets the "maintain_status" field.
func (ru *RiskUpdate) SetMaintainStatus(mss maintain_status.MaintainStatus) *RiskUpdate {
	ru.mutation.ResetMaintainStatus()
	ru.mutation.SetMaintainStatus(mss)
	return ru
}

// SetNillableMaintainStatus sets the "maintain_status" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableMaintainStatus(mss *maintain_status.MaintainStatus) *RiskUpdate {
	if mss != nil {
		ru.SetMaintainStatus(*mss)
	}
	return ru
}

// AddMaintainStatus adds mss to the "maintain_status" field.
func (ru *RiskUpdate) AddMaintainStatus(mss maintain_status.MaintainStatus) *RiskUpdate {
	ru.mutation.AddMaintainStatus(mss)
	return ru
}

// SetDueTime sets the "due_time" field.
func (ru *RiskUpdate) SetDueTime(t time.Time) *RiskUpdate {
	ru.mutation.SetDueTime(t)
	return ru
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ru *RiskUpdate) SetUpdater(a *Admin) *RiskUpdate {
	return ru.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (ru *RiskUpdate) SetRiskCategory(r *RiskCategory) *RiskUpdate {
	return ru.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (ru *RiskUpdate) SetRiskLocation(r *RiskLocation) *RiskUpdate {
	return ru.SetRiskLocationID(r.ID)
}

// SetMaintainer sets the "maintainer" edge to the Admin entity.
func (ru *RiskUpdate) SetMaintainer(a *Admin) *RiskUpdate {
	return ru.SetMaintainerID(a.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (ru *RiskUpdate) Mutation() *RiskMutation {
	return ru.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ru *RiskUpdate) ClearUpdater() *RiskUpdate {
	ru.mutation.ClearUpdater()
	return ru
}

// ClearRiskCategory clears the "risk_category" edge to the RiskCategory entity.
func (ru *RiskUpdate) ClearRiskCategory() *RiskUpdate {
	ru.mutation.ClearRiskCategory()
	return ru
}

// ClearRiskLocation clears the "risk_location" edge to the RiskLocation entity.
func (ru *RiskUpdate) ClearRiskLocation() *RiskUpdate {
	ru.mutation.ClearRiskLocation()
	return ru
}

// ClearMaintainer clears the "maintainer" edge to the Admin entity.
func (ru *RiskUpdate) ClearMaintainer() *RiskUpdate {
	ru.mutation.ClearMaintainer()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RiskUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RiskUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RiskUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RiskUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RiskUpdate) defaults() error {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		if risk.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized risk.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := risk.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RiskUpdate) check() error {
	if v, ok := ru.mutation.UpdaterID(); ok {
		if err := risk.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Risk.updater_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Title(); ok {
		if err := risk.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`dao: validator failed for field "Risk.title": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RiskCategoryID(); ok {
		if err := risk.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_category_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RiskLocationID(); ok {
		if err := risk.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_location_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.MaintainerID(); ok {
		if err := risk.MaintainerIDValidator(v); err != nil {
			return &ValidationError{Name: "maintainer_id", err: fmt.Errorf(`dao: validator failed for field "Risk.maintainer_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.MaintainStatus(); ok {
		if err := risk.MaintainStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "maintain_status", err: fmt.Errorf(`dao: validator failed for field "Risk.maintain_status": %w`, err)}
		}
	}
	if _, ok := ru.mutation.CreatorID(); ru.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.creator"`)
	}
	if _, ok := ru.mutation.UpdaterID(); ru.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.updater"`)
	}
	if _, ok := ru.mutation.RiskCategoryID(); ru.mutation.RiskCategoryCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.risk_category"`)
	}
	if _, ok := ru.mutation.RiskLocationID(); ru.mutation.RiskLocationCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.risk_location"`)
	}
	if _, ok := ru.mutation.MaintainerID(); ru.mutation.MaintainerCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.maintainer"`)
	}
	return nil
}

func (ru *RiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeleteTime(); ok {
		_spec.SetField(risk.FieldDeleteTime, field.TypeTime, value)
	}
	if ru.mutation.DeleteTimeCleared() {
		_spec.ClearField(risk.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(risk.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Title(); ok {
		_spec.SetField(risk.FieldTitle, field.TypeString, value)
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.SetField(risk.FieldContent, field.TypeString, value)
	}
	if ru.mutation.ContentCleared() {
		_spec.ClearField(risk.FieldContent, field.TypeString)
	}
	if value, ok := ru.mutation.Images(); ok {
		_spec.SetField(risk.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldImages, value)
		})
	}
	if ru.mutation.ImagesCleared() {
		_spec.ClearField(risk.FieldImages, field.TypeJSON)
	}
	if value, ok := ru.mutation.MaintainedImages(); ok {
		_spec.SetField(risk.FieldMaintainedImages, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedMaintainedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldMaintainedImages, value)
		})
	}
	if ru.mutation.MaintainedImagesCleared() {
		_spec.ClearField(risk.FieldMaintainedImages, field.TypeJSON)
	}
	if value, ok := ru.mutation.Measures(); ok {
		_spec.SetField(risk.FieldMeasures, field.TypeString, value)
	}
	if ru.mutation.MeasuresCleared() {
		_spec.ClearField(risk.FieldMeasures, field.TypeString)
	}
	if value, ok := ru.mutation.MaintainStatus(); ok {
		_spec.SetField(risk.FieldMaintainStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedMaintainStatus(); ok {
		_spec.AddField(risk.FieldMaintainStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.DueTime(); ok {
		_spec.SetField(risk.FieldDueTime, field.TypeTime, value)
	}
	if ru.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RiskCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RiskLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RiskUpdateOne is the builder for updating a single Risk entity.
type RiskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RiskMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ruo *RiskUpdateOne) SetDeleteTime(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetDeleteTime(t)
	return ruo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDeleteTime(t *time.Time) *RiskUpdateOne {
	if t != nil {
		ruo.SetDeleteTime(*t)
	}
	return ruo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ruo *RiskUpdateOne) ClearDeleteTime() *RiskUpdateOne {
	ruo.mutation.ClearDeleteTime()
	return ruo
}

// SetUpdaterID sets the "updater_id" field.
func (ruo *RiskUpdateOne) SetUpdaterID(i int) *RiskUpdateOne {
	ruo.mutation.SetUpdaterID(i)
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RiskUpdateOne) SetUpdateTime(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetTitle sets the "title" field.
func (ruo *RiskUpdateOne) SetTitle(s string) *RiskUpdateOne {
	ruo.mutation.SetTitle(s)
	return ruo
}

// SetContent sets the "content" field.
func (ruo *RiskUpdateOne) SetContent(s string) *RiskUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableContent(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetContent(*s)
	}
	return ruo
}

// ClearContent clears the value of the "content" field.
func (ruo *RiskUpdateOne) ClearContent() *RiskUpdateOne {
	ruo.mutation.ClearContent()
	return ruo
}

// SetImages sets the "images" field.
func (ruo *RiskUpdateOne) SetImages(ti []types.UploadedImage) *RiskUpdateOne {
	ruo.mutation.SetImages(ti)
	return ruo
}

// AppendImages appends ti to the "images" field.
func (ruo *RiskUpdateOne) AppendImages(ti []types.UploadedImage) *RiskUpdateOne {
	ruo.mutation.AppendImages(ti)
	return ruo
}

// ClearImages clears the value of the "images" field.
func (ruo *RiskUpdateOne) ClearImages() *RiskUpdateOne {
	ruo.mutation.ClearImages()
	return ruo
}

// SetMaintainedImages sets the "maintained_images" field.
func (ruo *RiskUpdateOne) SetMaintainedImages(ti []types.UploadedImage) *RiskUpdateOne {
	ruo.mutation.SetMaintainedImages(ti)
	return ruo
}

// AppendMaintainedImages appends ti to the "maintained_images" field.
func (ruo *RiskUpdateOne) AppendMaintainedImages(ti []types.UploadedImage) *RiskUpdateOne {
	ruo.mutation.AppendMaintainedImages(ti)
	return ruo
}

// ClearMaintainedImages clears the value of the "maintained_images" field.
func (ruo *RiskUpdateOne) ClearMaintainedImages() *RiskUpdateOne {
	ruo.mutation.ClearMaintainedImages()
	return ruo
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (ruo *RiskUpdateOne) SetRiskCategoryID(i int) *RiskUpdateOne {
	ruo.mutation.SetRiskCategoryID(i)
	return ruo
}

// SetRiskLocationID sets the "risk_location_id" field.
func (ruo *RiskUpdateOne) SetRiskLocationID(i int) *RiskUpdateOne {
	ruo.mutation.SetRiskLocationID(i)
	return ruo
}

// SetMaintainerID sets the "maintainer_id" field.
func (ruo *RiskUpdateOne) SetMaintainerID(i int) *RiskUpdateOne {
	ruo.mutation.SetMaintainerID(i)
	return ruo
}

// SetMeasures sets the "measures" field.
func (ruo *RiskUpdateOne) SetMeasures(s string) *RiskUpdateOne {
	ruo.mutation.SetMeasures(s)
	return ruo
}

// SetNillableMeasures sets the "measures" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableMeasures(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetMeasures(*s)
	}
	return ruo
}

// ClearMeasures clears the value of the "measures" field.
func (ruo *RiskUpdateOne) ClearMeasures() *RiskUpdateOne {
	ruo.mutation.ClearMeasures()
	return ruo
}

// SetMaintainStatus sets the "maintain_status" field.
func (ruo *RiskUpdateOne) SetMaintainStatus(mss maintain_status.MaintainStatus) *RiskUpdateOne {
	ruo.mutation.ResetMaintainStatus()
	ruo.mutation.SetMaintainStatus(mss)
	return ruo
}

// SetNillableMaintainStatus sets the "maintain_status" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableMaintainStatus(mss *maintain_status.MaintainStatus) *RiskUpdateOne {
	if mss != nil {
		ruo.SetMaintainStatus(*mss)
	}
	return ruo
}

// AddMaintainStatus adds mss to the "maintain_status" field.
func (ruo *RiskUpdateOne) AddMaintainStatus(mss maintain_status.MaintainStatus) *RiskUpdateOne {
	ruo.mutation.AddMaintainStatus(mss)
	return ruo
}

// SetDueTime sets the "due_time" field.
func (ruo *RiskUpdateOne) SetDueTime(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetDueTime(t)
	return ruo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ruo *RiskUpdateOne) SetUpdater(a *Admin) *RiskUpdateOne {
	return ruo.SetUpdaterID(a.ID)
}

// SetRiskCategory sets the "risk_category" edge to the RiskCategory entity.
func (ruo *RiskUpdateOne) SetRiskCategory(r *RiskCategory) *RiskUpdateOne {
	return ruo.SetRiskCategoryID(r.ID)
}

// SetRiskLocation sets the "risk_location" edge to the RiskLocation entity.
func (ruo *RiskUpdateOne) SetRiskLocation(r *RiskLocation) *RiskUpdateOne {
	return ruo.SetRiskLocationID(r.ID)
}

// SetMaintainer sets the "maintainer" edge to the Admin entity.
func (ruo *RiskUpdateOne) SetMaintainer(a *Admin) *RiskUpdateOne {
	return ruo.SetMaintainerID(a.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (ruo *RiskUpdateOne) Mutation() *RiskMutation {
	return ruo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ruo *RiskUpdateOne) ClearUpdater() *RiskUpdateOne {
	ruo.mutation.ClearUpdater()
	return ruo
}

// ClearRiskCategory clears the "risk_category" edge to the RiskCategory entity.
func (ruo *RiskUpdateOne) ClearRiskCategory() *RiskUpdateOne {
	ruo.mutation.ClearRiskCategory()
	return ruo
}

// ClearRiskLocation clears the "risk_location" edge to the RiskLocation entity.
func (ruo *RiskUpdateOne) ClearRiskLocation() *RiskUpdateOne {
	ruo.mutation.ClearRiskLocation()
	return ruo
}

// ClearMaintainer clears the "maintainer" edge to the Admin entity.
func (ruo *RiskUpdateOne) ClearMaintainer() *RiskUpdateOne {
	ruo.mutation.ClearMaintainer()
	return ruo
}

// Where appends a list predicates to the RiskUpdate builder.
func (ruo *RiskUpdateOne) Where(ps ...predicate.Risk) *RiskUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RiskUpdateOne) Select(field string, fields ...string) *RiskUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Risk entity.
func (ruo *RiskUpdateOne) Save(ctx context.Context) (*Risk, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RiskUpdateOne) SaveX(ctx context.Context) *Risk {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RiskUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RiskUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RiskUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		if risk.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized risk.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := risk.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RiskUpdateOne) check() error {
	if v, ok := ruo.mutation.UpdaterID(); ok {
		if err := risk.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Risk.updater_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Title(); ok {
		if err := risk.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`dao: validator failed for field "Risk.title": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RiskCategoryID(); ok {
		if err := risk.RiskCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_category_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_category_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RiskLocationID(); ok {
		if err := risk.RiskLocationIDValidator(v); err != nil {
			return &ValidationError{Name: "risk_location_id", err: fmt.Errorf(`dao: validator failed for field "Risk.risk_location_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.MaintainerID(); ok {
		if err := risk.MaintainerIDValidator(v); err != nil {
			return &ValidationError{Name: "maintainer_id", err: fmt.Errorf(`dao: validator failed for field "Risk.maintainer_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.MaintainStatus(); ok {
		if err := risk.MaintainStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "maintain_status", err: fmt.Errorf(`dao: validator failed for field "Risk.maintain_status": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.CreatorID(); ruo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.creator"`)
	}
	if _, ok := ruo.mutation.UpdaterID(); ruo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.updater"`)
	}
	if _, ok := ruo.mutation.RiskCategoryID(); ruo.mutation.RiskCategoryCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.risk_category"`)
	}
	if _, ok := ruo.mutation.RiskLocationID(); ruo.mutation.RiskLocationCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.risk_location"`)
	}
	if _, ok := ruo.mutation.MaintainerID(); ruo.mutation.MaintainerCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Risk.maintainer"`)
	}
	return nil
}

func (ruo *RiskUpdateOne) sqlSave(ctx context.Context) (_node *Risk, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Risk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for _, f := range fields {
			if !risk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeleteTime(); ok {
		_spec.SetField(risk.FieldDeleteTime, field.TypeTime, value)
	}
	if ruo.mutation.DeleteTimeCleared() {
		_spec.ClearField(risk.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(risk.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Title(); ok {
		_spec.SetField(risk.FieldTitle, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.SetField(risk.FieldContent, field.TypeString, value)
	}
	if ruo.mutation.ContentCleared() {
		_spec.ClearField(risk.FieldContent, field.TypeString)
	}
	if value, ok := ruo.mutation.Images(); ok {
		_spec.SetField(risk.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldImages, value)
		})
	}
	if ruo.mutation.ImagesCleared() {
		_spec.ClearField(risk.FieldImages, field.TypeJSON)
	}
	if value, ok := ruo.mutation.MaintainedImages(); ok {
		_spec.SetField(risk.FieldMaintainedImages, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedMaintainedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldMaintainedImages, value)
		})
	}
	if ruo.mutation.MaintainedImagesCleared() {
		_spec.ClearField(risk.FieldMaintainedImages, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Measures(); ok {
		_spec.SetField(risk.FieldMeasures, field.TypeString, value)
	}
	if ruo.mutation.MeasuresCleared() {
		_spec.ClearField(risk.FieldMeasures, field.TypeString)
	}
	if value, ok := ruo.mutation.MaintainStatus(); ok {
		_spec.SetField(risk.FieldMaintainStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedMaintainStatus(); ok {
		_spec.AddField(risk.FieldMaintainStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.DueTime(); ok {
		_spec.SetField(risk.FieldDueTime, field.TypeTime, value)
	}
	if ruo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.UpdaterTable,
			Columns: []string{risk.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RiskCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RiskCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskCategoryTable,
			Columns: []string{risk.RiskCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riskcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RiskLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RiskLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.RiskLocationTable,
			Columns: []string{risk.RiskLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risklocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.MaintainerTable,
			Columns: []string{risk.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Risk{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
