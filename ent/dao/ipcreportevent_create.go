// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/ipcreportevent"
	"aisecurity/ent/dao/video"
	"aisecurity/enums"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPCReportEventCreate is the builder for creating a IPCReportEvent entity.
type IPCReportEventCreate struct {
	config
	mutation *IPCReportEventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (irec *IPCReportEventCreate) SetCreatedAt(t time.Time) *IPCReportEventCreate {
	irec.mutation.SetCreatedAt(t)
	return irec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableCreatedAt(t *time.Time) *IPCReportEventCreate {
	if t != nil {
		irec.SetCreatedAt(*t)
	}
	return irec
}

// SetCreatedBy sets the "created_by" field.
func (irec *IPCReportEventCreate) SetCreatedBy(i int) *IPCReportEventCreate {
	irec.mutation.SetCreatedBy(i)
	return irec
}

// SetDeletedAt sets the "deleted_at" field.
func (irec *IPCReportEventCreate) SetDeletedAt(t time.Time) *IPCReportEventCreate {
	irec.mutation.SetDeletedAt(t)
	return irec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableDeletedAt(t *time.Time) *IPCReportEventCreate {
	if t != nil {
		irec.SetDeletedAt(*t)
	}
	return irec
}

// SetUpdatedBy sets the "updated_by" field.
func (irec *IPCReportEventCreate) SetUpdatedBy(i int) *IPCReportEventCreate {
	irec.mutation.SetUpdatedBy(i)
	return irec
}

// SetUpdatedAt sets the "updated_at" field.
func (irec *IPCReportEventCreate) SetUpdatedAt(t time.Time) *IPCReportEventCreate {
	irec.mutation.SetUpdatedAt(t)
	return irec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableUpdatedAt(t *time.Time) *IPCReportEventCreate {
	if t != nil {
		irec.SetUpdatedAt(*t)
	}
	return irec
}

// SetDeviceBrand sets the "device_brand" field.
func (irec *IPCReportEventCreate) SetDeviceBrand(eredb enums.IPCReportEventDeviceBrand) *IPCReportEventCreate {
	irec.mutation.SetDeviceBrand(eredb)
	return irec
}

// SetNillableDeviceBrand sets the "device_brand" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableDeviceBrand(eredb *enums.IPCReportEventDeviceBrand) *IPCReportEventCreate {
	if eredb != nil {
		irec.SetDeviceBrand(*eredb)
	}
	return irec
}

// SetDeviceModel sets the "device_model" field.
func (irec *IPCReportEventCreate) SetDeviceModel(eredm enums.IPCReportEventDeviceModel) *IPCReportEventCreate {
	irec.mutation.SetDeviceModel(eredm)
	return irec
}

// SetNillableDeviceModel sets the "device_model" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableDeviceModel(eredm *enums.IPCReportEventDeviceModel) *IPCReportEventCreate {
	if eredm != nil {
		irec.SetDeviceModel(*eredm)
	}
	return irec
}

// SetDeviceID sets the "device_id" field.
func (irec *IPCReportEventCreate) SetDeviceID(s string) *IPCReportEventCreate {
	irec.mutation.SetDeviceID(s)
	return irec
}

// SetEventID sets the "event_id" field.
func (irec *IPCReportEventCreate) SetEventID(s string) *IPCReportEventCreate {
	irec.mutation.SetEventID(s)
	return irec
}

// SetEventTime sets the "event_time" field.
func (irec *IPCReportEventCreate) SetEventTime(t time.Time) *IPCReportEventCreate {
	irec.mutation.SetEventTime(t)
	return irec
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableEventTime(t *time.Time) *IPCReportEventCreate {
	if t != nil {
		irec.SetEventTime(*t)
	}
	return irec
}

// SetEventType sets the "event_type" field.
func (irec *IPCReportEventCreate) SetEventType(eret enums.IPCReportEventType) *IPCReportEventCreate {
	irec.mutation.SetEventType(eret)
	return irec
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableEventType(eret *enums.IPCReportEventType) *IPCReportEventCreate {
	if eret != nil {
		irec.SetEventType(*eret)
	}
	return irec
}

// SetEventStatus sets the "event_status" field.
func (irec *IPCReportEventCreate) SetEventStatus(eres enums.IPCReportEventStatus) *IPCReportEventCreate {
	irec.mutation.SetEventStatus(eres)
	return irec
}

// SetNillableEventStatus sets the "event_status" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableEventStatus(eres *enums.IPCReportEventStatus) *IPCReportEventCreate {
	if eres != nil {
		irec.SetEventStatus(*eres)
	}
	return irec
}

// SetImages sets the "images" field.
func (irec *IPCReportEventCreate) SetImages(ti []*types.UploadedImage) *IPCReportEventCreate {
	irec.mutation.SetImages(ti)
	return irec
}

// SetLabeledImages sets the "labeled_images" field.
func (irec *IPCReportEventCreate) SetLabeledImages(ti []*types.UploadedImage) *IPCReportEventCreate {
	irec.mutation.SetLabeledImages(ti)
	return irec
}

// SetVideoID sets the "video_id" field.
func (irec *IPCReportEventCreate) SetVideoID(i int) *IPCReportEventCreate {
	irec.mutation.SetVideoID(i)
	return irec
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableVideoID(i *int) *IPCReportEventCreate {
	if i != nil {
		irec.SetVideoID(*i)
	}
	return irec
}

// SetDescription sets the "description" field.
func (irec *IPCReportEventCreate) SetDescription(s string) *IPCReportEventCreate {
	irec.mutation.SetDescription(s)
	return irec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableDescription(s *string) *IPCReportEventCreate {
	if s != nil {
		irec.SetDescription(*s)
	}
	return irec
}

// SetRawData sets the "raw_data" field.
func (irec *IPCReportEventCreate) SetRawData(s string) *IPCReportEventCreate {
	irec.mutation.SetRawData(s)
	return irec
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (irec *IPCReportEventCreate) SetNillableRawData(s *string) *IPCReportEventCreate {
	if s != nil {
		irec.SetRawData(*s)
	}
	return irec
}

// SetCreatorID sets the "creator" edge to the Admin entity by ID.
func (irec *IPCReportEventCreate) SetCreatorID(id int) *IPCReportEventCreate {
	irec.mutation.SetCreatorID(id)
	return irec
}

// SetCreator sets the "creator" edge to the Admin entity.
func (irec *IPCReportEventCreate) SetCreator(a *Admin) *IPCReportEventCreate {
	return irec.SetCreatorID(a.ID)
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (irec *IPCReportEventCreate) SetUpdaterID(id int) *IPCReportEventCreate {
	irec.mutation.SetUpdaterID(id)
	return irec
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (irec *IPCReportEventCreate) SetUpdater(a *Admin) *IPCReportEventCreate {
	return irec.SetUpdaterID(a.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (irec *IPCReportEventCreate) SetVideo(v *Video) *IPCReportEventCreate {
	return irec.SetVideoID(v.ID)
}

// Mutation returns the IPCReportEventMutation object of the builder.
func (irec *IPCReportEventCreate) Mutation() *IPCReportEventMutation {
	return irec.mutation
}

// Save creates the IPCReportEvent in the database.
func (irec *IPCReportEventCreate) Save(ctx context.Context) (*IPCReportEvent, error) {
	if err := irec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, irec.sqlSave, irec.mutation, irec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irec *IPCReportEventCreate) SaveX(ctx context.Context) *IPCReportEvent {
	v, err := irec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irec *IPCReportEventCreate) Exec(ctx context.Context) error {
	_, err := irec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irec *IPCReportEventCreate) ExecX(ctx context.Context) {
	if err := irec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (irec *IPCReportEventCreate) defaults() error {
	if _, ok := irec.mutation.CreatedAt(); !ok {
		if ipcreportevent.DefaultCreatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcreportevent.DefaultCreatedAt (forgotten import dao/runtime?)")
		}
		v := ipcreportevent.DefaultCreatedAt()
		irec.mutation.SetCreatedAt(v)
	}
	if _, ok := irec.mutation.UpdatedAt(); !ok {
		if ipcreportevent.DefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcreportevent.DefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcreportevent.DefaultUpdatedAt()
		irec.mutation.SetUpdatedAt(v)
	}
	if _, ok := irec.mutation.DeviceBrand(); !ok {
		v := ipcreportevent.DefaultDeviceBrand
		irec.mutation.SetDeviceBrand(v)
	}
	if _, ok := irec.mutation.DeviceModel(); !ok {
		v := ipcreportevent.DefaultDeviceModel
		irec.mutation.SetDeviceModel(v)
	}
	if _, ok := irec.mutation.EventTime(); !ok {
		if ipcreportevent.DefaultEventTime == nil {
			return fmt.Errorf("dao: uninitialized ipcreportevent.DefaultEventTime (forgotten import dao/runtime?)")
		}
		v := ipcreportevent.DefaultEventTime()
		irec.mutation.SetEventTime(v)
	}
	if _, ok := irec.mutation.EventType(); !ok {
		v := ipcreportevent.DefaultEventType
		irec.mutation.SetEventType(v)
	}
	if _, ok := irec.mutation.EventStatus(); !ok {
		v := ipcreportevent.DefaultEventStatus
		irec.mutation.SetEventStatus(v)
	}
	if _, ok := irec.mutation.Images(); !ok {
		v := ipcreportevent.DefaultImages
		irec.mutation.SetImages(v)
	}
	if _, ok := irec.mutation.LabeledImages(); !ok {
		v := ipcreportevent.DefaultLabeledImages
		irec.mutation.SetLabeledImages(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (irec *IPCReportEventCreate) check() error {
	if _, ok := irec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`dao: missing required field "IPCReportEvent.created_at"`)}
	}
	if _, ok := irec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`dao: missing required field "IPCReportEvent.created_by"`)}
	}
	if v, ok := irec.mutation.CreatedBy(); ok {
		if err := ipcreportevent.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.created_by": %w`, err)}
		}
	}
	if _, ok := irec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`dao: missing required field "IPCReportEvent.updated_by"`)}
	}
	if v, ok := irec.mutation.UpdatedBy(); ok {
		if err := ipcreportevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.updated_by": %w`, err)}
		}
	}
	if _, ok := irec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`dao: missing required field "IPCReportEvent.updated_at"`)}
	}
	if _, ok := irec.mutation.DeviceBrand(); !ok {
		return &ValidationError{Name: "device_brand", err: errors.New(`dao: missing required field "IPCReportEvent.device_brand"`)}
	}
	if v, ok := irec.mutation.DeviceBrand(); ok {
		if err := ipcreportevent.DeviceBrandValidator(int(v)); err != nil {
			return &ValidationError{Name: "device_brand", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.device_brand": %w`, err)}
		}
	}
	if _, ok := irec.mutation.DeviceModel(); !ok {
		return &ValidationError{Name: "device_model", err: errors.New(`dao: missing required field "IPCReportEvent.device_model"`)}
	}
	if v, ok := irec.mutation.DeviceModel(); ok {
		if err := ipcreportevent.DeviceModelValidator(int(v)); err != nil {
			return &ValidationError{Name: "device_model", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.device_model": %w`, err)}
		}
	}
	if _, ok := irec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`dao: missing required field "IPCReportEvent.device_id"`)}
	}
	if v, ok := irec.mutation.DeviceID(); ok {
		if err := ipcreportevent.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.device_id": %w`, err)}
		}
	}
	if _, ok := irec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`dao: missing required field "IPCReportEvent.event_id"`)}
	}
	if v, ok := irec.mutation.EventID(); ok {
		if err := ipcreportevent.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_id": %w`, err)}
		}
	}
	if _, ok := irec.mutation.EventTime(); !ok {
		return &ValidationError{Name: "event_time", err: errors.New(`dao: missing required field "IPCReportEvent.event_time"`)}
	}
	if _, ok := irec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`dao: missing required field "IPCReportEvent.event_type"`)}
	}
	if v, ok := irec.mutation.EventType(); ok {
		if err := ipcreportevent.EventTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_type": %w`, err)}
		}
	}
	if _, ok := irec.mutation.EventStatus(); !ok {
		return &ValidationError{Name: "event_status", err: errors.New(`dao: missing required field "IPCReportEvent.event_status"`)}
	}
	if v, ok := irec.mutation.EventStatus(); ok {
		if err := ipcreportevent.EventStatusValidator(int(v)); err != nil {
			return &ValidationError{Name: "event_status", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.event_status": %w`, err)}
		}
	}
	if v, ok := irec.mutation.VideoID(); ok {
		if err := ipcreportevent.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`dao: validator failed for field "IPCReportEvent.video_id": %w`, err)}
		}
	}
	if _, ok := irec.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`dao: missing required edge "IPCReportEvent.creator"`)}
	}
	if _, ok := irec.mutation.UpdaterID(); !ok {
		return &ValidationError{Name: "updater", err: errors.New(`dao: missing required edge "IPCReportEvent.updater"`)}
	}
	return nil
}

func (irec *IPCReportEventCreate) sqlSave(ctx context.Context) (*IPCReportEvent, error) {
	if err := irec.check(); err != nil {
		return nil, err
	}
	_node, _spec := irec.createSpec()
	if err := sqlgraph.CreateNode(ctx, irec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	irec.mutation.id = &_node.ID
	irec.mutation.done = true
	return _node, nil
}

func (irec *IPCReportEventCreate) createSpec() (*IPCReportEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &IPCReportEvent{config: irec.config}
		_spec = sqlgraph.NewCreateSpec(ipcreportevent.Table, sqlgraph.NewFieldSpec(ipcreportevent.FieldID, field.TypeInt))
	)
	if value, ok := irec.mutation.CreatedAt(); ok {
		_spec.SetField(ipcreportevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := irec.mutation.DeletedAt(); ok {
		_spec.SetField(ipcreportevent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := irec.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcreportevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := irec.mutation.DeviceBrand(); ok {
		_spec.SetField(ipcreportevent.FieldDeviceBrand, field.TypeInt, value)
		_node.DeviceBrand = value
	}
	if value, ok := irec.mutation.DeviceModel(); ok {
		_spec.SetField(ipcreportevent.FieldDeviceModel, field.TypeInt, value)
		_node.DeviceModel = value
	}
	if value, ok := irec.mutation.DeviceID(); ok {
		_spec.SetField(ipcreportevent.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := irec.mutation.EventID(); ok {
		_spec.SetField(ipcreportevent.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := irec.mutation.EventTime(); ok {
		_spec.SetField(ipcreportevent.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := irec.mutation.EventType(); ok {
		_spec.SetField(ipcreportevent.FieldEventType, field.TypeInt, value)
		_node.EventType = value
	}
	if value, ok := irec.mutation.EventStatus(); ok {
		_spec.SetField(ipcreportevent.FieldEventStatus, field.TypeInt, value)
		_node.EventStatus = value
	}
	if value, ok := irec.mutation.Images(); ok {
		_spec.SetField(ipcreportevent.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := irec.mutation.LabeledImages(); ok {
		_spec.SetField(ipcreportevent.FieldLabeledImages, field.TypeJSON, value)
		_node.LabeledImages = value
	}
	if value, ok := irec.mutation.Description(); ok {
		_spec.SetField(ipcreportevent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := irec.mutation.RawData(); ok {
		_spec.SetField(ipcreportevent.FieldRawData, field.TypeString, value)
		_node.RawData = value
	}
	if nodes := irec.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.CreatorTable,
			Columns: []string{ipcreportevent.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irec.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.UpdaterTable,
			Columns: []string{ipcreportevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irec.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcreportevent.VideoTable,
			Columns: []string{ipcreportevent.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPCReportEventCreateBulk is the builder for creating many IPCReportEvent entities in bulk.
type IPCReportEventCreateBulk struct {
	config
	err      error
	builders []*IPCReportEventCreate
}

// Save creates the IPCReportEvent entities in the database.
func (irecb *IPCReportEventCreateBulk) Save(ctx context.Context) ([]*IPCReportEvent, error) {
	if irecb.err != nil {
		return nil, irecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(irecb.builders))
	nodes := make([]*IPCReportEvent, len(irecb.builders))
	mutators := make([]Mutator, len(irecb.builders))
	for i := range irecb.builders {
		func(i int, root context.Context) {
			builder := irecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPCReportEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, irecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, irecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, irecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (irecb *IPCReportEventCreateBulk) SaveX(ctx context.Context) []*IPCReportEvent {
	v, err := irecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irecb *IPCReportEventCreateBulk) Exec(ctx context.Context) error {
	_, err := irecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irecb *IPCReportEventCreateBulk) ExecX(ctx context.Context) {
	if err := irecb.Exec(ctx); err != nil {
		panic(err)
	}
}
