// Code generated by ent, DO NOT EDIT.

package hook

import (
	"aisecurity/ent/dao"
	"context"
	"fmt"
)

// The AdminFunc type is an adapter to allow the use of ordinary
// function as Admin mutator.
type AdminFunc func(context.Context, *dao.AdminMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f AdminFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.AdminMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.AdminMutation", m)
}

// The AreaFunc type is an adapter to allow the use of ordinary
// function as Area mutator.
type AreaFunc func(context.Context, *dao.AreaMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f AreaFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.AreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.AreaMutation", m)
}

// The DepartmentFunc type is an adapter to allow the use of ordinary
// function as Department mutator.
type DepartmentFunc func(context.Context, *dao.DepartmentMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f DepartmentFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.DepartmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.DepartmentMutation", m)
}

// The DeviceFunc type is an adapter to allow the use of ordinary
// function as Device mutator.
type DeviceFunc func(context.Context, *dao.DeviceMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.DeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.DeviceMutation", m)
}

// The DeviceInstallationFunc type is an adapter to allow the use of ordinary
// function as DeviceInstallation mutator.
type DeviceInstallationFunc func(context.Context, *dao.DeviceInstallationMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceInstallationFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.DeviceInstallationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.DeviceInstallationMutation", m)
}

// The EmployeeFunc type is an adapter to allow the use of ordinary
// function as Employee mutator.
type EmployeeFunc func(context.Context, *dao.EmployeeMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f EmployeeFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.EmployeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.EmployeeMutation", m)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *dao.EventMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.EventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.EventMutation", m)
}

// The EventLevelFunc type is an adapter to allow the use of ordinary
// function as EventLevel mutator.
type EventLevelFunc func(context.Context, *dao.EventLevelMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f EventLevelFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.EventLevelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.EventLevelMutation", m)
}

// The EventLogFunc type is an adapter to allow the use of ordinary
// function as EventLog mutator.
type EventLogFunc func(context.Context, *dao.EventLogMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f EventLogFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.EventLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.EventLogMutation", m)
}

// The FixingFunc type is an adapter to allow the use of ordinary
// function as Fixing mutator.
type FixingFunc func(context.Context, *dao.FixingMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f FixingFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.FixingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.FixingMutation", m)
}

// The OccupationFunc type is an adapter to allow the use of ordinary
// function as Occupation mutator.
type OccupationFunc func(context.Context, *dao.OccupationMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f OccupationFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.OccupationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.OccupationMutation", m)
}

// The PermissionFunc type is an adapter to allow the use of ordinary
// function as Permission mutator.
type PermissionFunc func(context.Context, *dao.PermissionMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.PermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.PermissionMutation", m)
}

// The RiskFunc type is an adapter to allow the use of ordinary
// function as Risk mutator.
type RiskFunc func(context.Context, *dao.RiskMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f RiskFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.RiskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.RiskMutation", m)
}

// The RiskCategoryFunc type is an adapter to allow the use of ordinary
// function as RiskCategory mutator.
type RiskCategoryFunc func(context.Context, *dao.RiskCategoryMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f RiskCategoryFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.RiskCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.RiskCategoryMutation", m)
}

// The RiskLocationFunc type is an adapter to allow the use of ordinary
// function as RiskLocation mutator.
type RiskLocationFunc func(context.Context, *dao.RiskLocationMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f RiskLocationFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.RiskLocationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.RiskLocationMutation", m)
}

// The SweepFunc type is an adapter to allow the use of ordinary
// function as Sweep mutator.
type SweepFunc func(context.Context, *dao.SweepMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f SweepFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.SweepMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.SweepMutation", m)
}

// The SweepResultFunc type is an adapter to allow the use of ordinary
// function as SweepResult mutator.
type SweepResultFunc func(context.Context, *dao.SweepResultMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f SweepResultFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.SweepResultMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.SweepResultMutation", m)
}

// The SweepResultDetailsFunc type is an adapter to allow the use of ordinary
// function as SweepResultDetails mutator.
type SweepResultDetailsFunc func(context.Context, *dao.SweepResultDetailsMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f SweepResultDetailsFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.SweepResultDetailsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.SweepResultDetailsMutation", m)
}

// The SweepScheduleFunc type is an adapter to allow the use of ordinary
// function as SweepSchedule mutator.
type SweepScheduleFunc func(context.Context, *dao.SweepScheduleMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f SweepScheduleFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.SweepScheduleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.SweepScheduleMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *dao.UserMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.UserMutation", m)
}

// The VideoFunc type is an adapter to allow the use of ordinary
// function as Video mutator.
type VideoFunc func(context.Context, *dao.VideoMutation) (dao.Value, error)

// Mutate calls f(ctx, m).
func (f VideoFunc) Mutate(ctx context.Context, m dao.Mutation) (dao.Value, error) {
	if mv, ok := m.(*dao.VideoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *dao.VideoMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, dao.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m dao.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m dao.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m dao.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op dao.Op) Condition {
	return func(_ context.Context, m dao.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m dao.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m dao.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m dao.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk dao.Hook, cond Condition) dao.Hook {
	return func(next dao.Mutator) dao.Mutator {
		return dao.MutateFunc(func(ctx context.Context, m dao.Mutation) (dao.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, dao.Delete|dao.Create)
func On(hk dao.Hook, op dao.Op) dao.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, dao.Update|dao.UpdateOne)
func Unless(hk dao.Hook, op dao.Op) dao.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) dao.Hook {
	return func(dao.Mutator) dao.Mutator {
		return dao.MutateFunc(func(context.Context, dao.Mutation) (dao.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []dao.Hook {
//		return []dao.Hook{
//			Reject(dao.Delete|dao.Update),
//		}
//	}
func Reject(op dao.Op) dao.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []dao.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...dao.Hook) Chain {
	return Chain{append([]dao.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() dao.Hook {
	return func(mutator dao.Mutator) dao.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...dao.Hook) Chain {
	newHooks := make([]dao.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
