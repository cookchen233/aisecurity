// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/area"
	"aisecurity/ent/dao/deviceinstallation"
	"aisecurity/ent/dao/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaUpdate is the builder for updating Area entities.
type AreaUpdate struct {
	config
	hooks    []Hook
	mutation *AreaMutation
}

// Where appends a list predicates to the AreaUpdate builder.
func (au *AreaUpdate) Where(ps ...predicate.Area) *AreaUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeleteTime sets the "delete_time" field.
func (au *AreaUpdate) SetDeleteTime(t time.Time) *AreaUpdate {
	au.mutation.SetDeleteTime(t)
	return au
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (au *AreaUpdate) SetNillableDeleteTime(t *time.Time) *AreaUpdate {
	if t != nil {
		au.SetDeleteTime(*t)
	}
	return au
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (au *AreaUpdate) ClearDeleteTime() *AreaUpdate {
	au.mutation.ClearDeleteTime()
	return au
}

// SetUpdaterID sets the "updater_id" field.
func (au *AreaUpdate) SetUpdaterID(i int) *AreaUpdate {
	au.mutation.SetUpdaterID(i)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AreaUpdate) SetUpdateTime(t time.Time) *AreaUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetName sets the "name" field.
func (au *AreaUpdate) SetName(s string) *AreaUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AreaUpdate) SetNillableName(s *string) *AreaUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AreaUpdate) ClearName() *AreaUpdate {
	au.mutation.ClearName()
	return au
}

// SetDescription sets the "description" field.
func (au *AreaUpdate) SetDescription(s string) *AreaUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AreaUpdate) SetNillableDescription(s *string) *AreaUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AreaUpdate) ClearDescription() *AreaUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (au *AreaUpdate) SetUpdater(a *Admin) *AreaUpdate {
	return au.SetUpdaterID(a.ID)
}

// AddDeviceInstallationIDs adds the "device_installation" edge to the DeviceInstallation entity by IDs.
func (au *AreaUpdate) AddDeviceInstallationIDs(ids ...int) *AreaUpdate {
	au.mutation.AddDeviceInstallationIDs(ids...)
	return au
}

// AddDeviceInstallation adds the "device_installation" edges to the DeviceInstallation entity.
func (au *AreaUpdate) AddDeviceInstallation(d ...*DeviceInstallation) *AreaUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeviceInstallationIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (au *AreaUpdate) Mutation() *AreaMutation {
	return au.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (au *AreaUpdate) ClearUpdater() *AreaUpdate {
	au.mutation.ClearUpdater()
	return au
}

// ClearDeviceInstallation clears all "device_installation" edges to the DeviceInstallation entity.
func (au *AreaUpdate) ClearDeviceInstallation() *AreaUpdate {
	au.mutation.ClearDeviceInstallation()
	return au
}

// RemoveDeviceInstallationIDs removes the "device_installation" edge to DeviceInstallation entities by IDs.
func (au *AreaUpdate) RemoveDeviceInstallationIDs(ids ...int) *AreaUpdate {
	au.mutation.RemoveDeviceInstallationIDs(ids...)
	return au
}

// RemoveDeviceInstallation removes "device_installation" edges to DeviceInstallation entities.
func (au *AreaUpdate) RemoveDeviceInstallation(d ...*DeviceInstallation) *AreaUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeviceInstallationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AreaUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AreaUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AreaUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AreaUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AreaUpdate) defaults() error {
	if _, ok := au.mutation.UpdateTime(); !ok {
		if area.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized area.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := area.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AreaUpdate) check() error {
	if v, ok := au.mutation.UpdaterID(); ok {
		if err := area.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Area.updater_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Area.name": %w`, err)}
		}
	}
	if _, ok := au.mutation.CreatorID(); au.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Area.creator"`)
	}
	if _, ok := au.mutation.UpdaterID(); au.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Area.updater"`)
	}
	return nil
}

func (au *AreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeleteTime(); ok {
		_spec.SetField(area.FieldDeleteTime, field.TypeTime, value)
	}
	if au.mutation.DeleteTimeCleared() {
		_spec.ClearField(area.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(area.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(area.FieldName, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(area.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(area.FieldDescription, field.TypeString)
	}
	if au.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeviceInstallationIDs(); len(nodes) > 0 && !au.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeviceInstallationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AreaUpdateOne is the builder for updating a single Area entity.
type AreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaMutation
}

// SetDeleteTime sets the "delete_time" field.
func (auo *AreaUpdateOne) SetDeleteTime(t time.Time) *AreaUpdateOne {
	auo.mutation.SetDeleteTime(t)
	return auo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableDeleteTime(t *time.Time) *AreaUpdateOne {
	if t != nil {
		auo.SetDeleteTime(*t)
	}
	return auo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (auo *AreaUpdateOne) ClearDeleteTime() *AreaUpdateOne {
	auo.mutation.ClearDeleteTime()
	return auo
}

// SetUpdaterID sets the "updater_id" field.
func (auo *AreaUpdateOne) SetUpdaterID(i int) *AreaUpdateOne {
	auo.mutation.SetUpdaterID(i)
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *AreaUpdateOne) SetUpdateTime(t time.Time) *AreaUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetName sets the "name" field.
func (auo *AreaUpdateOne) SetName(s string) *AreaUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableName(s *string) *AreaUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AreaUpdateOne) ClearName() *AreaUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AreaUpdateOne) SetDescription(s string) *AreaUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableDescription(s *string) *AreaUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AreaUpdateOne) ClearDescription() *AreaUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (auo *AreaUpdateOne) SetUpdater(a *Admin) *AreaUpdateOne {
	return auo.SetUpdaterID(a.ID)
}

// AddDeviceInstallationIDs adds the "device_installation" edge to the DeviceInstallation entity by IDs.
func (auo *AreaUpdateOne) AddDeviceInstallationIDs(ids ...int) *AreaUpdateOne {
	auo.mutation.AddDeviceInstallationIDs(ids...)
	return auo
}

// AddDeviceInstallation adds the "device_installation" edges to the DeviceInstallation entity.
func (auo *AreaUpdateOne) AddDeviceInstallation(d ...*DeviceInstallation) *AreaUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeviceInstallationIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (auo *AreaUpdateOne) Mutation() *AreaMutation {
	return auo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (auo *AreaUpdateOne) ClearUpdater() *AreaUpdateOne {
	auo.mutation.ClearUpdater()
	return auo
}

// ClearDeviceInstallation clears all "device_installation" edges to the DeviceInstallation entity.
func (auo *AreaUpdateOne) ClearDeviceInstallation() *AreaUpdateOne {
	auo.mutation.ClearDeviceInstallation()
	return auo
}

// RemoveDeviceInstallationIDs removes the "device_installation" edge to DeviceInstallation entities by IDs.
func (auo *AreaUpdateOne) RemoveDeviceInstallationIDs(ids ...int) *AreaUpdateOne {
	auo.mutation.RemoveDeviceInstallationIDs(ids...)
	return auo
}

// RemoveDeviceInstallation removes "device_installation" edges to DeviceInstallation entities.
func (auo *AreaUpdateOne) RemoveDeviceInstallation(d ...*DeviceInstallation) *AreaUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeviceInstallationIDs(ids...)
}

// Where appends a list predicates to the AreaUpdate builder.
func (auo *AreaUpdateOne) Where(ps ...predicate.Area) *AreaUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AreaUpdateOne) Select(field string, fields ...string) *AreaUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Area entity.
func (auo *AreaUpdateOne) Save(ctx context.Context) (*Area, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AreaUpdateOne) SaveX(ctx context.Context) *Area {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AreaUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AreaUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AreaUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		if area.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("dao: uninitialized area.UpdateDefaultUpdateTime (forgotten import dao/runtime?)")
		}
		v := area.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AreaUpdateOne) check() error {
	if v, ok := auo.mutation.UpdaterID(); ok {
		if err := area.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`dao: validator failed for field "Area.updater_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`dao: validator failed for field "Area.name": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CreatorID(); auo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Area.creator"`)
	}
	if _, ok := auo.mutation.UpdaterID(); auo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "Area.updater"`)
	}
	return nil
}

func (auo *AreaUpdateOne) sqlSave(ctx context.Context) (_node *Area, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "Area.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, area.FieldID)
		for _, f := range fields {
			if !area.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != area.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeleteTime(); ok {
		_spec.SetField(area.FieldDeleteTime, field.TypeTime, value)
	}
	if auo.mutation.DeleteTimeCleared() {
		_spec.ClearField(area.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(area.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(area.FieldName, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(area.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(area.FieldDescription, field.TypeString)
	}
	if auo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.UpdaterTable,
			Columns: []string{area.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeviceInstallationIDs(); len(nodes) > 0 && !auo.mutation.DeviceInstallationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeviceInstallationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.DeviceInstallationTable,
			Columns: []string{area.DeviceInstallationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinstallation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Area{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
