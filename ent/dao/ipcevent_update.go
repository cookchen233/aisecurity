// Code generated by ent, DO NOT EDIT.

package dao

import (
	"aisecurity/ent/dao/admin"
	"aisecurity/ent/dao/employee"
	"aisecurity/ent/dao/ipcevent"
	"aisecurity/ent/dao/predicate"
	"aisecurity/structs/types"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// IPCEventUpdate is the builder for updating IPCEvent entities.
type IPCEventUpdate struct {
	config
	hooks    []Hook
	mutation *IPCEventMutation
}

// Where appends a list predicates to the IPCEventUpdate builder.
func (ieu *IPCEventUpdate) Where(ps ...predicate.IPCEvent) *IPCEventUpdate {
	ieu.mutation.Where(ps...)
	return ieu
}

// SetDeletedAt sets the "deleted_at" field.
func (ieu *IPCEventUpdate) SetDeletedAt(t time.Time) *IPCEventUpdate {
	ieu.mutation.SetDeletedAt(t)
	return ieu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ieu *IPCEventUpdate) SetNillableDeletedAt(t *time.Time) *IPCEventUpdate {
	if t != nil {
		ieu.SetDeletedAt(*t)
	}
	return ieu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ieu *IPCEventUpdate) ClearDeletedAt() *IPCEventUpdate {
	ieu.mutation.ClearDeletedAt()
	return ieu
}

// SetUpdatedBy sets the "updated_by" field.
func (ieu *IPCEventUpdate) SetUpdatedBy(i int) *IPCEventUpdate {
	ieu.mutation.SetUpdatedBy(i)
	return ieu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ieu *IPCEventUpdate) SetNillableUpdatedBy(i *int) *IPCEventUpdate {
	if i != nil {
		ieu.SetUpdatedBy(*i)
	}
	return ieu
}

// SetUpdatedAt sets the "updated_at" field.
func (ieu *IPCEventUpdate) SetUpdatedAt(t time.Time) *IPCEventUpdate {
	ieu.mutation.SetUpdatedAt(t)
	return ieu
}

// SetImages sets the "images" field.
func (ieu *IPCEventUpdate) SetImages(ti []*types.UploadedImage) *IPCEventUpdate {
	ieu.mutation.SetImages(ti)
	return ieu
}

// AppendImages appends ti to the "images" field.
func (ieu *IPCEventUpdate) AppendImages(ti []*types.UploadedImage) *IPCEventUpdate {
	ieu.mutation.AppendImages(ti)
	return ieu
}

// ClearImages clears the value of the "images" field.
func (ieu *IPCEventUpdate) ClearImages() *IPCEventUpdate {
	ieu.mutation.ClearImages()
	return ieu
}

// SetLabeledImages sets the "labeled_images" field.
func (ieu *IPCEventUpdate) SetLabeledImages(ti []*types.UploadedImage) *IPCEventUpdate {
	ieu.mutation.SetLabeledImages(ti)
	return ieu
}

// AppendLabeledImages appends ti to the "labeled_images" field.
func (ieu *IPCEventUpdate) AppendLabeledImages(ti []*types.UploadedImage) *IPCEventUpdate {
	ieu.mutation.AppendLabeledImages(ti)
	return ieu
}

// ClearLabeledImages clears the value of the "labeled_images" field.
func (ieu *IPCEventUpdate) ClearLabeledImages() *IPCEventUpdate {
	ieu.mutation.ClearLabeledImages()
	return ieu
}

// SetDescription sets the "description" field.
func (ieu *IPCEventUpdate) SetDescription(s string) *IPCEventUpdate {
	ieu.mutation.SetDescription(s)
	return ieu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieu *IPCEventUpdate) SetNillableDescription(s *string) *IPCEventUpdate {
	if s != nil {
		ieu.SetDescription(*s)
	}
	return ieu
}

// ClearDescription clears the value of the "description" field.
func (ieu *IPCEventUpdate) ClearDescription() *IPCEventUpdate {
	ieu.mutation.ClearDescription()
	return ieu
}

// SetRawData sets the "raw_data" field.
func (ieu *IPCEventUpdate) SetRawData(s string) *IPCEventUpdate {
	ieu.mutation.SetRawData(s)
	return ieu
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (ieu *IPCEventUpdate) SetNillableRawData(s *string) *IPCEventUpdate {
	if s != nil {
		ieu.SetRawData(*s)
	}
	return ieu
}

// ClearRawData clears the value of the "raw_data" field.
func (ieu *IPCEventUpdate) ClearRawData() *IPCEventUpdate {
	ieu.mutation.ClearRawData()
	return ieu
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ieu *IPCEventUpdate) SetUpdaterID(id int) *IPCEventUpdate {
	ieu.mutation.SetUpdaterID(id)
	return ieu
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ieu *IPCEventUpdate) SetUpdater(a *Admin) *IPCEventUpdate {
	return ieu.SetUpdaterID(a.ID)
}

// AddFixerIDs adds the "fixers" edge to the Employee entity by IDs.
func (ieu *IPCEventUpdate) AddFixerIDs(ids ...int) *IPCEventUpdate {
	ieu.mutation.AddFixerIDs(ids...)
	return ieu
}

// AddFixers adds the "fixers" edges to the Employee entity.
func (ieu *IPCEventUpdate) AddFixers(e ...*Employee) *IPCEventUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ieu.AddFixerIDs(ids...)
}

// Mutation returns the IPCEventMutation object of the builder.
func (ieu *IPCEventUpdate) Mutation() *IPCEventMutation {
	return ieu.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ieu *IPCEventUpdate) ClearUpdater() *IPCEventUpdate {
	ieu.mutation.ClearUpdater()
	return ieu
}

// ClearFixers clears all "fixers" edges to the Employee entity.
func (ieu *IPCEventUpdate) ClearFixers() *IPCEventUpdate {
	ieu.mutation.ClearFixers()
	return ieu
}

// RemoveFixerIDs removes the "fixers" edge to Employee entities by IDs.
func (ieu *IPCEventUpdate) RemoveFixerIDs(ids ...int) *IPCEventUpdate {
	ieu.mutation.RemoveFixerIDs(ids...)
	return ieu
}

// RemoveFixers removes "fixers" edges to Employee entities.
func (ieu *IPCEventUpdate) RemoveFixers(e ...*Employee) *IPCEventUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ieu.RemoveFixerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ieu *IPCEventUpdate) Save(ctx context.Context) (int, error) {
	if err := ieu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ieu.sqlSave, ieu.mutation, ieu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieu *IPCEventUpdate) SaveX(ctx context.Context) int {
	affected, err := ieu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ieu *IPCEventUpdate) Exec(ctx context.Context) error {
	_, err := ieu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieu *IPCEventUpdate) ExecX(ctx context.Context) {
	if err := ieu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieu *IPCEventUpdate) defaults() error {
	if _, ok := ieu.mutation.UpdatedAt(); !ok {
		if ipcevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcevent.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcevent.UpdateDefaultUpdatedAt()
		ieu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ieu *IPCEventUpdate) check() error {
	if v, ok := ieu.mutation.UpdatedBy(); ok {
		if err := ipcevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.updated_by": %w`, err)}
		}
	}
	if _, ok := ieu.mutation.CreatorID(); ieu.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.creator"`)
	}
	if _, ok := ieu.mutation.UpdaterID(); ieu.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.updater"`)
	}
	if _, ok := ieu.mutation.DeviceID(); ieu.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.device"`)
	}
	return nil
}

func (ieu *IPCEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ieu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipcevent.Table, ipcevent.Columns, sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt))
	if ps := ieu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieu.mutation.DeletedAt(); ok {
		_spec.SetField(ipcevent.FieldDeletedAt, field.TypeTime, value)
	}
	if ieu.mutation.DeletedAtCleared() {
		_spec.ClearField(ipcevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ieu.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ieu.mutation.Images(); ok {
		_spec.SetField(ipcevent.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ieu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcevent.FieldImages, value)
		})
	}
	if ieu.mutation.ImagesCleared() {
		_spec.ClearField(ipcevent.FieldImages, field.TypeJSON)
	}
	if value, ok := ieu.mutation.LabeledImages(); ok {
		_spec.SetField(ipcevent.FieldLabeledImages, field.TypeJSON, value)
	}
	if value, ok := ieu.mutation.AppendedLabeledImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcevent.FieldLabeledImages, value)
		})
	}
	if ieu.mutation.LabeledImagesCleared() {
		_spec.ClearField(ipcevent.FieldLabeledImages, field.TypeJSON)
	}
	if value, ok := ieu.mutation.Description(); ok {
		_spec.SetField(ipcevent.FieldDescription, field.TypeString, value)
	}
	if ieu.mutation.DescriptionCleared() {
		_spec.ClearField(ipcevent.FieldDescription, field.TypeString)
	}
	if value, ok := ieu.mutation.RawData(); ok {
		_spec.SetField(ipcevent.FieldRawData, field.TypeString, value)
	}
	if ieu.mutation.RawDataCleared() {
		_spec.ClearField(ipcevent.FieldRawData, field.TypeString)
	}
	if ieu.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.FixersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.RemovedFixersIDs(); len(nodes) > 0 && !ieu.mutation.FixersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.FixersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ieu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipcevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ieu.mutation.done = true
	return n, nil
}

// IPCEventUpdateOne is the builder for updating a single IPCEvent entity.
type IPCEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPCEventMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ieuo *IPCEventUpdateOne) SetDeletedAt(t time.Time) *IPCEventUpdateOne {
	ieuo.mutation.SetDeletedAt(t)
	return ieuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ieuo *IPCEventUpdateOne) SetNillableDeletedAt(t *time.Time) *IPCEventUpdateOne {
	if t != nil {
		ieuo.SetDeletedAt(*t)
	}
	return ieuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ieuo *IPCEventUpdateOne) ClearDeletedAt() *IPCEventUpdateOne {
	ieuo.mutation.ClearDeletedAt()
	return ieuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ieuo *IPCEventUpdateOne) SetUpdatedBy(i int) *IPCEventUpdateOne {
	ieuo.mutation.SetUpdatedBy(i)
	return ieuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ieuo *IPCEventUpdateOne) SetNillableUpdatedBy(i *int) *IPCEventUpdateOne {
	if i != nil {
		ieuo.SetUpdatedBy(*i)
	}
	return ieuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ieuo *IPCEventUpdateOne) SetUpdatedAt(t time.Time) *IPCEventUpdateOne {
	ieuo.mutation.SetUpdatedAt(t)
	return ieuo
}

// SetImages sets the "images" field.
func (ieuo *IPCEventUpdateOne) SetImages(ti []*types.UploadedImage) *IPCEventUpdateOne {
	ieuo.mutation.SetImages(ti)
	return ieuo
}

// AppendImages appends ti to the "images" field.
func (ieuo *IPCEventUpdateOne) AppendImages(ti []*types.UploadedImage) *IPCEventUpdateOne {
	ieuo.mutation.AppendImages(ti)
	return ieuo
}

// ClearImages clears the value of the "images" field.
func (ieuo *IPCEventUpdateOne) ClearImages() *IPCEventUpdateOne {
	ieuo.mutation.ClearImages()
	return ieuo
}

// SetLabeledImages sets the "labeled_images" field.
func (ieuo *IPCEventUpdateOne) SetLabeledImages(ti []*types.UploadedImage) *IPCEventUpdateOne {
	ieuo.mutation.SetLabeledImages(ti)
	return ieuo
}

// AppendLabeledImages appends ti to the "labeled_images" field.
func (ieuo *IPCEventUpdateOne) AppendLabeledImages(ti []*types.UploadedImage) *IPCEventUpdateOne {
	ieuo.mutation.AppendLabeledImages(ti)
	return ieuo
}

// ClearLabeledImages clears the value of the "labeled_images" field.
func (ieuo *IPCEventUpdateOne) ClearLabeledImages() *IPCEventUpdateOne {
	ieuo.mutation.ClearLabeledImages()
	return ieuo
}

// SetDescription sets the "description" field.
func (ieuo *IPCEventUpdateOne) SetDescription(s string) *IPCEventUpdateOne {
	ieuo.mutation.SetDescription(s)
	return ieuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieuo *IPCEventUpdateOne) SetNillableDescription(s *string) *IPCEventUpdateOne {
	if s != nil {
		ieuo.SetDescription(*s)
	}
	return ieuo
}

// ClearDescription clears the value of the "description" field.
func (ieuo *IPCEventUpdateOne) ClearDescription() *IPCEventUpdateOne {
	ieuo.mutation.ClearDescription()
	return ieuo
}

// SetRawData sets the "raw_data" field.
func (ieuo *IPCEventUpdateOne) SetRawData(s string) *IPCEventUpdateOne {
	ieuo.mutation.SetRawData(s)
	return ieuo
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (ieuo *IPCEventUpdateOne) SetNillableRawData(s *string) *IPCEventUpdateOne {
	if s != nil {
		ieuo.SetRawData(*s)
	}
	return ieuo
}

// ClearRawData clears the value of the "raw_data" field.
func (ieuo *IPCEventUpdateOne) ClearRawData() *IPCEventUpdateOne {
	ieuo.mutation.ClearRawData()
	return ieuo
}

// SetUpdaterID sets the "updater" edge to the Admin entity by ID.
func (ieuo *IPCEventUpdateOne) SetUpdaterID(id int) *IPCEventUpdateOne {
	ieuo.mutation.SetUpdaterID(id)
	return ieuo
}

// SetUpdater sets the "updater" edge to the Admin entity.
func (ieuo *IPCEventUpdateOne) SetUpdater(a *Admin) *IPCEventUpdateOne {
	return ieuo.SetUpdaterID(a.ID)
}

// AddFixerIDs adds the "fixers" edge to the Employee entity by IDs.
func (ieuo *IPCEventUpdateOne) AddFixerIDs(ids ...int) *IPCEventUpdateOne {
	ieuo.mutation.AddFixerIDs(ids...)
	return ieuo
}

// AddFixers adds the "fixers" edges to the Employee entity.
func (ieuo *IPCEventUpdateOne) AddFixers(e ...*Employee) *IPCEventUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ieuo.AddFixerIDs(ids...)
}

// Mutation returns the IPCEventMutation object of the builder.
func (ieuo *IPCEventUpdateOne) Mutation() *IPCEventMutation {
	return ieuo.mutation
}

// ClearUpdater clears the "updater" edge to the Admin entity.
func (ieuo *IPCEventUpdateOne) ClearUpdater() *IPCEventUpdateOne {
	ieuo.mutation.ClearUpdater()
	return ieuo
}

// ClearFixers clears all "fixers" edges to the Employee entity.
func (ieuo *IPCEventUpdateOne) ClearFixers() *IPCEventUpdateOne {
	ieuo.mutation.ClearFixers()
	return ieuo
}

// RemoveFixerIDs removes the "fixers" edge to Employee entities by IDs.
func (ieuo *IPCEventUpdateOne) RemoveFixerIDs(ids ...int) *IPCEventUpdateOne {
	ieuo.mutation.RemoveFixerIDs(ids...)
	return ieuo
}

// RemoveFixers removes "fixers" edges to Employee entities.
func (ieuo *IPCEventUpdateOne) RemoveFixers(e ...*Employee) *IPCEventUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ieuo.RemoveFixerIDs(ids...)
}

// Where appends a list predicates to the IPCEventUpdate builder.
func (ieuo *IPCEventUpdateOne) Where(ps ...predicate.IPCEvent) *IPCEventUpdateOne {
	ieuo.mutation.Where(ps...)
	return ieuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ieuo *IPCEventUpdateOne) Select(field string, fields ...string) *IPCEventUpdateOne {
	ieuo.fields = append([]string{field}, fields...)
	return ieuo
}

// Save executes the query and returns the updated IPCEvent entity.
func (ieuo *IPCEventUpdateOne) Save(ctx context.Context) (*IPCEvent, error) {
	if err := ieuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ieuo.sqlSave, ieuo.mutation, ieuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieuo *IPCEventUpdateOne) SaveX(ctx context.Context) *IPCEvent {
	node, err := ieuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ieuo *IPCEventUpdateOne) Exec(ctx context.Context) error {
	_, err := ieuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieuo *IPCEventUpdateOne) ExecX(ctx context.Context) {
	if err := ieuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieuo *IPCEventUpdateOne) defaults() error {
	if _, ok := ieuo.mutation.UpdatedAt(); !ok {
		if ipcevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("dao: uninitialized ipcevent.UpdateDefaultUpdatedAt (forgotten import dao/runtime?)")
		}
		v := ipcevent.UpdateDefaultUpdatedAt()
		ieuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ieuo *IPCEventUpdateOne) check() error {
	if v, ok := ieuo.mutation.UpdatedBy(); ok {
		if err := ipcevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`dao: validator failed for field "IPCEvent.updated_by": %w`, err)}
		}
	}
	if _, ok := ieuo.mutation.CreatorID(); ieuo.mutation.CreatorCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.creator"`)
	}
	if _, ok := ieuo.mutation.UpdaterID(); ieuo.mutation.UpdaterCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.updater"`)
	}
	if _, ok := ieuo.mutation.DeviceID(); ieuo.mutation.DeviceCleared() && !ok {
		return errors.New(`dao: clearing a required unique edge "IPCEvent.device"`)
	}
	return nil
}

func (ieuo *IPCEventUpdateOne) sqlSave(ctx context.Context) (_node *IPCEvent, err error) {
	if err := ieuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipcevent.Table, ipcevent.Columns, sqlgraph.NewFieldSpec(ipcevent.FieldID, field.TypeInt))
	id, ok := ieuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dao: missing "IPCEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ieuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipcevent.FieldID)
		for _, f := range fields {
			if !ipcevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dao: invalid field %q for query", f)}
			}
			if f != ipcevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ieuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieuo.mutation.DeletedAt(); ok {
		_spec.SetField(ipcevent.FieldDeletedAt, field.TypeTime, value)
	}
	if ieuo.mutation.DeletedAtCleared() {
		_spec.ClearField(ipcevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ieuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ipcevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ieuo.mutation.Images(); ok {
		_spec.SetField(ipcevent.FieldImages, field.TypeJSON, value)
	}
	if value, ok := ieuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcevent.FieldImages, value)
		})
	}
	if ieuo.mutation.ImagesCleared() {
		_spec.ClearField(ipcevent.FieldImages, field.TypeJSON)
	}
	if value, ok := ieuo.mutation.LabeledImages(); ok {
		_spec.SetField(ipcevent.FieldLabeledImages, field.TypeJSON, value)
	}
	if value, ok := ieuo.mutation.AppendedLabeledImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ipcevent.FieldLabeledImages, value)
		})
	}
	if ieuo.mutation.LabeledImagesCleared() {
		_spec.ClearField(ipcevent.FieldLabeledImages, field.TypeJSON)
	}
	if value, ok := ieuo.mutation.Description(); ok {
		_spec.SetField(ipcevent.FieldDescription, field.TypeString, value)
	}
	if ieuo.mutation.DescriptionCleared() {
		_spec.ClearField(ipcevent.FieldDescription, field.TypeString)
	}
	if value, ok := ieuo.mutation.RawData(); ok {
		_spec.SetField(ipcevent.FieldRawData, field.TypeString, value)
	}
	if ieuo.mutation.RawDataCleared() {
		_spec.ClearField(ipcevent.FieldRawData, field.TypeString)
	}
	if ieuo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipcevent.UpdaterTable,
			Columns: []string{ipcevent.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.FixersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.RemovedFixersIDs(); len(nodes) > 0 && !ieuo.mutation.FixersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.FixersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipcevent.FixersTable,
			Columns: ipcevent.FixersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPCEvent{config: ieuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ieuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipcevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ieuo.mutation.done = true
	return _node, nil
}
