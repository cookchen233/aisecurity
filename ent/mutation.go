// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aisecurity/ent/admin"
	"aisecurity/ent/predicate"
	"aisecurity/ent/risklocation"
	"aisecurity/ent/riskreporting"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdmin         = "Admin"
	TypeDept          = "Dept"
	TypeDeptAdmin     = "DeptAdmin"
	TypeRiskCategory  = "RiskCategory"
	TypeRiskLocation  = "RiskLocation"
	TypeRiskReporting = "RiskReporting"
)

// AdminMutation represents an operation that mutates the Admin nodes in the graph.
type AdminMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	deleted_at                 *time.Time
	created_by                 *int
	addcreated_by              *int
	username                   *string
	clearedFields              map[string]struct{}
	_RiskReportingAdmin        map[int]struct{}
	removed_RiskReportingAdmin map[int]struct{}
	cleared_RiskReportingAdmin bool
	done                       bool
	oldValue                   func(context.Context) (*Admin, error)
	predicates                 []predicate.Admin
}

var _ ent.Mutation = (*AdminMutation)(nil)

// adminOption allows management of the mutation configuration using functional options.
type adminOption func(*AdminMutation)

// newAdminMutation creates new mutation for the Admin entity.
func newAdminMutation(c config, op Op, opts ...adminOption) *AdminMutation {
	m := &AdminMutation{
		config:        c,
		op:            op,
		typ:           TypeAdmin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminID sets the ID field of the mutation.
func withAdminID(id int) adminOption {
	return func(m *AdminMutation) {
		var (
			err   error
			once  sync.Once
			value *Admin
		)
		m.oldValue = func(ctx context.Context) (*Admin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Admin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdmin sets the old Admin of the mutation.
func withAdmin(node *Admin) adminOption {
	return func(m *AdminMutation) {
		m.oldValue = func(context.Context) (*Admin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Admin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[admin.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[admin.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, admin.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *AdminMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *AdminMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *AdminMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *AdminMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *AdminMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[admin.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *AdminMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[admin.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *AdminMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, admin.FieldCreatedBy)
}

// SetUsername sets the "username" field.
func (m *AdminMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminMutation) ResetUsername() {
	m.username = nil
}

// AddRiskReportingAdminIDs adds the "RiskReportingAdmin" edge to the RiskReporting entity by ids.
func (m *AdminMutation) AddRiskReportingAdminIDs(ids ...int) {
	if m._RiskReportingAdmin == nil {
		m._RiskReportingAdmin = make(map[int]struct{})
	}
	for i := range ids {
		m._RiskReportingAdmin[ids[i]] = struct{}{}
	}
}

// ClearRiskReportingAdmin clears the "RiskReportingAdmin" edge to the RiskReporting entity.
func (m *AdminMutation) ClearRiskReportingAdmin() {
	m.cleared_RiskReportingAdmin = true
}

// RiskReportingAdminCleared reports if the "RiskReportingAdmin" edge to the RiskReporting entity was cleared.
func (m *AdminMutation) RiskReportingAdminCleared() bool {
	return m.cleared_RiskReportingAdmin
}

// RemoveRiskReportingAdminIDs removes the "RiskReportingAdmin" edge to the RiskReporting entity by IDs.
func (m *AdminMutation) RemoveRiskReportingAdminIDs(ids ...int) {
	if m.removed_RiskReportingAdmin == nil {
		m.removed_RiskReportingAdmin = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._RiskReportingAdmin, ids[i])
		m.removed_RiskReportingAdmin[ids[i]] = struct{}{}
	}
}

// RemovedRiskReportingAdmin returns the removed IDs of the "RiskReportingAdmin" edge to the RiskReporting entity.
func (m *AdminMutation) RemovedRiskReportingAdminIDs() (ids []int) {
	for id := range m.removed_RiskReportingAdmin {
		ids = append(ids, id)
	}
	return
}

// RiskReportingAdminIDs returns the "RiskReportingAdmin" edge IDs in the mutation.
func (m *AdminMutation) RiskReportingAdminIDs() (ids []int) {
	for id := range m._RiskReportingAdmin {
		ids = append(ids, id)
	}
	return
}

// ResetRiskReportingAdmin resets all changes to the "RiskReportingAdmin" edge.
func (m *AdminMutation) ResetRiskReportingAdmin() {
	m._RiskReportingAdmin = nil
	m.cleared_RiskReportingAdmin = false
	m.removed_RiskReportingAdmin = nil
}

// Where appends a list predicates to the AdminMutation builder.
func (m *AdminMutation) Where(ps ...predicate.Admin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Admin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Admin).
func (m *AdminMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, admin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, admin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, admin.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, admin.FieldCreatedBy)
	}
	if m.username != nil {
		fields = append(fields, admin.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldCreatedAt:
		return m.CreatedAt()
	case admin.FieldUpdatedAt:
		return m.UpdatedAt()
	case admin.FieldDeletedAt:
		return m.DeletedAt()
	case admin.FieldCreatedBy:
		return m.CreatedBy()
	case admin.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case admin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case admin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case admin.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case admin.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown Admin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case admin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case admin.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case admin.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case admin.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, admin.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) AddField(name string, value ent.Value) error {
	switch name {
	case admin.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Admin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(admin.FieldDeletedAt) {
		fields = append(fields, admin.FieldDeletedAt)
	}
	if m.FieldCleared(admin.FieldCreatedBy) {
		fields = append(fields, admin.FieldCreatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminMutation) ClearField(name string) error {
	switch name {
	case admin.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case admin.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Admin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminMutation) ResetField(name string) error {
	switch name {
	case admin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case admin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case admin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case admin.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case admin.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._RiskReportingAdmin != nil {
		edges = append(edges, admin.EdgeRiskReportingAdmin)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case admin.EdgeRiskReportingAdmin:
		ids := make([]ent.Value, 0, len(m._RiskReportingAdmin))
		for id := range m._RiskReportingAdmin {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_RiskReportingAdmin != nil {
		edges = append(edges, admin.EdgeRiskReportingAdmin)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case admin.EdgeRiskReportingAdmin:
		ids := make([]ent.Value, 0, len(m.removed_RiskReportingAdmin))
		for id := range m.removed_RiskReportingAdmin {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_RiskReportingAdmin {
		edges = append(edges, admin.EdgeRiskReportingAdmin)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminMutation) EdgeCleared(name string) bool {
	switch name {
	case admin.EdgeRiskReportingAdmin:
		return m.cleared_RiskReportingAdmin
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Admin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminMutation) ResetEdge(name string) error {
	switch name {
	case admin.EdgeRiskReportingAdmin:
		m.ResetRiskReportingAdmin()
		return nil
	}
	return fmt.Errorf("unknown Admin edge %s", name)
}

// DeptMutation represents an operation that mutates the Dept nodes in the graph.
type DeptMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Dept, error)
	predicates    []predicate.Dept
}

var _ ent.Mutation = (*DeptMutation)(nil)

// deptOption allows management of the mutation configuration using functional options.
type deptOption func(*DeptMutation)

// newDeptMutation creates new mutation for the Dept entity.
func newDeptMutation(c config, op Op, opts ...deptOption) *DeptMutation {
	m := &DeptMutation{
		config:        c,
		op:            op,
		typ:           TypeDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeptID sets the ID field of the mutation.
func withDeptID(id int) deptOption {
	return func(m *DeptMutation) {
		var (
			err   error
			once  sync.Once
			value *Dept
		)
		m.oldValue = func(ctx context.Context) (*Dept, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDept sets the old Dept of the mutation.
func withDept(node *Dept) deptOption {
	return func(m *DeptMutation) {
		m.oldValue = func(context.Context) (*Dept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dept.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the DeptMutation builder.
func (m *DeptMutation) Where(ps ...predicate.Dept) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dept, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dept).
func (m *DeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeptMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeptMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Dept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Dept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeptMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Dept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Dept edge %s", name)
}

// DeptAdminMutation represents an operation that mutates the DeptAdmin nodes in the graph.
type DeptAdminMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DeptAdmin, error)
	predicates    []predicate.DeptAdmin
}

var _ ent.Mutation = (*DeptAdminMutation)(nil)

// deptadminOption allows management of the mutation configuration using functional options.
type deptadminOption func(*DeptAdminMutation)

// newDeptAdminMutation creates new mutation for the DeptAdmin entity.
func newDeptAdminMutation(c config, op Op, opts ...deptadminOption) *DeptAdminMutation {
	m := &DeptAdminMutation{
		config:        c,
		op:            op,
		typ:           TypeDeptAdmin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeptAdminID sets the ID field of the mutation.
func withDeptAdminID(id int) deptadminOption {
	return func(m *DeptAdminMutation) {
		var (
			err   error
			once  sync.Once
			value *DeptAdmin
		)
		m.oldValue = func(ctx context.Context) (*DeptAdmin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeptAdmin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeptAdmin sets the old DeptAdmin of the mutation.
func withDeptAdmin(node *DeptAdmin) deptadminOption {
	return func(m *DeptAdminMutation) {
		m.oldValue = func(context.Context) (*DeptAdmin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeptAdminMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeptAdminMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeptAdminMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeptAdminMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeptAdmin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the DeptAdminMutation builder.
func (m *DeptAdminMutation) Where(ps ...predicate.DeptAdmin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeptAdminMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeptAdminMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DeptAdmin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeptAdminMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeptAdminMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DeptAdmin).
func (m *DeptAdminMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeptAdminMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeptAdminMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeptAdminMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown DeptAdmin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptAdminMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DeptAdmin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeptAdminMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeptAdminMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptAdminMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown DeptAdmin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeptAdminMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeptAdminMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeptAdminMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeptAdmin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeptAdminMutation) ResetField(name string) error {
	return fmt.Errorf("unknown DeptAdmin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeptAdminMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeptAdminMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeptAdminMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeptAdminMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeptAdminMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeptAdminMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeptAdminMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DeptAdmin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeptAdminMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DeptAdmin edge %s", name)
}

// RiskCategoryMutation represents an operation that mutates the RiskCategory nodes in the graph.
type RiskCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RiskCategory, error)
	predicates    []predicate.RiskCategory
}

var _ ent.Mutation = (*RiskCategoryMutation)(nil)

// riskcategoryOption allows management of the mutation configuration using functional options.
type riskcategoryOption func(*RiskCategoryMutation)

// newRiskCategoryMutation creates new mutation for the RiskCategory entity.
func newRiskCategoryMutation(c config, op Op, opts ...riskcategoryOption) *RiskCategoryMutation {
	m := &RiskCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRiskCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRiskCategoryID sets the ID field of the mutation.
func withRiskCategoryID(id int) riskcategoryOption {
	return func(m *RiskCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *RiskCategory
		)
		m.oldValue = func(ctx context.Context) (*RiskCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RiskCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRiskCategory sets the old RiskCategory of the mutation.
func withRiskCategory(node *RiskCategory) riskcategoryOption {
	return func(m *RiskCategoryMutation) {
		m.oldValue = func(context.Context) (*RiskCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RiskCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RiskCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RiskCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RiskCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RiskCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the RiskCategoryMutation builder.
func (m *RiskCategoryMutation) Where(ps ...predicate.RiskCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RiskCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RiskCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RiskCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RiskCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RiskCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RiskCategory).
func (m *RiskCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RiskCategoryMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RiskCategoryMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RiskCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown RiskCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RiskCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RiskCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RiskCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskCategoryMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown RiskCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RiskCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RiskCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RiskCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RiskCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RiskCategoryMutation) ResetField(name string) error {
	return fmt.Errorf("unknown RiskCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RiskCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RiskCategoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RiskCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RiskCategoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RiskCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RiskCategoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RiskCategoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RiskCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RiskCategoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RiskCategory edge %s", name)
}

// RiskLocationMutation represents an operation that mutates the RiskLocation nodes in the graph.
type RiskLocationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	title         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RiskLocation, error)
	predicates    []predicate.RiskLocation
}

var _ ent.Mutation = (*RiskLocationMutation)(nil)

// risklocationOption allows management of the mutation configuration using functional options.
type risklocationOption func(*RiskLocationMutation)

// newRiskLocationMutation creates new mutation for the RiskLocation entity.
func newRiskLocationMutation(c config, op Op, opts ...risklocationOption) *RiskLocationMutation {
	m := &RiskLocationMutation{
		config:        c,
		op:            op,
		typ:           TypeRiskLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRiskLocationID sets the ID field of the mutation.
func withRiskLocationID(id int) risklocationOption {
	return func(m *RiskLocationMutation) {
		var (
			err   error
			once  sync.Once
			value *RiskLocation
		)
		m.oldValue = func(ctx context.Context) (*RiskLocation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RiskLocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRiskLocation sets the old RiskLocation of the mutation.
func withRiskLocation(node *RiskLocation) risklocationOption {
	return func(m *RiskLocationMutation) {
		m.oldValue = func(context.Context) (*RiskLocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RiskLocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RiskLocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RiskLocationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RiskLocationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RiskLocation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RiskLocationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RiskLocationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RiskLocation entity.
// If the RiskLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskLocationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RiskLocationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RiskLocationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RiskLocationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RiskLocation entity.
// If the RiskLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskLocationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RiskLocationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RiskLocationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RiskLocationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RiskLocation entity.
// If the RiskLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskLocationMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RiskLocationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[risklocation.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RiskLocationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[risklocation.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RiskLocationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, risklocation.FieldDeletedAt)
}

// SetTitle sets the "title" field.
func (m *RiskLocationMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *RiskLocationMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the RiskLocation entity.
// If the RiskLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskLocationMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *RiskLocationMutation) ResetTitle() {
	m.title = nil
}

// Where appends a list predicates to the RiskLocationMutation builder.
func (m *RiskLocationMutation) Where(ps ...predicate.RiskLocation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RiskLocationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RiskLocationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RiskLocation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RiskLocationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RiskLocationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RiskLocation).
func (m *RiskLocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RiskLocationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, risklocation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, risklocation.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, risklocation.FieldDeletedAt)
	}
	if m.title != nil {
		fields = append(fields, risklocation.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RiskLocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case risklocation.FieldCreatedAt:
		return m.CreatedAt()
	case risklocation.FieldUpdatedAt:
		return m.UpdatedAt()
	case risklocation.FieldDeletedAt:
		return m.DeletedAt()
	case risklocation.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RiskLocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case risklocation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case risklocation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case risklocation.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case risklocation.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown RiskLocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskLocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case risklocation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case risklocation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case risklocation.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case risklocation.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown RiskLocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RiskLocationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RiskLocationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskLocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RiskLocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RiskLocationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(risklocation.FieldDeletedAt) {
		fields = append(fields, risklocation.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RiskLocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RiskLocationMutation) ClearField(name string) error {
	switch name {
	case risklocation.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown RiskLocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RiskLocationMutation) ResetField(name string) error {
	switch name {
	case risklocation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case risklocation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case risklocation.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case risklocation.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown RiskLocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RiskLocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RiskLocationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RiskLocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RiskLocationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RiskLocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RiskLocationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RiskLocationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RiskLocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RiskLocationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RiskLocation edge %s", name)
}

// RiskReportingMutation represents an operation that mutates the RiskReporting nodes in the graph.
type RiskReportingMutation struct {
	config
	op         Op
	typ        string
	id         *int
	created_at *time.Time
	updated_at *time.Time
	deleted_at *time.Time
	title      *string
	content    *string
	images     *[]struct {
		Title string "json:\"title\""
		URL   string "json:\"url\""
	}
	appendimages []struct {
		Title string "json:\"title\""
		URL   string "json:\"url\""
	}
	risk_category_id           *int
	addrisk_category_id        *int
	risk_location_id           *int
	addrisk_location_id        *int
	maintainer                 *int
	addmaintainer              *int
	measures                   *string
	due_time                   *time.Time
	clearedFields              map[string]struct{}
	_AdminRiskReporting        *int
	cleared_AdminRiskReporting bool
	done                       bool
	oldValue                   func(context.Context) (*RiskReporting, error)
	predicates                 []predicate.RiskReporting
}

var _ ent.Mutation = (*RiskReportingMutation)(nil)

// riskreportingOption allows management of the mutation configuration using functional options.
type riskreportingOption func(*RiskReportingMutation)

// newRiskReportingMutation creates new mutation for the RiskReporting entity.
func newRiskReportingMutation(c config, op Op, opts ...riskreportingOption) *RiskReportingMutation {
	m := &RiskReportingMutation{
		config:        c,
		op:            op,
		typ:           TypeRiskReporting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRiskReportingID sets the ID field of the mutation.
func withRiskReportingID(id int) riskreportingOption {
	return func(m *RiskReportingMutation) {
		var (
			err   error
			once  sync.Once
			value *RiskReporting
		)
		m.oldValue = func(ctx context.Context) (*RiskReporting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RiskReporting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRiskReporting sets the old RiskReporting of the mutation.
func withRiskReporting(node *RiskReporting) riskreportingOption {
	return func(m *RiskReportingMutation) {
		m.oldValue = func(context.Context) (*RiskReporting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RiskReportingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RiskReportingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RiskReportingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RiskReportingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RiskReporting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RiskReportingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RiskReportingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RiskReportingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RiskReportingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RiskReportingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RiskReportingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RiskReportingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RiskReportingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RiskReportingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[riskreporting.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RiskReportingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[riskreporting.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RiskReportingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, riskreporting.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RiskReportingMutation) SetCreatedBy(i int) {
	m._AdminRiskReporting = &i
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RiskReportingMutation) CreatedBy() (r int, exists bool) {
	v := m._AdminRiskReporting
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RiskReportingMutation) ClearCreatedBy() {
	m._AdminRiskReporting = nil
	m.clearedFields[riskreporting.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RiskReportingMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[riskreporting.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RiskReportingMutation) ResetCreatedBy() {
	m._AdminRiskReporting = nil
	delete(m.clearedFields, riskreporting.FieldCreatedBy)
}

// SetTitle sets the "title" field.
func (m *RiskReportingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *RiskReportingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *RiskReportingMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *RiskReportingMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *RiskReportingMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *RiskReportingMutation) ResetContent() {
	m.content = nil
}

// SetImages sets the "images" field.
func (m *RiskReportingMutation) SetImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) {
	m.images = &s
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *RiskReportingMutation) Images() (r []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldImages(ctx context.Context) (v []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds s to the "images" field.
func (m *RiskReportingMutation) AppendImages(s []struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}) {
	m.appendimages = append(m.appendimages, s...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *RiskReportingMutation) AppendedImages() ([]struct {
	Title string "json:\"title\""
	URL   string "json:\"url\""
}, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *RiskReportingMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetRiskCategoryID sets the "risk_category_id" field.
func (m *RiskReportingMutation) SetRiskCategoryID(i int) {
	m.risk_category_id = &i
	m.addrisk_category_id = nil
}

// RiskCategoryID returns the value of the "risk_category_id" field in the mutation.
func (m *RiskReportingMutation) RiskCategoryID() (r int, exists bool) {
	v := m.risk_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRiskCategoryID returns the old "risk_category_id" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldRiskCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiskCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiskCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiskCategoryID: %w", err)
	}
	return oldValue.RiskCategoryID, nil
}

// AddRiskCategoryID adds i to the "risk_category_id" field.
func (m *RiskReportingMutation) AddRiskCategoryID(i int) {
	if m.addrisk_category_id != nil {
		*m.addrisk_category_id += i
	} else {
		m.addrisk_category_id = &i
	}
}

// AddedRiskCategoryID returns the value that was added to the "risk_category_id" field in this mutation.
func (m *RiskReportingMutation) AddedRiskCategoryID() (r int, exists bool) {
	v := m.addrisk_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRiskCategoryID resets all changes to the "risk_category_id" field.
func (m *RiskReportingMutation) ResetRiskCategoryID() {
	m.risk_category_id = nil
	m.addrisk_category_id = nil
}

// SetRiskLocationID sets the "risk_location_id" field.
func (m *RiskReportingMutation) SetRiskLocationID(i int) {
	m.risk_location_id = &i
	m.addrisk_location_id = nil
}

// RiskLocationID returns the value of the "risk_location_id" field in the mutation.
func (m *RiskReportingMutation) RiskLocationID() (r int, exists bool) {
	v := m.risk_location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRiskLocationID returns the old "risk_location_id" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldRiskLocationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiskLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiskLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiskLocationID: %w", err)
	}
	return oldValue.RiskLocationID, nil
}

// AddRiskLocationID adds i to the "risk_location_id" field.
func (m *RiskReportingMutation) AddRiskLocationID(i int) {
	if m.addrisk_location_id != nil {
		*m.addrisk_location_id += i
	} else {
		m.addrisk_location_id = &i
	}
}

// AddedRiskLocationID returns the value that was added to the "risk_location_id" field in this mutation.
func (m *RiskReportingMutation) AddedRiskLocationID() (r int, exists bool) {
	v := m.addrisk_location_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRiskLocationID resets all changes to the "risk_location_id" field.
func (m *RiskReportingMutation) ResetRiskLocationID() {
	m.risk_location_id = nil
	m.addrisk_location_id = nil
}

// SetMaintainer sets the "maintainer" field.
func (m *RiskReportingMutation) SetMaintainer(i int) {
	m.maintainer = &i
	m.addmaintainer = nil
}

// Maintainer returns the value of the "maintainer" field in the mutation.
func (m *RiskReportingMutation) Maintainer() (r int, exists bool) {
	v := m.maintainer
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintainer returns the old "maintainer" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldMaintainer(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaintainer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaintainer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintainer: %w", err)
	}
	return oldValue.Maintainer, nil
}

// AddMaintainer adds i to the "maintainer" field.
func (m *RiskReportingMutation) AddMaintainer(i int) {
	if m.addmaintainer != nil {
		*m.addmaintainer += i
	} else {
		m.addmaintainer = &i
	}
}

// AddedMaintainer returns the value that was added to the "maintainer" field in this mutation.
func (m *RiskReportingMutation) AddedMaintainer() (r int, exists bool) {
	v := m.addmaintainer
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaintainer resets all changes to the "maintainer" field.
func (m *RiskReportingMutation) ResetMaintainer() {
	m.maintainer = nil
	m.addmaintainer = nil
}

// SetMeasures sets the "measures" field.
func (m *RiskReportingMutation) SetMeasures(s string) {
	m.measures = &s
}

// Measures returns the value of the "measures" field in the mutation.
func (m *RiskReportingMutation) Measures() (r string, exists bool) {
	v := m.measures
	if v == nil {
		return
	}
	return *v, true
}

// OldMeasures returns the old "measures" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldMeasures(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeasures is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeasures requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeasures: %w", err)
	}
	return oldValue.Measures, nil
}

// ClearMeasures clears the value of the "measures" field.
func (m *RiskReportingMutation) ClearMeasures() {
	m.measures = nil
	m.clearedFields[riskreporting.FieldMeasures] = struct{}{}
}

// MeasuresCleared returns if the "measures" field was cleared in this mutation.
func (m *RiskReportingMutation) MeasuresCleared() bool {
	_, ok := m.clearedFields[riskreporting.FieldMeasures]
	return ok
}

// ResetMeasures resets all changes to the "measures" field.
func (m *RiskReportingMutation) ResetMeasures() {
	m.measures = nil
	delete(m.clearedFields, riskreporting.FieldMeasures)
}

// SetDueTime sets the "due_time" field.
func (m *RiskReportingMutation) SetDueTime(t time.Time) {
	m.due_time = &t
}

// DueTime returns the value of the "due_time" field in the mutation.
func (m *RiskReportingMutation) DueTime() (r time.Time, exists bool) {
	v := m.due_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDueTime returns the old "due_time" field's value of the RiskReporting entity.
// If the RiskReporting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiskReportingMutation) OldDueTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueTime: %w", err)
	}
	return oldValue.DueTime, nil
}

// ResetDueTime resets all changes to the "due_time" field.
func (m *RiskReportingMutation) ResetDueTime() {
	m.due_time = nil
}

// SetAdminRiskReportingID sets the "AdminRiskReporting" edge to the Admin entity by id.
func (m *RiskReportingMutation) SetAdminRiskReportingID(id int) {
	m._AdminRiskReporting = &id
}

// ClearAdminRiskReporting clears the "AdminRiskReporting" edge to the Admin entity.
func (m *RiskReportingMutation) ClearAdminRiskReporting() {
	m.cleared_AdminRiskReporting = true
	m.clearedFields[riskreporting.FieldCreatedBy] = struct{}{}
}

// AdminRiskReportingCleared reports if the "AdminRiskReporting" edge to the Admin entity was cleared.
func (m *RiskReportingMutation) AdminRiskReportingCleared() bool {
	return m.CreatedByCleared() || m.cleared_AdminRiskReporting
}

// AdminRiskReportingID returns the "AdminRiskReporting" edge ID in the mutation.
func (m *RiskReportingMutation) AdminRiskReportingID() (id int, exists bool) {
	if m._AdminRiskReporting != nil {
		return *m._AdminRiskReporting, true
	}
	return
}

// AdminRiskReportingIDs returns the "AdminRiskReporting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdminRiskReportingID instead. It exists only for internal usage by the builders.
func (m *RiskReportingMutation) AdminRiskReportingIDs() (ids []int) {
	if id := m._AdminRiskReporting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdminRiskReporting resets all changes to the "AdminRiskReporting" edge.
func (m *RiskReportingMutation) ResetAdminRiskReporting() {
	m._AdminRiskReporting = nil
	m.cleared_AdminRiskReporting = false
}

// Where appends a list predicates to the RiskReportingMutation builder.
func (m *RiskReportingMutation) Where(ps ...predicate.RiskReporting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RiskReportingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RiskReportingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RiskReporting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RiskReportingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RiskReportingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RiskReporting).
func (m *RiskReportingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RiskReportingMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, riskreporting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, riskreporting.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, riskreporting.FieldDeletedAt)
	}
	if m._AdminRiskReporting != nil {
		fields = append(fields, riskreporting.FieldCreatedBy)
	}
	if m.title != nil {
		fields = append(fields, riskreporting.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, riskreporting.FieldContent)
	}
	if m.images != nil {
		fields = append(fields, riskreporting.FieldImages)
	}
	if m.risk_category_id != nil {
		fields = append(fields, riskreporting.FieldRiskCategoryID)
	}
	if m.risk_location_id != nil {
		fields = append(fields, riskreporting.FieldRiskLocationID)
	}
	if m.maintainer != nil {
		fields = append(fields, riskreporting.FieldMaintainer)
	}
	if m.measures != nil {
		fields = append(fields, riskreporting.FieldMeasures)
	}
	if m.due_time != nil {
		fields = append(fields, riskreporting.FieldDueTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RiskReportingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case riskreporting.FieldCreatedAt:
		return m.CreatedAt()
	case riskreporting.FieldUpdatedAt:
		return m.UpdatedAt()
	case riskreporting.FieldDeletedAt:
		return m.DeletedAt()
	case riskreporting.FieldCreatedBy:
		return m.CreatedBy()
	case riskreporting.FieldTitle:
		return m.Title()
	case riskreporting.FieldContent:
		return m.Content()
	case riskreporting.FieldImages:
		return m.Images()
	case riskreporting.FieldRiskCategoryID:
		return m.RiskCategoryID()
	case riskreporting.FieldRiskLocationID:
		return m.RiskLocationID()
	case riskreporting.FieldMaintainer:
		return m.Maintainer()
	case riskreporting.FieldMeasures:
		return m.Measures()
	case riskreporting.FieldDueTime:
		return m.DueTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RiskReportingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case riskreporting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case riskreporting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case riskreporting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case riskreporting.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case riskreporting.FieldTitle:
		return m.OldTitle(ctx)
	case riskreporting.FieldContent:
		return m.OldContent(ctx)
	case riskreporting.FieldImages:
		return m.OldImages(ctx)
	case riskreporting.FieldRiskCategoryID:
		return m.OldRiskCategoryID(ctx)
	case riskreporting.FieldRiskLocationID:
		return m.OldRiskLocationID(ctx)
	case riskreporting.FieldMaintainer:
		return m.OldMaintainer(ctx)
	case riskreporting.FieldMeasures:
		return m.OldMeasures(ctx)
	case riskreporting.FieldDueTime:
		return m.OldDueTime(ctx)
	}
	return nil, fmt.Errorf("unknown RiskReporting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskReportingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case riskreporting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case riskreporting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case riskreporting.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case riskreporting.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case riskreporting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case riskreporting.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case riskreporting.FieldImages:
		v, ok := value.([]struct {
			Title string "json:\"title\""
			URL   string "json:\"url\""
		})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case riskreporting.FieldRiskCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiskCategoryID(v)
		return nil
	case riskreporting.FieldRiskLocationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiskLocationID(v)
		return nil
	case riskreporting.FieldMaintainer:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintainer(v)
		return nil
	case riskreporting.FieldMeasures:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeasures(v)
		return nil
	case riskreporting.FieldDueTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueTime(v)
		return nil
	}
	return fmt.Errorf("unknown RiskReporting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RiskReportingMutation) AddedFields() []string {
	var fields []string
	if m.addrisk_category_id != nil {
		fields = append(fields, riskreporting.FieldRiskCategoryID)
	}
	if m.addrisk_location_id != nil {
		fields = append(fields, riskreporting.FieldRiskLocationID)
	}
	if m.addmaintainer != nil {
		fields = append(fields, riskreporting.FieldMaintainer)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RiskReportingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case riskreporting.FieldRiskCategoryID:
		return m.AddedRiskCategoryID()
	case riskreporting.FieldRiskLocationID:
		return m.AddedRiskLocationID()
	case riskreporting.FieldMaintainer:
		return m.AddedMaintainer()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiskReportingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case riskreporting.FieldRiskCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRiskCategoryID(v)
		return nil
	case riskreporting.FieldRiskLocationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRiskLocationID(v)
		return nil
	case riskreporting.FieldMaintainer:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaintainer(v)
		return nil
	}
	return fmt.Errorf("unknown RiskReporting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RiskReportingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(riskreporting.FieldDeletedAt) {
		fields = append(fields, riskreporting.FieldDeletedAt)
	}
	if m.FieldCleared(riskreporting.FieldCreatedBy) {
		fields = append(fields, riskreporting.FieldCreatedBy)
	}
	if m.FieldCleared(riskreporting.FieldMeasures) {
		fields = append(fields, riskreporting.FieldMeasures)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RiskReportingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RiskReportingMutation) ClearField(name string) error {
	switch name {
	case riskreporting.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case riskreporting.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case riskreporting.FieldMeasures:
		m.ClearMeasures()
		return nil
	}
	return fmt.Errorf("unknown RiskReporting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RiskReportingMutation) ResetField(name string) error {
	switch name {
	case riskreporting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case riskreporting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case riskreporting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case riskreporting.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case riskreporting.FieldTitle:
		m.ResetTitle()
		return nil
	case riskreporting.FieldContent:
		m.ResetContent()
		return nil
	case riskreporting.FieldImages:
		m.ResetImages()
		return nil
	case riskreporting.FieldRiskCategoryID:
		m.ResetRiskCategoryID()
		return nil
	case riskreporting.FieldRiskLocationID:
		m.ResetRiskLocationID()
		return nil
	case riskreporting.FieldMaintainer:
		m.ResetMaintainer()
		return nil
	case riskreporting.FieldMeasures:
		m.ResetMeasures()
		return nil
	case riskreporting.FieldDueTime:
		m.ResetDueTime()
		return nil
	}
	return fmt.Errorf("unknown RiskReporting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RiskReportingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._AdminRiskReporting != nil {
		edges = append(edges, riskreporting.EdgeAdminRiskReporting)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RiskReportingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case riskreporting.EdgeAdminRiskReporting:
		if id := m._AdminRiskReporting; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RiskReportingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RiskReportingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RiskReportingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_AdminRiskReporting {
		edges = append(edges, riskreporting.EdgeAdminRiskReporting)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RiskReportingMutation) EdgeCleared(name string) bool {
	switch name {
	case riskreporting.EdgeAdminRiskReporting:
		return m.cleared_AdminRiskReporting
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RiskReportingMutation) ClearEdge(name string) error {
	switch name {
	case riskreporting.EdgeAdminRiskReporting:
		m.ClearAdminRiskReporting()
		return nil
	}
	return fmt.Errorf("unknown RiskReporting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RiskReportingMutation) ResetEdge(name string) error {
	switch name {
	case riskreporting.EdgeAdminRiskReporting:
		m.ResetAdminRiskReporting()
		return nil
	}
	return fmt.Errorf("unknown RiskReporting edge %s", name)
}
